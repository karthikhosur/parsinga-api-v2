using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Data.SqlClient;
using System.Data.Linq;
namespace HireCraft
{

    /// <summary>
    /// Summary description for Parser
    /// </summary>
    public class HCParser
    {

        #region "Constructor"
        public HCParser()
        {



        }
        public HCParser(string ConStr)
        {

        }
        #endregion
        bool iLoadMasterData = false;
        #region Members
        // StringBuilder strbDataLines = null;
        private bool bParseEmployementHistory = true;
        //HireCraft.ResumeDocument.HireCraft.frmResumeDocument _objResumedoc = null;
        bool isResume = false;
        string fname = "";

        string ResumeFileExtension = "";
        string ResumeConvertedText = "";
        string ResumeConvertedText_Main = "";
        string HtmlText = "";
        string DocumentModifiedTime = "";
        string email = "";
        string phone = "";
        string mobile = "";
        string passport = "";
        string Gender = "1";
        string DOB = "";
        string Employment = "";
        string PresentEmployer = "";
        string presentCTC = "";
        string ExpectedCTC = "";
        string VariableCTC = "";
        string sincedate = "";
        string TotalEXP = "";
        string RelevantEXP = "";
        string GenericSkills = "";
        string ExpSkills = "";
        string SkillIDs = "";
        string SkillIDOccurance = "";
        string Certifications = "";
        string WEdetails = "";
        string PrefLocations = "";
        string LocationsIDs = "";
        string[,] Education = null;
        string EDUCATION = "";
        string EducationsIDs = "";
        string EduSpeFinal = "";
        string NoticePeriod = "0";
        string CommunicationSkills = "";
        string InterpersonalSkills = "";
        string Workexperience = "";
        string ResumeSourceRef = "";
        string strSpecialization = "";
        string SpecialIDs = "";
        int iFlag4EmployeeHistory = 0;
        string FunctionalAreaType = "", FunctionalAreaID = "0";
        string IndustryType = "", IndustryTypeID = "0";
        string SubFunctionType = "", SubFunctionID = "0", tSubFunctionRID = "0";
        string JobTitleID = "0", JobTitle = "";
        string ExperienceSkillText = "";
        private string[] DataLines = null, TempDataLines = null;// DataLinesInWord = null,
        private ArrayList EducationStr, eduPosYear, eduPos, PersonalDet, EmployerList;
        int iFormat = 0;
        string eduCompleteYear = "";
        string _strNameRemove;
        string eduStartYear = "", eduDuration = "", eduGrade = "", eduInstitute = "", eduSpecialization = "", eduSpecialization1 = "", eduUniverSity = "";
        string eduCompleteYearEXP = "";
        string PINNumber = "";
        DataSet ds;
        //Commended Saravavana -- Not Used
        //char[] CsetData ={ '\t', ':', '\a', ',', '/', '\v' };
        //char[] CsetData1 ={ '\t', ':', '\a', ',', '/', '\v' };
        char[] Cset = { '\t', '~' };
        private string[] appSet = null, strArrNameNot = null, strArrNameBk = null;
        private string[,] SkillList = null;
        private string[] arrMailIDsNotToScan = null;
        private Regex regExNameNot = null, regExNameNot1 = null, regEducation = null, regSkill = null, regPersonal = null;
        private Regex regEducation1 = null;
        private Regex regEducationNot = null, regPersonalNot = null, regEducationNot1 = null, regSkillNot = null, regSkillNot1 = null, regLocationText;
        private Regex regEmail = null, regPhoneNot = null, regPhoneNot1 = null, regEmailRm = null, regEmailBk = null, regEmailBk1 = null, regPassport = null, regPassport1 = null;
        //string tCategory = "";
        private Regex rgxName = null, rgxMrs = null, rgxBreak = null, rgxBreaks = null, rgxBreaksLength = null, rgxContinue = null, regLocation = null, regLocation1 = null, regParmenant = null, regLocationNot = null, regLocationNot1 = null, regLocationBr = null, regLocationBr1 = null, regLocationRm = null, regLocationAlpha = null, regLocationAlpha1 = null, regLocationAlphaBr = null, regLocationAlphaBr1 = null, exPresentEmployerIN = null, exPresentEmployerIN1 = null, regLocNot1 = null, regxSpe = null, regxSpe1 = null, regxUni = null, regxLanguage = null, regEducationText = null, regEducationText1 = null;
        //string tCategorybr = "";
        int[] aCheckEducationYear = null;
        bool bEducationYearStarting = false;
        bool bEducationYearInsecond = false;
        bool bEducationYearInFirst = false;
        bool bEduYearFound = false;

        bool bEducationYearNormal = true;
        int educationYearCount = 0;
        string tNationality = "0";
        string mon = "";
        string month = "";
        string[] EduIncludeList;//, EduExcludeList;
        string tPatternEducationYear;
        StringBuilder sbSkill = null, sbPinCode = null;
        int iGlobalAddingAKMHCKW = 0;
        string StateID = "0";
        string CountryID = "0";
        bool tExpCTC = false;

        string[] DataEmployer = null;
        private bool bEduSpeCheckMajor = false;
        private bool bEduSpeCheckMinor = false;
        private bool bEmpFilteredData = false;
        private int iExpStart = 0, iExpEnd = 0;
        DataSet objDSUni, objDSSpe, objDSLan, objDSDes;
        private bool bPrecentageInLast = false;
        private bool bEmployerYearInLast = false, bEmpOrderFlg = false;

        private bool bYearInLast = false;
        System.Collections.ArrayList aListRefernce;
        #endregion

        public string GetSelectedText(ref TXTextControl.ServerTextControl TextControl1)
        {
            string tReturnValue = "";
            try
            {
                //RT.AutoSize = true;
                //RT.Multiline = true;
                string StrHeaderAll = "";
                string StrFirstPageTextFrame = "";
                string StrHeaderTextFrame = "";
                string StrHeaderAllTextFrame = "";
                string StrHeader = "";
                string strBody = "";
                string strFooter = "";
                string FirstPagestrFooter = "";
                //TXTextControl.TextFrame t1;
                string StrFirstPageHeader = "";
                try
                {
                    if (!(TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageHeader) == null))
                    {
                        StrFirstPageHeader = TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageHeader).Selection.Text;
                        foreach (TXTextControl.TextFrame t1 in TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageHeader).TextFrames)
                        {
                            StrFirstPageTextFrame = (StrFirstPageTextFrame
                                        + (System.Environment.NewLine + t1.Selection.Text));
                        }
                    }
                    if (!(TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Header) == null))
                    {
                        StrHeader = TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Header).Selection.Text;
                        foreach (TXTextControl.TextFrame t1 in TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Header).TextFrames)
                        {
                            StrHeaderTextFrame = (StrHeaderTextFrame
                                        + (System.Environment.NewLine + t1.Selection.Text));
                        }
                    }
                    if (!(TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.All) == null))
                    {
                        StrHeaderAll = TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.All).Selection.Text;
                        foreach (TXTextControl.TextFrame t1 in TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.All).TextFrames)
                        {
                            StrHeaderAllTextFrame = (StrHeaderAllTextFrame
                                        + (System.Environment.NewLine + t1.Selection.Text));
                        }
                    }
                }
                catch //(Exception ex)
                {
                    //Debug.Assert(false, ex.Message, ex.StackTrace);
                }
                try
                {
                    if (!(StrFirstPageHeader == StrHeader))
                    {
                        StrHeader = (StrFirstPageHeader
                                    + (System.Environment.NewLine + StrHeader));
                    }
                    if (!(StrHeader.IndexOf(StrHeaderAll) >= 0))
                    {
                        StrHeader = (StrHeader
                                    + (System.Environment.NewLine + StrHeaderAll));
                    }
                    if (!(StrHeaderTextFrame == StrHeader))
                    {
                        StrHeaderTextFrame = (StrFirstPageTextFrame
                                    + (System.Environment.NewLine + StrHeaderTextFrame));
                    }
                    if (!(StrHeaderTextFrame.IndexOf(StrHeaderAllTextFrame) >= 0))
                    {
                        StrHeaderTextFrame = (StrHeaderTextFrame
                                    + (System.Environment.NewLine + StrHeaderAllTextFrame));
                    }
                    StrHeader = (StrHeader
                                + (System.Environment.NewLine + StrHeaderTextFrame));
                }
                catch //(Exception ex)
                {
                }
                if ((TextControl1.Frames.Count > 0))
                {
                    string path = "";
                    TextControl1.SelectAll();
                    TextControl1.Selection.Save(out path, TXTextControl.StringStreamType.HTMLFormat);
                    path.ToString();
                    HtmlAgilityPack.HtmlDocument objD = new HtmlAgilityPack.HtmlDocument();
                    objD.LoadHtml(path);
                    strBody = objD.DocumentNode.InnerText;
                }
                else
                {
                    TextControl1.SelectAll();
                    strBody = TextControl1.Selection.Text;
                }
                try
                {
                    if (((TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageFooter) == null)
                                == false))
                    {
                        if (((TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageFooter).Selection == null)
                                    == false))
                        {
                            FirstPagestrFooter = ("\r\n" + TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageFooter).Selection.Text);
                        }
                    }
                    if (((TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Footer) == null)
                                == false))
                    {
                        if (((TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Footer).Selection == null)
                                    == false))
                        {
                            strFooter = ("\r\n" + TextControl1.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Footer).Selection.Text);
                        }
                    }
                    if (!(FirstPagestrFooter.IndexOf(strFooter) >= 0))
                    {
                        strFooter = (FirstPagestrFooter + strFooter);
                    }
                    if (((FirstPagestrFooter != "")
                                && (strFooter == "")))
                    {
                        strFooter = FirstPagestrFooter;
                    }
                }
                catch //(Exception ex)
                {
                }
                tReturnValue = (StrHeader
                             + (System.Environment.NewLine
                             + (strBody
                             + (System.Environment.NewLine + strFooter))));
            }
            catch //(Exception ex)
            {
                //Debug.Assert(false, ex.Message, ex.StackTrace);
            }
            return tReturnValue;
        }



        public string ParseResumeData(string FileName, byte[] bFileData)
        {
            if (opLoadCommonMasterXML() == false)
            { }
            try
            {
                string tFileFullPath = "";

                try
                {

                    //create file
                    tFileFullPath = FCommon.GetFolderHCParserResume + @"\" + FileName;
                    try
                    {
                        if (File.Exists(tFileFullPath))
                        {
                            File.Delete(tFileFullPath);
                        }
                    }
                    catch
                    {
                    }

                    TXTextControl.ServerTextControl serverTextControl1;
                    serverTextControl1 = new TXTextControl.ServerTextControl();
                    serverTextControl1.Create();
                    switch (Path.GetExtension(tFileFullPath).ToLower())
                    {
                        case "":
                            try
                            {
                                serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            }
                            catch
                            {
                                try
                                {
                                    serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.AdobePDF);
                                }
                                catch
                                {
                                    serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.WordprocessingML);
                                }
                            }
                            break;
                        case ".doc":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case ".docx":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.WordprocessingML);
                            break;
                        case ".pdf":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.AdobePDF);
                            break;
                        case ".rtf":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case ".htm":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case ".html":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case ".txt":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.WordprocessingML);
                            break;
                    }


                    ResumeConvertedText = GetSelectedText(ref serverTextControl1).Trim().Replace("<BR>", System.Environment.NewLine).Replace("<br>", System.Environment.NewLine).Replace("<Br>", System.Environment.NewLine).Replace("<", "less than").Replace(">", "greater than");

                    serverTextControl1.Dispose(); serverTextControl1 = null;
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex); return "-23";
                }
                finally
                {
                    try
                    {
                        if (File.Exists(tFileFullPath))
                        {
                            File.Delete(tFileFullPath);
                        }
                    }
                    catch
                    {
                    }
                }
                if (ResumeConvertedText.Replace("", "").Trim().Length <= 300)
                {
                    HireCraft.FCommon.opWriteLog(new Exception("File Content length is :" + ResumeConvertedText.Replace("", "").Trim().Length.ToString()));
                    return "-22";

                }


                char[] cSETASCII = {  Convert.ToChar(0),
                                       Convert.ToChar(1),
                                       Convert.ToChar(2),
                                       Convert.ToChar(3),
                                       Convert.ToChar(4),
                                       Convert.ToChar(5),
                                       Convert.ToChar(6),
                                       Convert.ToChar(7),
                                       Convert.ToChar(8),
                                       //Convert.ToChar(9),//Hr Tab
                                       Convert.ToChar(10),
                                       Convert.ToChar(11),//VR Tab
                                       Convert.ToChar(12),
                                       Convert.ToChar(13),
                                       Convert.ToChar(14),
                                       Convert.ToChar(15),
                                       Convert.ToChar(16),
                                       Convert.ToChar(17),
                                       Convert.ToChar(18),
                                       Convert.ToChar(19),
                                       Convert.ToChar(20),
                                       Convert.ToChar(21),
                                       Convert.ToChar(22),
                                       Convert.ToChar(23),
                                       Convert.ToChar(24),
                                       Convert.ToChar(25),
                                       Convert.ToChar(26),
                                       Convert.ToChar(27),
                                       Convert.ToChar(28),
                                       Convert.ToChar(29),
                                       Convert.ToChar(30),
                                       Convert.ToChar(31),
									   Convert.ToChar(34),
                                       //Convert.ToChar(35),
									   Convert.ToChar(36),
                    				 
                    Convert.ToChar(224),
                    Convert.ToChar(226),
                    Convert.ToChar(229),
                    Convert.ToChar(159),  
           
				};
                opCommonStringIncludeExclude();


                string[] tDataLines = ResumeConvertedText.Split(cSETASCII, StringSplitOptions.RemoveEmptyEntries);
                int count = 0;
                for (int i = tDataLines.GetLowerBound(0); i <= tDataLines.GetUpperBound(0); i++)
                    if (tDataLines[i].Trim() != "" && tDataLines[i].Trim() != "_" && tDataLines[i].Trim() != "ü" && tDataLines[i].Trim().Length > 1)
                        count += 1;
                int DataEmployercount = 0;
                string[] DataEmployer1 = ResumeConvertedText.Replace("\n", "").Split(chrArrayASCII, StringSplitOptions.RemoveEmptyEntries);
                for (int i = DataEmployer1.GetLowerBound(0); i <= DataEmployer1.GetUpperBound(0); i++)
                    if (DataEmployer1[i].Trim() != "" && DataEmployer1[i].Trim() != "_" && DataEmployer1[i].Trim() != "ü" && DataEmployer1[i].Trim().Length > 1)
                        DataEmployercount += 1;
                DataEmployer = new string[DataEmployercount];
                DataEmployercount = 0;
                for (int cnt = 0; cnt < DataEmployer1.Length; cnt++)
                    if (DataEmployer1[cnt].Trim() != "" && DataEmployer1[cnt].Trim() != "_" && DataEmployer1[cnt].Trim() != "ü" && DataEmployer1[cnt].Trim().Length > 1)
                    {
                        DataEmployer[DataEmployercount] = DataEmployer1[cnt].Replace("*", " ").Replace(Convert.ToChar(10).ToString(), " ").Trim();
                        DataEmployercount += 1;
                    }

                DataLines = new string[count];
                count = 0;
                for (int i = 0; i <= tDataLines.GetUpperBound(0); i++)
                {
                    if (tDataLines[i].Trim() != "" && tDataLines[i].Trim() != "_" && tDataLines[i].Trim() != "ü" && tDataLines[i].Trim().Length > 1)
                    {
                        if (tDataLines[i].Trim().IndexOf("@") >= 0)
                            DataLines[count] = tDataLines[i].Replace("\a", "").Replace("ü", "").Replace("Ø", "").Replace(Convert.ToChar(160).ToString(), Convert.ToChar(32).ToString()).ToString();
                        else
                            DataLines[count] = tDataLines[i].Replace("_", "").Replace("\a", "").Replace("ü", "").Replace("Ø", "").Replace(Convert.ToChar(160).ToString(), Convert.ToChar(32).ToString()).ToString().Replace(Convert.ToChar(128).ToString(), Convert.ToChar(32).ToString()).ToString().Replace(Convert.ToChar(147).ToString(), Convert.ToChar(32).ToString()).ToString();
                        if (DataLines[count].ToLower().StartsWith("|") || DataLines[count].ToLower().StartsWith("[") || DataLines[count].ToLower().StartsWith("*"))
                            DataLines[count] = DataLines[count].Remove(0, 1);
                        count += 1;
                    }
                }
                count = 0;
                GeneralFormat();
            }
            catch
            {
            }
            finally
            {
                GC.Collect();
            }
            return fParseResumeBank();
        }
        //private string ToHtml(string s)
        //{
        //    s = HttpUtility.HtmlEncode(s);
        //    string[] paragraphs = s.Split(new string[] { "\r\n\r\n" }, StringSplitOptions.None);
        //    StringBuilder sb = new StringBuilder();
        //    foreach (string par in paragraphs)
        //    {
        //        sb.AppendLine("<p>");
        //        string p = par.Replace(Environment.NewLine, "<br />\r\n");
        //        //if (nofollow)
        //        //{
        //        //    p = Regex.Replace(p, @"\[\[(.+)\]\[(.+)\]\]", "<a href=\"$2\" rel=\"nofollow\">$1</a>");
        //        //    p = Regex.Replace(p, @"\[\[(.+)\]\]", "<a href=\"$1\" rel=\"nofollow\">$1</a>");
        //        //}
        //        //else
        //        //{
        //        p = Regex.Replace(p, @"\[\[(.+)\]\[(.+)\]\]", "<a href=\"$2\">$1</a>");
        //        p = Regex.Replace(p, @"\[\[(.+)\]\]", "<a href=\"$1\">$1</a>");
        //        sb.AppendLine(p);
        //        // }
        //        sb.AppendLine("</p>");
        //    }
        //    return sb.ToString();
        //}


        public string fParseResumeBank()
        {
            string tdata = "-1";
            System.Text.StringBuilder retXmlParse = new System.Text.StringBuilder();
            retXmlParse.Append("<Document>");
            try
            {
                retXmlParse.Append("<Name>" + fname.Replace("\a", " ").Trim() + "</Name>");
                try
                {
                    if (DOB.Trim().Length > 0)
                    {
                        DateTime dt = new DateTime();
                        dt = Convert.ToDateTime(DateParse(DOB));
                        if (dt.Year != DateTime.Now.Year)
                        {
                            DOB = dt.ToString("dd-MMM-yyyy");
                            if (DOB.IndexOf("0001") >= 0)
                                DOB = "";
                        }
                        else
                        {
                            DOB = ""; ;
                        }
                    }
                    retXmlParse.Append("<DOB>" + DOB + "</DOB>");


                }
                catch { retXmlParse.Append("<DOB>" + DOB + "</DOB>"); }

                retXmlParse.Append("<Gender>" + Gender + "</Gender>");
                retXmlParse.Append("<NoticePeriod>" + NoticePeriod + "</NoticePeriod>");
                retXmlParse.Append("<ExpectedCTC>" + ExpectedCTC + "</ExpectedCTC>");
                retXmlParse.Append("<presentCTC>" + presentCTC + "</presentCTC>");
                retXmlParse.Append("<Phone>" + phone.Replace("", "") + "</Phone>");
                retXmlParse.Append("<Mobile>" + mobile.Replace("", "") + "</Mobile>");
                retXmlParse.Append("<EMail>" + email + "</EMail>");
                retXmlParse.Append("<Passport>" + passport + "</Passport>");
                retXmlParse.Append("<SkillText>" + ExpSkills + "</SkillText>");
                retXmlParse.Append("<SkillIDs>" + SkillIDs + "</SkillIDs>");
                retXmlParse.Append("<SkillOccurance>" + SkillIDOccurance + "</SkillOccurance>");
                retXmlParse.Append("<EducationsIDs>" + EducationsIDs + "</EducationsIDs>");
                retXmlParse.Append("<Education>" + EDUCATION + "</Education>");
                retXmlParse.Append("<EduYears>" + eduCompleteYear + "</EduYears>");
                retXmlParse.Append("<FromYear>" + eduStartYear + "</FromYear>");
                retXmlParse.Append("<Duration>" + eduDuration + "</Duration>");
                retXmlParse.Append("<Institution>" + eduInstitute + "</Institution>");
                retXmlParse.Append("<University>" + eduUniverSity + "</University>");
                retXmlParse.Append("<Specialization>" + eduSpecialization + "</Specialization>");
                retXmlParse.Append("<Specialization1>" + eduSpecialization1 + "</Specialization1>");
                retXmlParse.Append("<Grade>" + eduGrade + "</Grade>");
                retXmlParse.Append("<Language>" + tLanguage + "</Language>");
                retXmlParse.Append("<PassportIssueDate>" + tPassportDateOfIssue + "</PassportIssueDate>");
                retXmlParse.Append("<PassportExpiryDate>" + tPassportDateofExpiry + "</PassportExpiryDate>");
                retXmlParse.Append("<PanNumber>" + tPanNo + "</PanNumber>");
                retXmlParse.Append("<PassportIssuePlace>" + tPassportIssuePlace + "</PassportIssuePlace>");
                retXmlParse.Append("<FatherName>" + tFatherName + "</FatherName>");
                retXmlParse.Append("<FunctionAreaID>" + FunctionalAreaID + "</FunctionAreaID>");
                retXmlParse.Append("<FunctionArea>" + FunctionalAreaType + "</FunctionArea>");
                retXmlParse.Append("<IndustryID>" + IndustryTypeID + "</IndustryID>");
                retXmlParse.Append("<Industry>" + IndustryType + "</Industry>");
                retXmlParse.Append("<SubFunctionID>" + SubFunctionID + "</SubFunctionID>");
                retXmlParse.Append("<SubFunction>" + SubFunctionType + "</SubFunction>");
                retXmlParse.Append("<JobTitleID>" + JobTitleID + "</JobTitleID>");
                retXmlParse.Append("<JobTitle>" + JobTitle + "</JobTitle>");
                retXmlParse.Append("<NSRNumber>" + tNSRNumber + "</NSRNumber>");
                retXmlParse.Append("<MaritalStatus>" + tMaritalStatus + "</MaritalStatus>");
                retXmlParse.Append("<ExperienceSkillText>" + ExperienceSkillText.Replace("<", "").Replace(">", "").Replace(Convert.ToChar(56256).ToString(), "").Replace(Convert.ToChar(56510).ToString(), "") + "</ExperienceSkillText>");
                retXmlParse.Append("<WorkExperienceDetails>" + WEdetails + "</WorkExperienceDetails>");
                retXmlParse.Append("<Presentemployer>" + PresentEmployer + "</Presentemployer>");
                retXmlParse.Append("<Preferedlocation>" + PrefLocations + "</Preferedlocation>");
                retXmlParse.Append("<Totalexperience>" + TotalEXP + "</Totalexperience>");
                retXmlParse.Append("<Relevantexperience>" + RelevantEXP + "</Relevantexperience>");
                retXmlParse.Append("<Accomplishments>" + Certifications + "</Accomplishments>");
                retXmlParse.Append("<LocationsIDs>" + LocationsIDs + "</LocationsIDs>");
                retXmlParse.Append("<StateID>" + StateID + "</StateID>");
                retXmlParse.Append("<CountryID>" + CountryID + "</CountryID>");
                retXmlParse.Append("<Address1>" + tPresentAddress + "</Address1>");
                retXmlParse.Append("<Address2>" + tParmenentAddress + "</Address2>");
                retXmlParse.Append("<NationalityID>" + tNationality + "</NationalityID>");
                retXmlParse.Append("<VariableCTC>" + VariableCTC + "</VariableCTC>");
                retXmlParse.Append("<PINNumber>" + PINNumber + "</PINNumber>");
                retXmlParse.Append("<VisType>" + tVisaTypeID + "</VisType>");
                retXmlParse.Append("<VisNo>" + tVisaNo + "</VisNo>");
                // opGetEmployementXml(ref retXmlParse);
                //  opReferenceDetailsXml(ref retXmlParse);
                retXmlParse.Append("<ResumeConvertedText>" + ResumeConvertedText + "</ResumeConvertedText>");
                retXmlParse.Append("</Document>");
                retXmlParse.Replace("", "").Replace(Convert.ToChar(56256).ToString(), "").Replace("\t", "").Replace("\r", "").Replace("\v", "").Replace("\a", "").Replace("&", "");
            }
            catch
            {

                tdata = "-1";
            }

            return tdata = retXmlParse.ToString();

        }

        private void opGetYearAndMonthSilent(ref string tFMonth, ref string tFYEar, ref string tTMonth, ref string tTYEar, int iPos)
        {
            try
            {
                if (strDateOrgn != null)
                {
                    if (strDateOrgn.Length > iPos)
                    {
                        if (strDateOrgn[iPos].ToString().Trim() != "")
                        {
                            char[] sp1 = { '-', '—' }, sp3 = { '/', ' ' };

                            string[] aEmpPeriod = strDateOrgn[iPos].ToString().Split(sp1, StringSplitOptions.RemoveEmptyEntries);
                            for (int ct = 0; ct < aEmpPeriod.Length; ct++)
                            {
                                string[] aPeriod = null;
                                aPeriod = aEmpPeriod[ct].Split(sp3, StringSplitOptions.RemoveEmptyEntries);
                                if (ct == 0 && (tFMonth == "" || tFYEar == "") && aPeriod.Length > 0)
                                {
                                    if (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0)].ToCharArray(), ""))
                                        tFYEar = aPeriod[aPeriod.GetUpperBound(0)].Trim();
                                    if (tFMonth == "" && (aPeriod.GetUpperBound(0) - 1) >= 0 && (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0) - 1].ToCharArray(), "")))
                                        tFMonth = aPeriod[aPeriod.GetUpperBound(0) - 1];//opCheckMonthNumber(aPeriod[aPeriod.GetUpperBound(0) - 1].Trim()); 
                                    else if (tFMonth == "")
                                        tFMonth = opCheckMonthNo(aPeriod[aPeriod.GetUpperBound(0) - 1]);
                                }
                                if (ct == 1 && (tTMonth == "" || tTYEar == "") && aPeriod.Length > 1)
                                {
                                    if (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0)].ToCharArray(), ""))
                                        tTYEar = aPeriod[aPeriod.GetUpperBound(0)].Trim();
                                    if (tTMonth == "" && (aPeriod.GetUpperBound(0) - 1) >= 0 && (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0) - 1].ToCharArray(), "")))
                                        tTMonth = aPeriod[aPeriod.GetUpperBound(0) - 1];//opCheckMonthNumber(aPeriod[aPeriod.GetUpperBound(0) - 1].Trim()); 
                                    else if (tTMonth == "")
                                        tTMonth = opCheckMonthNo(aPeriod[aPeriod.GetUpperBound(0) - 1]);
                                }

                            }//loop end 
                        }
                    }
                }
            }
            catch { }

        }

        private void opGetEmployementXml(ref System.Text.StringBuilder retXmlParse)
        {
            retXmlParse.Append("<EmployerDetails>");
            try
            {
                if (strPastOrgn != null)
                {
                    int i = 1; string[] spD = { "+:+" };
                    for (int iCnt = 0; iCnt < strPastOrgn.Length; iCnt++)
                    {
                        if (strPastOrgn[iCnt].Trim() == "") continue;
                        retXmlParse.Append("<EmployerItem>");
                        retXmlParse.Append("<DirtyFlag>1</DirtyFlag>");
                        retXmlParse.Append("<RID>0</RID>");
                        retXmlParse.Append("<ResumeID>0</ResumeID>");
                        string tEmpID = FCommon.opGetUIDfromXml(ref FCommon.objfXMLEmployer, strPastOrgn[iCnt].Trim(), "Title");
                        retXmlParse.Append("<EmployerID>" + tEmpID + "</EmployerID>");
                        retXmlParse.Append("<CompanyName>" + FCommon.opSerializeString(strPastOrgn[iCnt].Trim()) + "</CompanyName>");
                        string tFMonth = "", tFYEar = "", tTMonth = "", tTYEar = "";
                        opGetYearAndMonth(ref  tFMonth, ref  tFYEar, ref  tTMonth, ref tTYEar, iCnt);
                        if (iCnt == 0)
                            if (tTYEar == "")
                                retXmlParse.Append("<Particular>Present</Particular>");
                            else
                                retXmlParse.Append("<Particular>Previous</Particular>");
                        else
                            retXmlParse.Append("<Particular>Previous</Particular>");
                        if (strPastDesignation != null)
                            if (iCnt <= strPastDesignation.Length)
                                retXmlParse.Append("<DesignationID>" + strPastDesignation[iCnt].Trim().Split(spD, StringSplitOptions.None)[0] + "</DesignationID>");
                            else
                                retXmlParse.Append("<DesignationID></DesignationID>");
                        else
                            retXmlParse.Append("<DesignationID></DesignationID>");
                        retXmlParse.Append("<FromDate>" + tFMonth + "</FromDate>");
                        retXmlParse.Append("<FromYear>" + tFYEar + "</FromYear>");
                        retXmlParse.Append("<ToDate>" + tTMonth + "</ToDate>");
                        retXmlParse.Append("<ToYear>" + tTYEar + "</ToYear>");
                        retXmlParse.Append("<CompanyType>0</CompanyType>");
                        retXmlParse.Append("<SequenceNo>" + i.ToString() + "</SequenceNo>");
                        retXmlParse.Append("<ManagerName></ManagerName>");
                        retXmlParse.Append("<ManagerEmailID></ManagerEmailID>");
                        retXmlParse.Append("<ManagerContactNumber></ManagerContactNumber>");
                        retXmlParse.Append("<ReferenceTaken>0</ReferenceTaken>");
                        retXmlParse.Append("<DutyResponsibilities></DutyResponsibilities>");
                        retXmlParse.Append("<FirstSalary>0.00</FirstSalary>");
                        retXmlParse.Append("<LastSalary>0.00</LastSalary>");
                        retXmlParse.Append("<AgencyDetails></AgencyDetails>");
                        retXmlParse.Append("<EmployerName></EmployerName>");
                        retXmlParse.Append("<EmployerAddress></EmployerAddress>");
                        retXmlParse.Append("<PhoneNo></PhoneNo>");
                        retXmlParse.Append("<EmployeeCode></EmployeeCode>");
                        retXmlParse.Append("<Department></Department>");
                        retXmlParse.Append("<NoofEmployees></NoofEmployees>");
                        retXmlParse.Append("<EmpPeriodFromDate></EmpPeriodFromDate>");
                        retXmlParse.Append("<EmpPeriodToDate></EmpPeriodToDate>");
                        retXmlParse.Append("<PositionDetails></PositionDetails>");
                        retXmlParse.Append("<IndustryType></IndustryType>");
                        retXmlParse.Append("<CountryID></CountryID>");
                        retXmlParse.Append("<City></City>");
                        retXmlParse.Append("<JobType></JobType>");
                        retXmlParse.Append("<FixedPay></FixedPay>");
                        retXmlParse.Append("<VariablePay></VariablePay>");
                        retXmlParse.Append("<LifeCycle></LifeCycle>");
                        retXmlParse.Append("<VariableFirstSalary>0.00</VariableFirstSalary>");
                        retXmlParse.Append("<VariableLastSalary>0.00</VariableLastSalary>");
                        retXmlParse.Append("<Currency>0</Currency>");
                        retXmlParse.Append("<FrequencyTitle>0</FrequencyTitle>");
                        retXmlParse.Append("<DeviationReason></DeviationReason>");
                        retXmlParse.Append("<ExpInMonths>0</ExpInMonths>");
                        retXmlParse.Append("</EmployerItem>");
                        i++;
                    }

                }

            }
            catch { }
            finally
            {
            }
            retXmlParse.Append("</EmployerDetails>");
        }

        private void opGetYearAndMonth(ref string tFMonth, ref string tFYEar, ref string tTMonth, ref string tTYEar, int iPos)
        {
            try
            {
                if (strDateOrgn != null)
                {
                    if (strDateOrgn.Length > iPos)
                    {
                        if (strDateOrgn[iPos].ToString().Trim() != "")
                        {
                            char[] sp1 = { '-', '—' }, sp3 = { '/', ' ' };

                            string[] aEmpPeriod = strDateOrgn[iPos].ToString().Split(sp1, StringSplitOptions.RemoveEmptyEntries);
                            for (int ct = 0; ct < aEmpPeriod.Length; ct++)
                            {
                                string[] aPeriod = null;
                                aPeriod = aEmpPeriod[ct].Split(sp3, StringSplitOptions.RemoveEmptyEntries);
                                if (ct == 0 && (tFMonth == "" || tFYEar == "") && aPeriod.Length > 0)
                                {
                                    if (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0)].ToCharArray(), ""))
                                        tFYEar = aPeriod[aPeriod.GetUpperBound(0)].Trim();
                                    if (tFMonth == "" && (aPeriod.GetUpperBound(0) - 1) >= 0 && (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0) - 1].ToCharArray(), "")))
                                        tFMonth = opCheckMonthNumber(aPeriod[aPeriod.GetUpperBound(0) - 1].Trim());
                                    else if (tFMonth == "")
                                        tFMonth = opCheckMonth(aPeriod[aPeriod.GetUpperBound(0) - 1]);
                                }
                                if (ct == 1 && (tTMonth == "" || tTYEar == "") && aPeriod.Length > 1)
                                {
                                    if (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0)].ToCharArray(), ""))
                                        tTYEar = aPeriod[aPeriod.GetUpperBound(0)].Trim();
                                    if (tTMonth == "" && (aPeriod.GetUpperBound(0) - 1) >= 0 && (!CheckNumeric(aPeriod[aPeriod.GetUpperBound(0) - 1].ToCharArray(), "")))
                                        tTMonth = opCheckMonthNumber(aPeriod[aPeriod.GetUpperBound(0) - 1].Trim());
                                    else if (tTMonth == "")
                                        tTMonth = opCheckMonth(aPeriod[aPeriod.GetUpperBound(0) - 1]);
                                }
                            }//loop end 
                        }
                    }
                }
            }
            catch { }

        }

        private string opCheckMonthNumber(string TData)
        {
            switch (TData.ToLower())
            {
                case "1":
                    return "January";
                case "2":
                    return "February";
                case "3":
                    return "March";
                case "4":
                    return "April";
                case "5":
                    return "May";
                case "6":
                    return "June";
                case "7":
                    return "July";
                case "8":
                    return "August";
                case "9":
                    return "September";
                case "10":
                    return "October";
                case "11":
                    return "November";
                case "12":
                    return "December";
            }
            return "";
        }

        private string opCheckMonthNo(string TData)
        {
            switch (TData.ToLower())
            {
                case "Jan":
                    return "1";
                case "january":
                    return "1";
                case "feb":
                    return "2";
                case "february":
                    return "2";
                case "mar":
                    return "3";
                case "march":
                    return "3";
                case "apr":
                    return "4";

                case "april":
                    return "4";
                case "may":
                    return "5";
                case "june":
                    return "6";
                case "jun":
                    return "6";
                case "jul":
                    return "7";
                case "july":
                    return "7";
                case "aug":
                    return "8";
                case "august":
                    return "8";
                case "sep":
                    return "9";
                case "september":
                    return "9";
                case "oct":
                    return "10";
                case "october":
                    return "10";
                case "nov":
                    return "11";
                case "november":
                    return "11";
                case "dec":
                    return "12";
                case "december":
                    return "12";
            }
            return "";
        }

        private string opCheckMonth(string TData)
        {
            switch (TData.ToLower())
            {
                case "Jan":
                    return "January";
                case "january":
                    return "January";
                case "feb":
                    return "February";
                case "february":
                    return "February";
                case "mar":
                    return "March";
                case "march":
                    return "March";
                case "apr":
                    return "April";

                case "april":
                    return "April";
                case "may":
                    return "May";
                case "june":
                    return "June";
                case "jun":
                    return "June";
                case "jul":
                    return "July";
                case "july":
                    return "July";
                case "aug":
                    return "August";
                case "august":
                    return "August";
                case "sep":
                    return "September";
                case "september":
                    return "September";
                case "oct":
                    return "October";
                case "october":
                    return "October";
                case "nov":
                    return "November";
                case "november":
                    return "November";
                case "dec":
                    return "December";
                case "december":
                    return "December";
            }
            return "";
        }
        private void opReferenceDetailsXml(ref System.Text.StringBuilder retXmlParse)
        {
            retXmlParse.Append("<Reference>");
            try
            {
                if (aListRefernce != null && aListRefernce.Count > 0)
                {
                    for (int i = 0; i <= aListRefernce.Count - 1; i++)
                    {

                        MyReferenceDetails objNew = (MyReferenceDetails)aListRefernce[i];
                        retXmlParse.Append("<ReferenceDetails>");
                        retXmlParse.Append("<RID>0</RID><Name>" + objNew.Name.Trim() + "</Name><Company>" + objNew.Company.Trim() + "</Company><Address>" + objNew.Address.Trim() + "</Address><ContactNo>" + objNew.Contact.Trim() + "</ContactNo><HowdoYouKnow>" + objNew.Relationship.Trim() + "</HowdoYouKnow><Address2></Address2><Designation>" + objNew.Role.Trim() + "</Designation><Occupation></Occupation><EmailID>" + objNew.EmailID.Trim() + "</EmailID><ReferenceCreatedDate></ReferenceCreatedDate><Status></Status><Notes></Notes><ReferenceType></ReferenceType><ReferenceLetterNumber></ReferenceLetterNumber><ReferenceLetterDate></ReferenceLetterDate>");
                        retXmlParse.Append("</ReferenceDetails>");
                    }
                }
            }
            catch { }
            finally
            {
            }
            retXmlParse.Append("</Reference>");
        }


        #region "Common "
        private void opResumeLogFile(string CurrentDate)
        {
            //try
            //{
            //    string tResumeLogFile = System.IO.Path.GetTempPath() + @"\\ResumeLog.txt";
            //    StreamWriter objWriter;
            //    objWriter = new StreamWriter(tResumeLogFile, true, System.Text.Encoding.UTF8);
            //    string tValue = CurrentDate;
            //    objWriter.WriteLine(tValue);
            //    objWriter.Flush();
            //    objWriter.Close();
            //    objWriter.Dispose();
            //}
            //catch { }
        }
        /// <summary>
        /// Check the Resume Format
        /// </summary>
        /// <returns></returns>
        private int CheckFormat()
        {
            int i = 0;

            try
            {

                // Naukri
                if (ResumeConvertedText.ToUpper().IndexOf("TEXT RESUME") >= 0)
                {
                    iFormat = 2;
                    return iFormat;
                }
                //Times Job
                for (i = 0; i <= 20; i++)
                    if (DataLines[i] == "Job Profile")
                    {
                        iFormat = 5;
                        return iFormat;
                    }
                //Monster
                for (i = 0; i <= 20; i++)
                    if (DataLines[i] == "Experience Summary")
                    {
                        iFormat = 4;
                        return iFormat;
                    }
                //Job Street

                for (i = 0; i <= 20; i++)
                    if (DataLines[i].ToLower() == "employment history" || DataLines[i].IndexOf("JobStreet.com's SiVA") > -1)
                    {
                        iFormat = 3;
                        return iFormat;
                    }

                //Job Ahead
                for (i = 0; i <= 20; i++)
                    if (DataLines[i].IndexOf("Current Location") > -1)
                    {
                        iFormat = 1;
                        return iFormat;
                    }
                bool gen = false;
                //General Format
                for (i = 0; i <= 20; i++)
                    if (DataLines[i].IndexOf("Resume of") > -1)
                    {
                        gen = true;
                    }
                    else if ((DataLines[i].IndexOf("Career Objective") > -1) && (gen == true))
                    {
                        iFormat = 0;
                        return iFormat;
                    }

                return iFormat;
            }
            catch
            {
            }
            return iFormat;
        }
        private void opCommonStringIncludeExclude()
        {
            try
            {
                #region "Exclude Include"
                try
                {
                    if (rgxBreaks == null)
                    {
                        string _strExperience = @"((work|working|w o r k|w o r k s|current|Relevant Work|Employment|My Work|Industry|professional|P r o f e s s i o n a l|P r o f e s s i o n a l s|Proffessional|PROFESSIONAL WORKING|ORGANIZATIONAL|ORGANISATIONAL)[s]?\s*(E x p e r i e n c e|Experience|Experinece|Exeperience|Exeprience|Experiences|Exp|Exps|Experince|Summary|Synopsis)" +
                                                            @"|(Employee|employment|career|Job Title|My Work|work|working|w o r k|w o r k s|Relevant Work|PROFESSIONAL WORKING)[s]?\s+History" +
                                                            "|(Employer|Employers|ORGANIZATIONS|ORGANIZATION|ORGANISATIONS|ORGANISATION|Company) (List|Lists)" +
                                                            @"|(ORGANIZATIONS|ORGANIZATION|ORGANIZATIONAL|ORGANIZATIONALS|ORGANISATIONS|ORGANISATION|ORGANISATIONAL|ORGANISATIONALS|Company|Experience)[\s]*(DETAILS|Dteail)" +
                                                            @"|related experience[s]?|Currently deputed" +
                                                            "|Professional Experience in Brief|Current Job|Present Job|Associated with" +
                                                            @"|Relevant Work Description|Company Profile" +
                                                            @"|(Experience|Experiences|employment|Career Review|ENGAGEMENT OVERVIEW)" +
                                                            @"|KEY EXPERIENCE|employment details|Professional Chronology|Professional Experience in Brief|Currently deputed" +
                                                            @"|related experience|CAREER HIGHLIGHTS|Work Exposures|Employment Profile|Career Synopsis|Employment Graph|Experience Synopsis|Experience Summary|" +
                                                            @"SUMMARY OF EXPERIENCE|ATTAINMENT)[\s]*(:|[\s]{3}|[,\-\–])";
                        rgxBreak = new Regex(_strExperience, RegexOptions.IgnoreCase);
                    }
                    if (rgxMrs == null)
                        rgxMrs = new Regex(@"\s(Mr|Mrs|Miss|Ms|Engr)\s", RegexOptions.IgnoreCase);
                    if (rgxBreaks == null || rgxBreaksLength == null)
                    {
                        string _strBreaks = @"(Career Profile|Career Highlight|Areas of Experience|Technical Proficiency|Personal Profile" +
                                             @"|Company|Designation|Objetcive|Industry|Group|Education|Qualification|Expertise\s*:|Strengths\s*:" +
                                             "|Summary|Profile|Experience|Organisation|Organization" +
                                             @"|Key Skill|Synopsis|Profession|Academic|Snapshot|Skill|OverView|nationality|nationality:|EDUCATIONAL|AREAS OF INTEREST)";

                        rgxBreaks = new Regex(@"[a-z\s]{0,15}\s" + _strBreaks + @"\s[a-z\s]{1,10}:", RegexOptions.IgnoreCase);
                        rgxBreaksLength = new Regex(@"\s" + _strBreaks + @"\s", RegexOptions.IgnoreCase);
                    }
                    if (rgxContinue == null)
                    {

                        _strNameRemove = "(Full|Afternoon|Good|net|CALL|Signature|Page|Address|Qualification|Qualifications|Road|Cross|Main|Apartment|Hostel|CANDIDATE REFERAL" +
                              "|Nurrent|BackGround|Notes|Current|FeedBack|Form|Report|Date|Birth|Born|Place|Information|R E S U M E|TESTING|BRIEF|TECHNICAL|RÉSUMÉ|RESUMÉ" +
                              "|Emailgeneral|Respected|Interview|Panel|Email|ID|General|Career|Technical|Skill|Skills|Total|Exp|Experience|Developer|Senior|Analyst|Fultime" +
                              "|Manager|Organization|Organizations|Organisation|Organisations|Sports|Simple|Executive|Executives" +
                              "|The|CTC|From|Tel|Degrees|Not|Completed|Solutions|Business|usa|Language|Finance|You|Get|Inc|Avenue|Manager" +
                              "|Nric|Company|Designation|Emergency|Time|Frame|Introduction|Management|Job|Contact|Number|Address|Mob|Res" +
                              "|Expected|Noticed|Notice|Period|pic|Java|Reprting|Work|Experience|Year|Years|Certification|Degree|Permanent|permenant|permanant" +
                              "|Appearing|appears|appear|Passport|Mobile|Phone|PHONEtelephone|Telephone|Tutorial|Negotiable|Masters|References|Reference|Ref|Refr" +
                              "|Career Profile|Company|Designation|Objetcive|Industry|Group|Education|Qualification|Entertainment|Technologies" +
                              "|Summary|Profile|Work|Experience|Dteail|Job|Organisation|Organization|Personal|Stream|State|University|available|Upon" +
                              "|Key|Skill|Synopsis|Profession|Academic|Post|Technical|Snapshot|Consultant|Appears|Appearing|Objective|Request" +
                              "|Education|Lane|Curicullum|Curriculum|Vitie|Vitae|Applied|Chartered|Account|Accountant|VNV|Consulting|For|Resi|Res|Advertisement|Source" +
                              "|Address|Personal|Resume|India|Other|Assignments|Date|Dated|Location|Limited|Medalist|LTD|Private|Bank|Communication" +
                              "|Skilled|MAINFRAME|E mail|Email|Mail|Worked|Team|responsibilities|Click|Expertise|Appraciated|Confidentiality|Cost|Containment|www" +
                              @"|Name|Candidate|CV|Hi|Vic|Recruiter|IT|Thank|Thanks|Thanx|Welcome|Floor|First|Second|Third|\d{1}(st|nd|rd|th)" +
                              "|Education|Lane|Pvt|WWW|Curicullum|Curriculum|Vitie|Vitae|Applied|Chartered|Account|Accountant|VNV|Consulting|For|Resi|Res|Advertisement|Source" +
                              "|Address|Personal|Resume|India|Other|Data|Bio|Assignments|Date|Dated|Location|Limited|Gold|Medalist|LTD|Private|Bank|Communication" +
                              "|Dear|Near|SSS|National|Mgr|About|MySelf|Self|Apartment|East|West|North|South|Network|Engg|Layout|SSO|ON" +
                              "|In|At|OrAm|Are|No|With|Pre Loc|Pref Loc|CURR LOC|Program|Director|EDUCATIONAL|ATTAINMENT|Computer Science|envelopback|xxx[x]*" +
                              ")[s]?";

                        rgxContinue = new Regex(@"\b" + _strNameRemove + @"\b", RegexOptions.IgnoreCase);
                    }
                    if (rgxName == null)
                        rgxName = new Regex(@"^(Emp Name|Name|Consultant Name)\s*[:\-\s][A-Z\.\s]{2,30}[,]?", RegexOptions.IgnoreCase);
                    string str = "";
                    if (appSet == null)
                    {
                        str = "CONFIDENTIAL|Look forward|My CV is detailed below|Work is Worship|Not keen on sales" +
                                    "|DSP MERRILYNCH|Private & Confidential|(Private and Confidential)" +
                                    "|Private and Confidential|Please feel free to contact|Moved to" +
                                    "|a manager who is……..|Here is the resume of the applicant|trial version can convert" +
                                    "|(this message is omitted in registered version)|converted by activertf trial version" +
                                    "|planman consulting|referred|reffered|Last active|Last Modified|NOT LOOKING FOR CHANGE" +
                                    "|Timesjobs profile|Jobstreet profile|Monster profile|Naukri Profile" +
                                    "|click here to view resume in doc format|click here to unsubscribe" +
                                    "|Add Comments to Resume|BIO -  DATA|Consultants|Names will be provided on request|circulam vitae|urriculam vitae" +
                                    "|Qualification|Total Exp|Skill sets|CIRRUCULAM VITAE|C  U  R  R  I  C  U  L  U  M      V  I  T  A  E|present company" +
                                    "|total exp|circulam vitae|urriculam vitae|SAP-|Ref. By|CIRCULAM - VITAE|CIRCULAM-VITAE|job code" +
                                    "|i am writing|my objective is|i am confident|currently i am|i am enclosing|my norm is" +
                                    "|BIO - DATA|.Curriculum  Vitae|Carriculam Vitae|CIRRICULAM VITAE|CARRICULUM VITAE|urriculum Vitae|CRRICULUM VITAE|CUURICLUM VITAE|urriculum Vitae|- CIRCULLUM VITAE -|DCURRICULAM|CARICULAM VITAE" +
                                    "|RICULUM VITAE|CARRICULAM VITAE|Initial Contact - Curriculum Vitae|CIRCULUM VITAE|CIRRICULUM VITAE|comprehensive|URRICULUM  VITAE|CURRICULUM  VITAE|IRCULUM VITAE" +
                                    "|CURICURUM VITAE|CIRICULAM-REVITA|RESUMẾ|Om Sai Ram|A        R        C        H        I        T        E        C        T|Contact Address :" +
                                    "|Age :|Contact No. :|Email Id :|Nationality/Sex :|Languages known :|Date of Birth" +
                                    "|Associate|CARRICULAM VITE|CERTIFIED|POST APPLIED|Gender|Nationality|Contact Address|MICROSOFT CERTIFIED|rRESUME|CONCISE RESUME|View Resume|(Word 2000 Format)|View Text Resume Only|Forward This Resume|Contact by Email|Print Resume|Save to Folder|Close Window|Go to:|E.CTC:|C.CTC:";

                        if (FCommon.NameExcludeList.Length < 10)
                            appSet = str.Split('|');
                        else
                        {
                            if (FCommon.NameExcludeList.Trim().Length != 0)
                                str = str + FCommon.NameExcludeList;
                            str = str.Replace("||", "|");
                            str = str.Replace("||", "|");
                            appSet = str.Split('|');
                        }
                    }
                    if (regSkill == null)
                    {
                        str = "E x p e r i e n c e|work profile|project done|career history|job responsibilities|role" +
                            "|responsibilities|details of experience|current organisation|current organization" +
                            "|managerial experiences|job profile|key areas of exposure|domain expertise|relevant work experience" +
                            "|previous work experience|areas Of expertise|presently working at|experience|functional expertise" +
                            "|employment history|significant projects|project handled|professional growth|experience summary" +
                            "|professional summary|selected experience|assignments|project description" +
                            "|professional experience|summary of skills and experience|lists of projects" +
                            "|project experience|professional work experience|work experience|project details|project" +
                            "|projects|career summary|work history|current assignment|assignment held|Presently working for";
                        regSkill = new Regex(@"[\s,\(\:](" + str + @")[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                        //regSkill1 = new Regex(@"[\s,\(\:](" + str + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
                    }
                    if (regSkillNot == null)
                    {

                        str = "Professional Synopsis|Education and Qualifications|P e r  s o n a l   D e t a i l s|I n t e r e s t s|Academic qualifications|Skill sets" +
                            "|Technical History|Technical Skills Set|Technical Skill Set|Skill Set|Skill Sets|Skills Set" +
                            "|Skills Sets|Key Skills:" +
                            "|software profile|computer literacy|software proficiency|AREA OF INTEREST|" +
                            "TECHNICAL PROFICIENCY|Extra Curricular Activities|Extra-Curricular Activities" +
                            "|EDUCATION AND DEVELOPMENT|Proficiency in Computers|computer knowledge" +
                            "|Educational Qualification|Educational Qualifications and Certifications" +
                            "|summary of qualifications|educational qualifications|software training" +
                            "|technical exposure|software exposure|computer skill|university subjects|entrance examination" +
                            "|q u a l i f i c a t i o n s|a c a d e m i c|e d u c a t i o n|computer skills" +
                            "|co-curricular activities|extra curriculars|personal details|annex" + //personal profile
                            "|personal detail|personal information|contact information|personal memorandam" +
                            "|interests|additional information|software skills|technical skills|technical skill" +
                            "|technical profile|software skill|declaration|skill set|computer proficiency" +
                            "|other skills|academic profile|additional details|ibm annex|education" +
                            "|qualification|professional qualification|contact details|fields of interest|references" +
                            "|hobbies|additional courses|academic|certification|extracurricular activities" +
                            "|personal biography|salary withdrawn|salary expeected|latest joining|Computer & IT Skills" +
                            "|Qualifications|Qualification|Personal details:|Education:|Computer Skills:" +
                            "|PROFESSIONAL INTERESTS|ACADAMIC RECORD|EDUCATIONAL CREDENTIALS|educational information" +
                            "|SPECIAL REMARKS:|MY POSITIVE:|Looking for a better position|MY STRENGTH/WEAKNESS|languages known|TECHNICAL  SKILL";
                        regSkillNot = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\s\)\}]?\b", RegexOptions.IgnoreCase);
                        regSkillNot1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\s\)\}]?$", RegexOptions.IgnoreCase);
                    }
                    if (regEducation == null)
                    {
                        str = "institute / university / board|academics:|scholastic|scholastic credentials|Highest degree|Institution/University|Exam Certification" +
                            "|scholastic records|scholastic information|graduation|scholastic record|education" +
                            "|e d u c a t i o n|a c a d e m i c   q u a l i f i c a t i o n s" +
                            "|q u a l i f i c a t i o n s|a c a d e m i c|qualification summary|academic " +
                            "|academia|acadamic|acadamic details|academic background|educational|professional qualification" +
                            "|academic qualification|qualification|qualifications|summary of qualifications|academics" +
                            "|academic profile|academic chronicle|highest degree held|Academies|SCHOLASTICS:|SCHOLASTICS" +
                            "|University/board|EducationYearCourseInstitute|COURSE OF STUDY|credentials:|ACADEMICAL PROFILE|acadameic profile|acadameic|A C A D E M I A|ACADAMICS|Academea"; //Masters in|Basters in|Bachelor of 

                        regEducation = new Regex(@"[\|\s,\(\:](" + str + @")[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                        regEducation1 = new Regex(@"[\|\s,\(\:](" + str + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
                    }
                    if (regPersonal == null)
                    {
                        str = "Personal Information|personal detail|Personal Dossier" +
                              "|personal details|personal particulars|personal data|personal facts|Personal Profile|PROFILE|PERSONAL MINUTIAE|Personal Vitae|Personal Snippets|P e r s o n a l   D e t a i l s|PERSONAL  DETAIL";
                        regPersonal = new Regex(@"[\|\s,\(\:](" + str + @")[:\s]?[:\-\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        //regEducation1 = new Regex(@"[\|\s,\(\:](" + str + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
                    }
                    if (regEducationNot == null)
                    {
                        str = "COMPUTER PROFICIENCIY|Sound knowledge of Windows|PROFIENCY IN COMPUTERS|EXTRA CURRICULAR AVTIVITIES" +
                            "|Employment|employee|employement|Relationship Management|Martial Status|married|single" +
                            "|Sound knowledge of Windows|COMPUTER PROFICIENCIY|FINAL SALARY|T r a i n i n g" +
                            "|C o m p u t e r   S k i l l s|E x p e r i e n c e|organisational experience|reward" +
                            "|reward & recognitions|others" +
                            "|sap training|quality initiatives|software knowledge|highlights of qualifications" +
                            "|family background|worked with|employment record|reference|worked as|education loan" +
                            "|software projects|software skills|areas of interest|outstanding academic background" +
                            "|pre-qualification experience|extra curricular activities|computer proficiancy" +
                            "|career history|professional experience|banking private sector|work exposure" +
                            "|professional experience|personal detail|personal details|employment history" +
                            "|professional practice|conducted by|introduction to cmmi|company profile|factories act" +
                            "|prefered location|past employment|expected salary|language known|software handled" +
                            "|computer literacy|platform|protocols|responsibilities|date of  birth" +
                            "|mother’s qualification|father’qualification|worked as a|extra curricular activities" +
                            "|programming proficiency|summary|date of birth|text resume|employment history" +
                            "|personal particulars|operating system|organisation experience|technical skills" +
                            "|technicalskills|computer skill|career objective|career objectives|job description" +
                            "|professional summary|computing skills|computer awareness|computer skills" +
                            "|industry experience|current employer|non-academic projects|references" +
                            "|software exposure|trainings|key skills|computer knowledge|skills|employment background" +
                            "|technical knowledge|area of interest|personal|academic project|academic  project|skill" +
                            "| awards|employment history|software competencies|extracurricular|title|client" +
                            "| description|role|team|duaration|work experience|languages|experience" +
                            "|computer proficiency|training|trainig|technical skills|technical skill|strengths|expertise:" +
                            "|expertice|work experience:|working experience|computer exposure|professional experience" +
                            "|key responsibilities|location preference|current location|address|relevant experience|Awards and Achievements" +
                            "|passport no|marital status|technical expertise|employers|it skills|manager administration|SkillSet|Seminars Attended|Professional Projects Undertaken|INTRA-CURRICULAR ACTIVITIES|EXTRA CURRICULAR ACHIVEMENT" +
                            "|work exp|work profile|gender|job profile|i am a|software proficiency and operating systems exposure|Proficiency|Technical Qualification|Recent Assignments" +
                            "|frontend|interests and activities|Academic Projects|projects|interests|Software Application|Academic Achievements" +
                            "|additional acheivements|professional experiences|experiences|Professional Growth|Education Pvt|Company Name:|Academic Project|academic websites" +
                            "|Occupations|WORK EXPERINCE|experience|professional experience|Professional experiene|proficiency in computers|Certifications|HOBBIES|PROFESSIONAL AFFILATION|EXTRA-CURRICULAR ACTIVITIES|ACADEMIC ACHIEVEMENTS/AWARDS" +
                            "|Overseas Assignments|Core Competencies|Career Milestones|IT knowledge|EXPIRIENCE|family history|PROFILE IN BRIEF|Technical Profile|Work History|ACADEMIC EXPERIENCE/PROJECTS" +
                            "|professional details|professional detail|job responsibilities|current project|technical detail|detail resume|technical summary|I.T. ACQUAINTANCE|TEACHING EXPERIENCE|Present Working Environment|(contract)|Worked in|operating systems|operating system";

                        regEducationNot = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                        regEducationNot1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    };
                    if (regPersonalNot == null)
                    {
                        str = "COMPUTER PROFICIENCIY|PROFIENCY IN COMPUTERS|EXTRA CURRICULAR AVTIVITIES" +
                            "|Employment|employee|employement" +
                            "|Sound knowledge of Windows|COMPUTER PROFICIENCIY|FINAL SALARY|T r a i n i n g" +
                            "|C o m p u t e r   S k i l l s|E x p e r i e n c e|organisational experience|reward" +
                            "|reward & recognitions|project" +
                            "|sap training|quality initiatives|software knowledge|oracle|highlights of qualifications" +
                            "|worked with|employment record|reference|worked as" +
                            "|software projects|software skills|areas of interest|outstanding academic background" +
                            "|pre-qualification experience|extra curricular activities|computer proficiancy" +
                            "|career history|professional experience|banking private sector|work exposure" +
                            "|professional experience|employment history" +
                            "|professional practice|conducted by|company profile|factories act" +
                            "|past employment|expected salary|software handled" +
                            "|computer literacy|platform|protocols|responsibilities" +
                            "|worked as a|extra curricular activities" +
                            "|programming proficiency|summary|text resume|employment history" +
                            "|operating system|organisation experience|technical skills" +
                            "|technicalskills|computer skill|career objective|career objectives|job description" +
                            "|professional summary|computing skills|computer awareness|computer skills" +
                            "|industry experience|current employer|non-academic projects" +
                            "|software exposure|trainings|key skills|computer knowledge|skills|employment background" +
                            "|technical knowledge|area of interest |academic project|academic  project" +
                            "| awards|employment history|software competencies|extracurricular|project" +
                            "| description|role|team|duaration|work experience|experience" +
                            "|computer proficiency|training|trainig|technical skills|technical skill|strengths|expertise:" +
                            "|expertice|work experience:|working experience|computer exposure|professional experience" +
                            "|key responsibilities|location preference|current location" +
                            "|technical expertise|employers|it skills|manager administration" +
                            "|work exp|work profile|i am a|software proficiency and operating systems exposure" +
                            "|frontend|interests and activities|Academic Projects|projects|interests|Software Application" +
                            "|additional acheivements|professional experiences|experiences|Professional Growth" +
                            "|Occupations|WORK EXPERINCE|experience|professional experience|proficiency in computers" +
                            "|Overseas Assignments|Core Competencies|Career Milestones|IT knowledge|EXPIRIENCE" +
                            "|professional details|professional detail|job responsibilities|current project|technical detail|detail resume|technical summary";

                        regPersonalNot = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regPersonalNot = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    };
                    //regPersonalNot
                    if (regLocationNot == null)
                    {
                        str = "international|experience|summary|email|resi|res|(res)|@|+|e-mail|contact|current ctc" +
                            "|curriculum|vitae|expected ctc|ph:|ph  :|ph.|tel no|tel|location|languages known|bio" +
                            "|telephone|mob|phone|gender|sex|date|work|passport|place|contact no|(m)|(r)|number|d.o.b:" +
                            "|d.o.b|dob:|mail-id|mail|+91|voice|text|mailing|dob|by|(91)|Ph No|introduction" +
                            "|organization|name|details|Home|Contact Phone numbers|Personal Email|Address Line 1|Address Line 2|Address Line 3|gender|sex|graduate|management|years|Mobile|with in|industry|lliance Data";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regLocationNot = new Regex(@"[\|\s,\{\(:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regLocationNot1 = new Regex(@"[\|\s,\{\(:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    }
                    if (regLocation == null)
                    {
                        str = "residence address|perm add:|current address|present address|residential address|address" +
                            "|correspondence address|temporary address|permanent residence address|permanent address" +
                            "|local address|address for communication|residency address|communication address" +
                            "|contact address|contact address:|mailing address|contact details|Permanent/Current address";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regLocation = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regLocation1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                        regLocationAlpha = new Regex(@"[\|\s,\{\(:]\w\)[\s]?(" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regLocationAlpha1 = new Regex(@"[\|\s,\{\(:]\w\)[\s]?(" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    }
                    if (regParmenant == null)
                    {
                        str = "residence address|perm add:|residential address|address" +
                            "|permanent residence address|permanent address|Permanent Address" +
                            "|residency address|Permanent/Current address|permenant address|permenant adress|permenant addres|Provincial Address";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regParmenant = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);

                    }
                    if (regLocationRm == null)
                    {
                        str = ":|7)|communication|address|for|communication|current|accessible on|curriculum|vitae" +
                            "|temporary|residential|(r)|photo|personal details|carrer objective|references|résume" +
                            "|permanent|contact|mob|current location|present|for|residence|email|e- mail|(0)|(o)|(080)|ph.";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regLocationRm = new Regex(@"(" + str + @")", RegexOptions.IgnoreCase);
                    }
                    if (regLocationBr == null)
                    {
                        str = @"contact number|phone|Mob. No|addressing|synopsis|career objective|employment history|summary|professional experience" +
                            "|technical summary|professional profile|proficiency|tel (home):|marital status" +
                            "|scholastic records|scholastic information|graduation|scholastic record|education" +
                            "|e d u c a t i o n|a c a d e m i c   q u a l i f i c a t i o n s|q u a l i f i c a t i o n s" +
                            "|a c a d e m i c|qualification summary|academic|academia|acadamic|acadamic details" +
                            "|academic background|educational|professional qualification|academic qualification" +
                            "|qualification|qualifications|summary of qualifications|academics|academic profile" +
                            "|academic chronicle|highest degree held|education|referrence|signature|nationality" +
                            "|experience|hobbies|married|single|unmarried|technical skill|technical skills" +
                            "|designer|declaration|i declared|note|references|i hereby|website|objective" +
                            "|history|key skill|about me|key skills|overview|over|skills" +
                            "|profile|i have|a manager|the person|work experience|authorization|authorisation" +
                            "|carrer objective|carreer|EXPECTATIONS|qualification|Formal Education|scholastic|Education|extra curricular activities|extra curricular activities:" +
                            "|P R O F E S S I O N A L     E X P E R I E N C E|p r o f e s s i o n a l|functional|magagerial|expertise in|Email|Phone|Nationality|Phone No|Date of Birth|Languages|Gender|E-mail|PROFILE|Address Line 2|Address Line 3|Address Line 1|Personal Information|-|E-mail:|e mail|career objectives|E Mail|cell phone|birthday|birth day|birthplace|Birthdate|birth date" +
                            "|tel|idnextel|finance|business|analisys|project|achivement|financial|background|profile|email id.|alternate email id|passport number|passport no|dob|d.o.b|career highlights|please|annexure|project details|e mail id|career profile|gender|sex|graduate|management|years|Mobile";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regLocationBr = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regLocationBr1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                        regLocationAlphaBr = new Regex(@"[\|\s,\{\(:]\w\)[\s]?(" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regLocationAlphaBr1 = new Regex(@"[\|\s,\{\(:]\w\)[\s]?(" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    }

                    if (regLocNot1 == null)
                    {
                        str = @"contact number|phone|Mob. No|addressing|synopsis|career objective|employment history|summary|professional experience" +
                            "|technical summary|professional profile|proficiency|tel (home):|marital status" +
                            "|scholastic records|scholastic information|graduation|scholastic record|education" +
                            "|e d u c a t i o n|a c a d e m i c   q u a l i f i c a t i o n s|q u a l i f i c a t i o n s" +
                            "|a c a d e m i c|qualification summary|academic|academia|acadamic|acadamic details" +
                            "|academic background|educational|professional qualification|academic qualification" +
                            "|qualification|qualifications|summary of qualifications|academics|academic profile" +
                            "|academic chronicle|highest degree held|education|referrence|signature|nationality" +
                            "|experience|hobbies|married|single|unmarried|technical skill|technical skills" +
                            "|designer|declaration|i declared|note|references|i hereby|website|objective" +
                            "|history|key skill|about me|key skills|overview|over|skills|seeking" +
                            "|profile|i have|a manager|the person|work experience|authorization|authorisation" +
                            "|carrer objective|carreer|EXPECTATIONS|qualification|Formal Education|scholastic|Education|extra curricular activities|extra curricular activities" +
                            "|P R O F E S S I O N A L     E X P E R I E N C E|p r o f e s s i o n a l|functional|magagerial|expertise in|Mobile|Nationality|Phone No|Date of Birth|Languages|Gender|PROFILE|Address Line 2|Address Line 3|Address Line 1|Personal Information|career objectives|cell phone|birthday|birth day|birthplace|Birthdate|birth date" +
                            "|tel|idnextel|finance|business|analisys|project|achivement|financial|background|profile|passport number|passport no|dob|d.o.b|career highlights|please|annexure|project details|career profile";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regLocNot1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regLocNot1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                        //regLocationAlphaBr = new Regex(@"[\|\s,\{\(:]\w\)[\s]?(" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        //regLocationAlphaBr1 = new Regex(@"[\|\s,\{\(:]\w\)[\s]?(" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    }
                    if (regExNameNot == null)
                    {
                        str = "TOWNSHIP|QUALIFICATIONS|my cv|regards|permanent|landline|mibile :|biodata|dear|i feel|thanks|regards" +
                            "|function|functional|s u m m a r y|manager|department|period|last drawn salary:" +
                            "|organization|designation|employment|record|contact|contact details|nagar|dist.|west" +
                            "|in pursuit of|career goal|job description|location:|executive|electronics|pvt. ltd" +
                            "|personal particulars|contact details|curriculum|curriculum - vitae|ph. no.|resume" +
                            "|brief summary|career objecive|application|applicant|programmer|contact information" +
                            "|résumé of|résumé|fresher|add notes to resume|resume id|(no notes)|log out|also include resume summary" +
                            "|contact information|curriculum-viate|curriculam viate|curriculam|viate|p e r s o n a l    d e t a i l s" +
                            "|c u r r i c u l u m|v i t a e|curriculum|c u r r i c u l u m    v i t a e|yes|passport" +
                            "|address|curriculum vitae’|personnel information:|curriculam vitae|Résumé|resume summary" +
                            "|curriculum vitae|bio data|curiculam|vitae|college|hostel|next to|home|talent mall" +
                            "|career advice|rate card|upload your resume free|yogeshwara apartments|apartments|present" +
                            "|location|r e s u m e|thro|association|profile|willing to relocate|nivas|resi|tel|cell|Add|Comments" +
                            "|curiculam vitae|home|about us|contact us|contact no|mob|nagar|gender|nationality|marital status|work experience|software test engineer" +
                            "|. net professional summary|self profile|self-profile|personal details|training|education" +
                            "|skills|curri|offered|personal|r  e  s  u  m  e|no|referr|reffered|resume|résumé|resumé" +
                            "|résume|curriculam|curriculum|curicullam|curicullum|ctc|etc|e mail|email|e-mail|@|ph:|mob" +
                            "|mobile|experience summary|objective|notice period|escalation|contact info|vitae" +
                            "|monster profile|naukri profile|timesjobs profile|the person|flat|offered|ibm|personal" +
                            "|nationality|passport number|joining|i am|more about|i need|objective|layout|from|post" +
                            "|office|consultant|consulting|personal|managaement|experience|negotiable|expected|current" +
                            "|road|flat|society|sector|street|stage|cross|main|section|date|phone|of|birth" +
                            "|joining period|mail id|contribution|Interview Status|preserve|Good Exposure|thread|Class|Methods|Singleton|Application" +
                            "|confidential|objective|career profile|professional summary|summary|related|profile|Marital Status|Language|Passport Number|Current location" +
                            "|CURRICULUMVITAE|Engineer|CONCISE RESUME|Contect Info|Currently Working With|curriculumvitae|professional|object|Line 1|Line 2|Line 3|program|director|envelopeback|Generation|and more|Process Improvement|fluent|Communication|tounge|Phase|City";
                        strArrNameNot = str.Split('|');
                        str = str.Replace(".", @"\.");
                        regExNameNot = new Regex(@"[\s,\(\:](" + str + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
                        regExNameNot1 = new Regex(@"[\s,\(\:](" + str + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);

                    }
                    if (strArrNameBk == null)
                    {
                        str = "general|general information|general information:|(Contact details provided on request)" +
                            "|(contact details available on request)|(contact details will be provided on request)" +
                            "|contacts:|contact address:|experience|career objecive|Resume Summary|Resume Title" +
                            "|application developer|Email:|Telephone:|CONTACT INFORMATION|Moved to Airtel|job title" +
                            "|experience summary|title" +
                            "|_|authorisation letter|educational qualification|employment history|job profile" +
                            "|work profile|Ref:|sex|Languages Known|Applicant's|Address for Communication|profile of|Email Id|S I G N A T U R E|Resume -|Born on|Birth Date|Birth :|d. o. b|d o b|d  o  b|date and place of birth:|date and place of birth|date and country of birth|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|date of birth/age|date of birthage|b\\'date|b’date|date  of  birth|date of birth|date ofbirth|dob|date & place of birth|d.o.b|date of birth|date-of-birth|date   of   birth|BORN:|E.CTC:|Address to Correspond";
                        if (FCommon.NameIncludeList.Length < 10)
                            strArrNameBk = str.Split('|');
                        else
                        {
                            str = str + FCommon.NameIncludeList;
                            str = str.Replace("||", "|");
                            str = str.Replace("||", "|");
                            strArrNameBk = str.Split('|');
                        }
                    }
                    if (regPassport == null)
                    {
                        str = "meridian11c|e-mail|@|emailid|resumé|résume|résumé|hobbies|father's|present address" +
                            "|address|marital status|ex-ibmer";
                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regPassport = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regPassport1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);

                        str = "e-mail|email|mail-id|mail id|e mail|@";
                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regEmail = new Regex(@"(" + str + @")", RegexOptions.IgnoreCase);
                        str = "reference|REFERENCES|CHARACTER REFERENCES|character and work references|:¢referance:|professional & personal references:|# two professional references|PROFESSIONAL REFERENCES";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regEmailBk = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?\b", RegexOptions.IgnoreCase);
                        regEmailBk1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);

                        str = "e-mail –|phone|(m)|(r)|phone-|mob|mobile|(mobile)|(cell)|cell|(cellular)|cellular|ph-|ph.|(office)|home|(home)|office|address|*: mailto|email id|emailid|email-id|mail-id|mail id|e mail|e-mail| emails|email: -| email |e mail|:|contact|email|phone:|contact details";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                        regEmailRm = new Regex(@"(" + str + @")", RegexOptions.IgnoreCase);
                        str = "working as a|worked as a|contact address:|university|education|telemarketing|representative|presently working|resume|passport|bank home loans|resource|resourceful|responsibility|responsible|response|responsive|responsibly|resume|residency|resumé|reservation|reservations|broadband|certificate id";

                        str = str.Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+");
                        regPhoneNot = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                        regPhoneNot1 = new Regex(@"[\|\s,\{\(\:](" + str + @")[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);

                        //tCategory = "EXPERIENCE|career history|working experience|work history|work history:|job profile" +
                        //    "|job profile:|job specification|currently employed|relevant work experience|role" +
                        //    "|job specification:|currently employed:|relevant work experience:|role:" +
                        //    "|employment record|employment history|employment summary|roles &responsibilities" +
                        //    "|employment record:|employment history:|employment summary:|roles &responsibilities:" +
                        //    "|experience|professional experience|work experience:|work experience" +
                        //    "|experience:|professional experience:|Position |Apply / Applied for|Applied for|Post Apply for|Professional Experience|Role as|Presently Working as|Engaged as" +
                        //    "|organizational experience|organisational experience|professional synopsis|work experince" +
                        //    "|organizational experience:|organisational experience:|professional synopsis:" +
                        //    "|currently designated|professional experience|PROFFESSIONAL EXPERIENCE:|cross industry experience" +
                        //    "|presently working for|professional work experience|career profile|professional brief" +
                        //    @"|work history|u  work history|details of professional experience|job definition|Period of Employment:[\s](" + month + @")[\s]\d{1,2}[,][\s]\d{4}–[\s]Present" +
                        //    "|currently functioning|career progression|Current Profession|Current Profession:|current role:" +
                        //    "|career snapshots|corporate experience:|corporate experience|performance highlights|corporate work experience|current responsibilities:|current responsibilities" +
                        //    "|current work profile|presently working|career highlights|current employement:|current employement|current employment:|current employment|EMPLOYMENT EXPERIENCE|EMPLOYMENT EXPERIENCES|Employement experience|Employement experiences" +
                        //    "|P r o f e s s i o n a l   e x p e r i e n c e|P r o f e s s i o n a l  e x p e r i e n c e|CARRIER PROFILE|Details of work experience|total work experience";
                        //regexCategory = new Regex(@"[\|\{\s,\(\:](" + tCategory + @")[:\s]?[\}:\-\s]?\b", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                        //regexCategory1 = new Regex(@"[\|\{\s,\(\:](" + tCategory + @")[:\s]?[\}:\-\s]?$", System.Text.RegularExpressions.RegexOptions.IgnoreCase);


                        //tCategorybr = "certification:|certification|achievements:|achievements|seeking|seeks a challenging" +
                        //    "|successful, experienced|a challenging position as|education|experienced people" +
                        //    "|experienced  people|looking forward|objective:|worked as|career objective:-|career objective:|career objective|to obtain a challenging|reporting to";
                        //regexCategoryBr = new System.Text.RegularExpressions.Regex(@"[\|\{\s,\(\:](" + tCategorybr + @")[:\s]?[\}:\-\s]?\b", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                        //regexCategoryBr1 = new System.Text.RegularExpressions.Regex(@"[\|\{\s,\(\:](" + tCategorybr + @")[:\s]?[\}:\-\s]?$", System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                        mon = "(jan|feb|mar|apr|may|jun|jul|aug|sept|sep|oct|nov|dec|june|July)";
                        month = "(January|February|March|April|May|June|July|August|September|October|November|December)";
                        str = "PG Diploma|Post Graduate Diploma|Post-Graduate Diploma";
                        EduIncludeList = str.Split('|');
                        //str = "Diploma";
                        //EduExcludeList = str.Split('|');
                        tPatternEducationYear = mon + @"[\s]?\d{4}[\s]?to[\s]?" + mon + @"[\s]?\d{4}" +
                            // @"|" + mon + @"[\s\.`‘'’]?[\s]?\d{2}[\s\.`‘'’]?[\s]?\d{4}" + // Dec. 20, 1985
                            @"|" + mon + @"[\s]?\d{4}[\s]?to[\s]?" + month + @"[\s]?\d{4}" +
                            @"|" + month + @"[\s]?\d{4}[\s]?to[\s]?" + mon + @"[\s]?\d{4}" +
                            @"|" + month + @"[\s]?\d{4}[\s]?to[\s]?" + month + @"[\s]?\d{4}" +
                            @"|" + mon + @"[\s]?\d{4}[\s]?[-–-][\s]?" + mon + @"[\s]?\d{4}" +
                            @"|" + mon + @"[\s]?\d{4}[\s]?[-–-][\s]?" + month + @"[\s]?\d{4}" +
                            @"|" + month + @"[\s]?\d{4}[\s]?[-–-][\s]?" + mon + @"[\s]?\d{4}" +
                            @"|" + month + @"[\s]?\d{4}[\s]?[-–-][\s]?" + month + @"[\s]?\d{4}" +
                            @"|" + month + @"[\s]?\d{4}[\s]?to[\s]?" + month + @"[\s]?\d{4}" +
                            @"|" + month + @"[\s]?\d{4}[\s]?to[\s]?" + mon + @"[\s]?\d{4}" +
                            @"|" + mon + @"[\s]?\d{4}[\s]?to[\s]?" + month + @"[\s]?\d{4}" +
                            @"|" + mon + @"[\s]?\d{4}[\s]?to[\s]?" + mon + @"[\s]?\d{4}" +
                            @"|" + mon + @"[\s][\s][`‘'’]\d{4}[\s]?to[\s][\s]" + month + @"[\s][\s][`‘'’]\d{4}" +
                            @"|" + mon + @"[\s][\s][`‘'’]\d{4}[\s]?to[\s][\s]" + mon + @"[\s][\s][`‘'’]\d{4}" +
                            @"|" + month + @"[\s][\s][`‘'’]\d{4}[\s]?to[\s][\s]" + month + @"[\s][\s][`‘'’]\d{4}" +
                            @"|" + month + @"[\s][\s][`‘'’]\d{4}[\s]?to[\s][\s]" + mon + @"[\s][\s][`‘'’]\d{4}" +
                            @"|" + mon + @"[\s\.]?\d{4}[–\s-]?[\s]?" + mon + @"[\s]?\d{4}" +
                            @"|" + mon + @"[\s\.]?\d{4}[–\s-]?[\s]?" + month + @"[\s]?\d{4}" +
                            @"|" + mon + @"[\s\.`‘'’]?[\s]?\d{4}[\s]?[-–-–]" + mon + @"[\s\.`‘'’]?[\s]?\d{4}" +//Oct’1996-May’2000
                            "|" + month + @"[\s\.`‘'’]?[\s]?\d{4}[\s]?[-–-–]" + month + @"[\s\.`‘'’]?[\s]?\d{4}" +
                            @"|d{4}[\s]?to[\s]?" + mon + @"[\s]?\d{4}" +
                            @"|d{4}[\s]?to[\s]?" + month + @"[\s]?\d{4}" +
                            @"|d{4}[–\s-]?[\s]?" + mon + @"[\s]?\d{4}" +
                            @"|d{4}[–\s-]?[\s]?" + month + @"[\s]?\d{4}" +

                            "|" + mon + @"[\s\.`‘'’]?[\s]?\d{4}[\s]?[-–][\s]?" + mon + @"[\s\.`‘'’]?[\s]?\d{4}" +  //Sep. 1997 – June 2004  

                            "|" + mon + @"[\s\.`‘'’]?[\s]?\d{4}[\s]?[-–][\s]?\d{2}" +
                            "|" + month + @"[\s\.`‘'’]?[\s]?\d{4}[\s]?[-–][\s]?\d{2}" +
                             @"|" + mon + @"[\s\.`‘'’]?[\s]?\d{4}" +
                            @"|" + month + @"[\s\.`‘'’]?[\s]?\d{4}" +
                            @"|\d{4}[\s]?to[\s]?\d{4}" +
                            @"|\d{2}[\s]?[--–~][\s]?\d{4}[\s]?[--–~][\s]?\d{2}[\s]?[--–~][\s]?\d{4}" + //08/2007 – 06/2008
                            @"|\d{2}[\s]?[--–~][\s]?\d{4}" +
                            @"|\d{4}[\s]?[--–~][\s]?\d{4}|\d{4}[\s]?[-–~][\s]?\d{2}" +
                            @"|\d{4}[\s]?[--–~][\s‘’]?\d{2}|\d{4}[\s]?[--~][\s]?\d{2}[^%]" +
                            @"|\d{4}|Presently pursing" +
                            @"|Presently pursuing|Pursuing|\(Pursuing\)|pursuing|Pursing|awaiting|Undergoing|undergoing|appearing for" +
                            @"|Appearing for|presently enrolled|Doing|doing|Under progress|under progress" +
                            @"|Presently enrolled" +
                            @"|" + mon + @"[\s]?\d{2}[\s]?[--–][\s]?" + mon + @"[\s]?\d{2}" +
                            @"|\b(0\d|1[012]|[1-9])(?:[0-9]{2})\s?[\.\/]\s?\s[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(0\d|1[012]|[1-9])\s?[\.\/]\s?(?:[0-9]{2})\s{0,3}\b" +
                            //@"|" + mon + @"[\s\.`‘'’]?[\s]?\d{2}" +
                            @"|" + month + @"[\s\.`‘'’]?[\s]?\d{2}" + // Issue in ---  Sep. 1997 – June 2004
                            @"|(\\d+){1,2}(\\s+)(Year)" +
                            @"|(\\d+){1,2}(\\s+)(Years)" +

                            //@"|\d{2}?[\w]\d{2}[\s]?[--][\s]?d{2}?[\w]\d{2}" + //01/94 - 06/97   06/00 - 10/01
                           @"|(\\d+){1,2}(\\/)(\\d+){1,2}(\\s+)(-)(\\s+)(\\d+){1,2}(\\/)(\\d+){1,2}" +
                           @"|\d{2}[\s]?[--][\s]?\d{2}[\s]?[^%]|\w{3,9}[\s]?[`‘'’]\d{2}";//

                        //@"|(\\d{2})(\\/)(\\d{2})(\\s+)(\\-)(\\s+)(\\d{2})(\\/)(\\d{2})" +  //01/94 - 06/97   06/00 - 10/01   //08/2007 – 06/2008
                        //end 
                        string tPresentEmployerTop = @"presently working with|presently working in|currently working in" +
                                              "|current employer|presently working at|Present employer" +
                                              "|presently employer|Current organisation|Current organisation:" +
                                              "|present organization:|currently associate with|currently associated with" +
                                              "|presently associate with|presently associated with|employer:" +
                                              "|present job|present employment:|presently working|currently working for" +
                                              "|Presently working for|company :|company:|current working in:" +
                                              "|current working in :|company name:|current status:|currently working with" +
                                              "|current professional profile|currently working :|Current Organization:|current experience:" +
                                              "|current assignment|WORK EXPOSURE :Presently with|at present working with|present company|Currently, I am working with|current job|currently designated as" +
                                              @"|currently working as a (\w{3,25}\s){1,3}with" +
                                              @"|currently working as (\w{3,25}\s){1,3}in" +
                                              @"|currently working as an\s(\w{3,25}\s){1,3}for" +
                                              "|currently working at" +
                                              @"|working as\s(\w{2,25}\s){1,3}at|working as a\s(\w{2,25}\s){1,3}at|working as an\s(\w{2,25}\s){1,3}at" +
                                              @"|currently working as\s(\w{2,25}\s){1,3}at|currently working as a\s(\w{2,25}\s){1,3}at|currently working as an\s(\w{2,25}\s){1,3}at" +
                                              @"|working as an\s(\w{2,25}\s){1,3}for" +
                                              @"|working as a\s(\w{2,25}\s){1,3}in" +
                                              @"|working as\s(\w{2,25}\s){1,3}in" +
                                              @"|working as\s(\w{2,25}\s){1,3}[\s]?with" +
                                              @"|working as a\s(\w{2,25}\s){1,3}[\s]?with|PRESENT - Employments Details/ Projects Handled:" +
                                              @"|\d\) Organization|Currently I am working for|Currently employed as a|current job profile|currently  working at" +
                                              @"|from " + mon + @"[\s]?\d{4}[\s]?till date[,\s]|from " + month + @"[\s]?\d{4}[\s]?till date[,\s]" +
                                              @"|" + mon + @"[’]\d{2}[\s]?[-][\s]?Current date working as|" + month + @"[’]\d{2}[\s]?[-][\s]?Current date working as" +
                                              "|present experience:|present experience :|Comp Name :|Comp Name:" +
                                              @"|\d{2}/\d{4} - Till Date|" + mon + @"[\s]?\d{2}(st|nd|rd|th)[,]?[\s]?\d{4}[\s]?till date|" + month + @"[\s]?\d{2}(st|nd|rd|th)[,]?[\s]?\d{4}[\s]?till date" +
                                              "|" + mon + @"[’]?[\s]?\d{4} till date[\s]?[:]?|" + month + @"[’]?[\s]?\d{4} till date[\s]?[:]?" +
                                              "|" + mon + @"[\s]?\d{4} to till date|" + month + @"[\s]?\d{4} to till date" +
                                              "|" + mon + @"[\s]?[‘']\d{2} to date|" + month + @"[\s]?[‘']\d{2} to date" +
                                              "|" + mon + @"[\s]\d{4}[\s]?[\s]?[-][\s]?till date|" + month + @"[\s]\d{4}[\s]?[\s]?[-][\s]?till date" +
                                              @"|\d{4}[\s]?to date|\d{4}[\s]?[-][\s]?till date|\d{4} to   till date|\d{2}\/\d{2}\/\d{2,4} Till Date|\d{2}(st|nd|rd|th)[\s]?" + mon + @"[\s]?\d{4}[\s]?[-]?[\s]?till date|\d{2}(st|nd|rd|th)[\s]?" + month + @"[\s]?\d{4}[\s]?[-]?[\s]?till date" +
                                              @"|since[\s]\d{2,4} associating with" +
                                              @"|since[\s]" + mon + @"[\s'-]\d{2,4}|since[\s]" + month + @"[\s'-]\d{2,4}|" + mon + @"[\s]?\d{4} – Till Date|" + month + @"[\s]?\d{4} – Till Date|" + mon + @"[\s]?\d{2} – Till Date|" + month + @"[\s]?\d{2} – Till Date" +
                                               @"|" + mon + @"[’]\d{2} till date|" + month + @"[’]\d{2} till date|1\. Organization :|1\. Organization" +
                                              "|" + mon + @"[’]\d{2} to till date|" + month + @"[’]\d{2} to till date|" + mon + @"[’]\d{4} to till date|" + month + @"[’]\d{4} to till date" +
                                              "|" + mon + @"[’]\d{4} till date|" + month + @"[’]\d{4} till date|\(\d{2}\/\d{4}-Present\)|Presently heading a|1\.Period\d{2}/\d{2} to date|\(  " + month + @" \d{4}  till date\)" +
                                              @"|\(  " + mon + @" \d{4}  till date\)|" + mon + @"[\.] \d{3} till date|" + mon + @" \d{4} till date|" + month + @"[\.] \d{3} till date|" + month + @" \d{4} till date" +
                                              @"|\(current\)|\d{4} - Present|" + month + @" [']\d{2} – Till Date|" + month + @" [']\d{2} – Till Date|\d{1}[\.]Working as a" +
                                              @"|\(" + mon + @"[']\d{2} till date\)|\(" + month + @"[']\d{2} till date\)|\(From " + mon + @" \d{4} till date\)|\(From " + month + @" \d{4} till date\)" +
                                              @"|\(From " + mon + @" \d{2} till date\)|\(From " + month + @" \d{2} till date\)|From " + mon + @" \d{4} till date|From " + month + @" \d{4} till date" +
                                              @"|From " + month + @" \d{2} till date|From " + mon + @" \d{2} till date|Currently employed with|Professional Experience \(Most Recent First\)|\d{4} --- Till date";
                        exPresentEmployerIN = new Regex(@"[\s,\{“‘\(\.](" + tPresentEmployerTop + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                        exPresentEmployerIN1 = new Regex(@"[\s,\{“‘\(\.](" + tPresentEmployerTop + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);

                    }
                }
                catch
                {

                }
                #endregion
            }
            catch { }
        }

        private void opCallFirstthread()
        {
            try
            {
                //if (HireCraft.FCommon.bS_ParseDesignationField == true) // parse if System configu "Parse Designation is true"
                {
                    GetJobTitle();
                    //if (FCommon.SC_LoadDesignationbasedonFunction == true)
                    //{
                    //    if (!opExistsDesignation())
                    //    {
                    //        JobTitleID = "0";
                    //        JobTitle = "";
                    //    }
                    //}
                }
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetPresentEmployer" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Present Employer
            try
            {
                strPastOrgn = null; strDateOrgn = null; PresentEmployer = ""; strPastDesignation = null;

                this.opGetPresentEmployer();
            }
            catch { }
        }

        private void opCallSecondThread()
        {
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetSkillText" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //fetching the Experienced Text From the DataLine
            try
            {
                opGetSkillText();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetSubFunctionalAReaHitCount" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetching Functional area && Sub Functional area
            try
            {
                //if (FCommon.SC_DontParseFunctionSubFunction == false)
                {
                    opGetSubFunctionalAReaHitCount();
                    if (FunctionalAreaID.Split(',').Length <= 2)
                        opGetFunctionAreaNotMappedSubFunction();
                }
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetSkillIdBasedonSubFunction" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            try
            {
                //Storig the SkillList Array from FCommon Xml
                opGetSkillwithSubFunctionalID();
                //Finding the SkillIDs from Experience Skill Text
                if (SkillList != null && sbSkill != null && sbSkill.Length > 0)
                //if (SkillList != null)
                {
                    GetSkillIdBasedonSubFunction(SkillList);
                }
            }
            catch { }
        }

        private void opCallThirdThread()
        {

            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "getIndustryType" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetching IndustryTypeID and Industry Type Title
            try
            {
                getIndustryType();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetGender" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetching the Gender of Candidate
            try
            {
                this.GetGender();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetPassport" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch the Candidate Passport
            try
            {
                this.GetPassport();
            }
            catch { }

            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetExperience" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch the Work Experience
            try
            {
                this.GetExperience();
            }
            catch { }
        }
        private void opCallFourthThread()
        {


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetCurrentLocation" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch the Current Location of Candidate
            try
            {
                StateID = "0"; CountryID = "0";
                this.GetCurrentLocation();
                if (LocationsIDs.Trim() != "0" && LocationsIDs != "")
                {
                    StateID = HireCraft.FCommon.opGetTitlefromXml(ref FCommon.objfXMLResumeLocations, LocationsIDs, "StateID");
                    CountryID = HireCraft.FCommon.opGetTitlefromXml(ref FCommon.objfXMLStateList, StateID, "CountryID"); ;
                }
                if (StateID == "") StateID = "0";
                if (CountryID == "") CountryID = "0";
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetNationality" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Nationality
            try
            {
                opGetNationality();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "PresentSalary" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Presnet Salary
            try
            {
                //if (FCommon.SC_ResumeParseCTCDetails == false)
                //{
                this.PresentSalary();

                //}
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "ExpectedSalary" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Expected Salary
            try
            {
                //if (FCommon.SC_ResumeParseCTCDetails == false)
                //{
                this.ExpectedSalary();
                //}
                //this.ExpSalary();
            }
            catch { }

        }
        private void opCallFifthThread()
        {

            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetDOB" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Get the DOB of Candidate
            try
            {
                this.GetDOB();
            }
            catch { }

            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetEducation123" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Education && Year of completion
            try
            {
                GetEducation123();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetTotalExperience" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Total Experiece
            try
            {
                this.GetTotalExperience();
            }
            catch { }

        }

        private void opCallSixThread()
        {
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetEmail" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Candidate Email
            try
            {
                this.GetEmail();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetContact" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Candidate Phone & Mobile
            try
            {
                this.GetContact();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetNoticePeriod" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            ///Fetch Notice Period
            try
            {
                this.opGetNoticePeriod();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetName" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            ///Fetch Name of Candidate
            try
            {
                this.GetName();
            }
            catch { }
        }
        private void opCallSevenThread()
        {
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetCandidateAddress" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Fetch Candidate Present And Permanent Address
            try
            {
                opGetCandidateAddress();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "GetPinCode" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Get Pin Code
            try
            {
                this.GetPinCode();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetLanguage" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Get Language
            try
            {
                opGetLanguage();
            }
            catch { }

        }
        private void opCallEightThread()
        {

            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "opGetPassPortAndPanDetails" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Get Pan Card number ,NSR Number ,Passport Issue Date,Passport Expiry Date ,Passport Issuing Place
            try
            {
                opGetPassPortAndPanDetails();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "getMaritalStatus" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            //Get Marital Status
            try
            {
                getMaritalStatus();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "getVisaTypeANDNumber" + System.Environment.NewLine);
            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss tt") + System.Environment.NewLine);
            try
            {
                getVisaTypeANDNumber();
            }
            catch { }
            try
            {
                opParseReferenceDetails();
            }
            catch { }


            //System.IO.File.AppendAllText(System.IO.Path.GetTempPath() + "Log.txt", "Last" + System.Environment.NewLine);
        }
        /// <summary>
        /// Calling 
        /// 
        /// the Methods
        /// </summary>
        /// 


        private void GeneralFormat()
        {
           // opLoadCommonMasterXML();
            //Filling the Business Parsameter into the array if array is empty 
            LoadWordsToSearchClient();
            Task TaskA = Task.Factory.StartNew(() => opCallFirstthread());
            Task TaskB = Task.Factory.StartNew(() => opCallSecondThread());
            Task TaskC = Task.Factory.StartNew(() => opCallThirdThread());
            Task TaskD = Task.Factory.StartNew(() => opCallFourthThread());
            Task TaskE = Task.Factory.StartNew(() => opCallFifthThread());
            Task TaskF = Task.Factory.StartNew(() => opCallSixThread());
            Task TaskG = Task.Factory.StartNew(() => opCallSevenThread());
            Task TaskH = Task.Factory.StartNew(() => opCallEightThread());
            Task.WaitAll(TaskA, TaskB, TaskC, TaskD, TaskE, TaskF, TaskG, TaskH);
     
            //System.Threading.Thread childThread = new System.Threading.Thread(new System.Threading.ThreadStart(opCallFirstthread));
            //childThread.Start();

            //System.Threading.Thread childThreadSecond = new System.Threading.Thread(new System.Threading.ThreadStart(opCallSecondThread));
            //childThreadSecond.Start();

            //System.Threading.Thread childThreadThird = new System.Threading.Thread(new System.Threading.ThreadStart(opCallThirdThread));
            //childThreadThird.Start();

            //System.Threading.Thread childThreadFourth = new System.Threading.Thread(new System.Threading.ThreadStart(opCallFourthThread));
            //childThreadFourth.Start();
            //System.Threading.Thread childThreadFifth = new System.Threading.Thread(new System.Threading.ThreadStart(opCallFifthThread));
            //childThreadFifth.Start();

            //System.Threading.Thread childThreadSixth = new System.Threading.Thread(new System.Threading.ThreadStart(opCallSixThread));
            //childThreadSixth.Start();

            //System.Threading.Thread childThreadSeven = new System.Threading.Thread(new System.Threading.ThreadStart(opCallSevenThread));
            //childThreadSeven.Start();

            //System.Threading.Thread childThreadEight = new System.Threading.Thread(new System.Threading.ThreadStart(opCallEightThread));
            //childThreadEight.Start();
            //try
            //{
            //    while (childThreadFourth.IsAlive || childThread.IsAlive || childThreadSecond.IsAlive || childThreadThird.IsAlive || childThreadFifth.IsAlive || childThreadSixth.IsAlive || childThreadSeven.IsAlive || childThreadEight.IsAlive)
            //    {
            //        System.Threading.Thread.Sleep(75);
            //    }

            //}
            //catch { }


            if (!string.IsNullOrEmpty(phone) && !string.IsNullOrEmpty(tPanNo))
            {
                try
                {
                    phone = phone.Replace(opGetNumberOnly(tPanNo), "");
                    phone = opGetParseUniqueData(phone);
                }
                catch { }
            }

        }
        /// <summary>
        /// Filling the Business Parsameter into the array if array is empty
        /// </summary>
        /// 
        private IList<string> SortStringLength(IList<string> stringList)
        {

            string[] strs = null;
            string str = "";
            foreach (string dinosaur in stringList)
            {
                str += dinosaur + "|";
            }
            str = str.Replace("||", "|");
            strs = str.Split('|');

            // string[] strs =  stringList;
            Array.Sort(strs, new Comparison<string>(delegate(string str1, string str2)
            {
                if (str1 == null && str2 == null)
                    return 0; //both empty
                else if (str1 == null)
                    return -1; //empty string before non-empty string
                else if (str2 == null)
                    return 1; //non-empty string after empty string
                else
                {
                    if (str1.Length > str2.Length)
                        return -1; //shorter string before longer string
                    else if (str1.Length < str2.Length)
                        return 1; //longer string after shorter string
                    else
                        return str1.CompareTo(str2); //alphabetical order
                }
            }));

            return strs;
        }

        #region "Common Master Loading and Disposing "
        private bool opLoadCommonMasterXML()
        {
            // return false;
            try
            {
                if (!iLoadMasterData)
                {
                    string tReturnData = "";

                    CallMasterData objCallMasterData = new CallMasterData();
                    DBConnection.Cryptographer crypto = new DBConnection.Cryptographer();
                   
                    objCallMasterData.Connectionstring = crypto.opDecryptPasswordBase64(ConfigurationManager.ConnectionStrings["DBConnectionString"].ConnectionString);
                    DataSet ds = objCallMasterData.bGetCommonDataByType("12,16,18,19,14,20,5,7,10,6,17,43,64,120,45,46,96,106,127,42,500", ref tReturnData);

                    if (tReturnData.StartsWith("-4"))
                    {
                        return false;
                    }
                    else
                    {
                        if (ds != null)
                        {
                            FCommon.LoadFcommonXMLFromString(ref ds);
                            iLoadMasterData = true;
                        }
                    }
                    return true;
                }
                else
                    return true;

            }
            catch (Exception ex)
            {
                FCommon.opWriteLog(ex);
                return false;
            }

        }

        #endregion

        private void LoadWordsToSearchClient()
        {
            try
            {
                try
                {
                    if (FCommon.EducationList == null && FCommon.objfXMLEducationTypes.OuterXml != "")
                    {
                        string[] ArrTitleList = null;
                        List<string> ArrTitle = new List<string>();

                        this.ds = new DataSet();
                        StringBuilder strbTitles = new StringBuilder();
                        ds.ReadXml(new StringReader(FCommon.objfXMLEducationTypes.OuterXml));
                        FCommon.EducationList = new string[ds.Tables[0].Rows.Count, 5];

                        DataView sortView = this.ds.Tables[0].DefaultView;//new

                        sortView.AllowEdit = true;
                        sortView.Sort = "YearsOfEducation DESC";//sort data
                        DataRowView drv;
                        System.Collections.IEnumerator ienum = sortView.GetEnumerator();

                        int j = 0;
                        while (ienum.MoveNext())
                        {
                            drv = (DataRowView)ienum.Current;
                            if (drv.Row["EducationType"] != DBNull.Value && drv.Row["EducationType"].ToString().Trim().Length > 0)
                            {
                                HireCraft.FCommon.objfXMLEducationTypes.InnerXml.Contains("");
                                FCommon.EducationList[j, 0] = drv.Row["EducationType"].ToString().Trim();
                                FCommon.EducationList[j, 1] = drv.Row["EducationAlias"].ToString().Trim();
                                FCommon.EducationList[j, 2] = drv.Row["RID"].ToString().Trim();
                                FCommon.EducationList[j, 3] = drv.Row["ExcludeAlias"].ToString().Trim();
                                FCommon.EducationList[j, 4] = drv.Row["IncludeCnt"].ToString().Trim();
                                try
                                {
                                    //Regex for Education
                                    //strbTitles.Append("|" + this.ds.Tables[0].Rows[j]["EducationType"].ToString().Trim());
                                    //if (this.ds.Tables[0].Rows[j]["EducationAlias"].ToString().Trim().Length > 1)
                                    //    strbTitles.Append("|" + this.ds.Tables[0].Rows[j]["EducationAlias"].ToString().Trim());
                                    ArrTitle.Add(this.ds.Tables[0].Rows[j]["EducationType"].ToString().Trim());
                                    if (this.ds.Tables[0].Rows[j]["EducationAlias"].ToString().Trim().Length > 1)
                                        ArrTitle.Add(this.ds.Tables[0].Rows[j]["EducationAlias"].ToString().Trim().Replace(",", "|"));

                                }
                                catch { }
                                j++;
                            }
                        }

                        try
                        {
                            ArrTitleList = ArrTitle.ToArray();
                            ArrTitleList = (string[])SortStringLength(ArrTitleList);
                            strbTitles.Append(string.Join("|", ArrTitleList));
                            if (strbTitles.ToString().EndsWith("|") == true)
                                strbTitles.Remove(strbTitles.Length - 1, 1);

                        }
                        catch { }

                        //Regex for Education
                        try
                        {
                            if (strbTitles.Length > 3)
                            {
                                // strbTitles.Remove(0, 1);
                                //strbTitles.Replace(@"\", @"\\");
                                //strbTitles.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                //strbTitles.Replace("||", "|");
                                //regEducationText = new Regex(@"\b(" + strbTitles.ToString() + @")\b", RegexOptions.IgnoreCase);
                                strbTitles.Replace(@"\", @"\\");
                                strbTitles.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                strbTitles.Replace("||", "|");

                                regEducationText = new Regex(@"[\s,\[\{“‘\(\:](" + strbTitles.ToString() + @")[,\}’\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                regEducationText1 = new Regex(@"[\s,\[\{“‘\(\:](" + strbTitles.ToString() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            }
                        }
                        catch { }

                        this.ds.Tables[0].Rows.Clear();
                        this.ds.Tables[0].Columns.Clear();
                        this.ds.Tables[0].Dispose();
                        this.ds.Dispose();
                        //regEducationText
                    }
                    else
                    {

                        #region "Education Type"
                        try
                        {
                            if (FCommon.objfXMLEducationTypes.OuterXml != "")
                            {
                                string[] ArrSpeTitleList = null;
                                List<string> ArrTitle = new List<string>();

                                StringBuilder strbTitles = new StringBuilder();
                                objDSSpe = new DataSet();
                                objDSSpe.ReadXml(new StringReader(FCommon.objfXMLEducationTypes.OuterXml));
                                string yourstring = "";
                                string IncludeTitle = "";
                                DataTable dt = new DataTable("HCM_EDUCATION_TYPES");
                                //fill the dt here 
                                dt = objDSSpe.Tables["HCM_EDUCATION_TYPES"].Copy();
                                DataTable dt2 = new DataTable();
                                DataTable dtInclude = new DataTable();

                                string[] strCols = { "EducationType" };
                                string[] strIncludeCols = { "EducationAlias" };

                                dt2 = dt.DefaultView.ToTable("HCM_EDUCATION_TYPES", false, strCols);
                                dtInclude = dt.DefaultView.ToTable("HCM_EDUCATION_TYPES", false, strIncludeCols);

                                System.Xml.XmlDocument objdoc;
                                System.Xml.XmlDocument objdocInclude;

                                using (MemoryStream memstream = new MemoryStream())
                                {
                                    dt2.WriteXml(memstream);
                                    objdoc = new System.Xml.XmlDocument();
                                    objdoc.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                                    memstream.Close(); memstream.Dispose();
                                }
                                using (MemoryStream memstream = new MemoryStream())
                                {
                                    dtInclude.WriteXml(memstream);
                                    objdocInclude = new System.Xml.XmlDocument();
                                    objdocInclude.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                                    memstream.Close(); memstream.Dispose();
                                }
                                //Title
                                yourstring = Regex.Replace(objdoc.OuterXml, "<DocumentElement><HCM_EDUCATION_TYPES><EducationType>", "");
                                yourstring = Regex.Replace(yourstring, "</EducationType></HCM_EDUCATION_TYPES><HCM_EDUCATION_TYPES><EducationType>", "|");
                                yourstring = Regex.Replace(yourstring, "<EducationType /></HCM_EDUCATION_TYPES><HCM_EDUCATION_TYPES>", "");
                                yourstring = Regex.Replace(yourstring, "</EducationType></HCM_EDUCATION_TYPES><HCM_EDUCATION_TYPES>", "");
                                yourstring = Regex.Replace(yourstring, "</EducationType></HCM_EDUCATION_TYPES></DocumentElement>", "").Replace("&amp;", "&");

                                //Include Title //
                                IncludeTitle = Regex.Replace(objdocInclude.OuterXml, "<DocumentElement><HCM_EDUCATION_TYPES><EducationAlias>", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "<EducationAlias /></HCM_EDUCATION_TYPES><HCM_EDUCATION_TYPES><EducationAlias>", "|"); //.Replace("</IncludeList></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES><IncludeList />", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "<EducationAlias /></HCM_EDUCATION_TYPES><HCM_EDUCATION_TYPES>", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "</EducationAlias></HCM_EDUCATION_TYPES><HCM_EDUCATION_TYPES><EducationAlias>", "|");
                                IncludeTitle = Regex.Replace(IncludeTitle, "</EducationAlias></HCM_EDUCATION_TYPES><HCM_EDUCATION_TYPES>", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "<EducationAlias /></HCM_EDUCATION_TYPES></DocumentElement>", "").Replace("&amp;", "&").Replace(",", "|");
                                IncludeTitle = Regex.Replace(IncludeTitle, "<DocumentElement><HCM_EDUCATION_TYPES>", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "<DocumentElement><HCM_EDUCATION_TYPES /><HCM_EDUCATION_TYPES /><HCM_EDUCATION_TYPES /><HCM_EDUCATION_TYPES /><HCM_EDUCATION_TYPES>", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "</EducationAlias></HCM_EDUCATION_TYPES></DocumentElement>", "");

                                IncludeTitle = Regex.Replace(IncludeTitle, "<EducationAlias />", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "</HCM_EDUCATION_TYPES>", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "<HCM_EDUCATION_TYPES />", "");
                                IncludeTitle = Regex.Replace(IncludeTitle, "</DocumentElement>", "");

                                if (IncludeTitle != "" && IncludeTitle.StartsWith("|"))
                                    yourstring += IncludeTitle;
                                else if (IncludeTitle != "")
                                    yourstring += "|" + IncludeTitle;

                                ArrSpeTitleList = yourstring.Split('|');
                                try
                                {
                                    ArrSpeTitleList = (string[])SortStringLength(ArrSpeTitleList);
                                    strbTitles.Append(string.Join("|", ArrSpeTitleList));
                                    if (strbTitles.ToString().EndsWith("|") == true)
                                        strbTitles.Remove(strbTitles.Length - 1, 1);

                                }
                                catch { }

                                // strbTitles.Append(yourstring);
                                // strbTitles.Remove(0, 1);
                                strbTitles.Replace(@"\", @"\\");
                                strbTitles.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                strbTitles.Replace("||", "|");

                                regEducationText = new Regex(@"[\s,\[\{“‘\(\:](" + strbTitles.ToString() + @")[,\}’\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                regEducationText1 = new Regex(@"[\s,\[\{“‘\(\:](" + strbTitles.ToString() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                            }
                        }
                        catch { }
                        #endregion

                    }

                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "Education");

                }
                try
                {
                    if (FCommon.PrefLocation == null && FCommon.objfXMLResumeLocations.OuterXml != "")
                    {
                        StringBuilder strbJobTitles = new StringBuilder();

                        System.Xml.XmlNodeList nodelst = FCommon.objfXMLResumeLocations.GetElementsByTagName("RID");

                        String parentnode = nodelst.Item(0).ParentNode.Name;

                        System.Xml.XmlNodeList xmlNopdes = FCommon.objfXMLResumeLocations.SelectNodes("//" + parentnode);
                        FCommon.PrefLocation = new string[xmlNopdes.Count, 5];
                        for (int i = 0; i <= xmlNopdes.Count - 1; i++)
                        {
                            if (xmlNopdes.Item(i)["ReqLocationStatus"].InnerText.Trim() == "2") continue;
                            FCommon.PrefLocation[i, 0] = xmlNopdes.Item(i)["LocationTitle"].InnerText.Trim();
                            FCommon.PrefLocation[i, 1] = xmlNopdes.Item(i)["LocationAlias"].InnerText.Trim();
                            FCommon.PrefLocation[i, 2] = xmlNopdes.Item(i)["RID"].InnerText.Trim();
                            FCommon.PrefLocation[i, 3] = xmlNopdes.Item(i)["ExcludeAlias"].InnerText.Trim();
                            FCommon.PrefLocation[i, 4] = xmlNopdes.Item(i)["IncludeCnt"].InnerText.Trim();
                            strbJobTitles.Append("|" + xmlNopdes.Item(i)["LocationTitle"].InnerText.Trim());
                            if (xmlNopdes.Item(i)["LocationAlias"].InnerText.Trim().Length > 1)
                                strbJobTitles.Append("|" + xmlNopdes.Item(i)["LocationAlias"].InnerText.Trim());
                        }

                        nodelst = null; xmlNopdes = null; parentnode = null;

                        if (strbJobTitles.Length > 5)
                        {
                            strbJobTitles.Remove(0, 1);
                            strbJobTitles.Replace(@"\", @"\\");
                            strbJobTitles.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            strbJobTitles.Replace("||", "|");
                            regLocationText = new Regex(@"\b(" + strbJobTitles.ToString() + @")\b", RegexOptions.IgnoreCase);
                        }
                        strbJobTitles = null;
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "Location");

                }
                try
                {
                    if (FCommon.SubFunction == null && FCommon.objfXMLSubFunctionList.OuterXml != "")
                    {
                        this.ds = new DataSet();
                        HireCraft.FCommon.dsFSubFunction = new DataSet();
                        HireCraft.FCommon.dsFSubFunction.ReadXml(new StringReader(FCommon.objfXMLFunSubFunction.OuterXml));

                        this.ds = new DataSet();
                        ds.ReadXml(new StringReader(FCommon.objfXMLSubFunctionList.OuterXml));

                        FCommon.SubFunction = new string[ds.Tables[0].Rows.Count, 5];
                        System.Threading.Tasks.Parallel.For(0, this.ds.Tables[0].Rows.Count - 1, i => //for (int i = 0; i < this.ds.Tables[0].Rows.Count; i++)
                        {
                            if (this.ds.Tables[0].Rows[i]["Title"] != DBNull.Value)
                            {
                                FCommon.SubFunction[i, 0] = this.ds.Tables[0].Rows[i]["Title"].ToString().Trim();
                                FCommon.SubFunction[i, 1] = this.ds.Tables[0].Rows[i]["IncludeList"].ToString().Trim(); //this.ds.Tables[0].Rows[i]["Notes"].ToString().Trim();
                                FCommon.SubFunction[i, 2] = this.ds.Tables[0].Rows[i]["RID"].ToString().Trim(); ;
                                FCommon.SubFunction[i, 3] = this.ds.Tables[0].Rows[i]["ExcludeList"].ToString().Trim();
                                FCommon.SubFunction[i, 4] = this.ds.Tables[0].Rows[i]["IncludeCnt"].ToString().Trim();
                            }
                        });
                        this.ds.Tables[0].Rows.Clear();
                        this.ds.Tables[0].Columns.Clear();
                        this.ds.Tables[0].Dispose();
                        this.ds.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "sub function area");

                }

                try
                {
                    if (FCommon.IndustryTypeList == null && FCommon.objfXMLIndustryTypes.OuterXml != "")
                    {
                        this.ds = new DataSet();
                        ds.ReadXml(new StringReader(FCommon.objfXMLIndustryTypes.OuterXml));
                        FCommon.IndustryTypeList = new string[ds.Tables[0].Rows.Count, 5];
                        System.Threading.Tasks.Parallel.For(0, this.ds.Tables[0].Rows.Count - 1, i =>//for (int i = 0; i < this.ds.Tables[0].Rows.Count; i++)
                        {
                            if (this.ds.Tables[0].Rows[i]["IndustryTypeTitle"] != DBNull.Value)
                            {
                                FCommon.IndustryTypeList[i, 0] = this.ds.Tables[0].Rows[i]["IndustryTypeTitle"].ToString().Trim();
                                FCommon.IndustryTypeList[i, 1] = this.ds.Tables[0].Rows[i]["Alias"].ToString().Trim(); //this.ds.Tables[0].Rows[i]["IndustryAlias"].ToString().Trim();
                                FCommon.IndustryTypeList[i, 2] = this.ds.Tables[0].Rows[i]["RID"].ToString().Trim(); ;
                                FCommon.IndustryTypeList[i, 3] = this.ds.Tables[0].Rows[i]["ExcludeAlias"].ToString().Trim();
                                FCommon.IndustryTypeList[i, 4] = this.ds.Tables[0].Rows[i]["IncludeCnt"].ToString().Trim();
                            }
                        });
                        this.ds.Tables[0].Rows.Clear();
                        this.ds.Tables[0].Columns.Clear();
                        this.ds.Tables[0].Dispose();
                        this.ds.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "Industry");

                }

                try
                {
                    if (FCommon.JobTitleList == null && FCommon.objfXMLJobTitle.OuterXml != "")
                    {
                        string[] ArrTitleList = null;
                        List<string> ArrTitle = new List<string>();

                        StringBuilder strbJobTitles = new StringBuilder();
                        //this.ds = new DataSet();
                        objDSDes = new DataSet();
                        objDSDes.ReadXml(new StringReader(FCommon.objfXMLJobTitle.OuterXml));
                        FCommon.JobTitleList = new string[objDSDes.Tables[0].Rows.Count, 5];
                        //System.Threading.Tasks.Parallel.For(0, this.objDSDes.Tables[0].Rows.Count - 1, i =>//
                        for (int i = 0; i < this.objDSDes.Tables[0].Rows.Count; i++)
                        {
                            if (this.objDSDes.Tables[0].Rows[i]["JobTitle"] != DBNull.Value)
                            {
                                FCommon.JobTitleList[i, 0] = this.objDSDes.Tables[0].Rows[i]["JobTitle"].ToString().Trim();
                                FCommon.JobTitleList[i, 1] = this.objDSDes.Tables[0].Rows[i]["Includelist"].ToString().Trim();
                                FCommon.JobTitleList[i, 2] = this.objDSDes.Tables[0].Rows[i]["RID"].ToString().Trim();
                                FCommon.JobTitleList[i, 3] = this.objDSDes.Tables[0].Rows[i]["Excludelist"].ToString().Trim();
                                FCommon.JobTitleList[i, 4] = this.objDSDes.Tables[0].Rows[i]["IncludeCnt"].ToString().Trim();
                                ArrTitle.Add(this.objDSDes.Tables[0].Rows[i]["JobTitle"].ToString());
                                if (this.objDSDes.Tables[0].Rows[i]["Includelist"].ToString().Trim().Length > 1)
                                    ArrTitle.Add(this.objDSDes.Tables[0].Rows[i]["Includelist"].ToString().Replace(",", "|"));

                            }
                        }//);
                        try
                        {
                            ArrTitleList = ArrTitle.ToArray();
                            ArrTitleList = (string[])SortStringLength(ArrTitleList);
                            strbJobTitles.Append(string.Join("|", ArrTitleList));
                            if (strbJobTitles.ToString().EndsWith("|") == true)
                                strbJobTitles.Remove(strbJobTitles.Length - 1, 1);

                        }
                        catch { }
                        if (strbJobTitles.Length > 5)
                        {
                            strbJobTitles.Replace(@"\", @"\\");
                            strbJobTitles.Replace(",", "|").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace(".", @"\.").Replace("*", @"\*").Replace("  ", ""); //.Replace(".", @"\.")
                            strbJobTitles.Replace("||", "|");

                            FCommon.rgxDesignations = new Regex(@"[\s,\[\{“‘\(\:](" + strbJobTitles.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.IgnoreCase | RegexOptions.Multiline);
                        }


                    }
                    else
                    {
                        objDSDes = new DataSet();
                        objDSDes.ReadXml(new StringReader(FCommon.objfXMLJobTitle.OuterXml));
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "Master binding in Parsing");
                }

                try
                {
                    if (FCommon.Nationality == null && FCommon.objfXMLNations != null && FCommon.objfXMLNations.OuterXml != "")
                    {
                        this.ds = new DataSet();
                        ds.ReadXml(new StringReader(FCommon.objfXMLNations.OuterXml));
                        FCommon.Nationality = new string[ds.Tables[0].Rows.Count, 5];

                        System.Threading.Tasks.Parallel.For(0, this.ds.Tables[0].Rows.Count - 1, i =>// for (int i = 0; i < this.ds.Tables[0].Rows.Count; i++)
                        {
                            if (this.ds.Tables[0].Rows[i]["Title"] != DBNull.Value)
                            {
                                FCommon.Nationality[i, 0] = this.ds.Tables[0].Rows[i]["Title"].ToString().Trim();
                                FCommon.Nationality[i, 2] = this.ds.Tables[0].Rows[i]["RID"].ToString().Trim(); ;
                                FCommon.Nationality[i, 1] = this.ds.Tables[0].Rows[i]["Includelist"].ToString().Trim();
                                FCommon.Nationality[i, 3] = this.ds.Tables[0].Rows[i]["Excludelist"].ToString().Trim();
                                FCommon.Nationality[i, 4] = this.ds.Tables[0].Rows[i]["IncludeCnt"].ToString().Trim();
                            }
                        });

                        this.ds.Tables[0].Rows.Clear();
                        this.ds.Tables[0].Columns.Clear();
                        this.ds.Tables[0].Dispose();
                        this.ds.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "Nationality");

                }
                try
                {
                    if (FCommon.NotMappedFunction == null)
                        FCommon.opGetNotMappedFunctionArray();
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "Not Mapped function area");
                }

                //Education Specialization
                #region "Education Specialization"
                try
                {
                    if (FCommon.objfXMLSpecialization.OuterXml != "")
                    {
                        string[] ArrSpeTitleList = null;

                        StringBuilder strbTitles = new StringBuilder();
                        objDSSpe = new DataSet();
                        objDSSpe.ReadXml(new StringReader(FCommon.objfXMLSpecialization.OuterXml));
                        string yourstring = "";
                        string IncludeTitle = "";
                        DataTable dt = new DataTable("HCM_EDUCATION_SPECIALIZATION_TYPES");
                        //fill the dt here 
                        dt = objDSSpe.Tables["HCM_EDUCATION_SPECIALIZATION_TYPES"].Copy();
                        DataTable dt2 = new DataTable();
                        DataTable dtInclude = new DataTable();

                        string[] strCols = { "SpecializationTitle" };
                        string[] strIncludeCols = { "IncludeList" };

                        dt2 = dt.DefaultView.ToTable("HCM_EDUCATION_SPECIALIZATION_TYPES", false, strCols);
                        dtInclude = dt.DefaultView.ToTable("HCM_EDUCATION_SPECIALIZATION_TYPES", false, strIncludeCols);

                        System.Xml.XmlDocument objdoc;
                        System.Xml.XmlDocument objdocInclude;

                        using (MemoryStream memstream = new MemoryStream())
                        {
                            dt2.WriteXml(memstream);
                            objdoc = new System.Xml.XmlDocument();
                            objdoc.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                            memstream.Close(); memstream.Dispose();
                        }
                        using (MemoryStream memstream = new MemoryStream())
                        {
                            dtInclude.WriteXml(memstream);
                            objdocInclude = new System.Xml.XmlDocument();
                            objdocInclude.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                            memstream.Close(); memstream.Dispose();
                        }
                        //Title
                        yourstring = Regex.Replace(objdoc.OuterXml, "<DocumentElement><HCM_EDUCATION_SPECIALIZATION_TYPES><SpecializationTitle>", "");
                        yourstring = Regex.Replace(yourstring, "</SpecializationTitle></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES><SpecializationTitle>", "|");
                        yourstring = Regex.Replace(yourstring, "<SpecializationTitle /></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES>", "");
                        yourstring = Regex.Replace(yourstring, "</SpecializationTitle></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES>", "");
                        yourstring = Regex.Replace(yourstring, "</SpecializationTitle></HCM_EDUCATION_SPECIALIZATION_TYPES></DocumentElement>", "").Replace("&amp;", "&");

                        //Include Title //
                        IncludeTitle = Regex.Replace(objdocInclude.OuterXml, "<DocumentElement><HCM_EDUCATION_SPECIALIZATION_TYPES><IncludeList>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList /></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES><IncludeList>", "|"); //.Replace("</IncludeList></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES><IncludeList />", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList /></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</IncludeList></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES><IncludeList>", "|");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</IncludeList></HCM_EDUCATION_SPECIALIZATION_TYPES><HCM_EDUCATION_SPECIALIZATION_TYPES>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList /></HCM_EDUCATION_SPECIALIZATION_TYPES></DocumentElement>", "").Replace("&amp;", "&").Replace(",", "|");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<DocumentElement><HCM_EDUCATION_SPECIALIZATION_TYPES>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<DocumentElement><HCM_EDUCATION_SPECIALIZATION_TYPES /><HCM_EDUCATION_SPECIALIZATION_TYPES /><HCM_EDUCATION_SPECIALIZATION_TYPES /><HCM_EDUCATION_SPECIALIZATION_TYPES /><HCM_EDUCATION_SPECIALIZATION_TYPES>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</IncludeList></HCM_EDUCATION_SPECIALIZATION_TYPES></DocumentElement>", "");

                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList />", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</HCM_EDUCATION_SPECIALIZATION_TYPES>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<HCM_EDUCATION_SPECIALIZATION_TYPES />", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</DocumentElement>", "");

                        if (IncludeTitle != "" && IncludeTitle.StartsWith("|") == true)
                            yourstring += IncludeTitle;
                        else if (IncludeTitle != "")
                            yourstring += "|" + IncludeTitle;

                        ArrSpeTitleList = yourstring.Split('|');
                        try
                        {
                            ArrSpeTitleList = (string[])SortStringLength(ArrSpeTitleList);
                            strbTitles.Append(string.Join("|", ArrSpeTitleList));
                            if (strbTitles.ToString().EndsWith("|") == true)
                                strbTitles.Remove(strbTitles.Length - 1, 1);

                        }
                        catch { }

                        strbTitles.Replace(@"\", @"\\");
                        strbTitles.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*").Replace("&", @"\&");
                        strbTitles.Replace("||", "|");

                        regxSpe = new Regex(@"[\s,\[\{“‘\(\:](" + strbTitles.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.IgnoreCase | RegexOptions.Multiline);
                        regxSpe1 = new Regex(@"[\s,\[\{“‘\(\:](" + strbTitles + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);
                }
                #endregion

                //Education University
                #region "Education University"
                try
                {
                    if (regxUni == null && FCommon.objfXMLUniversity.OuterXml != "")
                    {
                        string[] ArrUNITitleList = null;
                        string yourstring = "";
                        string IncludeTitle = "";
                        StringBuilder strbTitles = new StringBuilder();
                        objDSUni = new DataSet();
                        objDSUni.ReadXml(new StringReader(FCommon.objfXMLUniversity.OuterXml));
                        DataTable dt = new DataTable("HCM_UNIVERSITY");
                        dt = objDSUni.Tables["HCM_UNIVERSITY"].Copy();
                        DataTable dt2 = new DataTable();
                        DataTable dtInclude = new DataTable();
                        string[] strCols = { "Title" };
                        string[] strIncludeCols = { "IncludeList" };
                        dt2 = dt.DefaultView.ToTable("HCM_UNIVERSITY", false, strCols);
                        dtInclude = dt.DefaultView.ToTable("HCM_UNIVERSITY", false, strIncludeCols);

                        System.Xml.XmlDocument objdoc;
                        System.Xml.XmlDocument objdocInclude;
                        using (MemoryStream memstream = new MemoryStream())
                        {
                            dt2.WriteXml(memstream);
                            objdoc = new System.Xml.XmlDocument();
                            objdoc.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                            memstream.Close(); memstream.Dispose();
                        }
                        using (MemoryStream memstream = new MemoryStream())
                        {
                            dtInclude.WriteXml(memstream);
                            objdocInclude = new System.Xml.XmlDocument();
                            objdocInclude.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                            memstream.Close(); memstream.Dispose();
                        }
                        yourstring = Regex.Replace(objdoc.OuterXml, "<DocumentElement><HCM_UNIVERSITY><Title>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_UNIVERSITY><HCM_UNIVERSITY><Title>", "|");
                        yourstring = Regex.Replace(yourstring, "<Title /></HCM_UNIVERSITY><HCM_UNIVERSITY>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_UNIVERSITY><HCM_UNIVERSITY>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_UNIVERSITY></DocumentElement>", "");

                        //Include Title
                        IncludeTitle = Regex.Replace(objdocInclude.OuterXml, "<DocumentElement><HCM_UNIVERSITY><IncludeList>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList /></HCM_UNIVERSITY><HCM_UNIVERSITY><IncludeList>", "|");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList /></HCM_UNIVERSITY><HCM_UNIVERSITY>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</IncludeList></HCM_UNIVERSITY><HCM_UNIVERSITY><IncludeList>", "|");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</IncludeList></HCM_UNIVERSITY><HCM_UNIVERSITY>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList /></HCM_UNIVERSITY></DocumentElement>", "").Replace("&amp;", "&").Replace(",", "|");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<DocumentElement><HCM_UNIVERSITY>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<DocumentElement><HCM_UNIVERSITY /><HCM_UNIVERSITY /><HCM_UNIVERSITY /><HCM_UNIVERSITY /><HCM_UNIVERSITY>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</IncludeList></HCM_UNIVERSITY></DocumentElement>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</IncludeList></HCM_UNIVERSITY></DocumentElement>", "");

                        IncludeTitle = Regex.Replace(IncludeTitle, "<IncludeList />", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</HCM_UNIVERSITY>", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "<HCM_UNIVERSITY />", "");
                        IncludeTitle = Regex.Replace(IncludeTitle, "</DocumentElement>", "");

                        if (IncludeTitle != "" && IncludeTitle.StartsWith("|"))
                            yourstring += IncludeTitle;
                        else if (IncludeTitle != "")
                            yourstring += "|" + IncludeTitle;

                        ArrUNITitleList = yourstring.Split('|');
                        try
                        {
                            ArrUNITitleList = (string[])SortStringLength(ArrUNITitleList);
                            strbTitles.Append(string.Join("|", ArrUNITitleList));
                            if (strbTitles.ToString().EndsWith("|") == true)
                                strbTitles.Remove(strbTitles.Length - 1, 1);

                        }
                        catch { }

                        strbTitles.Replace(@"\", @"\\");
                        strbTitles.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                        strbTitles.Replace("||", "|");
                        regxUni = new Regex(@"[\s,\[\{“‘\(\:](" + strbTitles.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.IgnoreCase | RegexOptions.Multiline);

                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);
                }
                #endregion

                //Resume Language
                #region "Resume Language"
                try
                {
                    if (regxLanguage == null && FCommon.objfXMLLanguages.OuterXml != "")
                    {
                        StringBuilder strbTitles = new StringBuilder();
                        objDSLan = new DataSet();
                        objDSLan.ReadXml(new StringReader(FCommon.objfXMLLanguages.OuterXml));
                        string yourstring = "";
                        DataTable dt = new DataTable("HCM_LANGUAGE");
                        if (objDSLan.Tables.Contains("HCM_LANGUAGE") == true)
                            dt = objDSLan.Tables["HCM_LANGUAGE"].Copy();
                        else if (objDSLan.Tables.Contains("HCM_COMMON_MASTER") == true)
                            dt = objDSLan.Tables["HCM_COMMON_MASTER"].Copy();

                        DataTable dt2 = new DataTable();
                        string[] strCols = { "Title" };

                        dt2 = dt.DefaultView.ToTable("HCM_LANGUAGE", false, strCols);

                        System.Xml.XmlDocument objdoc;

                        using (MemoryStream memstream = new MemoryStream())
                        {
                            dt2.WriteXml(memstream);
                            objdoc = new System.Xml.XmlDocument();
                            objdoc.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                            memstream.Close(); memstream.Dispose();
                        }

                        yourstring = Regex.Replace(objdoc.OuterXml, "<DocumentElement><HCM_LANGUAGE><Title>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_LANGUAGE><HCM_LANGUAGE><Title>", "|");
                        yourstring = Regex.Replace(yourstring, "<Title /></HCM_LANGUAGE><HCM_LANGUAGE>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_LANGUAGE><HCM_LANGUAGE>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_LANGUAGE></DocumentElement>", "").Replace("&amp;", "&");

                        strbTitles.Append(yourstring);
                        strbTitles.Replace(@"\", @"\\");
                        strbTitles.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                        strbTitles.Replace("||", "|");
                        regxLanguage = new Regex(@"[\s,\(\:]?(" + strbTitles.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);
                }
                #endregion

                try
                {
                    if (FCommon.ResumeVisaType == null && FCommon.objfXMLResumeVisaType.OuterXml != "")
                    {
                        this.ds = new DataSet();
                        ds.ReadXml(new StringReader(FCommon.objfXMLResumeVisaType.OuterXml));
                        FCommon.ResumeVisaType = new string[ds.Tables[0].Rows.Count, 5];

                        System.Threading.Tasks.Parallel.For(0, this.ds.Tables[0].Rows.Count - 1, i =>//  for (int i = 0; i < this.ds.Tables[0].Rows.Count; i++)
                        {
                            if (this.ds.Tables[0].Rows[i]["Title"] != DBNull.Value)
                            {
                                FCommon.ResumeVisaType[i, 0] = this.ds.Tables[0].Rows[i]["Title"].ToString().Trim();
                                FCommon.ResumeVisaType[i, 2] = this.ds.Tables[0].Rows[i]["RID"].ToString().Trim(); ;
                                FCommon.ResumeVisaType[i, 1] = this.ds.Tables[0].Rows[i]["IncludeList"].ToString().Trim();
                                FCommon.ResumeVisaType[i, 3] = this.ds.Tables[0].Rows[i]["ExcludeList"].ToString().Trim();
                                FCommon.ResumeVisaType[i, 4] = this.ds.Tables[0].Rows[i]["IncludeCnt"].ToString().Trim();
                            }
                        });

                        this.ds.Tables[0].Rows.Clear();
                        this.ds.Tables[0].Columns.Clear();
                        this.ds.Tables[0].Dispose();
                        this.ds.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);//, "Visa");
                }

            }
            catch
            {

            }
        }
        void opReplaceTextFromNameText(ref StringBuilder tNameValue)
        {
            try
            {
                tNameValue.Replace("1. full name:", "").Replace("1. Full Name:", "").Replace("1. FULL NAME:", "");
                tNameValue.Replace("Name in full", "").Replace("name in full", "").Replace("Name in Full", "").Replace("Name In Full", "").Replace("name as in NRIC", "").Replace("Name as in NRIC", "").Replace("name as in nric", "").Replace("as in NRIC", "").Replace("as in nric", "").Replace("my name is", "").Replace("candidate name", "").Replace("1. name", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("name:", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace("(mr.)", "").Replace(": -", "").Replace("(", "").Replace(")", "");//"Name (Mr.)"
                tNameValue.Replace("My Name is", "").Replace("Candidate Name", "").Replace("1. Name", "").Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NAME:", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace("(MR.)", "");//"Name (Mr.)"
                tNameValue.Replace("MY NAME IS", "").Replace("CANDIDATE NAME", "").Replace("1. NAME", "").Replace("1.  Name In Full", "").Replace("1.  Name in Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Name:", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace("(Mr.)", "");
                tNameValue.Replace("Name as appearing in Passport", "").Replace("Name as appearing in passport", "").Replace("name as appearing in passport", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                tNameValue.Replace("name as in passport", "").Replace("Name as in Passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "").Replace("as in passport", "").Replace("as in Passport", "").Replace("As In Passport", "").Replace("as in passport", "").Replace("AS IN PASSPORT", "").Replace("AS APPEARING IN PASSPORT", "").Replace("as appearing in passport", "").Replace("as appearing in Passport", "");
                tNameValue.Replace("name as in the passport", "").Replace("Name as in the Passport", "").Replace("Name As In The Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN THE PASSPORT", "").Replace("as in the passport", "").Replace("as in the Passport", "").Replace("As In The Passport", "").Replace("as in the passport", "");
                tNameValue.Replace("name as on passport", "").Replace("Name as on Passport", "").Replace("Name As On Passport", "").Replace("Name as on passport", "").Replace("NAME AS ON PASSPORT", "").Replace("as on passport", "").Replace("as on Passport", "").Replace("As On Passport", "").Replace("as on passport", "").Replace("AS ON PASSPORT", "").Replace("AS APPEARING ON PASSPORT", "");


                tNameValue.Replace("as in NRIC", "").Replace("as in nric", "").Replace("name as in NRIC", "").Replace("Name as in NRIC", "").Replace("name as in nric", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("email", "").Replace("date of birth", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace(":-", ":").Replace(": -", ":").Replace("(", "").Replace(")", ""); ;
                tNameValue.Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("EMAIL", "").Replace("DATE OF BIRTH", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace(":-", ":");
                tNameValue.Replace("1.  Name In Full", "").Replace("1.  Name in Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Email", "").Replace("Date Of Birth", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace(":-", ":");
                tNameValue.Replace("PASSPORT", "").Replace("Number", "").Replace("NUMBER", "").Replace("number", "").Replace("Passport", "").Replace("passport", "");

                tNameValue.Replace("name as in nric", "").Replace("of candidate", "").Replace("of Candidate", "").Replace("OF CANDIDATE", "");
                tNameValue.Replace("Name as in NRIC", "").Replace("contact by", "").Replace("Contact By", "").Replace("Contact by", "").Replace("CONTACT BY", "");
                tNameValue.Replace("name as in NRIC", "").Replace("emailgeneral", "").Replace("Emailgeneral", "").Replace("EmailGeneral", "").Replace("EMAILGENERAL", "");
                tNameValue.Replace("as in NRIC", "").Replace("as in nric", "").Replace("email id", "").Replace("Email ID", "").Replace("Email Id", "").Replace("EMAIL ID", "");
                tNameValue.Replace("email", "").Replace("Email", "").Replace("EMAIL", "");
                tNameValue.Replace("general", "").Replace("General", "").Replace("GENERAL", "").Replace("information", "").Replace("Information", "").Replace("INFORMATION", "");
                tNameValue.Replace("mobile no.", "").Replace("Mobile No.", "").Replace("Mobile no.", "").Replace("MOBILE NO.", "");
                tNameValue.Replace("(mobile)", "").Replace("(Mobile)", "").Replace("(MOBILE)", "").Replace("mobile", "").Replace("Mobile", "").Replace("MOBILE", "");
                tNameValue.Replace("mob", "").Replace("Mob", "").Replace("MOB", "").Replace("(r)", "").Replace("(R)", "");
                tNameValue.Replace("emergency contact no.:", "").Replace("Emergency Contact No.:", "").Replace("Emergency contact no.:", "").Replace("EMERGENCY CONTACT NO.:", "");
                tNameValue.Replace("emergency", "").Replace("Emergency", "").Replace("EMERGENCY", "");
                tNameValue.Replace("contact no.:", "").Replace("Contact No.:", "").Replace("Contact no.:", "").Replace("CONTACT NO.:", "").Replace("contact no.", "").Replace("Contact No.", "").Replace("Contact no.", "").Replace("CONTACT NO.", "").Replace("contact no", "").Replace("Contact No", "").Replace("Contact no", "").Replace("CONTACT NO", "").Replace("contact", "").Replace("Contact", "").Replace("CONTACT", "");
                tNameValue.Replace("number", "").Replace("Number", "").Replace("NUMBER", "");
                tNameValue.Replace("organizations", "").Replace("Organizations", "").Replace("ORGANIZATIONS", "").Replace("organization", "").Replace("Organization", "").Replace("ORGANIZATION", "").Replace("organisations", "").Replace("Organidations", "").Replace("ORGANISATIONS", "").Replace("organisation", "").Replace("Organidation", "").Replace("ORGANISATION", "");
                tNameValue.Replace("phone no.", "").Replace("Phone No.", "").Replace("Phone no.", "").Replace("PHONE NO.", "");
                tNameValue.Replace("telephone", "").Replace("Telephone", "").Replace("TELEPHONE", "").Replace("phone", "").Replace("Phone", "").Replace("PHONE", "").Replace("ph:", "").Replace("Ph:", "").Replace("PH:", "");
                tNameValue.Replace("tel no. res", "").Replace("Tel No. Res", "").Replace("Tel No. res", "").Replace("TEL NO. RES", "");
                tNameValue.Replace("cell no", "").Replace("Cell No", "").Replace("Cell No", "").Replace("CELL NO", "").Replace("cell", "").Replace("Cell", "").Replace("CELL", "");
                tNameValue.Replace("date of birth", "").Replace("Date Of Birth", "").Replace("Date of birth", "").Replace("DATE OF BIRTH", "");
                tNameValue.Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                tNameValue.Replace("name as in passport", "").Replace("Name as in passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "");
                tNameValue.Replace("name (full name)", "").Replace("Name (Full Name)", "").Replace("Name (full name)", "").Replace("NAME (FULL NAME)", "").Replace("name in passport", "").Replace("Name In Passport", "").Replace("Name in passport", "").Replace("NAME IN PASSPORT", "").Replace("name in full", "").Replace("Name In Full", "").Replace("Name in Full", "").Replace("NAME IN FULL", "").Replace("name-", "").Replace("Name-", "").Replace("NAME-", "").Replace("name:-", "").Replace("Name:-", "").Replace("NAME:-", "").Replace("name", "").Replace("Name", "").Replace("NAME", "").Replace("contact:", "").Replace("Contact:", "").Replace("CONTACT:", "").Replace("details", "").Replace("Details", "").Replace("DETAILS", "");
                tNameValue.Replace("ADDRESS", "").Replace("Address", "").Replace("address", "").Replace("CALL", "").Replace("Call", "").Replace("call", "").Replace("FULL", "").Replace("Full", "").Replace("full", "").Replace("MANAGER", "").Replace("Manager", "").Replace("manager", "").Replace("COMPNAY", "").Replace("Company", "").Replace("company", "").Replace("DESIGNATION", "").Replace("Designation", "").Replace("designation", "").Replace("NOTICE PERIOD", "").Replace("Notice Period", "").Replace("notice period", "").Replace("expected ctc", "").Replace("Expected Ctc", "").Replace("EXPECTED CTC", "").Replace("Expected CTC", "").Replace("nurrent ctc", "").Replace("Nurrent CTC", "").Replace("Nurrent Ctc", "").Replace("NURRENT CTC", "");
                tNameValue.Replace("Name as appearing in Passport", "").Replace("Name as appearing in passport", "").Replace("name as appearing in passport", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                tNameValue.Replace("name as in passport", "").Replace("Name as in Passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "").Replace("as in passport", "").Replace("as in Passport", "").Replace("As In Passport", "").Replace("as in passport", "").Replace("AS IN PASSPORT", "").Replace("AS APPEARING IN PASSPORT", "").Replace("as appearing in passport", "").Replace("as appearing in Passport", "");
                tNameValue.Replace("name as in the passport", "").Replace("Name as in the Passport", "").Replace("Name As In The Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN THE PASSPORT", "").Replace("as in the passport", "").Replace("as in the Passport", "").Replace("As In The Passport", "").Replace("as in the passport", "").Replace("passport", "");
                tNameValue.Replace("name as on passport", "").Replace("Name as on Passport", "").Replace("Name As On Passport", "").Replace("Name as on passport", "").Replace("NAME AS ON PASSPORT", "").Replace("as on passport", "").Replace("as on Passport", "").Replace("As On Passport", "").Replace("as on passport", "").Replace("AS ON PASSPORT", "").Replace("AS APPEARING ON PASSPORT", "");
                tNameValue.Replace("(MR.)", "").Replace("(Mr.)", "").Replace("(mr.)", "").Replace("=", "").Replace("FROM", "").Replace("From", "").Replace("from", "").Replace("tel", "").Replace("Tel", "").Replace("TEL", "");


                tNameValue.Replace("my name is", "").Replace("candidate name", "").Replace("1. name", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("name:", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace("(mr.)", "").Replace(": -", "").Replace("(", "").Replace(")", "");//"Name (Mr.)"
                tNameValue.Replace("My Name is", "").Replace("Candidate Name", "").Replace("1. Name", "").Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NAME:", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace("(MR.)", "");//"Name (Mr.)"
                tNameValue.Replace("MY NAME IS ", "").Replace("CANDIDATE NAME", "").Replace("1. NAME", "").Replace("1.  Name In Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Name:", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace("(Mr.)", "");

                tNameValue.Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("email", "").Replace("date of birth", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace(":-", ":").Replace(": -", ":").Replace("(", "").Replace(")", "");
                tNameValue.Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("EMAIL", "").Replace("DATE OF BIRTH", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace(":-", ":");
                tNameValue.Replace("1.  Name In Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Email", "").Replace("Date Of Birth", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace(":-", ":");
            }
            catch { }
        }

        /// <summary>
        /// Number exits in the character Array
        /// If strMsg is CTC count the .
        /// </summary>
        /// <param name="c_array"></param>
        /// <param name="strMsg"></param>
        /// <returns></returns>
        private bool CheckNumeric(char[] c_array, string strMsg)
        {
            int nCount = 0;
            for (int i = 0; i < c_array.Length; i++)
            {
                for (int j = 48; j <= 57; j++)
                {
                    if (c_array[i].ToString() == Convert.ToChar(j).ToString()) nCount++;
                    if (strMsg == "CTC")
                    {
                        if (c_array[i].ToString() == Convert.ToChar(46).ToString()) { nCount++; break; }
                    }
                }
            }
            if (nCount == c_array.Length)//|| nCount==c_array.Length+1) 
                return false;
            else
                return true;
        }
        /// <summary>
        /// Number exits in the character Array
        /// </summary>
        /// <param name="c_array"></param>
        /// <returns></returns>
        private bool isNumberExists1(char[] c_array)
        {
            int nCount = 0;
            for (int i = 0; i < c_array.Length; i++)
            {
                for (int j = 0; j <= 127; j++)
                {
                    if ((j >= 65 && j <= 90) || (j >= 97 && j <= 122) || j == 32 || j == 46 || j == 44 || j == 40 || j == 41) continue;
                    if (c_array[i].ToString() == Convert.ToChar(j).ToString()) { nCount++; break; }
                }
            }
            if (nCount >= 1)//|| nCount==c_array.Length+1)
                return false;
            else
                return true;
        }
        /// <summary>
        /// Check the Array is only string 
        /// </summary>
        /// <param name="c_array"></param>
        /// <returns></returns>
        private bool isString(char[] c_array)
        {
            int nCount = 0;
            for (int i = 0; i < c_array.Length; i++)
            {
                for (int j = 0; j <= 127; j++)
                {
                    if ((j >= 48 && j <= 57)) continue;
                    if (c_array[i].ToString() == Convert.ToChar(j).ToString()) { nCount++; break; }
                }
            }
            if (nCount == c_array.Length)
                return true;
            else
                return false;
        }
        /// <summary>
        /// Number exits in the character Array
        /// </summary>
        /// <param name="c_array"></param>
        /// <returns></returns>
        private bool isNumberExists(char[] c_array)
        {
            int nCount = 0;
            for (int i = 0; i < c_array.Length; i++)
            {
                for (int j = 0; j <= 127; j++)
                {
                    if ((j >= 65 && j <= 90) || (j >= 97 && j <= 122) || j == 32 || j == 46 || j == 40 || j == 41 || j == 39)
                        continue;
                    if (c_array[i].ToString() == Convert.ToChar(j).ToString() || c_array[i].ToString() == Convert.ToChar(8211).ToString() || c_array[i].ToString() == Convert.ToChar(8220).ToString() || c_array[i].ToString() == Convert.ToChar(8221).ToString() || c_array[i].ToString() == Convert.ToChar(9743).ToString() || c_array[i].ToString() == Convert.ToChar(9993).ToString())
                    {
                        nCount++; break;
                    }
                }
            }
            if (nCount >= 1)//|| nCount==c_array.Length+1)
                return false;
            else
                return true;
        }
        /// <summary>
        /// Number exits in the character Array
        /// </summary>
        /// <param name="c_array"></param>
        /// <returns></returns>
        private bool isNumberExists2(char[] c_array)
        {
            int nCount = 0;
            for (int i = 0; i < c_array.Length; i++)
            {
                for (int j = 0; j <= 127; j++)
                {
                    if ((j >= 65 && j <= 90) || (j >= 97 && j <= 122) || j == 32 || j == 46 || j == 40 || j == 41 || j == 45 || j == 95)
                        continue;
                    if (c_array[i].ToString() == Convert.ToChar(j).ToString() || c_array[i].ToString() == Convert.ToChar(8211).ToString() || c_array[i].ToString() == Convert.ToChar(8220).ToString() || c_array[i].ToString() == Convert.ToChar(8221).ToString())
                    {
                        nCount++; break;
                    }
                }
            }
            if (nCount >= 1)//|| nCount==c_array.Length+1)
                return false;
            else
                return true;
        }
        /// <summary>
        /// Find Matching of a String
        /// </summary>
        /// <param name="tDataLineTex">String to match</param>
        /// <param name="regMatch1">Regula expression to for matching the String for taking that string</param>
        /// <param name="regMatch2">Regula expression to for matching the String for Not to take the string and break wtever process we are doing or continue the next process (Start of the string) </param>
        /// <returns>0 means continue the process 1 means discontinue</returns>
        private int opFindMatch0(string tDataLineTex, Regex regMatch1, Regex regMatch2)
        {
            int iFlag = 0;
            Match mtch = regMatch1.Match(" " + tDataLineTex);
            //if (!mtch.Success)
            //    mtch = regMatch2.Match(tDataLineTex);
            if ((mtch.Success && (mtch.Index == 0 || mtch.Index == 1)))
                iFlag = 1;
            return iFlag;
        }
        private int opFindMatch2(string tDataLineTex, Regex regMatch1, Regex regMatch2)
        {
            int iFlag = 0;
            Match mtch = regMatch1.Match(" " + tDataLineTex);
            //if (!mtch.Success)
            //    mtch = regMatch2.Match(tDataLineTex);
            if ((mtch.Success && (mtch.Index >= 0 || mtch.Index == 1)))
                iFlag = 1;
            return iFlag;
        }
        private int opFindMatchTaxStatus0(string tDataLineTex, Regex regMatch1, Regex regMatch2)
        {
            int iFlag = 0;
            Match mtch = regMatch1.Match(" " + tDataLineTex);
            //if (!mtch.Success)
            //    mtch = regMatch2.Match(tDataLineTex);
            if ((mtch.Success && (mtch.Index >= 0)))
                iFlag = 1;
            return iFlag;
        }
        /// <summary>
        /// Find Matching of a String
        /// </summary>
        /// <param name="tDataLineTex">String to match</param>
        /// <param name="regMatch1">Regula expression to for matching the String for taking that string</param>
        /// <param name="regMatch2">Regula expression to for matching the String for Not to take the string and break wtever process we are doing or continue the next process (anywhere on the string) </param>
        /// <returns>0 means continue the process 1 means discontinue</returns>
        private int opFindMatch(string tDataLineText, Regex regMatch1, Regex regMatch2)
        {
            int iFlag = 0;
            Match mtch = regMatch1.Match(" " + tDataLineText);
            if (!mtch.Success)
                mtch = regMatch2.Match(" " + tDataLineText);
            if ((mtch.Success))
                iFlag = 1;
            return iFlag;
        }
        /// <summary>
        /// Replace a string 
        /// </summary>
        /// <param name="sbAddress">String for replace</param>
        /// <param name="regEx1">regualr expression for matching the string</param>
        private void opFindMatchReplace(ref StringBuilder sbAddress, Regex regEx1)
        {
            try
            {
                int tCnt = 0;
                MatchCollection mtchColl = regEx1.Matches(sbAddress.ToString().Trim());
                tCnt = mtchColl.Count;
                foreach (Match m in mtchColl)
                {
                    sbAddress.Replace(m.Value.ToString(), "");
                    break;
                }
                if (tCnt > 1) opFindMatchReplace(ref sbAddress, regEx1);
            }
            catch { }
        }
        //Language Keyword Matching
        private int opFindMatchLanguage(string tDataLineTex, Regex regMatch1, Regex regMatch2)
        {
            int iFlag = 0;
            Match mtch = regMatch1.Match(" " + tDataLineTex);
            if ((mtch.Success))
                iFlag = 1;
            return iFlag;
        }
        private void GetAccomplishments()
        {
            int pos = -1, pos1 = -1;
            Certifications = "";
            for (pos = 0; pos < DataLines.Length; pos++)
            {
                if (this.DataLines[pos].ToUpper().IndexOf("CERTIFICATIONS") >= 0 || this.DataLines[pos].ToLower().IndexOf("awards") >= 0 || this.DataLines[pos].ToLower().IndexOf("achievements") >= 0)
                {
                    try
                    {
                        for (pos1 = pos; pos1 < DataLines.Length; pos1++)
                        {
                            if (!(this.DataLines[pos1].ToLower().IndexOf("references") == 0 || this.DataLines[pos1].ToLower().IndexOf("technical knowledge") == 0 || this.DataLines[pos1].ToLower().IndexOf("area of interest") == 0 || this.DataLines[pos1].ToLower().IndexOf("personal") == 0 || this.DataLines[pos1].ToLower().IndexOf("academic project") == 0 || this.DataLines[pos1].ToLower().IndexOf("skill") == 0 || this.DataLines[pos1].ToLower().IndexOf("educational") == 0 || this.DataLines[pos1].ToLower().IndexOf("professional qualification") == 0 || this.DataLines[pos1].ToLower().IndexOf("personal") == 0 || this.DataLines[pos1].ToLower().IndexOf("software competencies") == 0 || this.DataLines[pos1].ToLower().IndexOf("extracurricular") == 0 || this.DataLines[pos1].ToLower().IndexOf("project") == 0 || this.DataLines[pos1].ToLower().IndexOf("title") == 0 || this.DataLines[pos1].ToLower().IndexOf("client") == 0 || this.DataLines[pos1].ToLower().IndexOf("description") == 0 || this.DataLines[pos1].ToLower().IndexOf("role") == 0 || this.DataLines[pos1].ToLower().IndexOf("team") == 0 || this.DataLines[pos1].ToLower().IndexOf("duaration") == 0 || this.DataLines[pos1].ToLower().IndexOf("work experience") == 0 || this.DataLines[pos].ToLower().IndexOf("academic qualification") == 0 || this.DataLines[pos].ToLower().IndexOf("qualification") == 0 || this.DataLines[pos].ToLower().IndexOf("academics") == 0))
                            {
                                Certifications += DataLines[pos1];
                                //this.ParsedStrings[(int)ParsedData.ProjectDetails] += DataLines[pos1];
                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                    catch
                    {
                    }
                }
                else
                    continue;
            }
        }
        #endregion

        #region "function,subfuncion and industry"
        /// <summary>
        /// Fetching Functin based on Function alias
        /// 1. Search FunctionIDs from the resume data
        /// 2. Fetch subFunctionIDs from the mapped function...
        /// 3. Fill the SubFunction Info into an array...
        /// 4. Search SubFunctionIDs from the resume data...
        /// </summary>

        /// <summary>
        ///  Setp 1. Finding the Sub Function with hit Count and Functional Area from the ResumeConvertedText
        ///  Setp 2. Finding the Functional Area of  Max Hit Count 
        ///  Setp 3. Based on the Functional Area take the SubFunction who's hit count is more than zero
        /// </summary>
        /// 
        //COde commended Saravana For Dataset Loading
        #region "Code Commended For DAtaset Loading"
        //private void opGetSubFunctionalAReaHitCount()
        //{
        //    //GetSubFunctionAndFunctionalArea();

        //    ExpSkills = ""; SkillIDs = ""; GenericSkills = "";
        //    FunctionalAreaType = ""; FunctionalAreaID = "0";
        //    SubFunctionType = ""; SubFunctionID = "0";
        //    StringBuilder sbSubFunctionAreaHitCountWithRIDs = null;
        //    System.Collections.ArrayList alSubFunctionAreaHitCountWithRIDs = new ArrayList();
        //    try
        //    {
        //        if (FCommon.SubFunction != null && ResumeConvertedText != null)
        //        {
        //            try
        //            {
        //                sbSubFunctionAreaHitCountWithRIDs = new StringBuilder();
        //                StringBuilder Eduforsplit1 = null;
        //                for (int cnt = FCommon.SubFunction.GetLowerBound(0); cnt <= FCommon.SubFunction.GetUpperBound(0); cnt++)//Loop of SubFunction array
        //                {
        //                    Eduforsplit1 = new StringBuilder();
        //                    StringBuilder sbExcludeList = new StringBuilder();
        //                    try
        //                    {
        //                        //putting alias of SubFunction into the StringBuiler variable
        //                        //putting Exclude alias of SubFunction into the StringBuiler variable
        //                        //Eduforsplit1 -- Include list + Title

        //                        if (FCommon.SubFunction[cnt, 0] != null)
        //                        {
        //                            if (FCommon.SubFunction[cnt, 1] != null)
        //                                if (FCommon.SubFunction[cnt, 1].Trim().Length != 0)
        //                                    Eduforsplit1.Append(FCommon.SubFunction[cnt, 1] + "," + FCommon.SubFunction[cnt, 0]);
        //                                else
        //                                    if (FCommon.SubFunction[cnt, 0].Trim().Length != 0)
        //                                        Eduforsplit1.Append(FCommon.SubFunction[cnt, 0]);
        //                                    else
        //                                        continue;
        //                            else
        //                                if (FCommon.SubFunction[cnt, 0].Trim().Length != 0)
        //                                    Eduforsplit1.Append(FCommon.SubFunction[cnt, 0]);
        //                                else
        //                                    continue;
        //                            if (FCommon.SubFunction[cnt, 3].Trim().Length != 0)
        //                                sbExcludeList.Append(FCommon.SubFunction[cnt, 3]);
        //                        }
        //                    }
        //                    catch
        //                    {

        //                    }
        //                    //delcaration of Regular expression for alias and Exclude Alias
        //                    Regex exEducation = null;
        //                    Regex exEducation1 = null;
        //                    Regex exExclude = null;
        //                    Regex exExclude1 = null;
        //                    try
        //                    {
        //                        // creation of regular expression
        //                        if (Eduforsplit1.Length < 6)
        //                        {
        //                            Eduforsplit1.Replace(@"\", @"\\");
        //                            Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
        //                            Eduforsplit1.Replace("||", "|");
        //                            exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
        //                            exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant);
        //                        }
        //                        else
        //                        {
        //                            Eduforsplit1.Replace(@"\", @"\\");
        //                            Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
        //                            Eduforsplit1.Replace("||", "|");
        //                            exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        //                            exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        //                        }
        //                        if (sbExcludeList.Length > 0)
        //                        {
        //                            sbExcludeList.Replace(@"\", @"\\");
        //                            sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
        //                            sbExcludeList.Replace("||", "|");
        //                            exExclude = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        //                            exExclude1 = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        //                        }
        //                    }
        //                    catch
        //                    {

        //                    }
        //                    finally
        //                    {
        //                        Eduforsplit1 = null; sbExcludeList = null;
        //                    }
        //                    try
        //                    {
        //                        //Step 1. matching the regular expression with the Resume Converted Text
        //                        //setp 2. Match found  then the Exclude alisas match is there 
        //                        //setp 3. Exclude Match zero then taking the SubFunction
        //                        int iHitCount = 0;
        //                        int iHitExcludeCount = 0;
        //                        MatchCollection mMatch = exEducation.Matches(@" " + ResumeConvertedText.ToString().Trim());
        //                        iHitCount = mMatch.Count;
        //                        mMatch = exEducation1.Matches(@" " + ResumeConvertedText.ToString().Trim());
        //                        iHitCount += mMatch.Count;
        //                        if (iHitCount > 2)
        //                        {
        //                            //storing into ArrayList it contains Sub Functional Area RID ,HitCount,Functional Area RID....
        //                            if (exExclude != null)
        //                            {
        //                                mMatch = exExclude.Matches(@" " + ResumeConvertedText.ToString().Trim());
        //                                iHitExcludeCount = mMatch.Count;
        //                                mMatch = exExclude1.Matches(@" " + ResumeConvertedText.ToString().Trim());
        //                                iHitExcludeCount += mMatch.Count;
        //                                if (iHitExcludeCount > 1) continue;
        //                            }
        //                            //getting FunctionalArea which  mapped with subFunction
        //                            string tSelectedHitCountFunctionalArea = opGetSelectMappedFunctionIDs(FCommon.SubFunction[cnt, 2]);
        //                            //Storing the SubFuncti6onID ,Hit Count && FunctionalAreaID int the ArrayList
        //                            string[] aSelectedHitFunArea = tSelectedHitCountFunctionalArea.Split(',');
        //                            for (int nCnt = 0; nCnt <= aSelectedHitFunArea.GetUpperBound(0); nCnt++)
        //                            {
        //                                if (aSelectedHitFunArea[nCnt] == "") continue;
        //                                if (aSelectedHitFunArea[nCnt] == "0") continue;
        //                                alSubFunctionAreaHitCountWithRIDs.Add(new MyClass(FCommon.SubFunction[cnt, 2], iHitCount.ToString(), aSelectedHitFunArea[nCnt]));
        //                            }
        //                        }
        //                    }
        //                    catch
        //                    {

        //                    }
        //                    finally
        //                    {
        //                        exEducation = null; exEducation1 = null; exExclude = null; exExclude1 = null;
        //                    }
        //                }
        //            }
        //            catch
        //            {

        //            }
        //            finally
        //            {

        //            }
        //            if (alSubFunctionAreaHitCountWithRIDs.Count > 0)//if Array Count is >0 
        //            {//searching
        //                //Max Hit Count of Function
        //                opGetFunctionalAreaWithHitCount(alSubFunctionAreaHitCountWithRIDs);
        //                //Find the SubFunctionIDs Based on SubFunctinIDs
        //                opGetSubFunctionFromArrayHitCount(alSubFunctionAreaHitCountWithRIDs);
        //            }
        //        }
        //    }
        //    catch
        //    {

        //    }
        //    finally
        //    {
        //        sbSubFunctionAreaHitCountWithRIDs = null;
        //        alSubFunctionAreaHitCountWithRIDs = null;
        //    }
        //}

        private void opGetSubFunctionalAReaHitCount()
        {
            ExpSkills = ""; SkillIDs = ""; GenericSkills = "";
            FunctionalAreaType = ""; FunctionalAreaID = "0";
            SubFunctionType = ""; SubFunctionID = "0";
            StringBuilder sbSubFunctionAreaHitCountWithRIDs = null;
            System.Collections.ArrayList alSubFunctionAreaHitCountWithRIDs = new ArrayList();
            Regex exEducation = null;
            //Regex exEducation1 = null;
            Regex exExclude = null;
            //Regex exExclude1 = null;
            string tSelectedHitCountFunctionalArea = "";
            string[] aSelectedHitFunArea = null;
            try
            {
                if (FCommon.SubFunction != null && ResumeConvertedText != null)
                {
                    try
                    {
                        MatchCollection mMatch = null;
                        sbSubFunctionAreaHitCountWithRIDs = new StringBuilder();
                        StringBuilder Eduforsplit1 = null;
                        StringBuilder sbExcludeList = null;
                        int iHitCount = 0;
                        int iHitExcludeCount = 0;
                        DataRow[] dr = null;
                        for (int cnt = FCommon.SubFunction.GetLowerBound(0); cnt <= FCommon.SubFunction.GetUpperBound(0); cnt++)//Loop of SubFunction array
                        {
                            Eduforsplit1 = new StringBuilder();
                            sbExcludeList = new StringBuilder();
                            try
                            {
                                //putting alias of SubFunction into the StringBuiler variable
                                //putting Exclude alias of SubFunction into the StringBuiler variable
                                //Eduforsplit1 -- Include list + Title
                                if (FCommon.SubFunction[cnt, 0] != null)
                                {
                                    if (FCommon.SubFunction[cnt, 1] != null)
                                        if (FCommon.SubFunction[cnt, 1].Trim().Length != 0)
                                            Eduforsplit1.Append(FCommon.SubFunction[cnt, 1] + "," + FCommon.SubFunction[cnt, 0]);
                                        else
                                            if (FCommon.SubFunction[cnt, 0].Trim().Length != 0)
                                                Eduforsplit1.Append(FCommon.SubFunction[cnt, 0]);
                                            else
                                                continue;
                                    else
                                        if (FCommon.SubFunction[cnt, 0].Trim().Length != 0)
                                            Eduforsplit1.Append(FCommon.SubFunction[cnt, 0]);
                                        else
                                            continue;
                                    if (FCommon.SubFunction[cnt, 3].Trim().Length != 0)
                                        sbExcludeList.Append(FCommon.SubFunction[cnt, 3]);
                                }
                            }
                            catch
                            {

                            }
                            //delcaration of Regular expression for alias and Exclude Alias
                            exEducation = null;
                            //exEducation1 = null;
                            exExclude = null;
                            //exExclude1 = null;
                            try
                            {
                                // creation of regular expression
                                if (Eduforsplit1.Length < 3)
                                {
                                    Eduforsplit1.Replace(@"\", @"\\");
                                    Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                    Eduforsplit1.Replace("||", "|");
                                    exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
                                    //  exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase );
                                }
                                else
                                {
                                    Eduforsplit1.Replace(@"\", @"\\");
                                    Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                    Eduforsplit1.Replace("||", "|");
                                    exEducation = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                    //exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                                }
                                if (sbExcludeList.Length > 0)
                                {
                                    sbExcludeList.Replace(@"\", @"\\");
                                    sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                    sbExcludeList.Replace("||", "|");
                                    exExclude = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                }
                            }
                            catch
                            {

                            }
                            finally
                            {
                                Eduforsplit1 = null; sbExcludeList = null;
                            }
                            try
                            {
                                //Step 1. matching the regular expression with the Resume Converted Text
                                //setp 2. Match found  then the Exclude alisas match is there 
                                //setp 3. Exclude Match zero then taking the SubFunction
                                iHitCount = 0;
                                iHitExcludeCount = 0;
                                mMatch = exEducation.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                iHitCount = mMatch.Count;
                                //mMatch = exEducation1.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                //iHitCount += mMatch.Count;
                                if (iHitCount > 0)
                                {
                                    iHitCount = opCheckMatchCount(mMatch, Convert.ToInt32(FCommon.SubFunction[cnt, 4]));
                                }

                                if (iHitCount >= Convert.ToInt32(FCommon.SubFunction[cnt, 4]))
                                {

                                    //storing into ArrayList it contains Sub Functional Area RID ,HitCount,Functional Area RID....
                                    if (exExclude != null)
                                    {
                                        mMatch = exExclude.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                        iHitExcludeCount = mMatch.Count;
                                        //mMatch = exExclude1.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                        //iHitExcludeCount += mMatch.Count;
                                        if (iHitExcludeCount > 1) continue;
                                    }
                                    //getting FunctionalArea which  mapped with subFunction
                                    //  tSelectedHitCountFunctionalArea = opGetSelectMappedFunctionIDs(FCommon.SubFunction[cnt, 2]);
                                    dr = FCommon.dsFSubFunction.Tables[0].Select("SubFunctionAreaID in (" + FCommon.SubFunction[cnt, 2].ToString() + ")");
                                    for (int i = 0; i <= dr.Length - 1; i++)
                                    {
                                        if (tSelectedHitCountFunctionalArea.ToString().Trim().Length == 0)
                                            tSelectedHitCountFunctionalArea = dr[i]["FunctionAreaID"].ToString();
                                        else
                                            tSelectedHitCountFunctionalArea = tSelectedHitCountFunctionalArea + "," + dr[i]["FunctionAreaID"].ToString();
                                    }
                                    dr = null;
                                    //Storing the SubFuncti6onID ,Hit Count && FunctionalAreaID int the ArrayList
                                    aSelectedHitFunArea = tSelectedHitCountFunctionalArea.Split(',');
                                    for (int nCnt = 0; nCnt <= aSelectedHitFunArea.GetUpperBound(0); nCnt++)
                                    {
                                        if (aSelectedHitFunArea[nCnt] == "") continue;
                                        if (aSelectedHitFunArea[nCnt] == "0") continue;
                                        alSubFunctionAreaHitCountWithRIDs.Add(new MyClass(FCommon.SubFunction[cnt, 2], iHitCount.ToString(), aSelectedHitFunArea[nCnt]));
                                    }
                                }
                            }
                            catch
                            {

                            }
                            finally
                            {
                                exEducation = null; exExclude = null;
                                //exEducation1 = null;
                                //exExclude1 = null;
                            }
                        }
                    }
                    catch
                    {

                    }
                    finally
                    {

                    }
                    if (alSubFunctionAreaHitCountWithRIDs.Count > 0)//if Array Count is >0 
                    {//searching
                        //Max Hit Count of Function
                        opGetFunctionalAreaWithHitCount(alSubFunctionAreaHitCountWithRIDs);
                        //Find the SubFunctionIDs Based on SubFunctinIDs
                        opGetSubFunctionFromArrayHitCount(alSubFunctionAreaHitCountWithRIDs);
                    }
                }
            }
            catch
            {

            }
            finally
            {
                sbSubFunctionAreaHitCountWithRIDs = null;
                alSubFunctionAreaHitCountWithRIDs = null;
            }
        }

        #endregion

        //private void opGetSubFunctionalAReaHitCount()
        //{
        //    try
        //    {
        //        GetSubFunctionAndFunctionalArea();
        //    }
        //    catch { }

        //}

        private void GetSubFunctionAndFunctionalArea()
        {
            StringBuilder strAddress = null;
            try
            {
                strAddress = new StringBuilder();
                PrefLocations = "";
                LocationsIDs = "";

                Regex exExperience = null, exExperience1 = null;
                #region "Search for Current Address or Present Address"
                try
                {

                    string tWorkExperience = "professional  experience|career contour|experience|ORGANIZATIONAL SCAN|Major Assignments|experience chronology|organisational scan|Total Full Time Experience (in Months)|Career Progression|LABOR EXPERIENCE|work experience|working experience|professional experience|organisational experience|experience:|experience : " +
                         "|employment history|highlights of professional experience|details of experience" +
                         "|managerial experiences|previous work experience|professional summary|selected experience" +
                         "|professional work experience|e x p e r i e n c e|occupational contour|work history" +
                         "|Professional Experience in Brief:|Professional Experience in Brief|Employee History" +
                         "|employment history|career history|-: professional experience|proffesional experience" +
                         "|performance highlights|current assignment|assignments held|experience summary|hardware technical expertise|software technical expertise|networking expertise|summary|work summary|job nature";

                    exExperience = new Regex(@"[\s,\(\:](" + tWorkExperience + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
                    exExperience1 = new Regex(@"[\s,\(\:](" + tWorkExperience + @")[\s]?[\-\s]?$", RegexOptions.IgnoreCase);

                    string SkillNot = "projects handled|special achievements|skills summary|summary of skills|certifications|academics|compensation details|significant experience working with|executive|Expectations|competencies|certifications and trainings|permanent address|date of birth|personal dossier|credentials|Significant Projects:|CMMi – Experience|Passport and Visa|Excellent work experience|Summary of experience|Project Overview|key result areas|Professional Synopsis|Education and Qualifications|P e r  s o n a l   D e t a i l s|I n t e r e s t s|Academic qualifications|Skill sets" +
        "|Technical History|Technical Skills Set|Technical Skill Set|Skill Set|Skill Sets|Skills Set" +
        "|Skills Sets" +
        "|software profile|computer literacy|software proficiency|AREA OF INTEREST|" +
        "TECHNICAL PROFICIENCY|Extra Curricular Activities|Extra-Curricular Activities" +
        "|EDUCATION AND DEVELOPMENT|Proficiency in Computers|computer knowledge" +
        "|Educational Qualification|Educational Qualifications and Certifications" +
        "|summary of qualifications|educational qualifications|skills|software training" +
        "|technical exposure|software exposure|computer skill|university subjects|entrance examination" +
        "|q u a l i f i c a t i o n s|a c a d e m i c|e d u c a t i o n|computer skills" +
        "|co-curricular activities|extra curriculars|personal details|personal profile|annex" +
        "|personal detail|personal information|contact information|personal memorandam" +
        "|interests|additional information|software skills|technical skills|technical skill" +
        "|technical profile|software skill|declaration|skill set|computer proficiency" +
        "|other skills|academic profile|additional details|ibm annex|education|career profile" +
        "|qualification|professional qualification|contact details|fields of interest|references" +
        "|hobbies|additional courses|academic|certification|extracurricular activities" +
        "|personal biography|salary withdrawn|salary expeected|latest joining|Computer & IT Skills" +
        "|Qualifications|Qualification|Personal details:|Education:|Computer Skills:" +
        "|PROFESSIONAL INTERESTS|ACADAMIC RECORD|EDUCATIONAL CREDENTIALS|educational information" +
        "|SPECIAL REMARKS:|MY POSITIVE:|Looking for a better position|MY STRENGTH/WEAKNESS|languages known";
                    Regex reSkillNot = new Regex(@"[\|\s,\{\(\:](" + SkillNot + @")[:\s]?[:\-\s\)\}]?\b", RegexOptions.IgnoreCase);
                    Regex reSkillNot1 = new Regex(@"[\|\s,\{\(\:](" + SkillNot + @")[:\s]?[:\-\s\)\}]?$", RegexOptions.IgnoreCase);

                    int iFound = 0;
                    int cnt = -1, nCnt = -1;
                    int iEdustr = 0;
                    int iskill = -1;
                    //for (int outText = 0; outText < this.DataLines.Length && strAddress.ToString().Trim().Length <= 1; outText++)
                    //{
                    //    FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), exExperience, exExperience1);
                    //    if (FlagPresent == 1)
                    //    {
                    //        for (int innText = outText; innText <= (outText + 5) && innText < this.DataLines.Length; innText++)
                    //        {
                    //            prelBrFlag = 0;
                    //            string rmSpace = this.DataLines[innText].ToLower().Trim();
                    //            if ((opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1) == 1) || rmSpace.Trim().IndexOf("permanent address") == 0 || rmSpace.Trim().IndexOf("same as above") >= 0 || rmSpace.Trim().IndexOf("phone") == 0)
                    //                prelBrFlag = 1;
                    //            if (prelBrFlag == 1) break;
                    //            strAddress.Append(" " + this.DataLines[innText].ToLower().Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("-", " ").Replace(":", " ").Trim());
                    //        }
                    //    }
                    //}

                    for (cnt = 0; cnt < this.DataLines.Length; cnt++) //loop of DataLine
                    {
                        iEdustr = 0;
                        if (this.DataLines[cnt].Length < 90 && exExperience.IsMatch(" " + this.DataLines[cnt].Trim().ToLower()) | exExperience1.IsMatch(" " + this.DataLines[cnt].Trim().ToLower()))//matching the string for getting the experienced skill
                            iEdustr = 1;

                        Match mth = null;
                        mth = exExperience.Match(" " + this.DataLines[cnt].Trim().ToLower());
                        if (mth.Success == true && mth.Value.Trim().ToLower() == "experience")
                        {
                            if (mth.Success && mth.Value.Trim().ToLower() == "experience" && (this.DataLines[cnt].Trim().Length < 70) && this.DataLines[cnt].IndexOf(",") < 0)
                                iEdustr = 1;
                            else
                                iEdustr = 0;
                        }
                        if (iEdustr == 1)//match found 
                        {
                            string str1 = "";
                            for (nCnt = cnt; nCnt < this.DataLines.Length; nCnt++)
                            {
                                str1 = this.DataLines[nCnt].ToLower().Trim();
                                iFound = 0;
                                Match mtch = reSkillNot.Match(" " + this.DataLines[nCnt].Trim());//finding the skill not matching

                                if (!mtch.Success)
                                    mtch = reSkillNot1.Match(" " + this.DataLines[nCnt].Trim());
                                //int eduNFlag = 0;
                                if (((mtch.Success && (mtch.Index == 0 || mtch.Index == 1)) || str1.IndexOf("computer skill:") >= 0 || str1.IndexOf("computer skills:") >= 0 || str1.IndexOf("education:") >= 0 || str1.IndexOf("personal details:") >= 0))
                                    iFound = 1;
                                if (iFound == 0)//read all the array values from the match point 
                                {
                                    cnt = nCnt;
                                    iskill += 1;
                                    //Putting 'AKMHCKW' in ResumeConverted Text'
                                    if (this.DataLines[nCnt].Replace("?", "").Trim().Length == 0) continue;
                                    strAddress.Append(" " + this.DataLines[nCnt].ToLower().Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("-", " ").Replace(":", " ").Trim());

                                }
                                else//match found for Not reading experience skill
                                {
                                    cnt = nCnt;//skill array reading breaking 
                                    break;
                                }
                            }
                        }
                        else
                            continue;
                    }

                }
                catch
                {

                }
                finally
                {
                    exExperience = null; exExperience1 = null;
                }
                #endregion



                if (strAddress.ToString().Trim().Length > 0)
                {
                    try
                    {
                        GetFinalSubFunctionAndFunction(strAddress.ToString());
                    }
                    catch
                    {

                    }
                }


            }
            catch
            {

            }
            finally
            {
                strAddress = null;
            }
        }

        private void GetFinalSubFunctionAndFunction(string Skillstr)
        {
            bool flagBreakMatch = true;
            try
            {
                char[] cSFunctionSplit = {  Convert.ToChar(0),
											Convert.ToChar(1),
											Convert.ToChar(2),
											Convert.ToChar(3),
											Convert.ToChar(4),
											Convert.ToChar(5),
											Convert.ToChar(6),
											Convert.ToChar(7),
											Convert.ToChar(8),
											Convert.ToChar(9),
											Convert.ToChar(10),
											Convert.ToChar(11),
											Convert.ToChar(12),
											Convert.ToChar(13),
											Convert.ToChar(14),
											Convert.ToChar(15),
											Convert.ToChar(16),
											Convert.ToChar(17),
											Convert.ToChar(18),
											Convert.ToChar(19),
											Convert.ToChar(20),
											Convert.ToChar(21),
											Convert.ToChar(22),
											Convert.ToChar(23),
											Convert.ToChar(24),
											Convert.ToChar(25),
											Convert.ToChar(26),
											Convert.ToChar(27),
											Convert.ToChar(28),
											Convert.ToChar(29),
											Convert.ToChar(30),
											Convert.ToChar(31),
											Convert.ToChar(34),
											//Convert.ToChar(35),
											Convert.ToChar(36),',','.','-','•','–',':','(',')'
										};
                string[] locSearch = Skillstr.Split(cSFunctionSplit);

                // Saravana Addedd
                try
                {
                    DataRow[] dr = null;
                    string tRID = "";
                    string tSelectedHitCountFunctionalArea = "";
                    #region "finding SubFunction And Function In Dataset"
                    for (int i = locSearch.GetLowerBound(0); i <= locSearch.GetUpperBound(0) && flagBreakMatch == true; i++)
                    {
                        try
                        {
                            if (locSearch[i].Trim() != "")
                            {
                                //HCM_SUBFUNCTION_AREA"].Select("Title like '" + locSearch[i] + "' OR IncludeList LIKE '" + locSearch[i] + ",%' OR IncludeList LIKE '%," + locSearch[i] + ",%' OR IncludeList LIKE '," + locSearch[i] + "%' AND NOT (ExcludeList LIKE '" + locSearch[i] + ",%' OR ExcludeList LIKE '%," + locSearch[i] + ",%' OR ExcludeList LIKE '," + locSearch[i] + "%')
                                dr = HireCraft.FCommon.dsFSubFunction.Tables["HCM_SUBFUNCTION_AREA"].Select("Title like '" + locSearch[i] + "' OR IncludeList LIKE '" + locSearch[i] + ",%' OR IncludeList LIKE '%," + locSearch[i] + ",%' OR IncludeList LIKE '," + locSearch[i] + "%' AND NOT (ExcludeList LIKE '" + locSearch[i] + ",%' OR ExcludeList LIKE '%," + locSearch[i] + ",%' OR ExcludeList LIKE '," + locSearch[i] + "%')", "", DataViewRowState.CurrentRows);
                                if (dr.Length > 0)
                                {
                                    for (int j = 0; j <= dr.Length - 1; j++)
                                    {
                                        if (dr[j]["RID"] != DBNull.Value)
                                        {
                                            if (tRID.Trim().Length == 0)
                                                tRID = dr[i]["RID"].ToString();
                                            else
                                                tRID += "," + dr[i]["RID"].ToString();
                                        }
                                    }
                                    dr = null;

                                    string tSelectedFunctionalArea = opGetSelectMappedSubfunctionAndFunctionIDs(tRID);
                                    if (tSelectedFunctionalArea != "")
                                        tSelectedHitCountFunctionalArea = tSelectedFunctionalArea;
                                    else
                                        tSelectedHitCountFunctionalArea += "," + tSelectedFunctionalArea;
                                    tRID = "";
                                    dr = HireCraft.FCommon.dsFFunction.Tables["HCM_JOB_CATEGORIES"].Select("CategoryType like '" + locSearch[i] + "' OR FunctionalAreaAlias LIKE '" + locSearch[i] + ",%' OR FunctionalAreaAlias LIKE '%," + locSearch[i] + ",%' OR FunctionalAreaAlias LIKE '," + locSearch[i] + "%' AND NOT (ExcludeAlias LIKE '" + locSearch[i] + ",%' OR ExcludeAlias LIKE '%," + locSearch[i] + ",%' OR ExcludeAlias LIKE '," + locSearch[i] + "%')", "", DataViewRowState.CurrentRows);
                                    if (dr.Length > 0)
                                    {
                                        for (int j = 0; j <= dr.Length - 1; j++)
                                        {
                                            if (dr[j]["RID"] != DBNull.Value)
                                            {
                                                if (tRID.Trim().Length == 0)
                                                    tRID = dr[i]["RID"].ToString();
                                                else
                                                    tRID += "," + dr[i]["RID"].ToString();
                                            }
                                        }
                                    }
                                    dr = null;
                                    if (tSelectedHitCountFunctionalArea != "")
                                        tSelectedHitCountFunctionalArea += "," + tRID;
                                    else
                                        tSelectedHitCountFunctionalArea = tRID;

                                    //PrefLocations += dv.ToTable("HCM_SUBFUNCTION_AREA").Rows[0]["LocationTitle"] + ":" + "" + ",";
                                    //LocationsIDs += dv.ToTable("HCM_SUBFUNCTION_AREA").Rows[0]["RID"] + ",";
                                }
                            }
                        }
                        catch { }
                    }

                    FunctionalAreaID = opGetParseUniqueData(tSelectedHitCountFunctionalArea.ToString());
                    SubFunctionID = opGetParseUniqueData(tSubFunctionRID);
                    #endregion
                }
                catch
                {

                }
                //  Saravana Addedd

            }
            catch { }
        }

        private string opGetSelectMappedSubfunctionAndFunctionIDs(string tSubFunctionID)
        {
            string tSelectedFunID = "";
            try
            {
                this.ds = new DataSet();
                ds.ReadXml(new StringReader(FCommon.objfXMLFunSubFunction.OuterXml));
                DataRow[] dr = ds.Tables[0].Select("SubFunctionAreaID in (" + tSubFunctionID + ")");
                // FunctionalAreaList = new string[dr.Length, 4];
                for (int i = 0; i <= dr.Length - 1; i++)
                {
                    if (tSelectedFunID.Trim().Length == 0)
                    {
                        tSelectedFunID = dr[i]["FunctionAreaID"].ToString();
                        tSubFunctionRID = dr[i]["subfunctionareaid"].ToString();
                    }
                    else
                    {
                        tSelectedFunID = tSelectedFunID + "," + dr[i]["FunctionAreaID"].ToString();
                        tSubFunctionRID = tSubFunctionRID + "," + dr[i]["subfunctionareaid"].ToString();
                    }
                }

            }
            catch
            {

            }
            return tSelectedFunID;
        }

        /// <summary>
        /// Getting the SubFunctionIDs and SubFunction Titles
        /// </summary>
        /// <param name="tSubFunctionAreaList">ArrayLis contain SubFunctionID,HitCount && FunctionID</param>
        private void opGetSubFunctionFromArrayHitCount(ArrayList tSubFunctionAreaList)
        {
            //Get the Max Functional area's SubFunctionID

            if (FunctionalAreaID.Trim().Length > 0 && FunctionalAreaID.Trim() != "0")
            {
                SubFunctionID = "0"; SubFunctionType = "";
                StringBuilder sbSubFunctionArea = new StringBuilder();
                ArrayList alFunctionalAreaHitCount = new ArrayList();
                string[] aFunctionAreaList = FunctionalAreaID.Split(',', ';');
                //Fetching Sub Function ID based on the FunctionIds
                try
                {
                    for (int i = 0; i <= tSubFunctionAreaList.Count - 1; i++)
                    {
                        MyClass objNew = (MyClass)tSubFunctionAreaList[i];
                        long FunctionID = Convert.ToInt64(objNew.FunctionAreaID);
                        long RID = Convert.ToInt64(objNew.RID);
                        objNew = null;
                        for (int j = 0; j <= aFunctionAreaList.GetUpperBound(0); j++)
                        {
                            if (aFunctionAreaList[j] == "") continue;
                            if (aFunctionAreaList[j] == FunctionID.ToString())
                            {
                                sbSubFunctionArea.Append(RID.ToString() + ",");
                                break;
                            }
                        }
                    }
                }
                catch
                {

                }

                if (sbSubFunctionArea.Length > 0)
                {
                    SubFunctionID = sbSubFunctionArea.ToString();
                    SubFunctionID = opGetParseUniqueData(SubFunctionID);
                    //Fetching the SubFunction Titles
                    SubFunctionType = opGetTitlesSubFunction(FCommon.objfXMLSubFunctionList, SubFunctionID);
                }
            }
        }
        /// <summary>
        /// Fetching the FunctionIDs which Mapped with SubFuncionId
        /// </summary>
        /// <param name="tSubFunctionID">SubFunctionID</param>
        /// <returns>Mapped FunctionIDs</returns>
        private string opGetSelectMappedFunctionIDs(string tSubFunctionID)
        {
            string tSelectedFunID = "";
            try
            {
                //this.ds = new DataSet();
                //ds.ReadXml(new StringReader(FCommon.objfXMLFunSubFunction.OuterXml));
                DataRow[] dr = FCommon.dsFSubFunction.Tables[0].Select("SubFunctionAreaID in (" + tSubFunctionID + ")");
                // FunctionalAreaList = new string[dr.Length, 4];
                for (int i = 0; i <= dr.Length - 1; i++)
                {
                    if (tSelectedFunID.Trim().Length == 0)
                    {
                        tSelectedFunID = dr[i]["FunctionAreaID"].ToString();
                    }
                    else
                    {
                        tSelectedFunID = tSelectedFunID + "," + dr[i]["FunctionAreaID"].ToString();
                    }
                }

            }
            catch
            {

            }
            return tSelectedFunID;
        }
        /// <summary>
        /// Finding the Max Hit FunctionalAreaID
        /// </summary>
        /// <param name="tSubFunctionAreaList"></param>
        private void opGetFunctionalAreaWithHitCount(ArrayList tSubFunctionAreaList)
        {
            //Get Total Hit Count of Function Area  base on SubFunction Area	
            ArrayList alFunctionalAreaHitCount = new ArrayList();
            try
            {
                //Filter the HitCounts 
                for (int i = 0; i <= tSubFunctionAreaList.Count - 1; i++)
                {
                    MyClass objNew = (MyClass)tSubFunctionAreaList[i];
                    long FunctionID = Convert.ToInt64(objNew.FunctionAreaID);
                    int HitCount = Convert.ToInt32(objNew.HitCount);
                    objNew = null;
                    int iTotalHitCount = 0;
                    for (int j = 0; j <= tSubFunctionAreaList.Count - 1; j++)
                    {
                        objNew = (MyClass)tSubFunctionAreaList[j];
                        long SFunctionID = Convert.ToInt64(objNew.FunctionAreaID);
                        int SHitCount = Convert.ToInt32(objNew.HitCount);
                        //
                        if (SFunctionID == FunctionID)
                        {
                            iTotalHitCount += SHitCount;
                        }
                        objNew = null;
                    }
                    if (iTotalHitCount > 0 || HitCount > 0)
                    {
                        //storing into ArrayList , it contains TotalHitCount of Functional Area and Functional AreaID
                        alFunctionalAreaHitCount.Add(new MyClass(iTotalHitCount.ToString(), FunctionID.ToString()));
                    }
                }
            }
            catch
            {

            }
            // string tFunctionalAreaID;
            try
            {
                if (alFunctionalAreaHitCount.Count != 0)
                {
                    //Get the Functional area RIDs (Maximum HitCount Functional AreaRID and Equal Functional AReaRID)
                    FunctionalAreaType = ""; FunctionalAreaID = "0";
                    FunctionalAreaID = opGetMaxandEqualFunctionalAreaHitCount(alFunctionalAreaHitCount);
                    //getting the FunctionalArea Titles from the Functiona AreaID
                    FunctionalAreaType = opGetTitles(FCommon.objfXMLFunctionalAreas, FunctionalAreaID);
                }
            }
            catch
            {

            }
        }
        /// <summary>
        /// Fetch the Title based on the RID
        /// </summary>
        /// <param name="objXmlSearch">Xml for Seaching Title</param>
        /// <param name="tSearchIDs">RIDs</param>
        /// <returns>Title of the Search RIDs</returns>
        private string opGetTitlesSubFunction(System.Xml.XmlDocument objXmlSearch, string tSearchIDs)
        {
            string tTitle = "";//get the Titles with comma separate
            try
            {
                this.ds = new DataSet();
                ds.ReadXml(new StringReader(objXmlSearch.OuterXml));
                DataRow[] dr = ds.Tables[0].Select("RID in (" + tSearchIDs + ")");
                for (int i = 0; i <= dr.Length - 1; i++)
                {
                    if (dr[i]["Title"] != DBNull.Value)
                    {
                        if (tTitle.Trim().Length == 0)
                            tTitle = dr[i]["Title"].ToString();
                        else
                            tTitle += "," + dr[i]["Title"].ToString();
                    }
                }
                dr = null;
                this.ds.Tables[0].Rows.Clear();
                this.ds.Tables[0].Columns.Clear();
                this.ds.Tables[0].Dispose();
                this.ds.Dispose();
            }
            catch
            {

            }
            finally
            {
            }
            tTitle = opGetParseUniqueData(tTitle);
            return tTitle;
        }
        /// <summary>
        /// Fetch the Title based on the RID
        /// </summary>
        /// <param name="objXmlSearch">Xml for Seaching Title</param>
        /// <param name="tSearchIDs">RIDs</param>
        /// <returns>Title of the Search RIDs</returns>
        private string opGetTitles(System.Xml.XmlDocument objXmlSearch, string tSearchIDs)
        {
            string tTitle = "";//get the Titles with comma separate
            try
            {
                this.ds = new DataSet();
                ds.ReadXml(new StringReader(objXmlSearch.OuterXml));
                DataRow[] dr = ds.Tables[0].Select("RID in (" + tSearchIDs + ")");
                for (int i = 0; i <= dr.Length - 1; i++)
                {
                    if (dr[i]["CategoryType"] != DBNull.Value)
                    {
                        if (tTitle.Trim().Length == 0)
                            tTitle = dr[i]["CategoryType"].ToString();
                        else
                            tTitle += "," + dr[i]["CategoryType"].ToString();
                    }
                }
                dr = null;
                this.ds.Tables[0].Rows.Clear();
                this.ds.Tables[0].Columns.Clear();
                this.ds.Tables[0].Dispose();
                this.ds.Dispose();
            }
            catch
            {

            }
            finally
            {
            }
            tTitle = opGetParseUniqueData(tTitle);
            return tTitle;
        }

        public DataTable RemoveDuplicateRows(DataTable dTable, string colName)
        {
            Hashtable hTable = new Hashtable();
            ArrayList duplicateList = new ArrayList();

            //Add list of all the unique item value to hashtable, which stores combination of key, value pair.
            //And add duplicate item value in arraylist.
            foreach (DataRow drow in dTable.Rows)
            {
                if (hTable.Contains(drow[colName]))
                    duplicateList.Add(drow);
                else
                    hTable.Add(drow[colName], string.Empty);
            }

            //Removing a list of duplicate items from datatable.
            foreach (DataRow dRow in duplicateList)
                dTable.Rows.Remove(dRow);

            //Datatable which contains unique records will be return as output.
            return dTable;
        }

        /// <summary>
        /// Finding the Max Hit Count FunctionalArea ID
        /// </summary>
        /// <param name="FunctionalID">Array List Contain FunctionalAreaUD and Sum of HitCount</param>
        /// <returns>FunctionalAreaIDs</returns>
        private string opGetMaxandEqualFunctionalAreaHitCount(ArrayList FunctionalID)
        {
            string tEqualHitFunctionID = "";
            try
            {//Finding Max Hit Count  
                DataTable dt = new DataTable();
                dt.Columns.Add(new DataColumn("HitCount", System.Type.GetType("System.Int64")));
                dt.Columns.Add(new DataColumn("FunctionAreaID", System.Type.GetType("System.Int64")));
                for (int j = 0; j <= FunctionalID.Count - 1; j++)
                {
                    DataRow aRow = dt.NewRow();
                    MyClass objNew1 = (MyClass)FunctionalID[j];
                    aRow["FunctionAreaID"] = Convert.ToInt64(objNew1.FunctionAreaID);
                    aRow["HitCount"] = Convert.ToInt64(objNew1.HitCount);
                    objNew1 = null;
                    dt.Rows.Add(aRow);
                    aRow = null;
                }
                DataView dv = dt.DefaultView;
                dv.Sort = "HitCount desc";
                dt = dv.ToTable();
                dt = RemoveDuplicateRows(dt, "FunctionAreaID");
                int i = 0;
                for (i = 0; i < dt.Rows.Count && i <= 2; i++)
                {
                    if (tEqualHitFunctionID.Trim().Length == 0)
                        tEqualHitFunctionID = dt.Rows[i][1].ToString();
                    else
                        tEqualHitFunctionID = tEqualHitFunctionID + "," + dt.Rows[i][1].ToString();
                }
                try
                {
                    if (i == 3 && i < dt.Rows.Count - 1)
                    {
                        if (dt.Rows[2][0].ToString() == dt.Rows[i][0].ToString())
                            if (tEqualHitFunctionID.Trim().Length == 0)
                                tEqualHitFunctionID = dt.Rows[i][1].ToString();
                            else
                                tEqualHitFunctionID = tEqualHitFunctionID + "," + dt.Rows[i][1].ToString();
                    }
                }
                catch { }
                dv.Dispose(); dv = null;
                dt.Dispose(); dt = null;
            }
            catch
            {

            }
            return opGetParseUniqueData(tEqualHitFunctionID).Replace(":", "").Trim();
        }
        /// <summary>
        /// Fetching the IndustryTypeID && IndustryType Title from ResumeConvertedText
        /// Max Two Industry Type
        /// </summary>
        public void getIndustryType()
        {
            try
            {
                IndustryType = "";
                IndustryTypeID = "0";
                char[] CSetAliases = { ',', ';' };
                #region "search industry type"
                int iMaxHits = 0;//Stroe Max Hits
                int iSecMaxHits = 0;//Stroe Max Hits
                Int64 iMaxHitIndex = -1;//Store Max Hit RID
                Int64 iMax2HitIndex = -1;//Store 2 Max Hit RID
                string tIndustryType = ""; string tIndustryType2 = "";
                Int64 totalLength = ResumeConvertedText.Length;
                for (int cnt = 0; cnt <= HireCraft.FCommon.IndustryTypeList.GetUpperBound(0); cnt++)
                {
                    StringBuilder sbExcludeList = new StringBuilder();
                    int _iHits = 0;//Hits ofthe current Array value
                    string tTemp = "";
                    //if (HireCraft.FCommon.IndustryTypeList[cnt, 1].Trim().Length > 0)
                    //    tTemp = HireCraft.FCommon.IndustryTypeList[cnt, 1].ToLower().ToString().Trim();
                    //else
                    //    continue;
                    if (FCommon.IndustryTypeList[cnt, 1] != null)
                        if (FCommon.IndustryTypeList[cnt, 1].Trim().Length != 0)
                            tTemp = FCommon.IndustryTypeList[cnt, 1] + "," + FCommon.IndustryTypeList[cnt, 0];
                        else
                            if (FCommon.IndustryTypeList[cnt, 0].Trim().Length != 0)
                                tTemp = FCommon.IndustryTypeList[cnt, 0];
                            else
                                continue;
                    else
                        if (FCommon.IndustryTypeList[cnt, 0].Trim().Length != 0)
                            tTemp = FCommon.IndustryTypeList[cnt, 0];
                        else
                            continue;
                    if (HireCraft.FCommon.IndustryTypeList[cnt, 3].Trim().Length != 0)
                        sbExcludeList.Append(HireCraft.FCommon.IndustryTypeList[cnt, 3]);

                    Regex exExclude = null;
                    Regex exExclude1 = null;
                    try
                    {

                        if (sbExcludeList.Length > 0)
                        {
                            sbExcludeList.Replace(@"\", @"\\");
                            sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            sbExcludeList.Replace("||", "|");
                            exExclude = new Regex(@"[\s,\(\:](" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            exExclude1 = new Regex(@"[\s,\(\:](" + sbExcludeList.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        }
                    }
                    catch { }
                    finally
                    {
                        sbExcludeList = null;
                    }
                    try
                    {
                        string[] tTemparr = tTemp.Split(CSetAliases);
                        for (int iInd = 0; iInd <= tTemparr.GetUpperBound(0); iInd++)
                        {
                            if (tTemparr[iInd] == null)
                                continue;
                            if (tTemparr[iInd] == "")
                                continue;
                            int _index = 0;//Strating index of search text
                            do
                            {
                                int lenSearch = tTemparr[iInd].Trim().Length;
                                _index = ResumeConvertedText.ToLower().IndexOf(" " + tTemparr[iInd].ToLower().Trim(), _index);

                                if ((_index + lenSearch + 2) > totalLength)
                                    lenSearch = lenSearch + 1;
                                else
                                    lenSearch = lenSearch + 2;
                                if (_index >= 0)
                                {
                                    try
                                    {
                                        string strFindString = ResumeConvertedText.ToLower().Trim().Substring(_index, lenSearch);
                                        if (strFindString.Trim().EndsWith(".") | strFindString.Trim().EndsWith(",")) strFindString = strFindString.Substring(0, strFindString.Length - 1);
                                        if (tTemparr[iInd].ToLower().Trim().Equals(strFindString.Trim()) == true)
                                            _iHits++;
                                    }
                                    catch { }
                                }
                                _index++;
                            }
                            while (_index > 0);
                        }
                        {//Stroes Max Hits and its value id
                            if (_iHits != 0)
                            {
                                int iHitExcludeCount = 0;
                                if (exExclude != null)
                                {
                                    MatchCollection mMatch = exExclude.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                    iHitExcludeCount = mMatch.Count;
                                    mMatch = exExclude1.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                    iHitExcludeCount += mMatch.Count;
                                    if (iHitExcludeCount > 1) continue;
                                }
                                if (_iHits >= iMaxHits)
                                {
                                    if (iMax2HitIndex != iMaxHitIndex)
                                    {
                                        iSecMaxHits = iMaxHits;
                                        iMax2HitIndex = iMaxHitIndex;
                                        tIndustryType2 = tIndustryType;
                                    }
                                    iMaxHits = _iHits;
                                    iMaxHitIndex = Convert.ToInt64(HireCraft.FCommon.IndustryTypeList[cnt, 2]);
                                    tIndustryType = HireCraft.FCommon.IndustryTypeList[cnt, 0];
                                }
                                else
                                {
                                    if (iMax2HitIndex == -1)
                                    {
                                        iSecMaxHits = _iHits;
                                        iMax2HitIndex = Convert.ToInt64(HireCraft.FCommon.IndustryTypeList[cnt, 2]);
                                        tIndustryType2 = HireCraft.FCommon.IndustryTypeList[cnt, 0];
                                    }
                                    else
                                    {
                                        if (_iHits >= iSecMaxHits)
                                        {
                                            iSecMaxHits = _iHits;
                                            iMax2HitIndex = Convert.ToInt64(HireCraft.FCommon.IndustryTypeList[cnt, 2]);
                                            tIndustryType2 = HireCraft.FCommon.IndustryTypeList[cnt, 0];
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        exExclude = null; exExclude1 = null;
                    }
                }
                #endregion
                if (iMaxHitIndex != -1)
                {
                    IndustryTypeID = iMaxHitIndex.ToString(); IndustryType = tIndustryType;
                }
                if (iMax2HitIndex != -1)
                {
                    IndustryTypeID = IndustryTypeID + "," + iMax2HitIndex.ToString();
                    IndustryType = IndustryType + "," + tIndustryType2;
                }
            }
            catch { }
            IndustryType = opGetParseUniqueData(IndustryType);
        }
        /// <summary>
        /// GEt the Functionare which is not mapped with any of the sub function
        /// FCommon.NotMappedFunction contains function not mapped sub function
        /// </summary>
        private void opGetFunctionAreaNotMappedSubFunction()
        {
            StringBuilder returnTitle = null, returnRid = null;
            try
            {
                int bTotalFunction = 0;
                if (FunctionalAreaID != "0" && FunctionalAreaID != "")
                    bTotalFunction = FunctionalAreaID.Split(',').Length;
                if (FCommon.NotMappedFunction != null && ResumeConvertedText != null)
                {
                    try
                    {
                        returnTitle = new StringBuilder();
                        returnRid = new StringBuilder();
                        StringBuilder Eduforsplit1 = null;
                        for (int cnt = FCommon.NotMappedFunction.GetLowerBound(0); cnt <= FCommon.NotMappedFunction.GetUpperBound(0) && bTotalFunction <= 2; cnt++)//Loop of SubFunction array
                        {
                            #region "Feching alias"
                            Eduforsplit1 = new StringBuilder();
                            StringBuilder sbExcludeList = new StringBuilder();
                            try
                            {
                                //putting alias of Function into the StringBuiler variable
                                //putting Exclude alias of SubFunction into the StringBuiler variable
                                if (FCommon.NotMappedFunction[cnt, 0] != null)
                                {
                                    if (FCommon.NotMappedFunction[cnt, 1] != null)
                                        if (FCommon.NotMappedFunction[cnt, 1].Trim().Length != 0)
                                            Eduforsplit1.Append(FCommon.NotMappedFunction[cnt, 1] + "," + FCommon.NotMappedFunction[cnt, 0]);
                                        else
                                            if (FCommon.NotMappedFunction[cnt, 0].Trim().Length != 0)
                                                Eduforsplit1.Append(FCommon.NotMappedFunction[cnt, 0]);
                                            else
                                                continue;
                                    else
                                        if (FCommon.NotMappedFunction[cnt, 0].Trim().Length != 0)
                                            Eduforsplit1.Append(FCommon.NotMappedFunction[cnt, 0]);
                                        else
                                            continue;
                                    if (FCommon.NotMappedFunction[cnt, 3] != null)
                                        if (FCommon.NotMappedFunction[cnt, 3].Trim().Length != 0)
                                            sbExcludeList.Append(FCommon.NotMappedFunction[cnt, 3]);
                                }
                            }
                            catch
                            {

                            }
                            #endregion

                            #region "Regular expression declaration"
                            //delcaration of Regular expression for alias and Exclude Alias
                            Regex exEducation = null;
                            Regex exEducation1 = null;
                            Regex exExclude = null;
                            Regex exExclude1 = null;
                            try
                            {
                                // creation of regular expression
                                if (Eduforsplit1.Length < 3)
                                {
                                    Eduforsplit1.Replace(@"\", @"\\");
                                    Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                    Eduforsplit1.Replace("||", "|");
                                    exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
                                    exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant);
                                }
                                else
                                {
                                    Eduforsplit1.Replace(@"\", @"\\");
                                    Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                    Eduforsplit1.Replace("||", "|");
                                    //exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                    //exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                    exEducation = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                    exEducation1 = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                                }
                                if (sbExcludeList.Length > 0)
                                {
                                    sbExcludeList.Replace(@"\", @"\\");
                                    sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                    sbExcludeList.Replace("||", "|");
                                    exExclude = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                    exExclude1 = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                }
                            }
                            catch
                            {

                            }
                            finally
                            {
                                Eduforsplit1 = null; sbExcludeList = null;
                            }
                            #endregion

                            #region "Seaching function from resume converted text"
                            try
                            {
                                //Step 1. matching the regular expression with the Resume Converted Text
                                //setp 2. Match found  then the Exclude alisas match is there 
                                //setp 3. Exclude Match zero then taking the Function
                                int iHitCount = 0;
                                int iHitExcludeCount = 0;
                                MatchCollection mMatch = exEducation.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                iHitCount = mMatch.Count;
                                int iCheckMatchCount = 0;
                                if (iHitCount > 0)
                                    opCheckMatchCount(mMatch, Convert.ToInt32(FCommon.NotMappedFunction[cnt, 4]));
                                mMatch = exEducation1.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                iHitCount += mMatch.Count;
                                if (iHitCount > 0)
                                {
                                    if (FCommon.NotMappedFunction[cnt, 4] != null && iCheckMatchCount + opCheckMatchCount(mMatch, Convert.ToInt32(FCommon.NotMappedFunction[cnt, 4])) < Convert.ToInt32(FCommon.NotMappedFunction[cnt, 4])) continue;
                                    //storing into ArrayList it contains Sub Functional Area RID ,HitCount,Sub Functional Area RID....
                                    if (exExclude != null)
                                    {
                                        mMatch = exExclude.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                        iHitExcludeCount = mMatch.Count;
                                        mMatch = exExclude1.Matches(@" " + ResumeConvertedText.ToString().Trim());
                                        iHitExcludeCount += mMatch.Count;
                                        if (iHitExcludeCount > 1) continue;
                                    }
                                    returnRid.Append(FCommon.NotMappedFunction[cnt, 2] + ",");
                                    returnTitle.Append(FCommon.NotMappedFunction[cnt, 0] + ",");
                                    bTotalFunction += 1;
                                }
                            }
                            catch
                            {
                            }
                            finally
                            {
                                exEducation = null; exEducation1 = null; exExclude = null; exExclude1 = null;
                            }
                            #endregion
                        }
                    }
                    catch
                    {

                    }
                    finally
                    {
                    }
                    if (returnRid.ToString() != "")
                    {
                        if (FunctionalAreaID == "0" || FunctionalAreaID == "")
                            FunctionalAreaID = opGetParseUniqueData(returnRid.ToString());
                        else
                            FunctionalAreaID += "," + opGetParseUniqueData(returnRid.ToString());
                        if (FunctionalAreaType == "")
                            FunctionalAreaType = opGetParseUniqueData(returnTitle.ToString());
                        else
                            FunctionalAreaType += "," + opGetParseUniqueData(returnTitle.ToString());
                    }
                }
            }
            catch
            {

            }
            finally
            {
                returnRid = null; returnTitle = null;
            }
        }


        #endregion

        #region "skill and converted text adding"
        /// <summary>
        /// Insert "'AKMHCKW' " IN ResumeConvertedText
        /// step 1. Should put before Current Working Experience(Experience ORder)
        /// </summary>
        /// <param name="pos">Position of the Experienced Text</param>
        private void opFillAKMHCKWResumeConvertedText(int pos)
        {
            try
            {
                System.Text.RegularExpressions.Regex regtillDate = new System.Text.RegularExpressions.Regex(@"[\s,\{“‘\(\.](till date|till date\)|Present |Till Dated)[,\:’\}”\s\)]?[\s]?\b", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                System.Text.RegularExpressions.Regex regtillDate1 = new System.Text.RegularExpressions.Regex(@"[\s,\{“‘\(\.](till date|till date\)|Present |Till Dated)[\:,\}’”\s\)]?[\s]?$", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                System.Text.RegularExpressions.Regex regtillMonth = new System.Text.RegularExpressions.Regex("(" + month + "|" + mon + ")", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                System.Text.RegularExpressions.Regex regtillYear = new System.Text.RegularExpressions.Regex(@"(\d{4}|\d{2})");
                MatchCollection mtch = exPresentEmployerIN.Matches(" " + this.DataLines[pos].Trim());
                int iMatchCnt = mtch.Count;
                if (mtch.Count == 0)
                    mtch = exPresentEmployerIN1.Matches(" " + this.DataLines[pos].Trim());
                iMatchCnt = mtch.Count;
                if (mtch.Count == 0)
                    if ((this.DataLines[pos].ToLower().Trim().IndexOf("current organization") == 0 || this.DataLines[pos].ToLower().Trim().IndexOf("present organisation") == 0 || this.DataLines[pos].ToLower().Trim().IndexOf("name of the organisation :") == 0 || this.DataLines[pos].ToLower().Trim().IndexOf("present employment") == 0 || this.DataLines[pos].ToLower().Trim().IndexOf("company:") == 0 || ((pos + 2) <= DataLines.Length && this.DataLines[pos].ToLower().Trim().IndexOf("organization") == 0 && this.DataLines[pos + 1].ToLower().Trim().IndexOf("designation") == 0 && this.DataLines[pos + 2].ToLower().Trim().IndexOf("duration") == 0) || this.DataLines[pos].ToLower().Trim().IndexOf("present organisation") == 0 || this.DataLines[pos].ToLower().Trim().IndexOf("name of the organisation :") == 0 || this.DataLines[pos].ToLower().Trim().IndexOf("present employment") == 0 || this.DataLines[pos].ToLower().Trim().IndexOf("company:") == 0 || ((pos + 1) <= DataLines.Length && this.DataLines[pos].ToLower().Trim().IndexOf("organization, designation") == 0 && this.DataLines[pos + 1].ToLower().Trim().IndexOf("duration") == 0)))
                        iMatchCnt = 1;
                if (mtch.Count == 0 && (regtillDate.IsMatch(" " + this.DataLines[pos].Trim()) || regtillDate1.IsMatch(" " + this.DataLines[pos].Trim())) && regtillMonth.IsMatch(this.DataLines[pos].Trim()) && regtillYear.IsMatch(this.DataLines[pos].Trim()))
                {
                    mtch = regtillDate.Matches(" " + this.DataLines[pos].Trim());
                    iMatchCnt = mtch.Count;
                }
                if (iMatchCnt > 0)
                {
                    int iResumeCPos = -1;
                    if ((pos - 1) < 0)
                        pos = 1;
                    int iMatchedPos = pos;
                    try
                    {
                        foreach (Match m in mtch)
                        {
                            if ((m.Index == 0 || m.Index == 1)) { }
                            else
                            {
                                pos = pos - 1; break;
                            }

                        }
                    }
                    catch { }
                    if (this.DataLines[pos].Trim().Length == 1)
                        pos = iMatchedPos;
                    iResumeCPos = ResumeConvertedText.IndexOf(this.DataLines[pos], 0);
                    if (iResumeCPos >= 0)
                    {
                        string tInsertValue = System.Environment.NewLine + "'AKMHCKW'" + System.Environment.NewLine;
                        ResumeConvertedText = ResumeConvertedText.Insert(iResumeCPos, tInsertValue);
                        iGlobalAddingAKMHCKW++;
                    }
                }
            }
            catch { }

        }

        /// <summary>
        /// //fetching the Experienced Text From the DataLine
        /// </summary>
        private void opGetSkillText()
        {
            int iskill = -1;
            try
            {
                #region "Getting Experience Skill from th DataLines"
                sbSkill = new StringBuilder();
                iGlobalAddingAKMHCKW = 0;
                try
                {
                    int iFound = 0;
                    int cnt = -1, nCnt = -1;
                    int iEdustr = 0;

                    string tWorkExperience = "Professional  Experience|Career Contour|experience|ORGANIZATIONAL SCAN|Major Assignments|Experience Chronology|organisational scan|Total Full Time Experience (in Months)|Career Progression|LABOR EXPERIENCE|work experience|working experience|professional experience|organisational experience" +
                         "|employment history|highlights of professional experience|details of experience" +
                         "|managerial experiences|previous work experience|professional summary|selected experience" +
                         "|professional work experience|E x p e r i e n c e|OCCUPATIONAL CONTOUR|work history" +
                         "|Professional Experience in Brief:|Professional Experience in Brief|Employee History" +
                         "|employment history|career history|-: professional experience|proffesional experience" +
                         "|performance highlights|current assignment|assignments held|experience summary|PROFESSIONAL EXPERIENCES|CAREER HIGHLIGHTS|Work Exposure|Employment Details|project details";

                    Regex exExperience = new Regex(@"[\s,\(\:](" + tWorkExperience + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
                    Regex exExperience1 = new Regex(@"[\s,\(\:](" + tWorkExperience + @")[\s]?[\-\s]?$", RegexOptions.IgnoreCase);


                    string SkillNot = "projects handled|special achievements|skills summary|summary of skills|certifications|academics|compensation details|significant experience working with|executive|Expectations|competencies|certifications and trainings|permanent address|date of birth|personal dossier|credentials|Significant Projects:|CMMi – Experience|Passport and Visa|Excellent work experience|Summary of experience|Project Overview|key result areas|Professional Synopsis|Education and Qualifications|P e r  s o n a l   D e t a i l s|I n t e r e s t s|Academic qualifications|Skill sets" +
                            "|Technical History|Technical Skills Set|Technical Skill Set|Skill Set|Skill Sets|Skills Set" +
                            "|Skills Sets" +
                            "|software profile|computer literacy|software proficiency|AREA OF INTEREST|" +
                            "TECHNICAL PROFICIENCY|Extra Curricular Activities|Extra-Curricular Activities" +
                            "|EDUCATION AND DEVELOPMENT|Proficiency in Computers|computer knowledge" +
                            "|Educational Qualification|Educational Qualifications and Certifications" +
                            "|summary of qualifications|educational qualifications|skills|software training" +
                            "|technical exposure|software exposure|computer skill|university subjects|entrance examination" +
                            "|q u a l i f i c a t i o n s|a c a d e m i c|e d u c a t i o n|computer skills" +
                            "|co-curricular activities|extra curriculars|personal details|personal profile|annex" +
                            "|personal detail|personal information|contact information|personal memorandam" +
                            "|interests|additional information|software skills|technical skills|technical skill" +
                            "|technical profile|software skill|declaration|computer proficiency" +
                            "|other skills|academic profile|additional details|ibm annex|education|career profile" +
                            "|qualification|professional qualification|contact details|fields of interest|references" +
                            "|hobbies|additional courses|academic|certification|extracurricular activities" +
                            "|personal biography|salary withdrawn|salary expeected|latest joining|Computer & IT Skills" +
                            "|Qualifications|Qualification|Personal details|Education" +
                            "|PROFESSIONAL INTERESTS|ACADAMIC RECORD|EDUCATIONAL CREDENTIALS|educational information|Current CTC|Expected CTC" +
                            "|SPECIAL REMARKS|MY POSITIVE|Looking for a better position|MY STRENGTH/WEAKNESS|languages known|Present CTC";
                    Regex reSkillNot = new Regex(@"[\|\s,\{\(\:](" + SkillNot + @")[:\s]?[:\-\s\)\}]?\b", RegexOptions.IgnoreCase);
                    Regex reSkillNot1 = new Regex(@"[\|\s,\{\(\:](" + SkillNot + @")[:\s]?[:\-\s\)\}]?$", RegexOptions.IgnoreCase);


                    for (cnt = 0; cnt < this.DataLines.Length; cnt++) //loop of DataLine
                    {
                        iEdustr = 0;
                        if (this.DataLines[cnt].Length < 90 && exExperience.IsMatch(" " + this.DataLines[cnt].Trim()) | exExperience1.IsMatch(" " + this.DataLines[cnt].Trim()))//matching the string for getting the experienced skill
                        {
                            iEdustr = 1;
                            iExpStart = cnt;
                        }
                        Match mth = null;
                        mth = exExperience.Match(" " + this.DataLines[cnt].Trim());
                        if (mth.Success == true && mth.Value.Trim().ToLower() == "experience")
                        {
                            if (mth.Success && mth.Value.Trim().ToLower() == "experience" && (this.DataLines[cnt].Trim().Length < 70) && this.DataLines[cnt].IndexOf(",") < 0)
                                iEdustr = 1;
                            else
                                iEdustr = 0;
                        }

                        //if (mth.Value == " experience ")
                        //{
                        //    if (mth.Success && (mth.Index == 0 || mth.Index == 1))
                        //        iEdustr = 1;
                        //    else
                        //        iEdustr = 0;
                        //}

                        if (iEdustr == 1)//match found 
                        {
                            string str1 = "";
                            for (nCnt = cnt; nCnt < this.DataLines.Length; nCnt++)
                            {
                                str1 = this.DataLines[nCnt].ToLower().Trim();
                                iFound = 0;
                                Match mtch = reSkillNot.Match(" " + this.DataLines[nCnt].Trim());//finding the skill not matching

                                if (!mtch.Success)
                                    mtch = reSkillNot1.Match(" " + this.DataLines[nCnt].Trim());
                                //int eduNFlag = 0;
                                if (((mtch.Success && (mtch.Index == 0 || mtch.Index == 1)) || str1.IndexOf("computer skill:") >= 0 || str1.IndexOf("computer skills:") >= 0 || str1.IndexOf("education:") >= 0 || str1.IndexOf("personal details:") >= 0))
                                    iFound = 1;
                                if (iFound == 0)//read all the array values from the match point 
                                {
                                    cnt = nCnt;
                                    iskill += 1;
                                    //Putting 'AKMHCKW' in ResumeConverted Text'
                                    if (iGlobalAddingAKMHCKW == 0) // opFillAKMHCKWResumeConvertedText(nCnt);
                                        if (this.DataLines[nCnt].Replace("?", "").Trim().Length == 0) continue;
                                    if (this.DataLines[nCnt].Replace("?", "").Trim().Length == 1)
                                        sbSkill.Append(" " + this.DataLines[nCnt].Replace("?", "").Trim());
                                    else
                                        sbSkill.Append(" " + this.DataLines[nCnt].Replace("?", "").Trim() + "          "); //10 space for displaying as new line next sentence in Experience text

                                    //Finding the Experience Array Length
                                    if (nCnt == this.DataLines.Length - 1)
                                        iExpEnd = nCnt;
                                }
                                else//match found for Not reading experience skill
                                {
                                    cnt = nCnt;//skill array reading breaking 
                                    iExpEnd = nCnt;
                                    break;
                                }
                            }
                        }
                        else
                            continue;
                    }
                }
                catch
                {

                }
                #endregion
                //.Replace("Total Full Time Experience (in Months)", "")
                ExperienceSkillText = sbSkill.ToString().Trim().Replace("Total IT related", "").Replace("(in months)", "").Replace("Total non- IT related", "").Replace("LAST 3 FULL TIME EMPLOYMENT DETAILS (begin with latest)", "").Replace("From (mm/yyyy)", "").Replace("To (mm/yyyy)", "").Replace("Role/ Formal Designation", "");
            }
            catch
            {

            }
            finally
            { }
        }
        /// <summary>
        /// Fetching the SKill Type from The ExperienceSkill Text
        /// </summary>
        /// <param name="ListArrayCommon">SkillList Array </param>
        private void GetSkillIdBasedonSubFunction(string[,] ListArrayCommon)
        {
            ExpSkills = ""; SkillIDs = "";
            StringBuilder returnSkill = new StringBuilder();
            StringBuilder returnSkillIDs = new StringBuilder();
            StringBuilder returnSkillOccurance = new StringBuilder();
            for (int cnt = ListArrayCommon.GetLowerBound(0); cnt <= ListArrayCommon.GetUpperBound(0); cnt++)
            {
                StringBuilder Eduforsplit1 = new StringBuilder(); StringBuilder sbExcludeList = new StringBuilder();
                string SpecialString = "";
                try
                {
                    ///storing the  Skill Include Alias && Exclude alias into the StringBuilder Variable
                    ///if Skill Type Lenth is one the storing into the Special String
                    if (ListArrayCommon[cnt, 0] != null)
                    {
                        if (ListArrayCommon[cnt, 0].Trim().Length == 1)
                            SpecialString = "#%" + ListArrayCommon[cnt, 0];
                        else
                            if (ListArrayCommon[cnt, 1] != null)
                                if (ListArrayCommon[cnt, 1].Trim().Length != 0)
                                    Eduforsplit1.Append(ListArrayCommon[cnt, 1] + "," + ListArrayCommon[cnt, 0]);
                                else
                                    if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                        Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                    else
                                        continue;
                            else
                                if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                    Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                else
                                    continue;

                        if (ListArrayCommon[cnt, 3] != null)
                            if (ListArrayCommon[cnt, 3].Trim().Length != 0)
                                sbExcludeList.Append(ListArrayCommon[cnt, 3]);
                    }
                }
                catch
                {

                }
                Regex exEducation = null, exEducation1 = null, exExclude = null, exExclude1 = null;
                try
                {
                    ///Declaration of Regualar expressions fro include and Exclude 
                    if (SpecialString.Length > 0)
                    {
                        SpecialString = SpecialString.Replace(@"#%", @"");
                        SpecialString = @SpecialString + "," + "| " + SpecialString + " |:" + SpecialString;
                        SpecialString = SpecialString.Replace("||", "|");
                        exEducation = new Regex(@"(" + SpecialString + @")", RegexOptions.CultureInvariant);
                        //exEducation1 = new Regex(@"[\s,\(\:](" + SpecialString + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant);
                    }
                    else if (Eduforsplit1.Length < 3)
                    {
                        Eduforsplit1.Replace(@"\", @"\\");
                        Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                        Eduforsplit1.Replace("||", "|");
                        exEducation = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant);
                        //exEducation1 = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant);

                    }
                    else
                    {
                        Eduforsplit1.Replace(@"\", @"\\");
                        Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                        Eduforsplit1.Replace("||", "|");

                        //exEducation = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        //exEducation1 = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,\}’\]”\s\.]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                        exEducation = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,’\}\]”\s][\s]?", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase | RegexOptions.Multiline);
                        //exEducation1 = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,\}’\]”\s\.]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);


                    }
                    if (sbExcludeList.Length > 0)
                    {
                        sbExcludeList.Replace(@"\", @"\\");
                        sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                        sbExcludeList.Replace("||", "|");
                        exExclude = new Regex(@"[\s,\{“‘\(\:](" + sbExcludeList.ToString() + @")[,\}’\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        exExclude1 = new Regex(@"[\s,\[\{“‘\(\:](" + sbExcludeList.ToString() + @")[,\}’\]”\s\.]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                    }
                }
                catch
                {

                }
                finally
                {
                    Eduforsplit1 = null; sbExcludeList = null;
                }
                try
                {
                    ///Matching the Skills and Getting the Skill Type
                    int iHitCount = 0, iHitExcludeCount = 0;
                    // MatchCollection mMatch = exEducation.Matches(@" " + sbSkill.ToString().Trim());
                    MatchCollection mMatch = exEducation.Matches(@" " + sbSkill.ToString().Trim());
                    iHitCount = mMatch.Count;
                    int iMachtcount = iHitCount;
                    if (iHitCount > 0)
                    {
                        iMachtcount = opCheckMatchCount(mMatch, Convert.ToInt32(ListArrayCommon[cnt, 4]));
                        iHitCount = iMachtcount;
                    }
                    ////mMatch = exEducation1.Matches(@" " + sbSkill.ToString().Trim());
                    ////iHitCount += mMatch.Count;
                    //if (iHitCount > 0)
                    //{
                    //    if (ListArrayCommon[cnt, 4] != null)
                    //        iHitCount = iMachtcount + opCheckMatchCount(mMatch, Convert.ToInt32(ListArrayCommon[cnt, 4]));
                    //}
                    if (iHitCount >= Convert.ToInt32(ListArrayCommon[cnt, 4]))
                    {// 

                        if (exExclude != null)
                        {
                            mMatch = exExclude.Matches(@" " + sbSkill.ToString().Trim());
                            iHitExcludeCount = mMatch.Count;
                            mMatch = exExclude1.Matches(@" " + sbSkill.ToString().Trim());
                            iHitExcludeCount += mMatch.Count;
                            if (iHitExcludeCount > 1) continue;
                        }
                        returnSkill.Append(ListArrayCommon[cnt, 0] + ",");
                        returnSkillIDs.Append(ListArrayCommon[cnt, 2] + ",");
                        returnSkillOccurance.Append(iHitCount.ToString() + ",");
                    }
                }
                catch
                {

                }
                finally
                {
                    exEducation = null;
                    exEducation1 = null;
                }
            }
            try
            {
                ExpSkills = opGetParseUniqueData(returnSkill.ToString()).Replace(":", "").Trim();
                SkillIDs = opGetParseUniqueData(returnSkillIDs.ToString()).Replace(":", "").Trim();
                if (returnSkillOccurance.Length > 0)
                    SkillIDOccurance = returnSkillOccurance.ToString().Remove(returnSkillOccurance.ToString().Length - 1, 1);
            }
            catch { }
            finally
            {
                returnSkill = null; returnSkillIDs = null; returnSkillOccurance = null;
            }
        }

        /// <summary>
        /// Storig the SkillList Array from FCommon Xml
        /// Filter the FCommon Xml by Mapped SubFunctionID of Skills and Skills Not Mapped with Any of the SubFunction
        /// </summary>
        private void opGetSkillwithSubFunctionalID()
        {//Retrieveing Skill Type,Alias,Exclude & RID (Mapped SubFunction's Skills and Skills Not mapped with any of the SubFunction)
            try
            {
                SkillList = null;
                if (FCommon.objfXMLSkillwithGrpList != null)
                {
                    if (FCommon.objfXMLSkillwithGrpList.OuterXml.Trim() != "")
                    {
                        this.ds = new DataSet();
                        ds.ReadXml(new StringReader(FCommon.objfXMLSkillwithGrpList.OuterXml));
                        //Code Commended for 
                        DataRow[] dr = ds.Tables[0].Select("SkillGroupID IN (" + SubFunctionID + ") OR SkillGroupID in (0)", "SkillType ASC");
                        //DataRow[] dr = ds.Tables[0].Select("", "SkillType ASC");
                        SkillList = new string[dr.Length, 5];
                        for (int i = 0; i <= dr.Length - 1; i++)
                        {
                            if (dr[i]["SkillType"] != DBNull.Value)
                            {
                                SkillList[i, 0] = dr[i]["SkillType"].ToString().Trim();
                                SkillList[i, 1] = dr[i]["SkillAlias"].ToString().Trim();
                                SkillList[i, 2] = dr[i]["RID"].ToString().Trim();
                                SkillList[i, 3] = dr[i]["ExcludeAlias"].ToString().Trim();
                                SkillList[i, 4] = dr[i]["IncludeCnt"].ToString().Trim();
                            }
                        }
                        dr = null;
                        this.ds.Tables[0].Rows.Clear();
                        this.ds.Tables[0].Columns.Clear();
                        this.ds.Tables[0].Dispose();
                        this.ds.Dispose();
                    }
                }
            }
            catch
            {

            }
        }

        #endregion

        #region "notice Period"
        /// <summary>
        /// Fetching the Notice Perio
        /// step 1. Matching the String
        /// step 2. Taking the Substring from the matching pos from resume converted tex
        /// step 3. finding any week / month then multiply with 7 /30 resp
        /// </summary>
        private void opGetNoticePeriod()
        {
            try
            {
                NoticePeriod = "0";//
                string tMatchData = "time of relocate|time to relocate|Min time to join|Availability – Within|Availabilty - within|Notice Period|Notice  Period|Time requred to join|time required to join|time required to joining|time required for joining|Joining Time Required|Expected Joining time|Availability ";
                string tNotNoticePeriod = "supporting availability|availability to stress|availability are maintained|three systems|system availability|guaranteed availability|business availability|availability and disaster|availability along"; //|High Availability
                string tdayMatching = "days|day|months|month|weeks|week|mon";
                Regex exNotNoticePeriod = new Regex(@"[\s,\{“‘\(\.](" + tNotNoticePeriod + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                Regex exNoticePeriod = new Regex(@"[\s,\{“‘\(\.](" + tMatchData + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex exNoticePeriod1 = new Regex(@"[\s,\{“‘\(\.](" + tMatchData + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);

                Regex exDayMatch = new Regex(@"(" + tdayMatching + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex exDayMatch1 = new Regex(@"(" + tdayMatching + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);

                MatchCollection mMatchColl = exNoticePeriod.Matches(ResumeConvertedText);
                if (mMatchColl.Count == 0)
                    mMatchColl = exNoticePeriod1.Matches(ResumeConvertedText);

                if (mMatchColl.Count > 0)
                {
                    foreach (Match m in mMatchColl)
                    {
                        int mPositionIndex = m.Index;
                        MatchCollection mDayMatchColl = exDayMatch.Matches(ResumeConvertedText, mPositionIndex);
                        if (mDayMatchColl.Count == 0)
                            mDayMatchColl = exDayMatch1.Matches(ResumeConvertedText, mPositionIndex);

                        if (mDayMatchColl.Count > 0)
                        {
                            foreach (Match mDay in mDayMatchColl)
                            {
                                int mDayPosIndex = mDay.Index;
                                StringBuilder sbNoticePeriodData = new StringBuilder();
                                try
                                {
                                    int iTotLen = mDayPosIndex + mDay.Length - mPositionIndex;
                                    if (iTotLen <= 0) iTotLen = 20;
                                    if (exNotNoticePeriod.IsMatch(ResumeConvertedText.Substring(mPositionIndex, iTotLen)) == false)
                                        sbNoticePeriodData.Append(ResumeConvertedText.Substring(mPositionIndex, iTotLen));
                                }
                                catch
                                {

                                }
                                int iNoticePeriod = 0;
                                if (sbNoticePeriodData.Length > 0)
                                {
                                    sbNoticePeriodData.Replace(m.Value, "");
                                    sbNoticePeriodData.Insert(sbNoticePeriodData.ToString().ToLower().IndexOf(mDay.Value.ToString().Trim().ToLower()), ' ');
                                    string[] aNoticePeriodData = sbNoticePeriodData.Replace(Convert.ToChar(10).ToString(), " ").Replace(Convert.ToChar(13).ToString(), " ").Replace(Convert.ToChar(27).ToString(), " ").Replace("-", " ").Replace(":", " ").Replace(Convert.ToChar(9).ToString(), " ").ToString().Trim().Split(' ');
                                    for (int i = 0; i <= aNoticePeriodData.GetUpperBound(0); i++)
                                    {
                                        if (aNoticePeriodData[i].Trim() == "") continue;
                                        if (aNoticePeriodData[i].Trim().ToLower().IndexOf("immediate") >= 0 || aNoticePeriodData[i].Trim().ToLower().IndexOf("salary") >= 0 || aNoticePeriodData[i].Trim().ToLower().IndexOf("offsite") >= 0 || aNoticePeriodData[i + 1].Trim().ToLower().IndexOf("particular") >= 0) break; //Offsite 
                                        iNoticePeriod = (CheckNumeric(aNoticePeriodData[i].ToCharArray(), "") == false ? Convert.ToInt32(aNoticePeriodData[i]) : 0);
                                        if (iNoticePeriod > 0) break;
                                        iNoticePeriod = opCheckWords(aNoticePeriodData[i]);
                                        if (iNoticePeriod > 0) break;
                                    }
                                    if (iNoticePeriod > 0)
                                    {
                                        if (mDay.Value.ToString().Trim().ToLower().IndexOf("weeks") >= 0 || mDay.Value.ToString().Trim().ToLower().IndexOf("week") >= 0)
                                        {
                                            iNoticePeriod = iNoticePeriod * 7;
                                        }
                                        else if (mDay.Value.ToString().Trim().ToLower().IndexOf("months") >= 0 || mDay.Value.ToString().Trim().ToLower().IndexOf("month") >= 0) //|| (mDay.Value.ToString().Trim().ToLower().IndexOf("mon") >= 0)
                                        {
                                            iNoticePeriod = iNoticePeriod * 30;
                                        }
                                    }
                                    try
                                    {
                                        if (Convert.ToInt32(iNoticePeriod) > 500)
                                            iNoticePeriod = 0;
                                    }
                                    catch { }
                                    NoticePeriod = iNoticePeriod.ToString();
                                    break;
                                }
                            }
                        }
                        if (NoticePeriod != "0") break;
                    }
                }
            }
            catch
            {

            }
        }

        #endregion

        #region "gender"
        /// <summary>
        /// Fetching the Gender of Candidate from DAtaLines
        /// Searching for Gender ,personal details or sex words in the DataLines
        /// if seach found means searching for Female and Male words 
        /// 0 for Male 1 for Female 2 [NA]
        /// </summary>
        private void GetGender()
        {
            try
            {
                Gender = "3";
                string[] add = null;
                int pos = -1, j = 0;
                bool flag = false;
                for (pos = 0; pos <= DataLines.Length - 1; pos++)
                    if (this.DataLines[pos].ToLower().IndexOf("gender") >= 0 | this.DataLines[pos].ToLower().IndexOf("personal details:") >= 0 | this.DataLines[pos].ToLower().IndexOf("sex") >= 0)
                    {
                        for (int k = 0; k < 6; k++)
                        {
                            if ((pos + k) < DataLines.Length)
                                add = this.DataLines[pos + k].Split(Cset, StringSplitOptions.RemoveEmptyEntries);
                            else
                                break;
                            for (j = add.GetLowerBound(0); j <= add.GetUpperBound(0); j++)
                            {
                                if (add[j].ToUpper().Trim().IndexOf("FEMALE") >= 0)
                                {
                                    Gender = "2";
                                    flag = true;
                                }
                                else if (add[j].ToUpper().Trim().IndexOf("MALE") >= 0)
                                {
                                    Gender = "1";
                                    flag = true;
                                }
                            }
                            if (flag == true)
                                break;
                        }
                        if (flag == true)
                            break;
                        else
                            continue;
                    }
                    else
                    {
                        Gender = "3";
                        continue;
                    }
            }
            catch
            {

            }
        }
        #endregion

        #region "DOB"
        /// <summary>
        /// Date of Birth of candidate
        /// </summary>
        private void GetDOB()
        {
            try
            {
                DOB = "";
                string[] add = null;
                int pos = -1, j, iDob = 0, iFlag = 0;
                string tDobSearch = "Date of Birth|Date of Birth:|BIRTHDAY:|Born:|Born on|Birth Date|Birth :|d. o. b|d-o-b|d o b|d  o  b|date and place of birth:|date and place of birth|date and country of birth|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|date of birth/age|date of birthage|b\\'date|b’date|date  of  birth|date of birth|date ofbirth|dob|date & place of birth|d.o.b|date of birth|date-of-birth|date   of   birth|date of  birth|date of birth:|date  of   birth  :|DOB-|DATE OF BIRTH:";
                string tDobNotSearch = "adobe photoshop|Oracle|Java|C#|.Net|SQl|Ms SQl|MSSQL|adobe|doble|duration";
                string[] aDobSearch = tDobSearch.Split('|');
                Regex reEmail = new Regex(@"[\w]+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", RegexOptions.CultureInvariant);
                Regex rgxNOTDOB = new Regex(@"\b" + tDobNotSearch + @"\b", RegexOptions.IgnoreCase);
                char[] CsetDOBSplit = { '\t', '~', ';', Convert.ToChar(61656), Convert.ToChar(61623) };
                for (pos = 0; pos < DataLines.Length && iDob == 0; pos++)
                {
                    int iFlagFound = 0;
                    for (int idobSearch = 0; idobSearch <= aDobSearch.GetUpperBound(0); idobSearch++)
                    {
                        if (this.DataLines[pos].ToLower().Trim().IndexOf(aDobSearch[idobSearch].Trim().ToLower()) >= 0 | this.DataLines[pos].Trim().ToLower().IndexOf("born") == 0)
                        {
                            iFlagFound = 1;
                            break;
                        }
                    }
                    if (iFlagFound == 1)//Match Found
                    {
                        if (rgxNOTDOB.IsMatch(" " + this.DataLines[pos].ToLower() + " ")) { continue; }
                        iDob = 0; iFlag = 0;
                        int pos1 = pos;
                        while (iDob == 0)
                        {
                            if (pos1 < DataLines.Length)
                            {
                                string str = this.DataLines[pos1].ToLower().Trim();
                                string rmCharacter = str;
                                for (int rmC = 65; rmC <= 122; rmC++)
                                {
                                    rmCharacter = rmCharacter.Replace(Convert.ToChar(rmC).ToString(), "").Replace(",", "").Replace(":", "").Replace(".", "").Replace("<", "").Replace(">", "").Replace("/", "").Replace("(", "").Replace(")", "").Replace("{", "").Replace("}", "").Replace("+", "").Replace("’", "").Replace("ï‚·", "").Replace("date of birth ", "").Replace(";", "");
                                }
                                //check only string exists..
                                if (rmCharacter.Trim().Length < 2) //Not found continue for next search
                                {
                                    pos1++; continue;
                                }
                                if ((str.Trim().IndexOf("ph:") >= 0 || str.Trim().IndexOf("contact no.") >= 0) && str.Trim().IndexOf("@") >= 0 || (str.Trim().IndexOf("                 ") >= 0 && str.Trim().IndexOf("dob-") >= 0))
                                {
                                    if (str.Trim().IndexOf("                 ") >= 0)
                                        str = str.Replace("                 ", ",").Trim();
                                    string[] strSpliter = str.Split(',');
                                    for (int i = 0; i < strSpliter.Length; i++)
                                    {
                                        if (strSpliter[i].ToLower().Trim().IndexOf("date and place of birth:") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("dateofbirth") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("data of birth") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("date of  birth") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("birthdate") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("date of birth/age:") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("birth date") >= 0 || strSpliter[i].Trim().ToLower().IndexOf("born") == 0 || strSpliter[i].ToLower().Trim().IndexOf("date of birthage") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("b\\'date") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("b’date") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("date  of  birth") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("date of birth") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("dob") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("date & place of birth") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("d.o.b") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("date of birth") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("BORN:") >= 0 || strSpliter[i].ToLower().Trim().IndexOf("DOB") >= 0)
                                        {
                                            str = strSpliter[i].Trim();
                                            break;
                                        }
                                    }
                                }
                                str = str.Replace("date of birth / age / sex", "").Replace("Date of Birth / Age / Sex", "").Replace("date-of-birth", "").Replace("date of  birth", "").Replace("date of birth:", "").Replace("date  of   birth  :", "").Replace("date and place of birth", "").Replace("date and country of birth", "").Replace("3. date of birth:", "").Replace("date and place of dirth", "").Replace("birth date", "").Replace("d.o.b & age", "").Replace("dateofbirth", "").Replace("gender", "").Replace("2.date of birth", "").Replace("female", "").Replace("male", "").Replace("age & date of birth", "").Replace("   ", " ").Replace("4. date of birth/age", "").Replace("date of birth/age:", "").Replace("date of birth/age", "").Replace("birthdate", "").Replace("date of birthage", "").Replace("date of birth & age", "").Replace("date of  birth", "").Replace("details", "").Replace("age & dob", "").Replace("born on the", "").Replace("born on", "").Replace("born", "").Replace("(dd/mm/yyyy)", "").Replace("date of birth", "").Replace("b’date", "").Replace("dob:", "").Replace("b’date", "").Replace("dob", "").Replace("d.o.b –", "").Replace("d.o.b -", "").Replace("d.o.b", "").Replace("d o b", "").Replace("date & place of birth", "").Replace("date & place of birth", "").Replace("martial status", "").Replace("married", "").Replace("{single}", "").Replace("single", "").Replace("{", "").Replace("marital status:", "").Replace("marital status", "").Replace("sex:", "").Replace("}", "").Replace("date of  birth", "").Replace("date   of   birth", "").Replace("personal", "").Replace("your", "").Replace("iii.", "\t").Replace("father’s name", "\t").Replace("brought up", "\t").Replace("ii.", "").Replace("i.", "").Replace("contact", "\t").Replace(", ", ",").Replace("born on", "").Replace("birth date", "").Replace("data of birth", "").Replace("d. o. b", "").Replace("d  o  b", "").Replace("date and place of birth", "").Replace("d-o-b", "").Replace("|", "").Replace("ï‚·", "").Replace("date of birth ", "").Replace("data of birth :", "").Replace("birth", "").Replace("languages", "").Replace("known", "").Replace("i6", "6").Replace("-----", "").Trim();
                                str = reEmail.Replace(str, "").Trim();
                                if (str.StartsWith(":"))
                                    str = str.Remove(0, 1).Trim(); //" 	"
                                if (str.IndexOf(",") >= 0)
                                    str = str.Replace(",", " ").Trim();
                                if (str.Trim().StartsWith("-") == true && str.Trim().Length != 1)
                                    str = str.Trim().Substring(1, str.Length - 1);
                                if (str.IndexOf("age:") == 0 || str.IndexOf("age &") == 0 || str.IndexOf("age/") == 0 || (str.IndexOf("age") == 0 && str.IndexOf("years.") > 0))
                                {
                                    string[] tSplitFAge = str.Replace("years.", ":").Replace("years", "").Replace("yrs.", ":").Split(':');
                                    str = tSplitFAge[tSplitFAge.GetUpperBound(0)];
                                    if (str.Trim().Length < 3)
                                    {
                                        pos1++;
                                        continue;
                                    }
                                }
                                add = str.Split(CsetDOBSplit, StringSplitOptions.RemoveEmptyEntries);
                            }
                            else
                                break;
                            ///coz sometimes only age,:,. comming first array we dont want to take that age so increase the pos1++ and 
                            ///continue;
                            ///
                            if (add.Length == 0)
                            {
                                pos1++;
                                continue;
                            }
                            if (add[0].Trim().Length <= 2 || add[0].Trim().IndexOf("duration") >= 0)
                            {
                                pos1++;
                                continue;
                            }
                            for (j = add.GetLowerBound(0); j <= add.GetUpperBound(0) && iDob == 0; j++)
                            {
                                add[j] = Regex.Replace(add[j], @"(\(age:\s\d{2}\)|\/\sage)", "");
                                string[] DobStrArr = add[j].Split(':', '*', '+');
                                for (int z = 0; z < DobStrArr.Length; z++)
                                {
                                    if ((DobStrArr[z].Trim().ToLower().IndexOf("mob") >= 0 | DobStrArr[z].Trim().ToLower().IndexOf("@") >= 0 | DobStrArr[z].Trim().ToLower().IndexOf("email") >= 0 || DobStrArr[z].Trim().ToLower().IndexOf("e-mail") >= 0))
                                        continue;
                                    if ((DobStrArr[z].Trim().ToLower().IndexOf("ph:") >= 0 || DobStrArr[z].Trim().ToLower().IndexOf("contact") >= 0 || (DobStrArr[z].Trim().ToLower().IndexOf("age") >= 0) || DobStrArr[z].Trim().ToLower().IndexOf("curriculum") >= 0 || DobStrArr[z].Trim().ToLower().IndexOf("telephone") >= 0 | DobStrArr[z].Trim().ToLower().IndexOf("nationality") >= 0 || (DobStrArr[z].Trim().ToLower().IndexOf("date") < 0 && DobStrArr[z].Trim().ToLower().IndexOf("languages") >= 0) || DobStrArr[z].Trim().ToLower().IndexOf("marital status") >= 0 || DobStrArr[z].Trim().ToLower().IndexOf("sex") >= 0 || DobStrArr[z].Trim().ToLower().IndexOf("passport") >= 0 || DobStrArr[z].Trim().ToLower().IndexOf("career") >= 0 || DobStrArr[z].Trim().ToLower().IndexOf("current") >= 0))
                                    {
                                        iDob = 1;
                                        break;
                                    }

                                    if (DobStrArr[z].Trim().Length > 1)
                                    {
                                        ///Add ---.Replace("on {","").Replace("{single}","").Replace("{Single}","").Replace("{SINGLE}","").Replace("}","")
                                        string StrDob = DobStrArr[z].Trim().ToLower().Replace("date of birth and age", "").Replace("data of birth", "").Replace("date of birth", "").Replace("dob", "").Replace("d.o.b", "").Replace("date & place of birth", "").Replace("date & place of birth", "").Replace("on {", "").Replace("{single}", "").Replace("{Single}", "").Replace("}", "").Replace("{SINGLE}", "").Replace("yrs. old", "(").Replace("                       ", "(");
                                        string[] arr = StrDob.Split('(');
                                        for (int i = 0; i < arr.Length; i++)
                                        {
                                            if (arr[i].Trim().Length > 27 && arr[i].Trim().IndexOf("years") < 0)
                                            {
                                                ///modified on 1-3-06
                                                ///if dob come with string 
                                                ///remove string and check its length
                                                string rmCharacter = arr[i].Replace("    ", "[");

                                                string[] strYearFoundArray = rmCharacter.Split('[');
                                                for (int j2DOB = 0; j2DOB < strYearFoundArray.Length; j2DOB++)
                                                {
                                                    rmCharacter = strYearFoundArray[j2DOB];
                                                    for (int rmC = 65; rmC <= 122; rmC++)
                                                    {
                                                        rmCharacter = rmCharacter.Replace(Convert.ToChar(rmC).ToString(), "").Replace("1 son", "").Replace("1 daughter", "").Replace(",", "").Replace("    ", "");
                                                    }
                                                    if (rmCharacter.Trim().Length < 9 || rmCharacter.Trim().EndsWith("/"))
                                                        continue;
                                                    else
                                                        StrDob = rmCharacter.Trim();
                                                }
                                            }
                                            else
                                            {
                                                iFlag = 0;
                                                ///modified 3-3-06
                                                ///check description 
                                                if (arr[i].Trim().Length <= 2 || arr[i].Replace("year", "").Trim().Length <= 2 | arr[i].Replace("yrs.", "").Trim().Length <= 2 | arr[i].Replace("yrs", "").Trim().Length <= 2 | arr[i].Replace("years", "").Trim().Length <= 2 | arr[i].Trim().IndexOf("description") == 0)
                                                {
                                                    continue;
                                                }
                                                if (isString(arr[i].Trim().Replace("", "").Trim().ToCharArray()) == true) continue;
                                                StrDob = arr[i];
                                                if (StrDob.ToLower().IndexOf("years") >= 0)
                                                    iFlag = 3;
                                                break;
                                            }
                                        }
                                        if (StrDob.Trim().Length > 27 && iFlag != 3)
                                        {
                                            iFlag = 1;
                                            break;
                                        }
                                        ///replace description to null (3-3-6)
                                        if (StrDob.Trim().Length <= 2 | StrDob.Replace("year", "").Trim().Length <= 2 | StrDob.Replace("yrs.", "").Trim().Length <= 2 | StrDob.Replace("yrs", "").Trim().Length <= 2 | StrDob.Replace("years", "").Trim().Length <= 2)
                                        {
                                            continue;
                                        }
                                        if (isString(StrDob.Trim().Replace("", "").Trim().ToCharArray()) == true || StrDob.Length > 25) continue;
                                        DOB += " " + StrDob.Trim().Replace("", "").Replace("description", "");
                                    }
                                    else if (DobStrArr[z].Trim() == "-")
                                    {
                                        iFlag = 2; break;
                                    }
                                }
                            }
                            if (iFlag == 1)
                            {
                                break;
                            }
                            else if (iFlag == 2)
                            {
                                pos1++;
                                continue;
                            }
                            if (DOB.Length > 2)
                            {
                                string[] adob = DOB.Split(',', '&');
                                if (adob.Length > 1)
                                {
                                    if (adob[1].Trim().Replace(".", "").Length == 4 || adob[1].Trim().Replace(".", "").Length == 2)
                                    {
                                        if (adob.Length == 3)
                                        {
                                            if ((adob[2].ToLower().IndexOf("years") >= 0) || (adob[2].ToLower().IndexOf("year's") >= 0))
                                                DOB = adob[0] + " " + adob[1];
                                            else if ((adob[0].ToLower().IndexOf("years") >= 0) || (adob[0].ToLower().IndexOf("year's") >= 0))
                                                DOB = adob[1] + " " + adob[2];
                                            else
                                                DOB = adob[0] + " " + adob[1] + " " + adob[2];
                                        }
                                        else
                                            DOB = adob[0] + " " + adob[1];
                                        iDob = 1;
                                        break;
                                    }
                                    if (adob[0].Trim().Replace(".", "").Length >= 3 && (adob[0].ToLower().IndexOf("years") < 0 && adob[0].ToLower().IndexOf("yrs") < 0 && adob[0].ToLower().IndexOf("year's") < 0) && (adob[1].ToLower().IndexOf("years") < 0 && adob[1].ToLower().IndexOf("yrs") < 0 && adob[1].ToLower().IndexOf("year's") < 0))
                                    {
                                        DOB = adob[0].Trim() + " " + adob[1].Trim();
                                        ///modified on 21-02-06
                                        ///iDob=1
                                        iDob = 1;
                                        break;
                                    }  ///check for yrs---modified on 21-02-02
                                    else if ((adob[0].ToLower().IndexOf("years") >= 0 || adob[0].ToLower().IndexOf("yrs") >= 0 || adob[0].ToLower().IndexOf("year's") >= 0) && adob.Length > 1)
                                    {
                                        DOB = adob[1];
                                        iDob = 1;
                                        break;
                                    }///check for yrs---modified on 21-02-02
                                    else if ((adob[1].ToLower().IndexOf("years") >= 0 || adob[1].ToLower().IndexOf("yrs") >= 0 || adob[1].ToLower().IndexOf("year's") >= 0) && adob.Length > 1)
                                    {
                                        DOB = adob[0];
                                        iDob = 1;
                                        break;
                                    }
                                    else
                                    {
                                        ///modified on 27-02-06
                                        ///check if first element in the array (adob) is lessthan equal to 2
                                        ///modidifed 3-3-6
                                        ///check the length of adob==3
                                        if (adob.Length == 3)
                                        {
                                            if ((adob[2].ToLower().IndexOf("years") >= 0) || (adob[2].ToLower().IndexOf("year's") >= 0))
                                            {
                                                DOB = adob[0] + " " + adob[1];
                                            }
                                            else if ((adob[0].ToLower().IndexOf("years") >= 0) || (adob[0].ToLower().IndexOf("year's") >= 0))
                                            {
                                                DOB = adob[1] + " " + adob[2];
                                            }
                                            else
                                            {
                                                Regex ex = new Regex(@"\d{1,2}(th|st|nd|rd)[\s]?[\s]?\b", RegexOptions.IgnoreCase);
                                                if (ex.IsMatch(" " + adob[1]) == true)
                                                    DOB = adob[1] + " " + adob[2];
                                                else
                                                    DOB = adob[0] + " " + adob[1] + " " + adob[2];
                                            }
                                        }
                                        else
                                        {
                                            if (adob[0].Trim().Length <= 2)
                                            {
                                                DOB = adob[1];
                                            }
                                            else
                                                DOB = adob[0];
                                        }
                                        iDob = 1;
                                        break;
                                    }
                                }
                                else
                                {
                                    //string contains years/
                                    string strYearFound = adob[0].Replace("and age", "").Replace("|", "").Replace("2)", "").Replace(". –", "").Trim();
                                    if (strYearFound.IndexOf("years/") >= 0 || strYearFound.IndexOf("years /") >= 0 || strYearFound.IndexOf("yrs /") >= 0)
                                    {
                                        string[] strYearFoundArray = strYearFound.Split('/');
                                        if (strYearFoundArray.Length == 2)
                                            DOB = strYearFoundArray[1];
                                        if (strYearFoundArray.Length == 3 && strYearFoundArray[0].IndexOf("years") < 0)
                                            DOB = strYearFoundArray[0];
                                    }
                                    else
                                        DOB = adob[0].Replace("and age", "").Replace("|", "").Replace("2)", "").Replace(". –", "").Trim();//.Replace(")", "");
                                    //}
                                    iDob = 1;
                                    break;
                                }
                            }
                            pos++;
                            pos1 = pos;///modified on 23-02-06 here if pos is increasing then we have to assign pos into pos1
                        }
                        ///Modified on 24-02-06
                        ///if a)....z) occur with date or alphabets occur with date..
                        ///here replacing the the date with a) to z)
                        ///code starts here
                        string DobStr = DOB.ToUpper().Replace("& AGE", "");
                        for (int y1 = 65; y1 <= 90 && DobStr != ""; y1++)
                        {
                            DobStr = DobStr.Replace((Convert.ToChar(y1).ToString() + Convert.ToChar(41).ToString()), "");
                        }///(a)modified 7
                        DOB = DobStr.Replace(";", "").Replace("AUGUST", "AUG").Replace("2)", "").Replace("`", " ").Replace("’", " ").Replace("ST", " ST ").Replace("ND", " ND ").Replace("RD", " RD ").Replace("TH", " TH ").Replace("‘", " ").Replace("'", " ").Replace("?", " ").Replace(")", "").Replace("<", "").Replace(">", "").Replace("PH. NO.", "").Replace("…….", "").Replace("  –", " - ").Replace("–", " - ").Replace("-", " - ").Replace("-", " - ").Replace(".", " ").Replace(",", " ").Replace(")", " ").Replace("¦", " ").Trim();
                        if (DOB.Trim().StartsWith("–") || DOB.Trim().StartsWith("-") | DOB.Trim().StartsWith("#"))
                            DOB = DOB.Substring(1, DOB.Length - 1);
                        if (DOB.ToLower().IndexOf("years") >= 0)
                        {
                            DOB = DOB.Replace("YEARS", ",");
                            string[] strSplit = DOB.Split(',');
                            for (int sptCnt = 0; sptCnt < strSplit.Length; sptCnt++)
                            {
                                if (strSplit[sptCnt].Trim().Length <= 2) continue;
                                DOB = strSplit[sptCnt].Trim();
                            }
                        }
                        ///ends here
                    }
                    else
                        continue;
                }
            }
            catch
            {

            }
        }

        #endregion

        #region "Name"
        /// <summary>
        /// Get The Name 
        ///		Note:- 1. [Call GetName function last bec we replacing the NameIncludeList Array string from the DataLines]
        ///			   2. [You have to call getEmail fun. Before calling GetName fun.]
        ///		 1. Checking Last Line from the Array that contains () or []
        ///		 2. Check for Covering Letter is Specified,then check for regards/with regards etc.
        ///		 3. Checking for TEXT RESUME, then check first three line 
        ///		 4. Checking on Personal Information
        ///		 5. Checking First 10 Lines 
        ///		 6. Checking for place and location in last line and check for braket exists or not
        ///		 7. Checking for Regards/sincerely/yours etc.
        ///		 8. Checking for IBM annex
        ///		 9. If name doesnt Exists anywhere then take from email... 
        /// </summary>
        private void GetNameOld()
        {

            //			if(cnt>0)
            //				gCount++;
            fname = "";
            TempDataLines = DataLines;

            for (int nCntTemp = 0; nCntTemp < TempDataLines.Length; nCntTemp++)
            {
                for (int iNameCnt = 0; iNameCnt < appSet.Length; iNameCnt++)
                {
                    if (this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith(appSet[iNameCnt].ToLower().Trim()))
                        this.TempDataLines[nCntTemp] = "";//this.TempDataLines[nCntTemp].ToLower().Trim().Replace((strArrNameBk[iNameCnt].ToLower().Trim()),"");

                }
                if (this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith("|") || this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith("[") || this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith("*"))
                    this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Remove(0, 1);
                if (this.TempDataLines[nCntTemp].ToLower().Trim().EndsWith("]") || this.TempDataLines[nCntTemp].ToLower().Trim().EndsWith("|") || this.TempDataLines[nCntTemp].ToLower().Trim().EndsWith("*"))
                    this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Substring(0, this.TempDataLines[nCntTemp].Length - 1);
                if (this.TempDataLines[nCntTemp].ToLower().Trim() == "age")
                    this.TempDataLines[nCntTemp] = "";
                if (this.TempDataLines[nCntTemp].ToLower().Trim().IndexOf(" age ") > 0 || this.TempDataLines[nCntTemp].ToLower().Trim().IndexOf("(age: ") > 0)
                {
                    string[] sp = { " age ", " Age ", ",", " AGE ", "(age:", "(Age:", "(AGE:" };
                    string[] sp1 = this.TempDataLines[nCntTemp].Split(sp, StringSplitOptions.RemoveEmptyEntries);
                    if (sp1.Length > 0)
                        this.TempDataLines[nCntTemp] = sp1[0];
                }
                if (this.TempDataLines[nCntTemp].ToLower().Trim().IndexOf("(mrs)") >= 0 || this.TempDataLines[nCntTemp].ToLower().Trim().IndexOf("(mr.)") >= 0)
                    this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Replace("(Mrs)", "").Replace("(mrs)", "").Replace("(Mr.)", "").Replace("(mr.)", "").Replace("(MR.)", "");
            }


            for (int nCntTemp = 0; nCntTemp < TempDataLines.Length; nCntTemp++)
                for (int iNameCnt = 0; iNameCnt < strArrNameBk.Length; iNameCnt++)
                {
                    this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Trim().Replace("…", "");
                    if (strArrNameBk[iNameCnt].ToLower().Length < 3)
                    {
                        if (this.TempDataLines[nCntTemp].ToLower().Trim() == strArrNameBk[iNameCnt].ToLower().Trim())
                            this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].ToLower().Trim().Replace((strArrNameBk[iNameCnt].ToLower().Trim()), "");
                    }
                    else
                    {
                        if (this.TempDataLines[nCntTemp].ToLower().IndexOf(strArrNameBk[iNameCnt].ToLower().Trim()) > -1)
                            this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].ToLower().Trim().Replace((strArrNameBk[iNameCnt].ToLower().Trim()), "");
                        if (this.TempDataLines[nCntTemp].ToLower().IndexOf("tel ") > -1)
                            if (this.TempDataLines[nCntTemp].ToLower().IndexOf("tel ") == 0)
                                this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].ToLower().Trim().Replace("tel ", "");
                    }
                }
            ///Removeing SourceExclude List
            try
            {
                string[] aSourceExcludeList;
                System.Xml.XmlNodeList _nodeSourceExcludeList = FCommon.objfXMLPlacementAgencies.GetElementsByTagName("SourceExcludeList");
                for (int nCntTemp = 0; nCntTemp < TempDataLines.Length && nCntTemp <= 25; nCntTemp++)
                    for (int iSourceCnt = 0; iSourceCnt <= _nodeSourceExcludeList.Count - 1; iSourceCnt++)
                        if (_nodeSourceExcludeList.Item(iSourceCnt).InnerText.Trim() != "")
                        {
                            aSourceExcludeList = null;
                            aSourceExcludeList = _nodeSourceExcludeList.Item(iSourceCnt).InnerText.Trim().Split(';', ',');
                            for (int iSourceInnCnt = 0; iSourceInnCnt <= aSourceExcludeList.GetUpperBound(0); iSourceInnCnt++)
                                if (aSourceExcludeList[iSourceInnCnt].ToLower().Trim() != "" && this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith(aSourceExcludeList[iSourceInnCnt].ToLower().Trim()))
                                    this.TempDataLines[nCntTemp] = "";

                        }
            }
            catch { }

            try
            {
                if (LocationsIDs != "0" && LocationsIDs != "")
                {
                    string tLocationTitle = HireCraft.FCommon.opGetTitlefromXml(ref FCommon.objfXMLResumeLocations, LocationsIDs, "LocationTitle");
                    string tLocationAlias = HireCraft.FCommon.opGetTitlefromXml(ref FCommon.objfXMLResumeLocations, LocationsIDs, "LocationAlias");
                    StringBuilder LocText = new StringBuilder();
                    if (tLocationAlias.Trim() != "")
                        LocText.Append(tLocationAlias + "," + tLocationTitle);
                    else
                        LocText.Append(tLocationTitle);
                    if (StateID != "" && StateID != "0")
                        LocText.Append("," + HireCraft.FCommon.opGetTitlefromXml(ref  FCommon.objfXMLStateList, StateID, "StateTitle"));
                    if (CountryID != "" && CountryID != "0")
                        LocText.Append("," + HireCraft.FCommon.opGetTitlefromXml(ref  FCommon.objfXMLCountryList, CountryID, "CountryTitle"));
                    LocText.Replace(@"\", @"\\");
                    LocText.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                    LocText.Replace("||", "|");
                    Regex exLocText = new Regex(@"[\s,\(\:](" + LocText.ToString() + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
                    Regex exLocText1 = new Regex(@"[\s,\(\:](" + LocText.ToString() + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);
                    for (int nCntTemp = 0; nCntTemp < TempDataLines.Length && nCntTemp <= 25; nCntTemp++)
                    {
                        try
                        {
                            MatchCollection mtch = exLocText.Matches(" " + this.TempDataLines[nCntTemp].Trim());
                            if (mtch.Count == 0)
                                mtch = exLocText1.Matches(" " + this.TempDataLines[nCntTemp].Trim());
                            if (mtch.Count > 0 && this.TempDataLines[nCntTemp].Trim().ToLower().IndexOf("university") < 0)
                            {
                                foreach (Match m in mtch)
                                {
                                    this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Replace(m.Value.ToString(), "");
                                    //'break;
                                }
                                //this.TempDataLines[nCntTemp] = "";
                            }
                        }
                        catch { }
                    }

                }
            }
            catch { }
            string tName = "";
            string[] add;
            int Flag = 0;
            int iFlag = 0;
            ///added on 23-02-06
            #region "Checking last line is contain ()"
            //string[] appSet;
            ///added on 23-02-06
            ///code starts here
            ///checking if there last line of a resume contain any (----)
            try
            {
                string sLastLine = "";
                if (this.TempDataLines.Length >= 1)
                {//Last line 2 line
                    int iCLast2Cnt = 0;
                    do
                    {
                        sLastLine = this.TempDataLines[this.TempDataLines.Length - iCLast2Cnt - 1].Replace("Place:", "").Replace("Place", "").Trim();
                        if ((sLastLine.IndexOf("(") == 0) && (sLastLine.IndexOf(")") == (sLastLine.Length - 1)) || (sLastLine.IndexOf("[") == 0) && (sLastLine.IndexOf("]") == (sLastLine.Length - 1)) || sLastLine.ToLower().Trim().IndexOf("curriculum vitae of") == 0)
                        {
                            string rmBrkStr = sLastLine.Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "").Replace("curriculum vitae of", "").Replace("Curriculum Vitae of", "").Replace("CURRICULAM VITAE OF", "");
                            if (isNumberExists(sLastLine.Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "").Trim().ToCharArray()) && (sLastLine.ToLower().IndexOf("affiliated") < 0 && sLastLine.ToLower().IndexOf("university") < 0 & sLastLine.ToLower().IndexOf("unviersity") < 0 && rmBrkStr.ToLower().IndexOf("signature") < 0 && rmBrkStr.ToLower().IndexOf("sponsored") < 0 && rmBrkStr.ToLower().IndexOf("seminar") < 0 && rmBrkStr.ToLower().IndexOf("exhibition") < 0 && sLastLine.ToLower().IndexOf("reference") < 0 & rmBrkStr.ToLower().IndexOf("exhibition") < 0 && sLastLine.ToLower().IndexOf("functional") < 0 && sLastLine.ToLower().IndexOf("application") < 0 && sLastLine.ToLower().IndexOf("faithfully") < 0 && sLastLine.ToLower().IndexOf("yours") < 0 && sLastLine.ToLower().IndexOf("your name") < 0 && sLastLine.ToLower().IndexOf("available on your request") < 0 && sLastLine.ToLower().IndexOf("father") < 0))
                                tName = sLastLine.Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "").Replace("curriculum vitae of", "").Replace("Curriculum Vitae of", "").Replace("CURRICULAM VITAE OF", "").Trim();
                        }
                        iCLast2Cnt++;

                    } while (iCLast2Cnt < 2 && tName.Trim().Length <= 2);
                }
            }
            catch { }
            ///end here
            #endregion
            ///modified on 28-02-06
            #region "Check for Covering letter"
            for (int z = 0; z < this.TempDataLines.Length && (tName.Trim().Length == 0); z++)
            {
                if (this.TempDataLines[z].Trim().ToLower().IndexOf("covering letter") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("dear sir") == 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("dear manager") == 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("respected sir") == 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("cover letter") == 0)
                {
                    for (int innZ = z; innZ < this.TempDataLines.Length && (tName.Trim().Length == 0); innZ++)
                    {
                        if (this.TempDataLines[innZ].Trim().ToLower().IndexOf("with regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("yours") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("sincerely,") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("sincerely") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("thanks and best regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("very truly yours") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("truly yours") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("with best regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("respectfully your") == 0)
                        {
                            if (((innZ + 1) < this.TempDataLines.Length) && (this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0 && this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0))
                            {
                                add = this.TempDataLines[innZ + 1].Trim().Split('(', ')');
                                if (add.Length >= 1)
                                {
                                    if (isNumberExists(add[0].ToCharArray()))
                                    {
                                        tName = add[0];
                                    }
                                }
                            }
                            else
                            {
                                if (this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("you’re sincerely") == 0)
                                {
                                    if ((innZ + 2) < this.TempDataLines.Length && isNumberExists(this.TempDataLines[innZ + 2].Trim().ToCharArray()))
                                        tName = this.TempDataLines[innZ + 2].Replace(".", " ").Trim();
                                }
                                else
                                    if (isNumberExists(this.TempDataLines[innZ + 1].Trim().ToCharArray()))
                                        tName = this.TempDataLines[innZ + 1].Replace(".", " ").Trim();
                            }
                        }
                    }
                }
            }
            #endregion

            /// checking the text resume is here...

            #region "checking for text resume"
            if (tName.Trim().Length == 0)
            {
                try
                {
                    for (int z = 0; z < this.TempDataLines.Length && tName.Trim().Length == 0; z++)
                    {
                        if (this.TempDataLines[z].ToLower().Trim().IndexOf("text resume") == 0)
                        {
                            for (int y1 = 0; y1 < 3 && tName.Trim().Length < 2; y1++)
                            {
                                if (this.TempDataLines[y1].ToLower().IndexOf("reffered") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("referred") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("referr") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("reffer") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("text resume") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("resume") >= 0) continue;
                                add = this.TempDataLines[y1].Trim().Split('(');
                                if (isNumberExists1(add[0].Trim().ToCharArray()) && !(stringExist(add[0])))
                                    tName = add[0].Trim();
                            }
                        }
                    }
                }
                catch
                {
                    //MessageBox.Show(ex1.Message);
                }
            }
            #endregion
            ///ended here
            ///
            #region "Checking on personal details..."
            if (tName.Trim().Length == 0)
            {
                try
                {
                    int cnt = 0;
                    int i = TempDataLines.Length;
                    string tPersonal = "personal details|profile:|personel details|p e r  s o n a l   d e t a i l s|personal detail|personel :|personal :|personel detail|personal details’|personal profile|personel profile|personal information|personel information|personal info|personel info|personel Particulars|personal Particulars|Personel Details: -|Personal Details: -|personal data:|personal data|personel data:|personel data|personal history|personal  history|My Performa : -|candidate assessment|Full Name|my name is";
                    string ttPersonalBk = @"date and place of birth:|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|birth date|born|date of birthage|b\\'date|b’date|date  of  birth|date of birth|dob|date & place of birth|d\.o\.b|date of birth|date   of   birth|current company|current location|work |position held|view their|TECHNICAL EXPERTISE|Reference";
                    Boolean bPersonal = false;
                    int iPersonal = 0;
                    Regex rPersonal = null;
                    Regex rPersonal1 = null;
                    Regex rNameBreak = null;
                    Regex rNameBreak1 = null;
                    try
                    {
                        rPersonal = new Regex(@"[\s,\(\:](" + tPersonal + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
                        rPersonal1 = new Regex(@"[\s,\(\:](" + tPersonal + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);
                        rNameBreak = new Regex(@"[\s,\(\:](" + ttPersonalBk + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
                        rNameBreak1 = new Regex(@"[\s,\(\:](" + ttPersonalBk + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);
                        for (iPersonal = 0; iPersonal < this.TempDataLines.Length; iPersonal++)
                        {
                            if (rPersonal.IsMatch(" " + this.TempDataLines[iPersonal].ToLower().Trim()))
                            {
                                bPersonal = true;
                                break;
                            }
                            if (rPersonal1.IsMatch(" " + this.TempDataLines[iPersonal].ToLower().Trim()))
                            {
                                bPersonal = true;
                                break;
                            }
                        }
                        for (int iName = iPersonal; iName < this.TempDataLines.Length && bPersonal == true && tName.Trim().Length == 0; iName++)
                        {
                            if (this.TempDataLines[iName].ToLower().Trim().IndexOf("name of organization") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("father's name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of wife") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of children") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("fathers name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mothers name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mother's name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mother’s name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("father") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mother") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of the company") >= 0 | this.TempDataLines[iName].ToLower().Trim().IndexOf("name of course") >= 0 | this.TempDataLines[iName].ToLower().Trim().IndexOf("name of inst") >= 0) continue;
                            if (rNameBreak.IsMatch(" " + this.TempDataLines[iName].Trim()))
                                break;
                            if (rNameBreak1.IsMatch(" " + this.TempDataLines[iName].Trim()))
                                break;

                            if ((this.TempDataLines[iName].ToLower().Trim().IndexOf("name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("a. name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name:") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name:-") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("1.  full name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("1. name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("full name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("candidate name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("full name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("my name is") == 0) && tName.Trim().Length <= 2)
                            {
                                StringBuilder tNameValue = new StringBuilder();
                                tNameValue.Append(this.TempDataLines[iName].Trim());

                                //opReplaceTextFromNameText(ref tNameValue);

                                tNameValue.Replace("A. Name", "").Replace("a. name", "").Replace("a. Name", "").Replace("name as in NRIC", "").Replace("Name as in NRIC", "").Replace("name as in nric", "").Replace("as in NRIC", "").Replace("as in nric", "").Replace("my name is", "").Replace("candidate name", "").Replace("1. name", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("name:", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace("(mr.)", "").Replace(": -", "").Replace("(", "").Replace(")", "");//"Name (Mr.)"
                                tNameValue.Replace("My Name is", "").Replace("Candidate Name", "").Replace("1. Name", "").Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NAME:", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace("(MR.)", "");//"Name (Mr.)"
                                tNameValue.Replace("MY NAME IS", "").Replace("CANDIDATE NAME", "").Replace("1. NAME", "").Replace("1.  Name In Full", "").Replace("1.  Name in Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Name:", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "");
                                tNameValue.Replace("Name as appearing in Passport", "").Replace("Name as appearing in passport", "").Replace("name as appearing in passport", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                                tNameValue.Replace("name as in passport", "").Replace("Name as in Passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "").Replace("as in passport", "").Replace("as in Passport", "").Replace("As In Passport", "").Replace("as in passport", "").Replace("AS IN PASSPORT", "").Replace("AS APPEARING IN PASSPORT", "").Replace("as appearing in passport", "").Replace("as appearing in Passport", "");
                                tNameValue.Replace("name as in the passport", "").Replace("Name as in the Passport", "").Replace("Name As In The Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN THE PASSPORT", "").Replace("as in the passport", "").Replace("as in the Passport", "").Replace("As In The Passport", "").Replace("as in the passport", "").Replace("passport", "");
                                tNameValue.Replace("name as on passport", "").Replace("Name as on Passport", "").Replace("Name As On Passport", "").Replace("Name as on passport", "").Replace("NAME AS ON PASSPORT", "").Replace("as on passport", "").Replace("as on Passport", "").Replace("As On Passport", "").Replace("as on passport", "").Replace("AS ON PASSPORT", "").Replace("AS APPEARING ON PASSPORT", "");
                                tNameValue.Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace("(Mr.)", "");
                                try
                                {
                                    if (tNameValue.Replace(":", "").ToString().Trim().Length == 0)
                                        tNameValue.Append(this.TempDataLines[iName + 1].Replace(":", "").Trim());
                                    if (tNameValue.Replace(":", "").ToString().Trim().Length == 0)
                                        tNameValue.Append(this.TempDataLines[iName + 2].Trim());
                                }
                                catch { }
                                if (tNameValue.ToString().ToLower().Trim().IndexOf("fathers name") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("father's") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("father’s") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("mother's") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("mother’s") >= 0) continue;
                                //opReplaceTextFromNameText(ref tNameValue);
                                tNameValue.Replace("as in NRIC", "").Replace("as in nric", "").Replace("name as in NRIC", "").Replace("Name as in NRIC", "").Replace("name as in nric", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("email", "").Replace("date of birth", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace(" tel", "").Replace("tel ", "").Replace("manager", "").Replace("from", "").Replace(":-", ":").Replace(": -", ":").Replace("(", "").Replace(")", ""); ;
                                tNameValue.Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("EMAIL", "").Replace("DATE OF BIRTH", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace(" TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace(":-", ":");
                                tNameValue.Replace("1.  Name In Full", "").Replace("1.  Name in Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Email", "").Replace("Date Of Birth", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace(":-", ":");
                                tNameValue.Replace("PASSPORT", "").Replace("Number", "").Replace("NUMBER", "").Replace("number", "").Replace("Passport", "").Replace("passport", "");
                                add = tNameValue.Replace(":-", ":").Replace("–", "").ToString().Split(':');
                                for (int z = 0; z < add.Length; z++)
                                {
                                    if (add[z].IndexOf("Hobbies") >= 0) continue;
                                    if (add[z].Trim().Length <= 1) continue;
                                    if (isNumberExists(add[z].Trim().ToCharArray()))
                                        tName = add[z].Trim();
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        rNameBreak = null;
                        rNameBreak1 = null;
                    }

                    if (tName.Trim().Length <= 2)
                    {
                        int count = cnt;
                        for (cnt = count; cnt < TempDataLines.Length; cnt++)
                        {
                            this.TempDataLines[cnt] = this.TempDataLines[cnt].Replace(Convert.ToChar(45), Convert.ToChar(32)).Trim();
                            ///modified on 1-3-06
                            ///this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal detail") == 0 
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("reference") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("references") == 0) { Flag = -1; break; }
                            if ((this.TempDataLines[cnt].ToLower().Trim().IndexOf("name") == 0 && (this.TempDataLines[cnt].ToLower().Trim().IndexOf("named") < 0)) | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name:") == 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name:-") == 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal details") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal detail") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal details’") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal profile") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("personal information") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("personal info") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("personal Particulars") == 0)
                            {
                                Flag = 2;//setting flag as 2  means we found a personal details ,personal profile etc
                                break;
                            }
                        }
                        count = cnt;
                        for (cnt = count; cnt < TempDataLines.Length && Flag == 2; cnt++)
                        {
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("father's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name difference") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of wife") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of children") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("fathers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mothers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the company") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of course") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of inst") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of employer") >= 0) continue;
                            ///modified on 8
                            ///|this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of degree/ qualification") >= 0Institute/ University
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("education") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("qualification") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("university") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("institute") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("organisation") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("organisations") >= 0)
                            {
                                cnt++;
                                break;
                            }
                            ///modified 3-3-6
                            ///this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("references") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("reference") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational qualification") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("passport details") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0)
                            {
                                Flag = 1;
                                cnt++;
                                break;
                            }
                            ///modified on 21-02-06
                            /// check "Call Name" is exists....
                            /// check for "name as in passport"
                            /// check  "name (full name)" to null
                            /// modified 2-3-6
                            /// check for name in passport
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of organization") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the organization") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the firm") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of firm") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of school") == 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the school") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of institute") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the institute") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") == 0)
                                continue;
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as appearing in Passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name (full name)") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("1. name") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("full name") >= 0 || this.TempDataLines[cnt].ToLower().IndexOf("call name") == 0)
                            {

                                int tempNameCheck = cnt - 5;
                                if (tempNameCheck < 0)
                                    tempNameCheck = 0;
                                bool bNameCheck = true;
                                count = tempNameCheck;
                                for (tempNameCheck = count; tempNameCheck < TempDataLines.Length & tempNameCheck < cnt + 1; tempNameCheck++)
                                    if (this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("detailed career profile") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("version no") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("CERTIFICATIONS & TRAININGS") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("server") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("college/school") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("DIALOG PROGRAMMING") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("work") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("designation") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("experience") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("institution") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("project") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("organization") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("company") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("application description") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("current product") >= 0)
                                    {
                                        bNameCheck = false;
                                        break;
                                    }
                                if (bNameCheck)
                                    iFlag = 1;
                                else
                                    iFlag = 0;
                                break;
                            }
                        }
                        //second attempt to find Personal detail name
                        count = cnt;
                        for (cnt = count; cnt < TempDataLines.Length && Flag == 2; cnt++)
                        {
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("father's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name difference") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of wife") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of children") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("fathers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mothers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the company") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") >= 0) continue;
                            ///modified on 8
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("education") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("university") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("institute") >= 0) break;
                            ///modified 3-3-6
                            ///this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("references") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational qualification") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("passport details") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0)
                            {
                                Flag = 1; break;
                            }
                            ///modified on 21-02-06
                            /// check "Call Name" is exists....
                            /// check for "name as in passport"
                            /// check  "name (full name)" to null
                            /// modified 2-3-6
                            /// check for name in passport
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the organization") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of school") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of institute") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") == 0)
                                continue;
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as appearing in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name (full name)") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("1. name") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("full name") >= 0 || this.TempDataLines[cnt].ToLower().IndexOf("call name") == 0)
                            {
                                int tempNameCheck = cnt - 5;
                                if (tempNameCheck < 0)
                                    tempNameCheck = 0;
                                bool bNameCheck = true;
                                count = tempNameCheck;
                                for (tempNameCheck = count; tempNameCheck < TempDataLines.Length & tempNameCheck < cnt + 1; tempNameCheck++)
                                    if (this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("detailed career profile") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("version no") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("CERTIFICATIONS & TRAININGS") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("server") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("college/school") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("DIALOG PROGRAMMING") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("work") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("designation") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("experience") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("institution") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("project") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("organization") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("company") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("application description") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("current product") >= 0)
                                    {
                                        bNameCheck = false;
                                        break;
                                    }
                                if (bNameCheck)
                                    iFlag = 1;
                                else
                                    iFlag = 0;
                                break;
                            }
                        }


                        if (cnt < TempDataLines.Length && Flag == 0)
                        {
                            add = this.TempDataLines[cnt].ToLower().Replace("name in full", "").Replace("1. name", "").Replace("name-", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("name", "").Replace("(mr.)", "").Replace("(mr.)", "").Replace("(mr.)", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Split(':');
                            for (int cnt1 = 0; cnt1 < add.Length; cnt1++)
                            {
                                //if(add[cnt1].ToLower().Trim().IndexOf("name")>=0)continue;
                                if (add[cnt1].Trim().Length > 1)
                                {
                                    if (isNumberExists(add[cnt1].Trim().ToCharArray()))
                                        tName = add[cnt1];
                                }
                            }
                        }
                        if (iFlag == 1 && tName.Trim().Length == 0 && cnt < TempDataLines.Length)
                        {
                            for (int k = 0; k <= 2 && tName.Trim().Length == 0 && (cnt + k) < TempDataLines.Length; k++)
                            {
                                StringBuilder tNameValue = new StringBuilder();
                                tNameValue.Append(this.TempDataLines[cnt + k].Trim());
                                // opReplaceTextFromNameText(ref tNameValue);
                                tNameValue.Replace("name in full", "").Replace("Name in full", "").Replace("Name in Full", "").Replace("Name In Full", "").Replace("name as in nric", "").Replace("of candidate", "").Replace("of Candidate", "").Replace("OF CANDIDATE", "");
                                tNameValue.Replace("Name as in NRIC", "").Replace("contact by", "").Replace("Contact By", "").Replace("Contact by", "").Replace("CONTACT BY", "");
                                tNameValue.Replace("name as in NRIC", "").Replace("emailgeneral", "").Replace("Emailgeneral", "").Replace("EmailGeneral", "").Replace("EMAILGENERAL", "");
                                tNameValue.Replace("as in NRIC", "").Replace("as in nric", "").Replace("email id", "").Replace("Email ID", "").Replace("Email Id", "").Replace("EMAIL ID", "");
                                tNameValue.Replace("email", "").Replace("Email", "").Replace("EMAIL", "");
                                tNameValue.Replace("general", "").Replace("General", "").Replace("GENERAL", "").Replace("information", "").Replace("Information", "").Replace("INFORMATION", "");
                                tNameValue.Replace("mobile no.", "").Replace("Mobile No.", "").Replace("Mobile no.", "").Replace("MOBILE NO.", "");
                                tNameValue.Replace("(mobile)", "").Replace("(Mobile)", "").Replace("(MOBILE)", "").Replace("mobile", "").Replace("Mobile", "").Replace("MOBILE", "");
                                tNameValue.Replace("mob", "").Replace("Mob", "").Replace("MOB", "").Replace("(r)", "").Replace("(R)", "");
                                tNameValue.Replace("emergency contact no.:", "").Replace("Emergency Contact No.:", "").Replace("Emergency contact no.:", "").Replace("EMERGENCY CONTACT NO.:", "");
                                tNameValue.Replace("emergency", "").Replace("Emergency", "").Replace("EMERGENCY", "");
                                tNameValue.Replace("contact no.:", "").Replace("Contact No.:", "").Replace("Contact no.:", "").Replace("CONTACT NO.:", "").Replace("contact no.", "").Replace("Contact No.", "").Replace("Contact no.", "").Replace("CONTACT NO.", "").Replace("contact no", "").Replace("Contact No", "").Replace("Contact no", "").Replace("CONTACT NO", "").Replace("contact", "").Replace("Contact", "").Replace("CONTACT", "");
                                tNameValue.Replace("number", "").Replace("Number", "").Replace("NUMBER", "");
                                tNameValue.Replace("organizations", "").Replace("Organizations", "").Replace("ORGANIZATIONS", "").Replace("organization", "").Replace("Organization", "").Replace("ORGANIZATION", "").Replace("organisations", "").Replace("Organidations", "").Replace("ORGANISATIONS", "").Replace("organisation", "").Replace("Organidation", "").Replace("ORGANISATION", "");
                                tNameValue.Replace("phone no.", "").Replace("Phone No.", "").Replace("Phone no.", "").Replace("PHONE NO.", "");
                                tNameValue.Replace("telephone", "").Replace("Telephone", "").Replace("TELEPHONE", "").Replace("phone", "").Replace("Phone", "").Replace("PHONE", "").Replace("ph:", "").Replace("Ph:", "").Replace("PH:", "");
                                tNameValue.Replace("tel no. res", "").Replace("Tel No. Res", "").Replace("Tel No. res", "").Replace("TEL NO. RES", "");
                                tNameValue.Replace("cell no", "").Replace("Cell No", "").Replace("Cell No", "").Replace("CELL NO", "").Replace("cell", "").Replace("Cell", "").Replace("CELL", "");
                                tNameValue.Replace("date of birth", "").Replace("Date Of Birth", "").Replace("Date of birth", "").Replace("DATE OF BIRTH", "");
                                tNameValue.Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                                tNameValue.Replace("name as in passport", "").Replace("Name as in passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "");
                                tNameValue.Replace("name (full name)", "").Replace("Name (Full Name)", "").Replace("Name (full name)", "").Replace("NAME (FULL NAME)", "").Replace("name in passport", "").Replace("Name In Passport", "").Replace("Name in passport", "").Replace("NAME IN PASSPORT", "").Replace("name in full", "").Replace("Name In Full", "").Replace("Name in Full", "").Replace("NAME IN FULL", "").Replace("name-", "").Replace("Name-", "").Replace("NAME-", "").Replace("name:-", "").Replace("Name:-", "").Replace("NAME:-", "").Replace("name", "").Replace("Name", "").Replace("NAME", "").Replace("contact:", "").Replace("Contact:", "").Replace("CONTACT:", "").Replace("details", "").Replace("Details", "").Replace("DETAILS", "");
                                tNameValue.Replace("ADDRESS", "").Replace("Address", "").Replace("address", "").Replace("CALL", "").Replace("Call", "").Replace("call", "").Replace("FULL", "").Replace("Full", "").Replace("full", "").Replace("MANAGER", "").Replace("Manager", "").Replace("manager", "").Replace("COMPNAY", "").Replace("Company", "").Replace("company", "").Replace("DESIGNATION", "").Replace("Designation", "").Replace("designation", "").Replace("NOTICE PERIOD", "").Replace("Notice Period", "").Replace("notice period", "").Replace("expected ctc", "").Replace("Expected Ctc", "").Replace("EXPECTED CTC", "").Replace("Expected CTC", "").Replace("nurrent ctc", "").Replace("Nurrent CTC", "").Replace("Nurrent Ctc", "").Replace("NURRENT CTC", "");
                                tNameValue.Replace("Name as appearing in Passport", "").Replace("Name as appearing in passport", "").Replace("name as appearing in passport", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                                tNameValue.Replace("name as in passport", "").Replace("Name as in Passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "").Replace("as in passport", "").Replace("as in Passport", "").Replace("As In Passport", "").Replace("as in passport", "").Replace("AS IN PASSPORT", "").Replace("AS APPEARING IN PASSPORT", "").Replace("as appearing in passport", "").Replace("as appearing in Passport", "");
                                tNameValue.Replace("name as in the passport", "").Replace("Name as in the Passport", "").Replace("Name As In The Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN THE PASSPORT", "").Replace("as in the passport", "").Replace("as in the Passport", "").Replace("As In The Passport", "").Replace("as in the passport", "");
                                tNameValue.Replace("name as on passport", "").Replace("Name as on Passport", "").Replace("Name As On Passport", "").Replace("Name as on passport", "").Replace("NAME AS ON PASSPORT", "").Replace("as on passport", "").Replace("as on Passport", "").Replace("As On Passport", "").Replace("as on passport", "").Replace("AS ON PASSPORT", "").Replace("AS APPEARING ON PASSPORT", "").Replace("passport", "").Replace("Passport", "").Replace("PASSPORT", "");
                                tNameValue.Replace("(MR.)", "").Replace("(Mr.)", "").Replace("(mr.)", "").Replace("=", "").Replace("FROM", "").Replace("From", "").Replace("from", "").Replace(" tel", "").Replace("tel ", "").Replace(" Tel", "").Replace(" TEL", "").Replace("Tel ", "").Replace("TEL ", "");
                                tNameValue.Replace("Date of Issue", "").Replace("date of issue", "").Replace("DATE OF ISSUE", "").Replace("Expiry Date", "").Replace("EXPIRY DATE", "").Replace("Expiry Date", "").Replace("PLACE OF ISSUE", "").Replace("place of issue", "").Replace("Place of Issue", "").Replace("             ", ":");
                                if (tNameValue.ToString().ToLower().IndexOf("place") >= 0 || tNameValue.ToString().ToLower().IndexOf("permanent") >= 0 || tNameValue.ToString().ToLower().IndexOf("fathers") >= 0 || tNameValue.ToString().ToLower().IndexOf("father's name") >= 0 || tNameValue.ToString().ToLower().IndexOf("father’s name") >= 0 | tNameValue.ToString().ToLower().IndexOf("fathers name") >= 0 | tNameValue.ToString().ToLower().IndexOf("mothers name") >= 0 | tNameValue.ToString().ToLower().IndexOf("mother's name") >= 0 | tNameValue.ToString().ToLower().IndexOf("mother’s name") >= 0 | tNameValue.ToString().ToLower().IndexOf("father") >= 0 | tNameValue.ToString().ToLower().IndexOf("mother") >= 0 | tNameValue.ToString().ToLower().IndexOf("name of the company") >= 0 | tNameValue.ToString().ToLower().IndexOf("name of course") >= 0 || tNameValue.ToString().ToLower().IndexOf("name of inst") >= 0 || tNameValue.ToString().ToLower().IndexOf("name of consultant") >= 0) continue;

                                if (stringExist(tNameValue.ToString()) == true) continue; ;
                                add = tNameValue.Replace(":-", ":").ToString().Split(':');
                                for (int z = 0; z < add.Length && tName.Trim().Length <= 10; z++)
                                {
                                    if (add[z].IndexOf("Hobbies") >= 0 || add[z].ToLower().IndexOf("d o b") >= 0) continue;
                                    if (add[z].Trim().Length <= 1) continue;
                                    if (isNumberExists(add[z].Trim().ToCharArray()))
                                        tName = add[z].Trim();
                                }
                            }
                        }
                    }

                }
                catch
                {

                }
            }
            #endregion

            #region "checking name first 10 line and resume"

            if (tName.Trim().Length <= 2)
            {
                ///
                try
                {
                    int nCnt = 0; iFlag = 0;

                    if (tName.Trim().Length <= 2)
                    {
                        string tTitle = "bio data|personal profile|resume|resumé|résumé of|biodata of|profile of|profile of|technical  of|résume|referr|reffered|curriculum|curriculam|ctc|location|contact info|vitae|monster profile|naukri profile|referr|reffer";
                        Regex rTitle = null;
                        Regex rTitle1 = null;
                        try
                        {
                            rTitle = new Regex(@"[\s,\(\:](" + tTitle + @")[,:\s]?[\s]?\b", RegexOptions.IgnoreCase);
                            rTitle1 = new Regex(@"[\s,\(\:](" + tTitle + @")[,:\s]?[\s]?$", RegexOptions.IgnoreCase);
                            for (nCnt = 0; nCnt < 3 && nCnt < TempDataLines.Length; nCnt++)
                            {//Curriculum vitae of
                                string strCheck = this.TempDataLines[nCnt];
                                if (!rTitle.IsMatch(" " + strCheck.Trim())) continue;
                                if (!rTitle.IsMatch(" " + strCheck.Trim())) continue;
                                //								if ( strCheck.ToUpper().Trim().IndexOf("BIO DATA") >= 0|strCheck.ToLower().Trim().IndexOf("resume") >= 0 |strCheck.ToLower().Trim().IndexOf("resumé") >= 0 |strCheck.ToLower().Trim().IndexOf("biodata of") >= 0|strCheck.ToLower().Trim().IndexOf("profile of") >= 0|strCheck.ToLower().Trim().IndexOf("profile of") >= 0|strCheck.ToLower().Trim().IndexOf("technical  of") >= 0 |strCheck.ToLower().Trim().IndexOf("résume") >= 0 |strCheck.ToLower().Trim().IndexOf("referr") >= 0 |strCheck.ToLower().Trim().IndexOf("reffered") >= 0 |strCheck.ToLower().Trim().IndexOf("curriculum") >= 0 |strCheck.ToLower().Trim().IndexOf("curriculam") >= 0 |strCheck.ToLower().Trim().IndexOf("ctc") >= 0 |strCheck.ToLower().Trim().IndexOf("location") >= 0 |strCheck.ToLower().Trim().IndexOf("contact info") >= 0 |strCheck.ToLower().Trim().IndexOf("vitae") >= 0 |strCheck.ToLower().Trim().IndexOf("monster profile") >= 0 |strCheck.ToLower().Trim().IndexOf("naukri profile") >= 0 |strCheck.ToLower().Trim().IndexOf("referr") == 0 |strCheck.ToLower().Trim().IndexOf("reffer") == 0)
                                //								{

                                if (strCheck.ToLower().Trim().IndexOf("resume manager   resume of") == 0 || strCheck.ToLower().Trim().IndexOf("resume –") == 0 || strCheck.ToLower().Trim().IndexOf("brief  resume  of") == 0 || strCheck.ToLower().Trim().IndexOf("brief resume of") == 0 || strCheck.ToLower().Trim().IndexOf("resume of") == 0 || strCheck.ToLower().Trim().IndexOf("résume of") == 0 || strCheck.ToLower().Trim().IndexOf("résumé of") == 0 || strCheck.ToLower().Trim().IndexOf("resumé of") == 0 | strCheck.ToLower().Trim().IndexOf("resume  of") == 0 || strCheck.ToLower().Trim().IndexOf("technical profile of") == 0 || strCheck.ToLower().Trim().IndexOf("technical  of") == 0 || strCheck.ToLower().Trim().IndexOf("biodata of") == 0 || strCheck.ToLower().Trim().IndexOf("curriculum vitae of") >= 0 || strCheck.ToLower().Trim().IndexOf("profile of") == 0 || strCheck.ToUpper().Trim().IndexOf("PERSONAL PROFILE OF") == 0 || strCheck.ToUpper().Trim().IndexOf("PERSONAL PROFILE") == 0 || strCheck.ToLower().Trim().IndexOf("curriculum vitae   :") == 0 || strCheck.ToLower().Trim().IndexOf("curriculum vitae :") == 0 || strCheck.ToLower().Trim().IndexOf("curriculum vitae –") == 0)
                                {
                                    iFlag = 0;
                                    tName = strCheck.Replace("Resume Manager   Resume of", "").Replace("RESUME OF TESTING", "").Replace("BRIEF  RESUME  OF", "").Replace("brief  resume  of", "").Replace("BRIEF RESUME OF", "").Replace("brief resume of", "").Replace("resume of", "").Replace("Resume Of", "").Replace("Resume of", "").Replace("Résumé of", "").Replace("résumé of", "").Replace("RESUME OF", "").Replace("resume  of", "").Replace("Resume  Of", "").Replace("technical profile of", "").Replace("Technical Profile of", "").Replace("TECHNICAL PROFILE OF", "").Replace("Resume  of", "").Replace("RESUME  OF", "").Replace("RESUME of", "").Replace("Résumé of", "").Replace("Résume of", "").Replace("Resumé of", "").Replace("RÉSUMÉ of", "").Replace("RESUMÉ of", "").Replace("RÉSUME of", "").Replace("technical  of", "").Replace("Technical  of", "").Replace("Technical  Of", "").Replace("biodata of", "").Replace("Biodata of", "").Replace("PERSONAL PROFILE OF", "").Replace("Biodata Of", "").Replace("Personal Profile Of", "").Replace("Personal Profile of", "").Replace("Personal Profile", "").Replace("PROFILE OF", "").Replace("Profile of", "").Replace("profile of", "").Replace("Profile Of", "").Replace("CURRICULUM VITAE OF", "").Replace("Curriculum Vitae of", "").Replace("curriculum vitae of", "").Replace("Curriculum vitae of", "").Replace("curriculum vitae of", "").Replace("Curriculum Vitae of", "").Replace("PERSONAL PROFILE", "").Replace("personal profile", "").Replace("Personal Profile", "").Replace("Resume –", "").Replace("resume –", "").Replace("RESUME –", "").Replace("curriculum vitae   :", "").Replace("Curriculum Vitae   :", "").Replace("CURRICULUM VITAE   :", "").Replace("Curriculum Vitae :", "").Replace("curriculum vitae :", "").Replace("CURRICULUM VITAE :", "").Replace("Curriculum Vitae –", "").Replace("curriculum vitae –", "").Replace("CURRICULUM VITAE –", "");
                                }
                                else
                                {
                                    iFlag = 1;
                                }
                                break;
                                //}
                            }
                        }
                        catch { }
                        finally
                        {
                            rTitle = null;
                            rTitle1 = null;
                        }

                        int count = nCnt;
                        for (nCnt = count; (nCnt < 4 && nCnt < TempDataLines.Length) && tName.Trim().Length == 0 && iFlag == 1; nCnt++)
                        {
                            ///modified on 24-02-06
                            ///Check the professional summary this.TempDataLines[nCnt].ToLower().Trim().IndexOf("professional summary") == 0 
                            ///modified on 3-3-6
                            ///this.DataLines[nCnt].ToLower().Trim().IndexOf("work profile") >= 0

                            ///if (this.DataLines[nCnt].ToLower().Trim().IndexOf("experience summary") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("professional summary") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("summary") == 0|| this.DataLines[nCnt].ToLower().Trim().IndexOf("title") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("objective") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("-") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("_") == 0 || this.DataLines[nCnt].ToUpper().Trim().IndexOf("AUTHORISATION LETTER") == 0 || this.DataLines[nCnt].ToUpper().Trim().IndexOf("EDUCATIONAL QUALIFICATION") == 0 || this.DataLines[nCnt].ToUpper().IndexOf("EMPLOYMENT HISTORY") == 0 || this.DataLines[nCnt].ToUpper().IndexOf("JOB PROFILE") == 0 || this.DataLines[nCnt].ToUpper().IndexOf("EMPLOYEMENT HISTORY") == 0||this.DataLines[nCnt].ToLower().Trim().IndexOf("work profile") == 0) break;
                            ///

                            int iNameBk = 0;
                            for (int iNameCnt = 0; iNameCnt < strArrNameBk.Length; iNameCnt++)
                            {
                                if (this.TempDataLines[nCnt].ToLower().Trim() == strArrNameBk[iNameCnt].ToLower().Trim())
                                {
                                    iNameBk = 1;
                                    break;
                                }
                            }
                            if (iNameBk == 1) break;

                            ///modified on 3-3-6
                            ///this.DataLines[nCnt].ToLower().Trim().IndexOf("the person") >= 0
                            ///if (this.DataLines[nCnt].ToLower().Trim().IndexOf("curri") == 0||this.DataLines[nCnt].ToLower().Trim().IndexOf("offered") == 0||this.DataLines[nCnt].ToLower().Trim().IndexOf("personal") == 0||this.DataLines[nCnt].ToLower().Trim().IndexOf("r  e  s  u  m  e")==0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("referr") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("reffered") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("resume") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("resumé") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("résume") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("curriculam") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("curriculum") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("ctc") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("etc") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("email") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("e-mail") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("@") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("ph:") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("mob") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("mobile") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("experience summary") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("objective") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("notice period") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("escalation") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("contact info") == 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("vitae") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("monster profile") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("naukri profile") >= 0 || this.DataLines[nCnt].ToLower().Trim().IndexOf("timesjobs profile") >= 0 ||this.DataLines[nCnt].ToLower().Trim().IndexOf("the person") >= 0) continue;

                            int iNameNot = 0;
                            for (int iNameCnt = 0; iNameCnt < strArrNameNot.Length; iNameCnt++)
                            {
                                if (this.TempDataLines[nCnt].ToLower().Trim() == strArrNameNot[iNameCnt].ToLower().Trim() | this.TempDataLines[nCnt].ToLower().Trim().IndexOf(strArrNameNot[iNameCnt]) == 0)
                                {
                                    iNameNot = 1;
                                    break;
                                }
                            }
                            if (iNameNot == 1) continue;

                            ///modified on 3-3-6
                            ///replace coloumn
                            if (isNumberExists(this.TempDataLines[nCnt].Replace(":", "").Trim().ToCharArray()) && this.TempDataLines[nCnt].Replace(":", "").Trim().Length > 3)
                                if (nCnt < TempDataLines.Length)
                                    tName = this.TempDataLines[nCnt].Replace("Full Name", "").Replace("PROFESSIONAL", "").Replace("Professional", "").Replace("professional", "").Replace("full name", "").Replace("Name:", "").Replace("Name", "").Replace("NAME:", "").Replace("NAME", "").Replace(":", "").Replace("Curriculum Vitae of", "").Replace("Resume", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("CURRICULUM VITAE", "").Replace("Curriculum Vitae", "").Replace("curriculum vitae", "").Trim();
                            if (this.TempDataLines[nCnt].IndexOf("      ") >= 0 && tName.Trim().Length == 0)
                            {
                                string checkStr = this.TempDataLines[nCnt].Substring(0, this.TempDataLines[nCnt].IndexOf("      "));
                                if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)// && !(stringExist(this.TempDataLines[nCnt])))
                                {
                                    tName = checkStr.Trim();
                                }
                            }
                            if (this.TempDataLines[nCnt].ToLower().IndexOf("name:") == 0 && tName.Trim().Length == 0)
                            {
                                string checkStr = this.TempDataLines[nCnt].Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace(":", "");
                                add = checkStr.Split(',');
                                if (add.Length == 2)
                                    tName = add[1].Trim() + " " + add[0].Trim();

                            }
                            if (stringExist(tName) == true && tName.Trim().Length > 0) tName = "";
                        }


                        for (int z = 0; (z < 10 && z < TempDataLines.Length) && tName.Trim().Length == 0; z++)
                        {
                            if (this.TempDataLines[z].ToLower().Trim().IndexOf("candidate name") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("1. full name:") == 0)
                            {
                                StringBuilder tNameValue = new StringBuilder();
                                tNameValue.Append(this.TempDataLines[z].Trim());
                                opReplaceTextFromNameText(ref tNameValue);
                                tNameValue.Replace("my name is", "").Replace("candidate name", "").Replace("1. name", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("name:", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace("(mr.)", "").Replace(": -", "").Replace("(", "").Replace(")", "");//"Name (Mr.)"
                                tNameValue.Replace("My Name is", "").Replace("Candidate Name", "").Replace("1. Name", "").Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NAME:", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace("(MR.)", "");//"Name (Mr.)"
                                tNameValue.Replace("MY NAME IS ", "").Replace("CANDIDATE NAME", "").Replace("1. NAME", "").Replace("1.  Name In Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Name:", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace("(Mr.)", "");
                                try
                                {
                                    if (tNameValue.Replace(":", "").ToString().Trim().Length == 0)
                                        tNameValue.Append(this.TempDataLines[z + 1].Replace(":", "").Trim());
                                    //if (tNameValue.Trim().Length == 0)
                                    //    tNameValue = this.TempDataLines[iName + 2].Trim();
                                }
                                catch { }
                                //opReplaceTextFromNameText(ref tNameValue);
                                tNameValue = tNameValue.Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("email", "").Replace("date of birth", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace(":-", ":").Replace(": -", ":").Replace("(", "").Replace(")", "");
                                tNameValue = tNameValue.Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("EMAIL", "").Replace("DATE OF BIRTH", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace(":-", ":");
                                tNameValue = tNameValue.Replace("1.  Name In Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Email", "").Replace("Date Of Birth", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace(":-", ":");
                                add = tNameValue.Replace(":-", ":").ToString().Split(':');
                                for (int j = 0; j < add.Length; j++)
                                {
                                    if (add[j].Trim().Length <= 1) continue;
                                    if (isNumberExists(add[j].Trim().ToCharArray()))
                                        tName = add[j].Trim();
                                }
                            }
                        }


                        if (iFlag == 0 && tName.Trim().Length == 0 && this.TempDataLines.Length >= 1)
                        {
                            if (this.TempDataLines[0].ToUpper().Trim().IndexOf("AUTHORISATION LETTER") < 0 && this.TempDataLines[0].ToLower().Trim().IndexOf("covering letter") < 0 && this.TempDataLines[0].ToLower().Trim().IndexOf("education") < 0)
                            {
                                if (this.TempDataLines[0].ToLower().Trim().IndexOf("email") >= 0 || this.TempDataLines[0].ToLower().Trim().IndexOf("phone") >= 0 || this.TempDataLines[0].ToLower().Trim().IndexOf("emp no") >= 0 || this.TempDataLines[0].ToLower().Trim().IndexOf("last active") >= 0)
                                {
                                    add = this.TempDataLines[0].ToLower().Replace("phone no", "").Replace("phone", "").Replace("curriculum vitae", "").Replace("phone", "").Replace("email id", "").Replace("e-mail", "").Replace("emp No", "").Replace("last active", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Split(':', '(', ')');
                                    if (add.Length >= 1)
                                    {
                                        for (int z = 0; z < add.Length && tName.Length == 0; z++)
                                        {
                                            if (add[z].Length >= 1)
                                            {
                                                if (isNumberExists(add[z].Trim().ToCharArray()))
                                                    tName = add[z].Trim();
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    ///Modified on21/02/06
                                    ///if first line contain mobile and name...
                                    ///
                                    if (this.TempDataLines[0].Trim().IndexOf("Mobile") >= 0 && this.TempDataLines.Length >= 1)
                                    {
                                        add = this.TempDataLines[0].Trim().ToLower().Replace("mobile", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email id", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Split(' ');
                                        for (int z = 0; z < add.Length; z++)
                                        {
                                            if (isNumberExists(add[z].Trim().ToCharArray()))
                                                tName += " " + add[z].Trim();
                                        }
                                    }
                                    else
                                    {
                                        ///modified on 21/02/06..
                                        /// check is the first line is objective or not
                                        /// modified on 24-02-06
                                        /// check first line is not a summary
                                        /// modified on 1-3-6
                                        ///modified on checking ---before checking change the string to lower case
                                        if (this.TempDataLines[0].Trim().ToLower().IndexOf("objective") < 0 && this.TempDataLines[0].Trim().ToLower().IndexOf("communication") < 0 && this.TempDataLines[0].Trim().ToLower().IndexOf("consultants") < 0 && this.TempDataLines[0].Trim().ToLower().IndexOf("achievements") < 0 && this.TempDataLines[0].Trim().ToLower().IndexOf("summary") < 0)
                                        {
                                            if (this.TempDataLines.Length >= 1)
                                            {
                                                string[] AddrExists = this.TempDataLines[0].Replace("Profile –", "").Trim().Split(' ');
                                                for (int inn = 0; inn < AddrExists.Length; inn++)
                                                {
                                                    if (AddrExists[inn].Trim().Length == 0) continue;
                                                    if (isNumberExists(AddrExists[inn].Trim().ToCharArray()) && !(stringExist(AddrExists[inn])))
                                                    {
                                                        tName += " " + AddrExists[inn].Trim();
                                                    }
                                                    else
                                                    {
                                                        if (tName.Trim().Length <= 2) tName = "";
                                                        break;
                                                    }
                                                }


                                            }
                                            else if (this.TempDataLines.Length >= 2 && isNumberExists(this.TempDataLines[1].Trim().ToCharArray()) && !(stringExist(this.TempDataLines[1])))
                                                tName = this.TempDataLines[1].Trim();
                                            else if (this.TempDataLines.Length >= 3 && isNumberExists(this.TempDataLines[2].Trim().ToCharArray()) && !(stringExist(this.TempDataLines[2])))
                                                tName = this.TempDataLines[2].Trim();
                                            else if (this.TempDataLines.Length >= 4 && isNumberExists(this.TempDataLines[3].Trim().ToCharArray()) && !(stringExist(this.TempDataLines[3])))
                                                tName = this.TempDataLines[3].Trim();
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
                catch
                {
                    //	MessageBox.Show(ex1.Message);
                }
            }
            #endregion
            ///checking NAME comes under address....
            ///
            #region checking NAME comes under address....
            int iAddressCount = 0;
            string tDobSearch = "BORN:|Born on|Birth Date|Birth :|d. o. b|d o b|d  o  b|date and place of birth:|date and place of birth|date and country of birth|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|date of birth/age|date of birthage|b\\'date|b’date|date  of  birth|date of birth|date ofbirth|dob|date & place of birth|d.o.b|date of birth|date   of   birth|aspiration|DATE OF BIRTH:";
            Regex exDobSearch = new Regex(@"[\s,\(\:](" + tDobSearch.ToString() + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
            Regex exDobSearch1 = new Regex(@"[\s,\(\:](" + tDobSearch.ToString() + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);

            for (int z = 0; (z < 20 && z < TempDataLines.Length) && tName.Trim().Length <= 2; z++)
            {
                if (this.TempDataLines[z].Trim().Length == 0) continue;
                if (this.TempDataLines[z].ToLower().Trim().IndexOf("towers") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("sector ") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("phase") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf(" po") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("phone2") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("address") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("enclave") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("floor") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("pin no") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("road") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("hostel") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("p.o") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("apartment") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("quarters") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("nagar") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("street") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("colony") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("pin -") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("main road") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("post box") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("p.o box") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("p.o") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("nilaya") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("villa") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("house") >= 0)
                    iAddressCount++;
                if (this.TempDataLines[z].ToLower().Trim().IndexOf("professional details") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("consultancy in") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("industry") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("information") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("extensive delivery") >= 0) break;
                if ((this.TempDataLines[z].ToUpper().Trim().IndexOf("BRIEF OVERVIEW") == 0 || this.TempDataLines[z].ToUpper().Trim().IndexOf("WORK") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf(":: objectives") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("job objective") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("career objective") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("professional") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("experience summary") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("personal information") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("objective") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("profile") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("summary") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("personal") == 0) && iAddressCount > 0 && (z - 1 >= 0))
                {
                    if (this.TempDataLines[z - 1].ToLower().Trim().IndexOf("seeking") >= 0 || this.TempDataLines[z - 1].ToLower().Trim().IndexOf("career") == 0) break;
                    string checkStr = this.TempDataLines[z - 1].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Replace("Resume", "").Replace("RESUME", "");
                    if (checkStr.Trim().IndexOf("(") > 0 && (checkStr.Trim().IndexOf("total") < 0 || checkStr.Trim().IndexOf("years") < 0 || checkStr.Trim().IndexOf("year") < 0 || checkStr.Trim().IndexOf("seeking") < 0))
                    {
                        string[] acheckStr = checkStr.Trim().Split('(');
                        if (isNumberExists(acheckStr[0].ToCharArray()) && tName.Trim().Length == 0 && acheckStr[0].Trim().Length > 3 && stringExist(acheckStr[0]) == false)
                            tName = acheckStr[0].Trim();
                    }
                    else if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)
                        tName = checkStr.Trim();
                    else if (checkStr.Trim().IndexOf("         ") > 0)
                    {
                        checkStr = checkStr.Substring(0, checkStr.Trim().IndexOf("         "));
                        if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)
                            tName = checkStr.Trim();
                    }

                    else if ((z - 2 >= 0))
                    {
                        checkStr = this.TempDataLines[z - 2].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "");
                        if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3 && stringExist(checkStr) == false)
                            tName = checkStr.Trim();
                        else if ((z - 3) >= 0)
                        {
                            checkStr = this.TempDataLines[z - 3].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "");
                            if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3 && stringExist(checkStr) == false)
                                tName = checkStr.Trim();
                        }
                    }
                    if (stringExist(tName) == true && tName.Trim().Length > 0) tName = "";
                    if (tName.Trim().Length <= 2) tName = "";
                    break;
                }
                if ((this.TempDataLines[z].ToLower().Trim() == "job objective") || this.TempDataLines[z].ToUpper().Trim().IndexOf("CAREER  OBJECTIVE") >= 0 || (this.TempDataLines[z].ToLower().Trim().IndexOf("educational qualification") >= 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("educational qual.:") >= 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("education qualification") >= 0) || (this.TempDataLines[z].ToLower().Trim() == "experience") || (this.TempDataLines[z].ToLower().Trim() == "brief summary") || (this.TempDataLines[z].ToLower().Trim() == "education") || (this.TempDataLines[z].ToLower().Trim() == "employment history") || (this.TempDataLines[z].ToLower().Trim() == "professional objective") || this.TempDataLines[z].ToLower().Trim().IndexOf("career objective:") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("summary") == 0 || (this.TempDataLines[z].ToLower().Trim().IndexOf("summary:") == 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("objective") == 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("d.o.b.") == 0))
                    break;
                if ((exDobSearch.IsMatch(" " + this.TempDataLines[z].Trim()) == true || exDobSearch1.IsMatch(" " + this.TempDataLines[z].Trim()) == true)) break;
            }
            exDobSearch1 = null; exDobSearch = null;
            #endregion
            #region "20 lines"
            //Ethiraj Associate
            int tEA = 0;
            //						if ( this.TempDataLines[0].ToLower().Trim().IndexOf("contact details")==0)
            //						{
            //							tEA=38;
            //						}
            //						
            for (int z = tEA; (z < tEA + 10 && z < TempDataLines.Length) && tName.Trim().Length == 0; z++)
            {
                ///modified on 24-02-06
                ///Check the professional summary this.TempDataLines[z].ToLower().Trim().IndexOf("professional summary") == 0 
                if (this.TempDataLines[z].Trim().Length == 0) continue;
                if (this.TempDataLines[z].ToLower().Trim().IndexOf("educational qualification") >= 0 | this.TempDataLines[z].ToLower().Trim().IndexOf("educational qual.:") >= 0 | this.TempDataLines[z].ToLower().Trim().IndexOf("education qualification") >= 0 | this.TempDataLines[z].ToLower().Trim() == "experience" | this.TempDataLines[z].ToLower().Trim() == "brief summary" | this.TempDataLines[z].ToLower().Trim() == "education" | this.TempDataLines[z].ToLower().Trim() == "employment history" | this.TempDataLines[z].ToLower().Trim() == "professional objective" | this.TempDataLines[z].ToLower().Trim().IndexOf("career objective:") == 0) break;
                int iNameBk = 0;
                for (int iNameCnt = 0; iNameCnt < strArrNameBk.Length; iNameCnt++)
                {
                    if (this.TempDataLines[z].ToLower().Trim().IndexOf(strArrNameBk[iNameCnt]) == 0)
                    {
                        iNameBk = 1;
                        break;
                    }
                }
                if (iNameBk == 1) break;

                ///Modified on 21/02/06
                ///if email is exists with name..as one string
                ///
                if (this.TempDataLines[z].Trim().ToLower().IndexOf("@") >= 0 && this.TempDataLines[z].Trim().ToLower().IndexOf("d.o.b") < 0)
                {

                    string tEmalWName = this.TempDataLines[z].Trim().ToLower();
                    if (tEmalWName.IndexOf("ph") == 0 | tEmalWName.IndexOf("e mail") == 0 | tEmalWName.IndexOf("email") == 0 || tEmalWName.IndexOf("e-mail") == 0 | tEmalWName.IndexOf("tel no. res") == 0) continue;
                    add = tEmalWName.Replace("contact by", "").Replace("emailgeneral", "").Replace("email id", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("email", "").Replace("cell", "").Replace("contact number", "").Replace("contact", "").Replace("name", "").Replace("cel no", "").Replace("e mail", "").Replace("e mail", "").Replace("e mail", "").Replace("e mail:", "").Replace("e-mail", "").Replace("e  mail:", "").Replace("email", "").Replace("e- mail:", "").Replace("mail id", "").Replace("mail id", "").Replace("mail id", "").Replace("mail id", "").Replace("ph", "").Replace("mail", "").Replace("e-mail", "").Replace("mail", "").Replace("or ", "").Replace(" or ", "").Replace(" and", "").Replace(" and ", "").Split(' ');
                    int iSpaceCnt = 0;
                    for (int y = 0; y < add.Length; y++)
                    {
                        if (add[y].Length >= 1)
                        {
                            if (iSpaceCnt > 2) break;
                            if (isNumberExists(add[y].Trim().ToCharArray()) && !(stringExist(add[y].Trim())))
                            {
                                if (tName == "")
                                    tName = tName + " " + add[y].Trim();
                                else
                                    tName = tName + " " + add[y].Trim();
                            }
                        }
                        else if (tName.Trim().Length > 1)
                        {
                            iSpaceCnt++;
                        }
                    }
                    if (stringExist(tName) == true && tName.Trim().Length > 0 || tName.Trim().Length == 1) tName = "";
                }
                if ((this.TempDataLines[z].Trim().ToLower().IndexOf("mobile") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("cell no") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("contact") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("contact no") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("mob") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("(mobile)") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("mobile no") >= 0) && tName.Trim().Length == 0)
                {
                    string tContact = this.TempDataLines[z].ToLower();
                    add = tContact.Replace("contact by", "").Replace("emailgeneral", "").Replace("email id", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("e- mail:", "").Replace("name", "").Split(' ');
                    for (int y = 0; y < add.Length; y++)
                    {
                        if (add[y].Length >= 1)
                        {
                            if (isNumberExists(add[y].Trim().ToCharArray()) && !(stringExist(add[y])))
                                tName = tName + " " + add[y].Trim().Replace("(", "").Replace(")", "").Trim();
                        }
                    }

                }
                int iNameNot = 0;
                for (int iNameCnt = 0; iNameCnt < strArrNameNot.Length; iNameCnt++)
                {
                    if (this.TempDataLines[z].ToLower().Trim().IndexOf(" " + strArrNameNot[iNameCnt] + " ") >= 0)
                    {
                        iNameNot = 1;
                        break;
                    }
                }
                if (iNameNot == 1) continue;
                if (regExNameNot.IsMatch(" " + this.TempDataLines[z].Trim()) | regExNameNot1.IsMatch(" " + this.TempDataLines[z].Trim()))
                    continue;


                string checkStr = this.TempDataLines[z].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Replace("}", "").Replace("{", "");
                if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)
                {
                    /// replace 1.  Full Name:
                    tName = checkStr.Trim();
                    try
                    {
                        if (this.TempDataLines[z + 1].ToLower().Trim().IndexOf("last name") == 0)
                        {
                            checkStr = this.TempDataLines[z + 2].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "");
                            if (isNumberExists(checkStr.ToCharArray()) && checkStr.Trim().Length > 3)
                                tName += " " + checkStr.Trim();
                        }
                    }
                    catch { }
                }
                if (checkStr.IndexOf("    ") >= 0 && tName.Trim().Length == 0)
                {
                    string tTEmp = checkStr;
                    checkStr = checkStr.Substring(0, checkStr.IndexOf("    "));
                    if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)//&& !(stringExist(this.TempDataLines[nCnt])))
                        tName = checkStr.Trim();
                    else
                    {
                        checkStr = tTEmp.Substring(tTEmp.IndexOf("    "));
                        if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)//&& !(stringExist(this.TempDataLines[nCnt])))
                            tName = checkStr.Trim();
                    }
                }
                if (stringExist(tName) == true && tName.Trim().Length > 0) tName = "";
                if (tName.Trim().Length <= 2) tName = "";
            }
            #endregion



            #region "Checking for place and location in last line and check for braket exists or not"

            if (tName.Trim().Length == 0)
            {
                try
                {
                    int nCnt = 0;

                    for (nCnt = 0; nCnt < TempDataLines.Length; nCnt++)
                    {
                        if ((this.TempDataLines[nCnt].ToLower().IndexOf("place:") == 0 || this.TempDataLines[nCnt].ToLower().IndexOf("location") == 0) && this.TempDataLines[nCnt].ToLower().IndexOf("location preference") < 0)
                        {
                            add = this.TempDataLines[nCnt].Split(':');
                            int i = 0;
                            while (i < add.Length)
                            {
                                if (add[i].ToLower().Trim().IndexOf('(') >= 0)
                                {
                                    if (isNumberExists(add[i].Trim().ToCharArray()))
                                        tName = add[i].Trim();
                                }
                                i++;
                            }
                            if ((nCnt + 1) < TempDataLines.Length)
                            {
                                if (isNumberExists(TempDataLines[nCnt + 1].Trim().ToCharArray()) && !(stringExist(this.TempDataLines[nCnt + 1])))
                                    tName = this.TempDataLines[nCnt + 1].Trim();
                            }
                        }
                    }
                    //}
                }
                catch
                {
                    //	MessageBox.Show(ex1.Message);
                }
            }
            #endregion

            #region "Checking for regards"
            for (int innZ = 0; innZ < this.TempDataLines.Length && (tName.Trim().Length == 0); innZ++)
            {
                if (this.TempDataLines[innZ].Trim().ToLower().IndexOf("regards") == 0 | this.TempDataLines[innZ].Trim().ToLower().IndexOf("thanks and regards,") == 0 | this.TempDataLines[innZ].Trim().ToLower().IndexOf("yours") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("sincerely,") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("sincerely") == 0)
                {
                    if (((innZ + 1) < this.TempDataLines.Length) && (this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0 && this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0))
                    {
                        add = this.TempDataLines[innZ + 1].Trim().Split('(', ')');
                        if (add.Length >= 1)
                        {
                            if (isNumberExists(add[0].ToCharArray()))
                            {
                                tName = add[0];
                            }
                        }
                    }
                    else
                    {
                        if (isNumberExists(this.TempDataLines[innZ + 1].Trim().ToCharArray()))
                        {
                            tName = this.TempDataLines[innZ + 1].Replace("(", "").Replace(")", "").Trim();
                        }
                    }
                }
            }
            #endregion

            ///modified on 27-02-06
            ///check for IBM annex is exists in resume..
            ///code starts here..
            tName = tName.Trim().Replace("R E S U M E", "").Replace("Contact Information", "").Replace("contact information", "").Replace("(", "").Replace(")", "").Replace("CURRICULUM VITAE", "").Replace("curriculum vitae", "").Replace("Date of Birth", "").Replace("E mail", "").Replace("Contact no", "").Replace("Addresses", "").Replace("Home", "").Replace("Mr ", "");
            #region "Checking for IBM annex is in resume "
            if (tName.Trim().Length == 0)
            {
                int iFound = 0;
                try
                {
                    for (int inName = 0; inName < this.TempDataLines.Length; inName++)
                    {
                        if (this.TempDataLines[inName].ToLower().Trim().IndexOf("ibm annex") == 0)
                        {
                            iFound = inName;
                            break;
                        }
                    }
                    for (int inName = iFound; inName < this.TempDataLines.Length && iFound != 0; inName++)
                    {
                        if (this.TempDataLines[inName].ToLower().Trim().IndexOf("date of birth") >= 0 || this.TempDataLines[inName].ToLower().Trim().IndexOf("references") >= 0) break;
                        if (this.TempDataLines[inName].ToLower().Trim().IndexOf("full name") >= 0 || this.TempDataLines[inName].ToLower().Trim().IndexOf("first name") >= 0 || this.TempDataLines[inName].ToLower().Trim().IndexOf("name") == 0)
                        {

                            if (isNumberExists(this.TempDataLines[inName].Replace("Full Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("Name", "").Replace(":", "").ToCharArray()))
                                tName = this.TempDataLines[inName].Replace("Full Name", "").Replace(":", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("Name", "").Trim();
                        }
                    }
                }
                catch
                {
                    //MessageBox.Show(ex1.Message);
                }
            }
            #endregion
            ///code end here


            ///modified 23-2-06
            ///replace Date of Birth to null
            ///modified 25-2-06
            ///replace "("
            ///modified 27-02-06
            ///add .Replace("Near","") 
            ///modified 3-3-6
            ///replace : to ""
            //StringBuilder tNameValue = new StringBuilder();
            //tNameValue.Append(tName);

            tName = tName.Trim().Replace("INFORMATION", "").Replace("CANDIDATES", "").Replace("CANDIDATE", "").Replace("R E S U M E", "").Replace(":", "").Replace("(", "").Replace("DATE OF BIRTH", "").Replace("E MAIL", "").Replace("CONTACT NO", "").Replace("ADDRESSES", "").Replace("HOME", "").Replace("NEAR", "").Replace("RESUME MANAGER   RESUME OF", "").Replace("RESUME OF TESTING", "").Replace("BRIEF  RESUME  OF", "").Replace("RESUME OF", "").Replace("TECHNICAL PROFILE OF", "").Replace("RÉSUMÉ OF", "").Replace("RESUMÉ OF", "").Replace("RÉSUME OF", "").Replace("TECHNICAL  OF", "").Replace("TECHNICAL  OF", "").Replace("BIODATA OF", "").Replace("PERSONAL PROFILE OF", "").Replace("PERSONAL PROFILE", "").Replace("PROFILE OF", "").Replace("CURRICULUM VITAE OF", "").Replace("PERSONAL PROFILE", "").Replace(Convert.ToChar(9644).ToString(), "");
            tName = tName.Trim().Replace("information", "").Replace("candidates", "").Replace("candidate", "").Replace("r e s u m e", "").Replace(":", "").Replace("(", "").Replace("date of birth", "").Replace("e mail", "").Replace("contact no", "").Replace("addresses", "").Replace("home", "").Replace("near", "").Replace("resume manager   resume of", "").Replace("resume of testing", "").Replace("brief  resume  of", "").Replace("resume of", "").Replace("technical profile of", "").Replace("Résumé Of", "").Replace("Resumé Of", "").Replace("Résume Of", "").Replace("résumé of", "").Replace("resumé of", "").Replace("résume of", "").Replace("Résumé of", "").Replace("Resumé of", "").Replace("Résume of", "").Replace("technical  of", "").Replace("technical  of", "").Replace("biodata of", "").Replace("personal profile of", "").Replace("personal profile", "").Replace("profile of", "").Replace("curriculum vitae of", "").Replace("personal profile", "");
            tName = tName.Trim().Replace("contact by", "").Replace("Candidates", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Replace(",", "").Trim();
            tName = tName.Trim().Replace("CONTACT BY", "").Replace("EMAILGENERAL", "").Replace("EMAIL", "").Replace("GENERAL", "").Replace("INFORMATION", "").Replace("MOBILE NO.", "").Replace("MOBILE NO", "").Replace("(MOBILE)", "").Replace("EMAILGENERAL", "").Replace("INFORMATION", "").Replace("MOBILE", "").Replace("MOBILE", "").Replace("MOB", "").Replace("MOB", "").Replace("EMERGENCY CONTACT NO.:", "").Replace("EMERGENCY CONTACT NO.:", "").Replace("EMERGENCY", "").Replace("CONTACT NO.:", "").Replace("CONTACT NO.", "").Replace("CONTACT NO", "").Replace("CONTACT NO", "").Replace("CONTACT", "").Replace("CONTACT", "").Replace("NUMBER", "").Replace("CONTACT", "").Replace("MOB", "").Replace("(MOBILE)", "").Replace("(MOBILE)", "").Replace("(R)", "").Replace("(R)", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("PHONE", "").Replace("PH:", "").Replace("PH:", "").Replace("TEL NO. RES", "").Replace("CELL NO", "").Replace("CELL NO", "").Replace("NAME", "").Replace("CONTACT:", "").Replace("DETAILS", "").Replace("NAME", "").Replace(",", "").Trim();
            tName = tName.Trim().Replace("Contact By", "").Replace("Candidate", "").Replace("Emailgeneral", "").Replace("Email", "").Replace("General", "").Replace("Information", "").Replace("Mobile No.", "").Replace("Mobile No", "").Replace("(Mobile)", "").Replace("Emailgeneral", "").Replace("Information", "").Replace("Mobile", "").Replace("Mobile", "").Replace("Mob", "").Replace("Mob", "").Replace("Emergency Contact No.:", "").Replace("Emergency Contact No.:", "").Replace("Emergency", "").Replace("Contact No.:", "").Replace("Contact No.", "").Replace("Contact No", "").Replace("Contact No", "").Replace("Contact", "").Replace("Contact", "").Replace("Number", "").Replace("Contact", "").Replace("Mob", "").Replace("(Mobile)", "").Replace("(Mobile)", "").Replace("(R)", "").Replace("(R)", "").Replace("Telephone", "").Replace("Phone", "").Replace("Phone", "").Replace("Ph:", "").Replace("Ph:", "").Replace("Tel No. Res", "").Replace("Cell No", "").Replace("Cell No", "").Replace("Name", "").Replace("Contact:", "").Replace("Details", "").Replace("Name", "").Replace("Miss ", "").Replace("miss ", "").Replace(",", "").Trim();

            #region "taking name from email"
            if (tName.Replace(".", "").Trim().Length < 3 && email.Trim().Length > 1)
            {
                string strEmail = email, str = "";
                string[] strArrEm = strEmail.Split('@');
                if (strArrEm.Length >= 2)
                {
                    str = strArrEm[0];
                    //if(isNumberExists2(str.Trim().ToCharArray()))
                    tName = str.Replace("_", " ");

                }

            }
            #endregion

            tName = tName.Trim().Replace("R E S U M E", "").Replace(":", "").Replace("(", "").Replace("Date of Birth", "").Replace("E mail", "").Replace("Contact no", "").Replace("Addresses", "").Replace("Home", "").Replace("Near", "").Replace("’s cv", "").Replace("    ", " ").Replace("  ", " ").Replace(Convert.ToChar(39).ToString(), Convert.ToChar(8217).ToString());
            tName = tName.Trim().Replace("R E S U M E", "").Replace("DATE OF BIRTH", "").Replace("E MAIL", "").Replace("CONTACT NO", "").Replace("ADDRESSES", "").Replace("HOME", "").Replace("NEAR", "").Replace("MISS. ", "").Replace("MISS. ", "").Replace("MRS. ", "").Replace("MRS.", "").Replace("MRS ", "").Replace("MR. ", "").Replace("MR. ", "").Replace("’S CV", "").Trim();
            tName = tName.Trim().Replace("R E S U M E", "").Replace("Date Of Birth", "").Replace("E Mail", "").Replace("Contact No", "").Replace("Addresses", "").Replace("Home", "").Replace("Near", "").Replace("Miss. ", "").Replace("Miss. ", "").Replace("Mrs. ", "").Replace("Mrs.", "").Replace("Mrs ", "").Replace("Mr. ", "").Replace("Mr. ", "").Replace("’S Cv", "").Trim();
            fname = tName.Trim().Replace("r e s u m e", "").Replace("date of birth", "").Replace("e mail", "").Replace("contact no", "").Replace("addresses", "").Replace("home", "").Replace("near", "").Replace("miss. ", "").Replace("miss. ", "").Replace("mrs. ", "").Replace("mrs.", "").Replace("mrs ", "").Replace("mr. ", "").Replace("mr. ", "").Replace("’s cv", "").Replace(".", " ").Replace("  ", " ").Trim();
            fname = fname.Replace("  ", " ").Trim();
        }

        /// <summary>
        /// Matching the string
        /// </summary>
        /// <param name="str"></param>
        /// <returns>true -found else false</returns>
        /// 

        private void opGetNameReplace(ref StringBuilder strbPastEmp)
        {
            try
            {
                Regex rgxSpace = new Regex(@"\s{7,}?|\t|\t{2,}?|\t\s*\t");
                Regex rgxLTD = new Regex(@"\b(([A-Za-z\.\&-]){1,25}\s){1,3}(at)\s(([A-Za-z\.\&-]){1,25}\s){0,3}|(\w{2,25}\s){1,3}at\s(\w{2,25}\s){1,3}(Company|company|Technology|Technologies|Fasteners|Technology)|(Corporation|Limited|LIMITED|LLC|llc|L\.L\.C|Firm|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Bank|Financial Services|GLOBAL SERVICES|agency|Corp|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.?[\s\(]|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc|ASSOCIATES|Software Solutions|global solution|company|Group|Bank|Services| Computers|TECHNOLOGIES|Technology|TECH|COMPUTERS|INCORPORATED|Corporate|Healthcare|Centre|CLINIC|CONSTRUCTION CO)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                if (rgxSpace.IsMatch(strbPastEmp.ToString()) == true)
                {
                    strbPastEmp.Replace(rgxSpace.Match(strbPastEmp.ToString()).ToString(), Convert.ToChar(9).ToString());

                    int tTbPos = rgxSpace.Match(strbPastEmp.ToString()).Index;
                    strbPastEmp.Remove(tTbPos, strbPastEmp.Length - tTbPos);

                    //if (rgxSpace.IsMatch(strbPastEmp.ToString().Trim()) == true)
                    //    //if (rgxLTD.IsMatch(strbPastEmp.ToString()))
                    //        if ((rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index || (rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index + 1)
                    //            strbPastEmp.Remove(tTbPos, strbPastEmp.Length - tTbPos);
                }

            }
            catch { }
        }
        private void GetName()
        {
            fname = "";
            Boolean tNameSearchFrmLast = false;
            string tNameFrmFirst = "";
            string[] strArrayName = new string[DataLines.Length];
            for (int cnt = 0; cnt < DataLines.Length; cnt++)
                strArrayName[cnt] = DataLines[cnt];

            Regex rgxWordsExclude = new Regex("[a-z]{2,}", RegexOptions.IgnoreCase);
            string[] strArraySplit = null;
            char[] _strSplitSpace = { '?', Convert.ToChar(9) };
            Regex rgxCon = new Regex(@"\s{4,}:");
            ArrayList strArrayList = new ArrayList();
            for (int cnt = 0; cnt < DataLines.Length; cnt++)
            {
                if (rgxCon.IsMatch(DataLines[cnt]))
                    strArrayName[cnt] = strArrayName[cnt].Replace(rgxCon.Match(DataLines[cnt]).ToString(), ":");
                strArrayName[cnt] = strArrayName[cnt].Replace("              ", "?").Replace("             ", "?").Replace(Convert.ToChar(8221).ToString(), "?");

                //Array Splitting Based on Hosrizontal Tab Order ... 01 / Feb / 2013 
                strArraySplit = strArrayName[cnt].Split(_strSplitSpace);
                for (int cnt1 = 0; cnt1 < strArraySplit.Length; cnt1++)
                    if (strArraySplit[cnt1].Replace("?", "").Replace("_", "").Replace(":", "").Replace("-", "").Trim().Length > 1)
                        strArrayList.Add(strArraySplit[cnt1].Trim().ToString());
            }
            int _count = 0;
            TempDataLines = new string[strArrayList.Count];
            foreach (string str in strArrayList)
            {
                string tData = str;
                if (tData.ToLower().Trim() == "age")
                    tData = "";
                if (tData.ToLower().Trim().IndexOf(" age ") > 0 || tData.ToLower().Trim().IndexOf("(age: ") > 0)
                {
                    string[] sp = { " age ", " Age ", ",", " AGE ", "(age:", "(Age:", "(AGE:" };
                    string[] sp1 = str.Split(sp, StringSplitOptions.RemoveEmptyEntries);
                    if (sp1.Length > 0)
                        tData = sp1[0];
                }
                if (tData.ToLower().Trim().IndexOf("(mrs)") >= 0 || tData.ToLower().Trim().IndexOf("(mr.)") >= 0)
                    tData = tData.Replace("(Mrs)", "").Replace("(mrs)", "").Replace("(Mr.)", "").Replace("(mr.)", "").Replace("(MR.)", "");
                if (tData.ToLower().Trim().StartsWith("|") || tData.ToLower().Trim().StartsWith("[") || tData.ToLower().Trim().StartsWith("*"))
                    tData = tData.Remove(0, 1);
                if (tData.ToLower().Trim().EndsWith("]") || tData.ToLower().Trim().EndsWith("|") || tData.ToLower().Trim().EndsWith("*"))
                    tData = tData.Substring(0, tData.Length - 1);
                TempDataLines[_count] = tData.Replace("ï»¿", "").Trim();
                _count++;
            }
            for (int nCntTemp = 0; nCntTemp < TempDataLines.Length; nCntTemp++)
            {
                for (int iNameCnt = 0; iNameCnt < appSet.Length; iNameCnt++)
                {
                    if (this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith(appSet[iNameCnt].ToLower().Trim()))
                        this.TempDataLines[nCntTemp] = "";//this.TempDataLines[nCntTemp].ToLower().Trim().Replace((strArrNameBk[iNameCnt].ToLower().Trim()),"");

                }
                if (this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith("|") || this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith("[") || this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith("*"))
                    this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Remove(0, 1);
                if (this.TempDataLines[nCntTemp].ToLower().Trim().EndsWith("]") || this.TempDataLines[nCntTemp].ToLower().Trim().EndsWith("|") || this.TempDataLines[nCntTemp].ToLower().Trim().EndsWith("*"))
                    this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Substring(0, this.TempDataLines[nCntTemp].Length - 1);
            }
            #region "Removeing SourceExclude List"
            try
            {
                string[] aSourceExcludeList;
                System.Xml.XmlNodeList _nodeSourceExcludeList = FCommon.objfXMLPlacementAgencies.GetElementsByTagName("SourceExcludeList");
                for (int nCntTemp = 0; nCntTemp < TempDataLines.Length && nCntTemp <= 25; nCntTemp++)
                    for (int iSourceCnt = 0; iSourceCnt <= _nodeSourceExcludeList.Count - 1; iSourceCnt++)
                        if (_nodeSourceExcludeList.Item(iSourceCnt).InnerText.Trim() != "")
                        {
                            aSourceExcludeList = null;
                            aSourceExcludeList = _nodeSourceExcludeList.Item(iSourceCnt).InnerText.Trim().Split(';', ',');
                            for (int iSourceInnCnt = 0; iSourceInnCnt <= aSourceExcludeList.GetUpperBound(0); iSourceInnCnt++)
                                if (aSourceExcludeList[iSourceInnCnt].ToLower().Trim() != "" && this.TempDataLines[nCntTemp].ToLower().Trim().StartsWith(aSourceExcludeList[iSourceInnCnt].ToLower().Trim()))
                                    this.TempDataLines[nCntTemp] = "";

                        }
            }
            catch { }

            #endregion

            #region "location replacing"
            //try
            //{
            //    if (LocationsIDs != "0" && LocationsIDs != "")
            //    {
            //        //string tLocationTitle = HireCraft.FCommon.opGetTitlefromXml(ref FCommon.objfXMLResumeLocations, LocationsIDs, "LocationTitle");
            //        //string tLocationAlias = HireCraft.FCommon.opGetTitlefromXml(ref FCommon.objfXMLResumeLocations, LocationsIDs, "LocationAlias");
            //        //StringBuilder LocText = new StringBuilder();
            //        //if (tLocationAlias.Trim() != "")
            //        //    LocText.Append(tLocationAlias + "," + tLocationTitle);
            //        //else
            //        //    LocText.Append(tLocationTitle);
            //        //if (StateID != "" && StateID != "0")
            //        //    LocText.Append("," + HireCraft.FCommon.opGetTitlefromXml(ref  FCommon.objfXMLStateList, StateID, "StateTitle"));
            //        //if (CountryID != "" && CountryID != "0")
            //        //    LocText.Append("," + HireCraft.FCommon.opGetTitlefromXml(ref  FCommon.objfXMLCountryList, CountryID, "CountryTitle"));
            //        //LocText.Replace(@"\", @"\\");
            //        //LocText.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
            //        //LocText.Replace("||", "|");
            //        //Regex exLocText = new Regex(@"[\s,\(\:](" + LocText.ToString() + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
            //        //Regex exLocText1 = new Regex(@"[\s,\(\:](" + LocText.ToString() + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);
            //        //for (int nCntTemp = 0; nCntTemp < TempDataLines.Length && nCntTemp <= 25; nCntTemp++)
            //        //{
            //        //    try
            //        //    {
            //        //        MatchCollection mtch = exLocText.Matches(" " + this.TempDataLines[nCntTemp].Trim());
            //        //        if (mtch.Count == 0)
            //        //            mtch = exLocText1.Matches(" " + this.TempDataLines[nCntTemp].Trim());
            //        //        if (mtch.Count > 0 && this.TempDataLines[nCntTemp].Trim().ToLower().IndexOf("university") < 0)
            //        //            foreach (Match m in mtch)
            //        //                this.TempDataLines[nCntTemp] = this.TempDataLines[nCntTemp].Replace(m.Value.Trim().ToString(), "");
            //        //    }
            //        //    catch { }
            //        //}

            //    }
            //}
            //catch { }
            #endregion

            int nCntTempRem = 0;
            if (this.TempDataLines[nCntTempRem].ToLower().Trim().StartsWith("remarks :") || this.TempDataLines[nCntTempRem].ToLower().Trim().StartsWith("i will look on"))
                this.TempDataLines[nCntTempRem] = "";

            int iJK = 0;
            for (int iNN = 0; iNN < TempDataLines.Length - 1; iNN++)
            {
                if (TempDataLines[iNN].Trim() != "")
                {
                    TempDataLines[iJK] = TempDataLines[iNN];
                    iJK++;
                }
            }
            string tName = "";
            string[] add;

            //LABEL STARTS FROM HERE ******************************
            //LABEL---------01   Done

            //LABEL---------01   Done
            #region "Check by Candidate Name /Name"
            try
            {
                Match mtchCandidateName;
                StringBuilder _strbName = null;
                Regex rgxLastName = new Regex(@"^.{0,2}\s{0,4}\b(Last\s{0,3}Name|Sir\s{0,3}Name|Family\s{0,3}Name|Middle\s{0,3}Name)\b", RegexOptions.IgnoreCase);
                Regex rgxCvOf = new Regex(@"^((Curriculum|Curricullum|Curruculum|Currucullum|Curicullum|Curucullum|Curiculum|Curuculum|DOSSIER)\s+(Vitie|Vitae) Of|(Profile|Resume|RÉSUMÉ|RESUMÉ|DOSSIER) Of|CV Of|Resume for|C\.V\. Of|Resume\s*[:\-\–][:\-\–]?)(\b|\s+)[“]?[a-z\.\s]{3,30}\b", RegexOptions.IgnoreCase);
                Regex rgxResumeOf = new Regex(@"^((Curriculum|Curricullum|Curruculum|Currucullum|Curicullum|Curucullum|Curiculum|Curuculum|DOSSIER)\s+(Vitie|Vitae) Of|(Profile|Resume|RÉSUMÉ|RESUMÉ|DOSSIER) Of|CV Of|Resume for|C\.V\. Of|Resume\s*[:\-\–][:\-\–]?)(\b|\s+)[“]?", RegexOptions.IgnoreCase | RegexOptions.RightToLeft);
                Regex rgxCandidateName = new Regex(@"[0-9\.\)\s]{0,3}\s*((Name|Full Name)\s(of the applicant|of applicant|of the candidate|of candidate)|My Full Name|(Candidate|Applicant|Consultant|Employee)\s?[']?\s?(Name|Full Name)|First Name)[']?[s]?[\s\t]*([,\-]|\s{5}|:)", RegexOptions.IgnoreCase);
                for (int cnt = 0; cnt < TempDataLines.Length && tName.Trim().Length < 2; cnt++)
                {
                    TempDataLines[cnt] = TempDataLines[cnt].Replace("*", " ");
                    if (rgxCvOf.IsMatch(TempDataLines[cnt].Trim().ToString()) && cnt < 10 && TempDataLines[cnt].Trim().Length < 70)
                    {
                        _strbName = new StringBuilder();
                        _strbName.Append(rgxCvOf.Match(TempDataLines[cnt].Trim().ToString()).ToString());
                        if (rgxResumeOf.IsMatch(_strbName.ToString()))
                            _strbName.Remove(0, rgxResumeOf.Match(_strbName.ToString()).Index + rgxResumeOf.Match(_strbName.ToString()).Length);
                        if (_strbName.Length > 2)
                            tName = _strbName.Replace(",", " ").ToString().Trim();
                        break;
                    }
                    if (TempDataLines[cnt].Replace(" ", "").Trim().Length > 50) continue;
                    mtchCandidateName = rgxCandidateName.Match(TempDataLines[cnt].Trim().ToString() + "     ");
                    if (mtchCandidateName.Index != 0 || mtchCandidateName.ToString().Trim().Length < 5) continue;
                    _strbName = new StringBuilder();
                    if (mtchCandidateName.ToString().ToLower().IndexOf("first name") >= 0)
                    {
                        for (int cnt1 = cnt - 2; cnt1 < cnt + 3 && cnt + 3 < TempDataLines.Length; cnt1++)
                        {
                            if (cnt1 < 0) continue;
                            if (rgxLastName.IsMatch(TempDataLines[cnt1].Trim()) == false) continue;
                            if (TempDataLines[cnt].Replace(mtchCandidateName.ToString().Trim(), "").Length > 1)
                                _strbName.Append(TempDataLines[cnt].Replace(mtchCandidateName.ToString().Trim(), "").Trim());
                            else
                                if (TempDataLines[cnt + 1].Trim().Length < 75)
                                    _strbName.Append(TempDataLines[cnt + 1].Trim().ToString());
                            if (TempDataLines[cnt1].Trim().Replace(rgxLastName.Match(TempDataLines[cnt1].Trim()).ToString(), " ").Trim().Length > 1)
                                _strbName.Append(" " + TempDataLines[cnt1].Trim().Replace(rgxLastName.Match(TempDataLines[cnt1].Trim()).ToString(), " ").Trim());
                            else
                                if (TempDataLines[cnt1 + 1].Trim().Length < 75)
                                    _strbName.Append(" " + TempDataLines[cnt1 + 1].Trim().ToString());

                        }
                    }
                    else
                    {
                        if (TempDataLines[cnt].Replace(mtchCandidateName.ToString().Trim(), "").Trim().Length > 1)
                            _strbName.Append(TempDataLines[cnt].Replace(mtchCandidateName.ToString().Trim(), "").Trim());
                        if (_strbName.ToString().Trim().Length < 2 && cnt + 1 < TempDataLines.Length && TempDataLines[cnt + 1].Trim().Length < 75)
                            _strbName.Append(TempDataLines[cnt + 1].Trim().ToString());

                    }
                    ReplaceSpecialCharacters(ref _strbName);
                    ReplaceFromName(ref _strbName, _strNameRemove);
                    if (_strbName.ToString().Trim().Length > 1)
                        tName = _strbName.ToString().Trim().Replace(":", "").Replace(",", "");
                }
            }
            catch { }
            #endregion

            //LABEL ----------02
            #region  "Check Full Name in top 15 lines or before Career profile etc......"
            try
            {
                if (tName.Trim().Length < 2)
                {
                    Regex rgxNotMatch = new Regex("Organisation|Organization|Company|University|College|Education|Degree|Course|Employer|Institute", RegexOptions.IgnoreCase);
                    Regex rgxMyName = new Regex(@"^[1a]?\s?[\.\)]?\s*(CANDIDATE DOSSIER|FullName|Full Name|My Name|Name)\s*[:\-]|\s(My Name is|name as in NRIC|name in full|name (full name)|name as appears in passport|name as appearing in passport|name as in passport|name in passport|Name as on passport)\s", RegexOptions.IgnoreCase);
                    Regex regNotName = null;
                    regNotName = new Regex(@"[\|\s,\{\(\:](name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|address|male|female|base info|thread|safe|Class|Green Card|Message|AREAS OF INTEREST|Subject)[:\s]?[:\)\}\-\s]?", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                    for (int cnt = 0; cnt < 15 & cnt < TempDataLines.Length; cnt++)
                    {
                        if (rgxBreak.IsMatch(" " + TempDataLines[cnt].ToString() + " ")) break;
                        if (rgxBreaks.IsMatch(" " + TempDataLines[cnt].ToString() + " ") && TempDataLines[cnt].Replace(" ", "").Length < 20) break;
                        if (TempDataLines[cnt].Replace(" ", "").Length > 80) break;
                        if (regNotName.IsMatch(" " + this.TempDataLines[cnt].Trim().ToLower()))
                            continue;
                        if (rgxMyName.IsMatch(TempDataLines[cnt].Trim().ToString() + "     ") == false) continue;
                        if (cnt - 1 > 0 && rgxNotMatch.IsMatch(TempDataLines[cnt - 1])) continue;
                        string strName = TempDataLines[cnt].Remove(0, rgxMyName.Match(TempDataLines[cnt].Trim().ToString() + "     ").ToString().Trim().Length);
                        if (strName.StartsWith("-")) strName = strName.Remove(0, 1);
                        if (strName.Trim().Length > 1 && isNumberExists(strName.Trim().ToCharArray()))
                            tName = strName.Trim().Replace(":", "").Replace(",", "");
                        else
                            if (cnt + 1 < TempDataLines.Length && isNumberExists(TempDataLines[cnt + 1].Trim().ToCharArray()) && TempDataLines[cnt + 1].Trim().Length < 75 && TempDataLines[cnt + 1].Trim().Contains("曾荣江") == false)
                                tName = TempDataLines[cnt + 1].Trim().ToString().Replace(":", "").Replace(",", "");
                            else
                                continue;
                        if (rgxContinue.IsMatch(" " + tName + " ")) continue;
                        else
                            break;
                    }
                }
            }
            catch { }
            #endregion

            //LABEL---------04
            #region "Check for Covering letter"
            for (int z = 0; z < this.TempDataLines.Length && (tName.Trim().Length == 0); z++)
            {
                if (this.TempDataLines[z].Trim().ToLower().IndexOf("covering letter") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("dear sir") == 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("dear manager") == 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("respected sir") == 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("cover letter") == 0)
                {
                    for (int innZ = z; innZ < this.TempDataLines.Length && (tName.Trim().Length == 0); innZ++)
                    {
                        if (this.TempDataLines[innZ].Trim().ToLower().IndexOf("with regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("yours") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("sincerely,") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("sincerely") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("thanks and best regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("very truly yours") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("truly yours") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("with best regards") == 0 || this.TempDataLines[innZ].Trim().ToLower().IndexOf("respectfully your") == 0)
                        {
                            if (((innZ + 1) < this.TempDataLines.Length) && (this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0 && this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0))
                            {
                                add = this.TempDataLines[innZ + 1].Trim().Split('(', ')');
                                if (add.Length >= 1)
                                {
                                    if (isNumberExists(add[0].ToCharArray()))
                                    {
                                        tName = add[0];
                                    }
                                }
                            }
                            else
                            {
                                if (this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("you’re sincerely") == 0)
                                {
                                    if ((innZ + 2) < this.TempDataLines.Length && isNumberExists(this.TempDataLines[innZ + 2].Trim().ToCharArray()))
                                        tName = this.TempDataLines[innZ + 2].Replace(".", " ").Trim();
                                }
                                else
                                    if (isNumberExists(this.TempDataLines[innZ + 1].Trim().ToCharArray()))
                                        tName = this.TempDataLines[innZ + 1].Replace(".", " ").Trim();
                            }
                        }
                    }
                }
            }
            #endregion
            //LABEL ----------05
            //LABEL ----------05
            #region "Name from Last Line when Place , Date/Name will be mentioned."
            try
            {
                StringBuilder _strbName = null;
                Regex rgxEndName = new Regex(@"^(place name|location|place|Date)\s*(:|\-|\s{5}).{0,15}$", RegexOptions.IgnoreCase);
                Regex rgxLocnName = new Regex(@"^(place name|location|place)\s*(:|\-)?$", RegexOptions.IgnoreCase);
                for (int cnt = TempDataLines.Length - 1; cnt > TempDataLines.Length - 5 && cnt > 0 && tName.Trim().Length < 2; cnt--)
                {
                    if (TempDataLines[cnt].Trim().Length > 25) break;
                    if (rgxEndName.IsMatch(TempDataLines[cnt].Trim().ToString() + "     ") == false) continue;
                    if (rgxLocnName.IsMatch(TempDataLines[TempDataLines.Length - 2].Trim())) continue;
                    if (cnt < TempDataLines.Length - 1 && isNumberExists(TempDataLines[TempDataLines.Length - 1].Trim().ToCharArray()))
                        _strbName = new StringBuilder();
                    _strbName.Append(TempDataLines[TempDataLines.Length - 1].Trim().ToString());
                    ReplaceSpecialCharacters(ref _strbName);
                    ReplaceFromName(ref _strbName, _strNameRemove);
                    if (_strbName.ToString().Trim().Length > 1)
                        tName = _strbName.ToString().Trim().Replace(":", "").Replace(",", "");
                    if (tName.Length > 2 && rgxContinue.IsMatch(" " + tName.Trim() + " ") == true)
                    {
                        tName = "";
                        continue;
                    }
                }
            }
            catch { }
            #endregion
            //LABEL---------06
            #region "checking for text resume"
            if (tName.Trim().Length == 0)
            {
                try
                {
                    for (int z = 0; z < this.TempDataLines.Length && tName.Trim().Length == 0; z++)
                    {
                        if (this.TempDataLines[z].ToLower().Trim().IndexOf("text resume") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("candidate text resume") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("my text resume") == 0)
                        {
                            for (int y1 = z; (y1 < z + 3) && tName.Trim().Length < 2; y1++)
                            {
                                if (this.TempDataLines[y1].ToLower().IndexOf("reffered") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("referred") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("referr") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("reffer") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("text resume") >= 0 || this.TempDataLines[y1].ToLower().IndexOf("resume") >= 0) continue;
                                add = this.TempDataLines[y1].Trim().Split('(');
                                if (isNumberExists1(add[0].Trim().ToCharArray()) && !(stringExist(add[0])))
                                    tName = add[0].Trim();
                            }
                        }
                    }
                }
                catch
                {

                }
            }
            #endregion


            #region "Checking on personal details..."

            if (tName.Trim().Length == 0)
            {
                try
                {
                    int cnt = 0;
                    int i = TempDataLines.Length;
                    string tPersonal = "PERSONAL DETAILS|personal details|profile:|personel details|p e r  s o n a l   d e t a i l s|personal detail|personel :|personal :|personel detail|personal details’|personal profile|personel profile|personal information|personel information|personal info|personel info|personel Particulars|personal Particulars|Personel Details: -|Personal Details: -|personal data:|personal data|personel data:|personel data|personal history|personal  history|My Performa : -|candidate assessment|Full Name|my name is|PERSONAL BACKGROUND:";
                    string ttPersonalBk = @"date and place of birth:|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|birth date|born|date of birthage|b\\'date|b’date|date  of  birth|date of birth|dob|date & place of birth|d\.o\.b|date of birth|date   of   birth|current company|current location|work |position held|view their|TECHNICAL EXPERTISE|Reference|BORN:|Health|References|Nickname|Marital Status";
                    Regex regNotName = null;
                    regNotName = new Regex(@"[\|\s,\{\(\:](name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|male|female|base info|reference|references|References|Nickname|Marital Status|Relationship|Green Card|Message|AREAS OF INTEREST|Board/University)[:\s]?[:\)\}\-\s]?", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                    Boolean bPersonal = false;
                    int iPersonal = 0;
                    Regex rPersonal = null;
                    Regex rPersonal1 = null;
                    Regex rNameBreak = null;
                    Regex rNameBreak1 = null;
                    try
                    {
                        rPersonal = new Regex(@"[\s,\(\:](" + tPersonal + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
                        rPersonal1 = new Regex(@"[\s,\(\:](" + tPersonal + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);
                        rNameBreak = new Regex(@"[\s,\(\:](" + ttPersonalBk + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
                        rNameBreak1 = new Regex(@"[\s,\(\:](" + ttPersonalBk + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);
                        for (iPersonal = 0; iPersonal < this.TempDataLines.Length; iPersonal++)
                        {
                            if (rPersonal.IsMatch(" " + this.TempDataLines[iPersonal].ToLower().Trim()))
                            {
                                bPersonal = true;
                                break;
                            }
                            if (rPersonal1.IsMatch(" " + this.TempDataLines[iPersonal].ToLower().Trim()))
                            {
                                bPersonal = true;
                                break;
                            }
                        }
                        for (int iName = iPersonal; iName < this.TempDataLines.Length && bPersonal == true && tName.Trim().Length == 0; iName++)
                        {
                            if (this.TempDataLines[iName].ToLower().Trim().IndexOf("name of examination") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of organization") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("father's name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of wife") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of children") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("fathers name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mothers name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mother's name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mother’s name") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("father") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("mother") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of the company") >= 0 | this.TempDataLines[iName].ToLower().Trim().IndexOf("name of course") >= 0 | this.TempDataLines[iName].ToLower().Trim().IndexOf("name of inst") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name of degree") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("surname") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("sex") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("gender") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("nationality") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("language") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("permanent residency") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("i' m from") >= 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("marital status") >= 0) continue; //Marital Status
                            if (rNameBreak.IsMatch(" " + this.TempDataLines[iName].Trim()))
                                break;
                            if (rNameBreak1.IsMatch(" " + this.TempDataLines[iName].Trim()))
                                break;

                            if ((this.TempDataLines[iName - 1].ToLower().Trim() == "names" || this.TempDataLines[iName].ToLower().Trim().IndexOf("name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("a. name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name:") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("name:-") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("1.  full name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("1. name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("full name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("candidate name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("full name") == 0 || this.TempDataLines[iName].ToLower().Trim().IndexOf("my name is") == 0) && tName.Trim().Length <= 2)
                            {
                                StringBuilder tNameValue = new StringBuilder();
                                if (this.TempDataLines[iName].Replace("Name and Address:", "").Trim() == "")

                                    tNameValue.Append(this.TempDataLines[iName + 1].Trim());
                                else
                                    tNameValue.Append(this.TempDataLines[iName].Trim());

                                //opReplaceTextFromNameText(ref tNameValue);
                                if (rNameBreak.IsMatch(tNameValue.ToString()) == true) break;
                                if (regNotName.IsMatch(" " + this.TempDataLines[iName].Trim()))
                                    continue;

                                tNameValue = tNameValue.Replace("A. Name", "").Replace("a. name", "").Replace("a. Name", "").Replace("name as in NRIC", "").Replace("Name as in NRIC", "").Replace("name as in nric", "").Replace("as in NRIC", "").Replace("as in nric", "").Replace("my name is", "").Replace("candidate name", "").Replace("1. name", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("name:", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("Surname", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("=", "").Replace("contact", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace("tel", "").Replace("manager", "").Replace("from", "").Replace("(mr.)", "").Replace(": -", "").Replace("(", "").Replace(")", "");//"Name (Mr.)".Replace("name", "")
                                tNameValue = tNameValue.Replace("My Name is", "").Replace("Candidate Name", "").Replace("1. Name", "").Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NAME:", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace("TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace("(MR.)", "");//"Name (Mr.)"
                                tNameValue = tNameValue.Replace("MY NAME IS", "").Replace("CANDIDATE NAME", "").Replace("1. NAME", "").Replace("1.  Name In Full", "").Replace("1.  Name in Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Name:", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "");
                                tNameValue = tNameValue.Replace("Name as appearing in Passport", "").Replace("Name as appearing in passport", "").Replace("name as appearing in passport", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                                tNameValue = tNameValue.Replace("name as in passport", "").Replace("Name as in Passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "").Replace("as in passport", "").Replace("as in Passport", "").Replace("As In Passport", "").Replace("as in passport", "").Replace("AS IN PASSPORT", "").Replace("AS APPEARING IN PASSPORT", "").Replace("as appearing in passport", "").Replace("as appearing in Passport", "").Replace("Relationship", "");
                                tNameValue = tNameValue.Replace("name as in the passport", "").Replace("Name as in the Passport", "").Replace("Name As In The Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN THE PASSPORT", "").Replace("as in the passport", "").Replace("as in the Passport", "").Replace("As In The Passport", "").Replace("as in the passport", "").Replace("passport", "");
                                tNameValue = tNameValue.Replace("name as on passport", "").Replace("Name as on Passport", "").Replace("Name As On Passport", "").Replace("Name as on passport", "").Replace("NAME AS ON PASSPORT", "").Replace("as on passport", "").Replace("as on Passport", "").Replace("As On Passport", "").Replace("as on passport", "").Replace("AS ON PASSPORT", "").Replace("AS APPEARING ON PASSPORT", "").Replace("sex", "").Replace("gender", "");
                                tNameValue = tNameValue.Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace("(Mr.)", "").Replace(", ", " ");
                                try
                                {
                                    if (tNameValue.Replace(":", "").ToString().Trim().Length == 0)
                                        tNameValue.Append(this.TempDataLines[iName + 1].Replace(":", "").Trim());
                                    if (tNameValue.Replace(":", "").ToString().Trim().Length == 0)
                                        tNameValue.Append(this.TempDataLines[iName + 2].Trim());
                                }
                                catch { }
                                if (tNameValue.ToString().ToLower().Trim().IndexOf("fathers name") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("father's") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("father’s") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("mother's") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("mother’s") >= 0) continue;
                                //opReplaceTextFromNameText(ref tNameValue);
                                tNameValue = tNameValue.Replace("as in NRIC", "").Replace("as in nric", "").Replace("name as in NRIC", "").Replace("Name as in NRIC", "").Replace("name as in nric", "").Replace("1.  name in full", "").Replace("name in full", "").Replace("name-", "").Replace("name:-", "").Replace("nurrent ctc", "").Replace("expected ctc", "").Replace("expected ctc", "").Replace("notice period", "").Replace("date of birth", "").Replace("name (full name)", "").Replace("name as appears in passport", "").Replace("name as appearing in passport", "").Replace("name as in passport", "").Replace("name as in passport", "").Replace("name in passport", "").Replace("name in passport", "").Replace("name", "").Replace("name", "").Replace("full", "").Replace("call", "").Replace("name", "").Replace("=", "").Replace("contact", "").Replace("email", "").Replace("date of birth", "").Replace("address", "").Replace("telephone", "").Replace("phone", "").Replace("designation", "").Replace("company", "").Replace("organization", "").Replace("organisation", "").Replace("organizations", "").Replace("organisations", "").Replace(" tel", "").Replace("tel ", "").Replace("manager", "").Replace("from", "").Replace(":-", ":").Replace(": -", ":").Replace("(", "").Replace(")", ""); ;
                                tNameValue = tNameValue.Replace("1.  NAME IN FULL", "").Replace("NAME IN FULL", "").Replace("NAME-", "").Replace("NAME:-", "").Replace("NURRENT CTC", "").Replace("EXPECTED CTC", "").Replace("EXPECTED CTC", "").Replace("NOTICE PERIOD", "").Replace("DATE OF BIRTH", "").Replace("NAME (FULL NAME)", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME AS IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME IN PASSPORT", "").Replace("NAME", "").Replace("NAME", "").Replace("FULL", "").Replace("CALL", "").Replace("NAME", "").Replace("=", "").Replace("CONTACT", "").Replace("EMAIL", "").Replace("DATE OF BIRTH", "").Replace("ADDRESS", "").Replace("TELEPHONE", "").Replace("PHONE", "").Replace("DESIGNATION", "").Replace("COMPANY", "").Replace("ORGANIZATION", "").Replace("ORGANISATION", "").Replace("ORGANIZATIONS", "").Replace("ORGANISATIONS", "").Replace(" TEL", "").Replace("MANAGER", "").Replace("FROM", "").Replace(":-", ":");
                                tNameValue = tNameValue.Replace("1.  Name In Full", "").Replace("1.  Name in Full", "").Replace("Name In Full", "").Replace("Name-", "").Replace("Name:-", "").Replace("Nurrent Ctc", "").Replace("Expected Ctc", "").Replace("Expected Ctc", "").Replace("Notice Period", "").Replace("Date Of Birth", "").Replace("Name (Full Name)", "").Replace("Name As Appears In Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name As In Passport", "").Replace("Name As In Passport", "").Replace("Name In Passport", "").Replace("Name In Passport", "").Replace("Name", "").Replace("Name", "").Replace("Full", "").Replace("Call", "").Replace("Name", "").Replace("=", "").Replace("Contact", "").Replace("Email", "").Replace("Date Of Birth", "").Replace("Address", "").Replace("Telephone", "").Replace("Phone", "").Replace("Designation", "").Replace("Company", "").Replace("Organization", "").Replace("Organisation", "").Replace("Organizations", "").Replace("Organisations", "").Replace("Tel", "").Replace("Manager", "").Replace("From", "").Replace(":-", ":").Replace("PROFFESIONAL", "").Replace("MEMBERSHIPS", "");
                                tNameValue = tNameValue.Replace("PASSPORT", "").Replace("Number", "").Replace("NUMBER", "").Replace("number", "").Replace("Passport", "").Replace("passport", "").Replace(" As in ", "").Replace("as on", "").Replace("Relationship", "");
                                add = tNameValue.Replace(":-", ":").Replace("–", "").ToString().Split(':');
                                for (int z = 0; z < add.Length; z++)
                                {
                                    if (add[z].IndexOf("Hobbies") >= 0) continue;
                                    if (add[z].Trim().Length <= 1) continue;
                                    if (isNumberExists(add[z].Trim().ToCharArray()))
                                        tName = add[z].Trim();
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        //rNameBreak = null;
                        rNameBreak1 = null;
                    }

                    if (tName.Trim().Length <= 2)
                    {
                        int Flag = 0, iFlag = 0;
                        int count = cnt;
                        for (cnt = count; cnt < TempDataLines.Length; cnt++)
                        {
                            this.TempDataLines[cnt] = this.TempDataLines[cnt].Replace(Convert.ToChar(45), Convert.ToChar(32)).Trim();
                            ///modified on 1-3-06
                            ///this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal detail") == 0 
                            if ((cnt > 2 && this.TempDataLines[cnt - 1].ToLower().Trim().IndexOf("references") >= 0) || this.TempDataLines[cnt].ToLower().Trim().IndexOf("reference") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("references") == 0) { Flag = -1; break; }
                            if ((this.TempDataLines[cnt].ToLower().Trim().IndexOf("name") == 0 && (this.TempDataLines[cnt].ToLower().Trim().IndexOf("named") < 0)) | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name:") == 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name:-") == 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal details") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal detail") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal details’") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("personal profile") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("personal information") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("personal info") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("personal Particulars") == 0)
                            {
                                Flag = 2;//setting flag as 2  means we found a personal details ,personal profile etc
                                break;
                            }
                        }
                        count = cnt;
                        for (cnt = count; cnt < TempDataLines.Length && Flag == 2; cnt++)
                        {
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("father's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name difference") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of wife") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of children") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("fathers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mothers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the company") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of course") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of inst") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of employer") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of degree") >= 0) continue;
                            ///modified on 8
                            ///|this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of degree/ qualification") >= 0Institute/ University
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("education") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("qualification") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("university") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("institute") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("organisation") >= 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("organisations") >= 0)
                            {
                                cnt++;
                                break;
                            }
                            ///modified 3-3-6
                            ///this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("references") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("reference") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational qualification") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("passport details") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0)
                            {
                                Flag = 1;
                                cnt++;
                                break;
                            }
                            ///modified on 21-02-06
                            /// check "Call Name" is exists....
                            /// check for "name as in passport"
                            /// check  "name (full name)" to null
                            /// modified 2-3-6
                            /// check for name in passport
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of organization") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the organization") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the firm") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of firm") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of school") == 0 | this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the school") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of institute") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the institute") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of degree") >= 0)
                                continue;
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as appearing in Passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name (full name)") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("1. name") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("full name") >= 0 || this.TempDataLines[cnt].ToLower().IndexOf("call name") == 0)
                            {

                                int tempNameCheck = cnt - 5;
                                if (tempNameCheck < 0)
                                    tempNameCheck = 0;
                                bool bNameCheck = true;
                                count = tempNameCheck;
                                for (tempNameCheck = count; tempNameCheck < TempDataLines.Length & tempNameCheck < cnt + 1; tempNameCheck++)
                                    if (this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("detailed career profile") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("version no") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("CERTIFICATIONS & TRAININGS") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("server") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("college/school") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("DIALOG PROGRAMMING") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("work") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("designation") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("experience") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("institution") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("project") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("organization") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("company") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("application description") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("current product") >= 0)
                                    {
                                        bNameCheck = false;
                                        break;
                                    }
                                if (bNameCheck)
                                    iFlag = 1;
                                else
                                    iFlag = 0;
                                break;
                            }
                        }
                        //second attempt to find Personal detail name
                        count = cnt;
                        for (cnt = count; cnt < TempDataLines.Length && Flag == 2; cnt++)
                        {
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("father's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name difference") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of wife") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of children") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("fathers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mothers name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother's name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother’s name") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("father") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("mother") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the company") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of degree") >= 0) continue;
                            ///modified on 8
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("education") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("university") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("institute") >= 0) break;
                            ///modified 3-3-6
                            ///this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0 References
                            if ((cnt > 2 && this.TempDataLines[cnt - 1].ToLower().Trim().IndexOf("references") >= 0) || this.TempDataLines[cnt].ToLower().Trim().IndexOf("references") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("educational qualification") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("passport details") >= 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("projects") >= 0)
                            {
                                Flag = 1; break;
                            }
                            ///modified on 21-02-06
                            /// check "Call Name" is exists....
                            /// check for "name as in passport"
                            /// check  "name (full name)" to null
                            /// modified 2-3-6
                            /// check for name in passport
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of the organization") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of exam") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of school") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of institute") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of consultant") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name of degree") >= 0)
                                continue;
                            if (this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as appearing in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name as in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name in passport") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name (full name)") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("1. name") == 0 || this.TempDataLines[cnt].ToLower().Trim().IndexOf("name") == 0 || this.TempDataLines[cnt].ToLower().IndexOf("full name") >= 0 || this.TempDataLines[cnt].ToLower().IndexOf("call name") == 0)
                            {
                                int tempNameCheck = cnt - 5;
                                if (tempNameCheck < 0)
                                    tempNameCheck = 0;
                                bool bNameCheck = true;
                                count = tempNameCheck;
                                for (tempNameCheck = count; tempNameCheck < TempDataLines.Length & tempNameCheck < cnt + 1; tempNameCheck++)
                                    if (this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("detailed career profile") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("version no") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("CERTIFICATIONS & TRAININGS") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("server") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("college/school") >= 0 || this.TempDataLines[tempNameCheck].ToUpper().Trim().IndexOf("DIALOG PROGRAMMING") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("work") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("designation") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("experience") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("institution") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("project") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("organization") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("company") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("application description") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("current product") >= 0 || this.TempDataLines[tempNameCheck].ToLower().Trim().IndexOf("address of employer") >= 0)
                                    {
                                        bNameCheck = false;
                                        break;
                                    }
                                if (bNameCheck)
                                    iFlag = 1;
                                else
                                    iFlag = 0;
                                break;
                            }
                        }


                        if (cnt < TempDataLines.Length && Flag == 0)
                        {
                            add = this.TempDataLines[cnt].ToLower().Replace("name in full", "").Replace("1. name", "").Replace("name-", "").Replace("name", "").Replace("full", "").Replace("(mr.)", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Split(':');
                            for (int cnt1 = 0; cnt1 < add.Length; cnt1++)
                            {
                                //if(add[cnt1].ToLower().Trim().IndexOf("name")>=0)continue;
                                if (add[cnt1].Trim().Length > 1)
                                {
                                    if (isNumberExists(add[cnt1].Trim().ToCharArray()))
                                        tName = add[cnt1];
                                }
                            }
                        }
                        if (iFlag == 1 && tName.Trim().Length == 0 && cnt < TempDataLines.Length)
                        {
                            for (int k = 0; k < 2 && (cnt + k) < TempDataLines.Length; k++)
                            {
                                StringBuilder tNameValue = new StringBuilder();

                                tNameValue.Append(this.TempDataLines[cnt + k].Trim());
                                if (tNameValue.Length > 2)
                                    opGetNameReplace(ref tNameValue);
                                //opReplaceTextFromNameText(ref tNameValue);
                                if (rNameBreak.IsMatch(tNameValue.ToString()) == true) break;
                                if (regNotName.IsMatch(" " + tNameValue.ToString()) == true) break;

                                tNameValue.Replace("name in full", "").Replace("Name in full", "").Replace("Name in Full", "").Replace("Name In Full", "").Replace("name as in nric", "").Replace("of candidate", "").Replace("of Candidate", "").Replace("OF CANDIDATE", "");
                                tNameValue.Replace("Name as in NRIC", "").Replace("contact by", "").Replace("Contact By", "").Replace("Contact by", "").Replace("CONTACT BY", "");
                                tNameValue.Replace("name as in NRIC", "").Replace("emailgeneral", "").Replace("Emailgeneral", "").Replace("EmailGeneral", "").Replace("EMAILGENERAL", "");
                                tNameValue.Replace("as in NRIC", "").Replace("as in nric", "").Replace("email id", "").Replace("Email ID", "").Replace("Email Id", "").Replace("EMAIL ID", "");
                                tNameValue.Replace("email", "").Replace("Email", "").Replace("EMAIL", "");
                                tNameValue.Replace("general", "").Replace("General", "").Replace("GENERAL", "").Replace("information", "").Replace("Information", "").Replace("INFORMATION", "").Replace("Position", "");
                                tNameValue.Replace("mobile no.", "").Replace("Mobile No.", "").Replace("Mobile no.", "").Replace("MOBILE NO.", "");
                                tNameValue.Replace("(mobile)", "").Replace("(Mobile)", "").Replace("(MOBILE)", "").Replace("mobile", "").Replace("Mobile", "").Replace("MOBILE", "");
                                tNameValue.Replace("mob", "").Replace("Mob", "").Replace("MOB", "").Replace("(r)", "").Replace("(R)", "");
                                tNameValue.Replace("emergency contact no.:", "").Replace("Emergency Contact No.:", "").Replace("Emergency contact no.:", "").Replace("EMERGENCY CONTACT NO.:", "");
                                tNameValue.Replace("emergency", "").Replace("Emergency", "").Replace("EMERGENCY", "");
                                tNameValue.Replace("contact no.:", "").Replace("Contact No.:", "").Replace("Contact no.:", "").Replace("CONTACT NO.:", "").Replace("contact no.", "").Replace("Contact No.", "").Replace("Contact no.", "").Replace("CONTACT NO.", "").Replace("contact no", "").Replace("Contact No", "").Replace("Contact no", "").Replace("CONTACT NO", "").Replace("contact", "").Replace("Contact", "").Replace("CONTACT", "");
                                tNameValue.Replace("number", "").Replace("Number", "").Replace("NUMBER", "");
                                tNameValue.Replace("organizations", "").Replace("Organizations", "").Replace("ORGANIZATIONS", "").Replace("organization", "").Replace("Organization", "").Replace("ORGANIZATION", "").Replace("organisations", "").Replace("Organidations", "").Replace("ORGANISATIONS", "").Replace("organisation", "").Replace("Organidation", "").Replace("ORGANISATION", "");
                                tNameValue.Replace("phone no.", "").Replace("Phone No.", "").Replace("Phone no.", "").Replace("PHONE NO.", "");
                                tNameValue.Replace("telephone", "").Replace("Telephone", "").Replace("TELEPHONE", "").Replace("phone", "").Replace("Phone", "").Replace("PHONE", "").Replace("ph:", "").Replace("Ph:", "").Replace("PH:", "");
                                tNameValue.Replace("tel no. res", "").Replace("Tel No. Res", "").Replace("Tel No. res", "").Replace("TEL NO. RES", "");
                                tNameValue.Replace("cell no", "").Replace("Cell No", "").Replace("Cell No", "").Replace("CELL NO", "").Replace("cell", "").Replace("Cell", "").Replace("CELL", "").Replace("English", "");
                                tNameValue.Replace("date of birth", "").Replace("Date Of Birth", "").Replace("Date of birth", "").Replace("DATE OF BIRTH", "");
                                tNameValue.Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                                tNameValue.Replace("name as in passport", "").Replace("Name as in passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "");
                                tNameValue.Replace("name (full name)", "").Replace("Name (Full Name)", "").Replace("Name (full name)", "").Replace("NAME (FULL NAME)", "").Replace("name in passport", "").Replace("Name In Passport", "").Replace("Name in passport", "").Replace("NAME IN PASSPORT", "").Replace("name in full", "").Replace("Name In Full", "").Replace("Name in Full", "").Replace("NAME IN FULL", "").Replace("name-", "").Replace("Name-", "").Replace("NAME-", "").Replace("name:-", "").Replace("Name:-", "").Replace("NAME:-", "").Replace("name", "").Replace("Name", "").Replace("NAME", "").Replace("contact:", "").Replace("Contact:", "").Replace("CONTACT:", "").Replace("details", "").Replace("Details", "").Replace("DETAILS", "");
                                tNameValue.Replace("ADDRESS", "").Replace("Address", "").Replace("address", "").Replace("CALL", "").Replace("Call", "").Replace("call", "").Replace("FULL", "").Replace("Full", "").Replace("full", "").Replace("MANAGER", "").Replace("Manager", "").Replace("manager", "").Replace("COMPNAY", "").Replace("Company", "").Replace("company", "").Replace("DESIGNATION", "").Replace("Designation", "").Replace("designation", "").Replace("NOTICE PERIOD", "").Replace("Notice Period", "").Replace("notice period", "").Replace("expected ctc", "").Replace("Expected Ctc", "").Replace("EXPECTED CTC", "").Replace("Expected CTC", "").Replace("nurrent ctc", "").Replace("Nurrent CTC", "").Replace("Nurrent Ctc", "").Replace("NURRENT CTC", "").Replace("City", "");
                                tNameValue.Replace("Name as appearing in Passport", "").Replace("Name as appearing in passport", "").Replace("name as appearing in passport", "").Replace("NAME AS APPEARING IN PASSPORT", "").Replace("name as appears in passport", "").Replace("Name as Appears in Passport", "").Replace("Name As Appears In Passport", "").Replace("Name as appears in passport", "").Replace("NAME AS APPEARS IN PASSPORT", "").Replace("name as appearing in passport", "").Replace("Name as Appearing in Passport", "").Replace("Name As Appearing In Passport", "").Replace("Name as appearing passport", "").Replace("NAME AS APPEARINGN PASSPORT", "");
                                tNameValue.Replace("name as in passport", "").Replace("Name as in Passport", "").Replace("Name As In Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN PASSPORT", "").Replace("as in passport", "").Replace("as in Passport", "").Replace("As In Passport", "").Replace("as in passport", "").Replace("AS IN PASSPORT", "").Replace("AS APPEARING IN PASSPORT", "").Replace("as appearing in passport", "").Replace("as appearing in Passport", "");
                                tNameValue.Replace("name as in the passport", "").Replace("Name as in the Passport", "").Replace("Name As In The Passport", "").Replace("Name as in passport", "").Replace("NAME AS IN THE PASSPORT", "").Replace("as in the passport", "").Replace("as in the Passport", "").Replace("As In The Passport", "").Replace("as in the passport", "");
                                tNameValue.Replace("name as on passport", "").Replace("Name as on Passport", "").Replace("Name As On Passport", "").Replace("Name as on passport", "").Replace("NAME AS ON PASSPORT", "").Replace("as on passport", "").Replace("as on Passport", "").Replace("As On Passport", "").Replace("as on passport", "").Replace("AS ON PASSPORT", "").Replace("AS APPEARING ON PASSPORT", "").Replace("passport", "").Replace("Passport", "").Replace("PASSPORT", "");
                                tNameValue.Replace("(MR.)", "").Replace("(Mr.)", "").Replace("(mr.)", "").Replace("=", "").Replace("FROM", "").Replace("From", "").Replace("from", "").Replace(" tel", "").Replace("tel ", "").Replace(" Tel", "").Replace(" TEL", "").Replace("Tel ", "").Replace("TEL ", "");
                                tNameValue.Replace("Date of Issue", "").Replace("date of issue", "").Replace("DATE OF ISSUE", "").Replace("Expiry Date", "").Replace("EXPIRY DATE", "").Replace("Expiry Date", "").Replace("PLACE OF ISSUE", "").Replace("place of issue", "").Replace("Place of Issue", "").Replace("             ", ":");
                                if (tNameValue.ToString().ToLower().IndexOf("place") >= 0 || tNameValue.ToString().ToLower().IndexOf("permanent") >= 0 || tNameValue.ToString().ToLower().IndexOf("fathers") >= 0 || tNameValue.ToString().ToLower().IndexOf("father's name") >= 0 || tNameValue.ToString().ToLower().IndexOf("father’s name") >= 0 | tNameValue.ToString().ToLower().IndexOf("fathers name") >= 0 | tNameValue.ToString().ToLower().IndexOf("mothers name") >= 0 | tNameValue.ToString().ToLower().IndexOf("mother's name") >= 0 | tNameValue.ToString().ToLower().IndexOf("mother’s name") >= 0 | tNameValue.ToString().ToLower().IndexOf("father") >= 0 | tNameValue.ToString().ToLower().IndexOf("mother") >= 0 | tNameValue.ToString().ToLower().IndexOf("name of the company") >= 0 | tNameValue.ToString().ToLower().IndexOf("name of course") >= 0 || tNameValue.ToString().ToLower().IndexOf("name of inst") >= 0 || tNameValue.ToString().ToLower().IndexOf("name of consultant") >= 0 || tNameValue.ToString().ToLower().Trim().IndexOf("name of degree") >= 0) continue;

                                if (stringExist(tNameValue.ToString()) == true) continue; ;
                                add = tNameValue.Replace(":-", ":").ToString().Replace("-", ":").ToString().Split(':');
                                for (int z = 0; z < add.Length && tName.Trim().Length <= 20; z++)
                                {
                                    if (add[z].IndexOf("Hobbies") >= 0 || add[z].ToLower().IndexOf("d o b") >= 0 || add[z].IndexOf("Age") >= 0) continue;
                                    if (add[z].Trim().Length <= 1) continue;
                                    if (isNumberExists(add[z].Trim().ToCharArray()))
                                        tName += ' ' + add[z].Trim();
                                }
                            }
                        }
                    }

                }
                catch
                { }
            }
            #endregion

            //LABEL ----------03  // Logic Fire after Full Name Checking .... added Saravana
            #region "Checking last line is contain ()"
            try
            {
                //(C.V Continued)
                string sLastLine = "";
                if (this.TempDataLines.Length >= 1 && tName.Trim().Length == 0)
                {
                    int iCLast2Cnt = 0;
                    do
                    {
                        sLastLine = this.TempDataLines[this.TempDataLines.Length - iCLast2Cnt - 1].Replace("Place:", "").Replace("Place", "").Trim();
                        if ((sLastLine.IndexOf("(") == 0) && (sLastLine.IndexOf(")") == (sLastLine.Length - 1)) || (sLastLine.IndexOf("[") == 0) && (sLastLine.IndexOf("]") == (sLastLine.Length - 1)) || (sLastLine.IndexOf("{") == 0) && (sLastLine.IndexOf("}") == (sLastLine.Length - 1)) || sLastLine.ToLower().Trim().IndexOf("curriculum vitae of") == 0)
                        {
                            StringBuilder rmBrkStr = new StringBuilder();
                            rmBrkStr.Append(sLastLine);
                            rmBrkStr.Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "").Replace("{", "").Replace("}", "").Replace("curriculum vitae of", "").Replace("Curriculum Vitae of", "").Replace("CURRICULAM VITAE OF", "").Replace(":", " ").Replace("-", " ").Replace("Applicant", "").Replace("Candidate", "");
                            if (isNumberExists(rmBrkStr.ToString().Trim().ToCharArray()) && (rmBrkStr.ToString().ToLower().IndexOf("affiliated") < 0 && rmBrkStr.ToString().ToLower().IndexOf("university") < 0 & rmBrkStr.ToString().ToLower().IndexOf("unviersity") < 0 && rmBrkStr.ToString().ToLower().IndexOf("signature") < 0 && rmBrkStr.ToString().ToLower().IndexOf("sponsored") < 0 && rmBrkStr.ToString().ToLower().IndexOf("seminar") < 0 && rmBrkStr.ToString().ToLower().IndexOf("exhibition") < 0 && rmBrkStr.ToString().ToLower().IndexOf("reference") < 0 & rmBrkStr.ToString().ToLower().IndexOf("exhibition") < 0 && rmBrkStr.ToString().ToLower().IndexOf("functional") < 0 && rmBrkStr.ToString().ToLower().IndexOf("application") < 0 && rmBrkStr.ToString().ToLower().IndexOf("faithfully") < 0 && rmBrkStr.ToString().ToLower().IndexOf("yours") < 0 && rmBrkStr.ToString().ToLower().IndexOf("your name") < 0 && rmBrkStr.ToString().ToLower().IndexOf("available on your request") < 0 && rmBrkStr.ToString().ToLower().IndexOf("father") < 0 && rmBrkStr.ToString().ToLower().IndexOf("c.v continued") < 0 && rmBrkStr.ToString().ToLower().IndexOf("will be provided on request ") < 0) && rmBrkStr.ToString().ToLower().IndexOf("placed") < 0)
                            {
                                Regex rgxCandidate = new Regex(@"curriculum vitae of|(Candidate|Applicant)\s?[']?\s?(Name|Full Name)|Full Name", RegexOptions.IgnoreCase);
                                if (rgxCandidate.IsMatch(rmBrkStr.ToString()))
                                    rmBrkStr.Replace(rgxCandidate.Match(rmBrkStr.ToString()).ToString(), " ");
                                tName = rmBrkStr.ToString().Trim();
                                if (tName.IndexOf("@") > 0)
                                    tName = "";
                            }
                        }
                        iCLast2Cnt++;
                    } while (iCLast2Cnt < 2 && tName.Trim().Length <= 2);
                    if (tName.Length > 2)
                    {
                        tNameSearchFrmLast = true;
                        tNameFrmFirst = tName;
                    }
                }

                if (rgxContinue.Match(" " + tName + " ").Length > 2)
                {
                    tName = "";
                    tNameFrmFirst = "";
                    tNameSearchFrmLast = false;
                }
                if (tName.Trim().Length < 2)
                {
                    if ((TempDataLines[TempDataLines.Length - 1].ToLower().Trim().IndexOf("(") == 0 && TempDataLines[TempDataLines.Length - 1].ToLower().Trim().IndexOf(")") >= 0) && Regex.Matches(TempDataLines[TempDataLines.Length - 1].Trim(), @"\s+").Count < 3)
                    {
                        tName = TempDataLines[TempDataLines.Length - 1].Trim();
                        tNameSearchFrmLast = true;
                        tNameFrmFirst = tName;
                    }
                }
            }
            catch { }

            #endregion


            //Label------------07
            #region ""
            try
            {
                int cnt = 0;
                bool flagName = false;
                Regex rgxPersonal = new Regex(@"(PERSONAL DETAILS|p e r  s o n a l   d e t a i l s|(personal|Personel)\s*(profile|information|info|Particulars|Detail|history|data)|Profile|My Performa|candidate assessment|Address|Father['’]?\s?Name|Mother['’]?\s?Name)['’]?[s]?\s*([:\-]|\s{5})", RegexOptions.IgnoreCase);
                Regex rgxDob = new Regex(@"date and place of birth\s*:|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|birth date|born|date of birthage|b\\'date|b’date|date  of  birth|date of birth|dob|date & place of birth|d\.o\.b|date of birth|date   of   birth|BORN:", RegexOptions.IgnoreCase);
                Regex rgxMyName = new Regex(@"^[1a]?\s?[\.\)]?\s*(FullName|Full Name|My Name)[\s\t]*([,\-]|\s{5}|:)|Name[\s\t]*[:\-]|Name[\s\t]*[:\-]?$|\s(My Name is|name as in NRIC|name in full|name (full name)|name as appears in passport|name as appearing in passport|name as in passport|name in passport|Name as on passport)\s", RegexOptions.IgnoreCase | RegexOptions.RightToLeft);
                Regex regNotName = null;
                regNotName = new Regex(@"[\|\s,\{\(\:](name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|male|female|base info|reference|references|nickname|thread|safe|Class|Green Card|Message|AREAS OF INTEREST)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase | RegexOptions.IgnoreCase);
                for (cnt = 0; cnt < TempDataLines.Length && tName.Trim().Length < 2; cnt++)
                {
                    if (TempDataLines[cnt].Replace(" ", "").Length > 75) continue;
                    flagName = false;
                    if (rgxPersonal.IsMatch(TempDataLines[cnt].Trim().ToString() + "     ") == false || rgxPersonal.Match(TempDataLines[cnt].Trim().ToString() + "     ").Index > 10)
                        if (rgxDob.IsMatch(" " + TempDataLines[cnt].Trim().ToString() + " ") == false || TempDataLines[cnt].Replace(" ", "").Length > 30)
                            continue;
                    int ct = 0;
                    for (ct = cnt; ct < cnt + 5 && ct < TempDataLines.Length; ct++)
                    {
                        if (TempDataLines[ct].Replace(" ", "").Length > 75 || ((ct > 2 && regNotName.IsMatch(TempDataLines[ct - 1].ToString().ToLower()) == true) || regNotName.IsMatch(" " + TempDataLines[ct].ToString().ToLower()) == true)) break;
                        if (rgxMyName.IsMatch(TempDataLines[ct].Trim().ToString() + "     ") == false) continue;
                        if (rgxMyName.Match(TempDataLines[ct].Trim().ToString() + "     ").ToString().Replace(" ", "").Length + 25 < TempDataLines[ct].Replace(" ", "").Trim().Length) continue;
                        flagName = true;
                        break;
                    }
                    if (flagName == false)
                        for (ct = cnt; ct > cnt - 4 && ct > 0; ct--)
                        {
                            if (TempDataLines[ct].Replace(" ", "").Length > 75 || ((ct > 2 && regNotName.IsMatch(TempDataLines[ct - 1].Trim().ToString().ToLower()) == true) || regNotName.IsMatch(" " + TempDataLines[ct].Trim().ToString().ToLower()) == true)) break;
                            if (rgxMyName.IsMatch(TempDataLines[ct].Trim().ToString() + "     ") == false) continue;
                            if (rgxMyName.Match(TempDataLines[ct].Trim().ToString() + "     ").ToString().Replace(" ", "").Length + 25 < TempDataLines[ct].Replace(" ", "").Trim().Length) continue;
                            flagName = true;
                            break;
                        }
                    if (flagName == false) continue;
                    TempDataLines[ct] = TempDataLines[ct].Remove(0, rgxMyName.Match(TempDataLines[ct].Trim().ToString() + "     ").ToString().Trim().Length);
                    if (rgxContinue.IsMatch(" " + TempDataLines[ct].ToString().Trim() + " ") || rgxWordsExclude.Matches(TempDataLines[ct].Trim()).Count > 5 || (TempDataLines[ct].Trim().Length > 1 && isNumberExists(TempDataLines[ct].Trim().ToCharArray()) == false)) continue;

                    if (TempDataLines[ct].Trim().Length > 1)
                        tName = TempDataLines[ct].Trim().ToString().Replace(":", "").Replace(",", "");
                    else
                        if (ct + 1 < TempDataLines.Length && isNumberExists(TempDataLines[ct + 1].Trim().ToCharArray()))
                            tName = TempDataLines[ct + 1].Trim().ToString().Replace(":", "").Replace(",", "");
                        else if (ct + 1 < TempDataLines.Length && isNumberExists(TempDataLines[ct + 1].Trim().Remove(0, 1).ToCharArray()))
                            tName = TempDataLines[ct + 1].Trim().ToString().Replace(":", "").Replace(",", "");
                    if (rgxContinue.IsMatch(" " + tName + " "))
                    {
                        tName = "";
                        continue;
                    }
                    else
                        break;
                }
            }
            catch { }
            #endregion


            //LABEL---------08
            #region "Name from Top"

            try
            {
                Regex rgxCheckNextLine = new Regex(@"Consultant|Full Time|FulTime|Consulting|Details|Profile|Page|\sInc[\.\.\s]|Functional|Certified|Certification|curicullum|curricullum|vitae|vitie|resume|curriculum|currucullum|C U R R I C U L U M|V I TA E", RegexOptions.IgnoreCase);
                bool flag = false;
                int count = 10;
                Regex regNotName = null;
                regNotName = new Regex(@"[\|\s,\{\(\:](name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|address|assetas|male|female|language|passport|base info|thread|safe|Class|Green Card|Message|AREAS OF INTEREST)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase | RegexOptions.IgnoreCase);
                //for (int cnt = 0; cnt < count && cnt < this.TempDataLines.Length && (tName.Length < 2 || tNameSearchFrmLast == true); cnt++)
                for (int cnt = 0; cnt < count && cnt < this.TempDataLines.Length && (tName.Length < 2); cnt++)
                {
                    if (rgxBreak.IsMatch(this.TempDataLines[cnt].ToString().Trim() + "     ") && rgxBreak.Match(this.TempDataLines[cnt].ToString().Trim() + "     ").Index < 5) break;
                    if (rgxBreaks.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") || rgxBreaks.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Index > 5) break;
                    if (rgxBreaksLength.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") && rgxBreaksLength.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Length + 15 > TempDataLines[cnt].Trim().Length) break;
                    if (regNotName.IsMatch(" " + this.TempDataLines[cnt].Trim().ToLower()))
                        continue;
                    if (count > 0 && TempDataLines[cnt].Trim().Length < 2)
                    {
                        count++;
                        continue;
                    }
                    if (rgxCheckNextLine.IsMatch(" " + this.TempDataLines[cnt].ToString() + " ") && TempDataLines[cnt].Replace(" ", "").Trim().Length < 50 && this.TempDataLines[cnt].ToString().ToLower().IndexOf("professional profile of") < 0)
                    {
                        count = cnt + 2;
                        flag = true;
                        continue;
                    }
                    this.TempDataLines[cnt] = this.TempDataLines[cnt].Replace("STRICTLY CONFIDENTIAL", "");
                    if (this.TempDataLines[cnt].Replace(" ", "").Trim().Length > 100) break;

                    if (rgxContinue.IsMatch(" " + this.TempDataLines[cnt] + " ") && this.TempDataLines[cnt].ToString().ToLower().IndexOf("professional profile of") < 0) continue;
                    if (TempDataLines[cnt].Trim().EndsWith(","))
                        TempDataLines[cnt] = TempDataLines[cnt].Trim().Remove(TempDataLines[cnt].Trim().Length - 1, 1);
                    if (isNumberExists(TempDataLines[cnt].Trim().ToCharArray()) && (cnt == 0 || flag == true))
                    {
                        tName = TempDataLines[cnt].ToString().Trim().Replace("Professional Profile of", "");
                    }
                    if (tName.Length > 1 && rgxContinue.IsMatch(" " + tName.Trim() + " ") == true)
                    {
                        tName = "";
                        continue;
                    }
                }
                if (tNameSearchFrmLast == true && tName == "")
                    if (tName == "")
                        tName = tNameFrmFirst;


            }
            catch { }

            #endregion
            //LABEL---------09
            #region
            try
            {
                if (tName.Trim().Length < 2)
                {
                    bool FlagName = false;
                    bool FlagFullName = false;
                    Regex rgxMyName = new Regex(@"[1a]?\s?[\.\)]?\s*(My FullName|My Full Name|FullName|Full Name|My Name)\s*([,\-]|\s{5}|:)|\s(My Name is|name as in NRIC|name in full|name (full name)|name as appears in passport|name as appearing in passp|CANDIDATE DOSSIER|curriculum vitae of|Curriculum of)\s", RegexOptions.IgnoreCase);
                    Regex rgxMyName1 = new Regex(@"[1a]?\s?[\.\)]?\s*Name\s*([,\-]|\s{5}|:)", RegexOptions.IgnoreCase);
                    for (int cnt = 0; cnt < TempDataLines.Length; cnt++)
                    {
                        FlagFullName = false;
                        //FlagName = false;
                        if (TempDataLines[cnt].Replace(" ", "").Length > 100 || cnt > 15)
                            FlagName = true;
                        if (TempDataLines[cnt].Replace(" ", "").Length > 40) continue;
                        if (rgxMyName.Match((TempDataLines[cnt].Trim().ToString() + "     ")).Length > 4 && rgxMyName.Match((TempDataLines[cnt].Trim().ToString() + "     ")).Index < 3)
                            FlagFullName = true;
                        if (FlagFullName == false && FlagName == false)
                            if (rgxMyName1.Match((TempDataLines[cnt].Trim().ToString() + "     ")).Length < 4 || rgxMyName1.Match((TempDataLines[cnt].Trim().ToString() + "     ")).Index > 2)
                                continue;
                        if (FlagFullName == false && FlagName == true) continue;
                        if (FlagFullName == true)
                            TempDataLines[cnt] = TempDataLines[cnt].Remove(0, rgxMyName.Match(TempDataLines[cnt].Trim().ToString() + "     ").ToString().Trim().Length);
                        else
                            TempDataLines[cnt] = TempDataLines[cnt].Remove(0, rgxMyName1.Match(TempDataLines[cnt].Trim().ToString() + "     ").ToString().Trim().Length);
                        if (TempDataLines[cnt].Trim().Length > 1 && isNumberExists(TempDataLines[cnt].Trim().ToCharArray()))
                            tName = TempDataLines[cnt].Trim().ToString();
                        else
                            if (cnt + 1 < TempDataLines.Length && isNumberExists(TempDataLines[cnt + 1].Replace(":", "").Trim().ToCharArray()))
                                tName = TempDataLines[cnt + 1].Replace(":", "").Trim().ToString();
                        if (rgxContinue.IsMatch(" " + tName + " ") || tName.Length > 25)
                        {
                            tName = "";
                            continue;
                        }
                        else
                            break;
                    }
                }
            }
            catch { }
            #endregion

            //    ///checking NAME comes under address....
            //    ///

            #region checking NAME comes under address....
            //if (string.Compare(tName, "position", true) == 0)
            //    tName = "";
            //int iAddressCount = 0, iEnforceTopAssessmentSheet = 0;
            //string tDobSearch = "BORN:|Born on|Birth Date|Birth :|d. o. b|d o b|d  o  b|date and place of birth:|date and place of birth|date and country of birth|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|date of birth/age|date of birthage|b\\'date|b’date|date  of  birth|date of birth|date ofbirth|dob|date & place of birth|d.o.b|date of birth|date   of   birth|aspiration|DATE OF BIRTH:";
            //Regex exDobSearch = new Regex(@"[\s,\(\:](" + tDobSearch.ToString() + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
            //Regex exDobSearch1 = new Regex(@"[\s,\(\:](" + tDobSearch.ToString() + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);

            //for (int z = 0; (z < 20 && z < TempDataLines.Length) && tName.Trim().Length <= 2; z++)
            //{
            //    if (this.TempDataLines[z].Trim().Length == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("personal data") >= 0) continue;//Personal Data
            //    if (this.TempDataLines[z].ToLower().Trim().IndexOf("towers") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("sector ") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("phase") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf(" po") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("phone2") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("address") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("enclave") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("floor") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("pin no") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("road") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("hostel") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("p.o") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("apartment") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("quarters") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("nagar") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("street") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("colony") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("pin -") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("main road") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("post box") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("p.o box") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("p.o") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("nilaya") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("villa") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("house") >= 0)
            //        iAddressCount++;
            //    if (this.TempDataLines[z].ToLower().Trim().IndexOf("position") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("nationality") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("current location") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("notice period") >= 0)
            //        iEnforceTopAssessmentSheet++;
            //    if (this.TempDataLines[z].ToLower().Trim().IndexOf("professional details") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("consultancy in") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("industry") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("information") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("extensive delivery") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("target job") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("work experience") >= 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("language known") >= 0) break;
            //    if ((this.TempDataLines[z].ToUpper().Trim().IndexOf("BRIEF OVERVIEW") == 0 || this.TempDataLines[z].ToUpper().Trim().IndexOf("WORK") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf(":: objectives") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("job objective") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("career objective") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("professional") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("experience summary") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("personal information") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("objective") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("profile") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("summary") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("personal") == 0) && (iAddressCount > 0 || iEnforceTopAssessmentSheet >= 3) && (z - 1 >= 0))
            //    {
            //        if (this.TempDataLines[z - 1].ToLower().Trim().IndexOf("seeking") >= 0 || this.TempDataLines[z - 1].ToLower().Trim().IndexOf("career") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("objective") == 0) break;
            //        string checkStr = this.TempDataLines[z - 1].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Replace("Resume", "").Replace("RESUME", "");
            //        if (checkStr.Trim().IndexOf("(") > 0 && (checkStr.Trim().IndexOf("total") < 0 || checkStr.Trim().IndexOf("years") < 0 || checkStr.Trim().IndexOf("year") < 0 || checkStr.Trim().IndexOf("seeking") < 0))
            //        {
            //            string[] acheckStr = checkStr.Trim().Split('(');
            //            if (isNumberExists(acheckStr[0].ToCharArray()) && tName.Trim().Length == 0 && acheckStr[0].Trim().Length > 3 && stringExist(acheckStr[0]) == false)
            //                tName = acheckStr[0].Trim();
            //        }
            //        else if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)
            //            tName = checkStr.Trim();
            //        else if (checkStr.Trim().IndexOf("         ") > 0)
            //        {
            //            checkStr = checkStr.Substring(0, checkStr.Trim().IndexOf("         "));
            //            if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)
            //                tName = checkStr.Trim();
            //        }

            //        else if ((z - 2 >= 0))
            //        {
            //            checkStr = this.TempDataLines[z - 2].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "");
            //            if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3 && stringExist(checkStr) == false)
            //                tName = checkStr.Trim();
            //            else if ((z - 3) >= 0)
            //            {
            //                checkStr = this.TempDataLines[z - 3].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "");
            //                if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3 && stringExist(checkStr) == false)
            //                    tName = checkStr.Trim();
            //            }
            //        }
            //        if (stringExist(tName) == true && tName.Trim().Length > 0) tName = "";
            //        if (tName.Trim().Length <= 2) tName = "";
            //        break;
            //    }
            //    if ((this.TempDataLines[z].ToLower().Trim() == "job objective") || (this.TempDataLines[z].ToLower().Trim() == "educational background") || this.TempDataLines[z].ToUpper().Trim().IndexOf("CAREER  OBJECTIVE") >= 0 || (this.TempDataLines[z].ToLower().Trim().IndexOf("educational qualification") >= 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("educational qual.:") >= 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("education qualification") >= 0) || (this.TempDataLines[z].ToLower().Trim() == "experience") || (this.TempDataLines[z].ToLower().Trim() == "brief summary") || (this.TempDataLines[z].ToLower().Trim() == "education") || (this.TempDataLines[z].ToLower().Trim() == "employment history") || (this.TempDataLines[z].ToLower().Trim() == "professional objective") || this.TempDataLines[z].ToLower().Trim().IndexOf("career objective:") == 0 || this.TempDataLines[z].ToLower().Trim().IndexOf("summary") == 0 || (this.TempDataLines[z].ToLower().Trim().IndexOf("summary:") == 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("objective") == 0) || (this.TempDataLines[z].ToLower().Trim().IndexOf("d.o.b.") == 0))
            //        break;
            //    if ((exDobSearch.IsMatch(" " + this.TempDataLines[z].Trim()) == true || exDobSearch1.IsMatch(" " + this.TempDataLines[z].Trim()) == true)) break;
            //}
            //exDobSearch1 = null; exDobSearch = null;


            #endregion

            //LABEL---------10
            #region "Name from Top"
            Regex rgxCheckNextLine1 = new Regex(@"Consultant|Fultime|Page|\sInc[\.\.\s]|Functional|Certified|Certification|curicullum|curricullum|vitae|vitie|resume|curriculum|currucullum", RegexOptions.IgnoreCase);
            bool flag2 = false;
            Regex rgxNumberMail = new Regex(@"\d{5,}|\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*|India|www\.[a-z]+\.", RegexOptions.IgnoreCase);
            //Regex rgxNumberMail = new Regex(@"\d{5,}|\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*|www\.[a-z]+\.", RegexOptions.IgnoreCase);
            try
            {
                Regex regNotName = null;
                regNotName = new Regex(@"[\|\s,\{\(\:](name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|address|assetas|male|female|base info|client|thread|safe|Class|Green Card|Message)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase | RegexOptions.IgnoreCase);
                int count = 10;
                for (int cnt = 0; cnt < count && cnt < this.TempDataLines.Length && tName.Length < 2; cnt++)
                {
                    if (rgxBreak.IsMatch(this.TempDataLines[cnt].ToString().Trim() + "     ") && rgxBreak.Match(this.TempDataLines[cnt].ToString().Trim() + "     ").Index < 5) break;
                    if (rgxBreaks.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") || rgxBreaks.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Index > 5) break;
                    if (rgxBreaksLength.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") && rgxBreaksLength.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Length + 15 > TempDataLines[cnt].Trim().Length) break;
                    if (regNotName.IsMatch(" " + this.TempDataLines[cnt].Trim().ToLower()))
                        continue;
                    if ((rgxNumberMail.IsMatch(this.TempDataLines[cnt]) == false && flag2 == false)) continue;
                    flag2 = true;
                    if (rgxNumberMail.IsMatch(this.TempDataLines[cnt]))
                    {
                        count = cnt + 3;
                        continue;
                    }

                    if (rgxBreaks.IsMatch(this.TempDataLines[cnt]) && rgxCheckNextLine1.IsMatch(" " + this.TempDataLines[cnt].ToString() + " ") == false) break;

                    if (this.TempDataLines[cnt].Trim().Length > 75) break;
                    if (this.TempDataLines[cnt].Trim().Length < 2) continue;

                    if (rgxContinue.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ")) continue;
                    if (rgxContinue.IsMatch(" " + this.TempDataLines[cnt] + " ")) continue;
                    if (TempDataLines[cnt].Trim().EndsWith(","))
                        TempDataLines[cnt] = TempDataLines[cnt].Trim().Remove(TempDataLines[cnt].Trim().Length - 1, 1);
                    if (isNumberExists(TempDataLines[cnt].Trim().ToCharArray()) && TempDataLines[cnt].Trim().Length < 75)
                        tName = TempDataLines[cnt].ToString().Trim();
                    if (tName.Length > 2 && rgxContinue.IsMatch(" " + tName.Trim() + " ") == true)
                    {
                        tName = "";
                        continue;
                    }
                }
            }
            catch { }
            #endregion
            //LABEL-----11
            #region "Checking for regards"
            Regex rgxRegrads = new Regex(@"^\s?(Thanks and Regard|Your Sincerely|Sincerely|Regard|Yours Faithfully|Rgd)[s]?\s?.{0,1}$", RegexOptions.IgnoreCase);
            for (int innZ = 0; innZ < this.TempDataLines.Length && (tName.Trim().Length == 0); innZ++)
            {
                if (rgxName.IsMatch(TempDataLines[innZ].ToString().Trim() + " "))
                {
                    tName = rgxName.Match(" " + TempDataLines[innZ].ToString() + " ").ToString().Replace(":", " ").Replace("-", " ").Replace(",", " ").Trim();
                    break;
                }
                if (rgxRegrads.IsMatch(this.TempDataLines[innZ].Trim()))
                {

                    if (((innZ + 1) < this.TempDataLines.Length) && (this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0 && this.TempDataLines[innZ + 1].Trim().ToLower().IndexOf("(") > 0))
                    {
                        add = this.TempDataLines[innZ + 1].Trim().Split('(', ')');
                        if (add.Length >= 1)
                        {
                            if (isNumberExists(add[0].ToCharArray()))
                            {
                                tName = add[0];
                            }
                        }
                    }
                    else
                    {
                        if (isNumberExists(this.TempDataLines[innZ + 1].Trim().ToCharArray()))
                        {
                            tName = this.TempDataLines[innZ + 1].Replace("(", "").Replace(")", "").Trim();
                        }
                    }
                }
                if (tName.Trim().Length > 2)
                {
                    //if()
                    StringBuilder strbTopName = new StringBuilder();
                    strbTopName.Append(tName.Trim());
                    strbTopName.Replace("'", " ").Replace(",", " ").Replace(".", " ");
                    ReplaceFromName(ref strbTopName, _strNameRemove);
                    tName = strbTopName.ToString().Trim();
                    //break;
                }
            }
            #endregion
            tName = tName.Trim().Replace("R E S U M E", "").Replace("R e s u m e", "").Replace("Contact Information", "").Replace("contact information", "").Replace("(", "").Replace(")", "").Replace("CURRICULUM VITAE", "").Replace("curriculum vitae", "").Replace("Date of Birth", "").Replace("E mail", "").Replace("Contact no", "").Replace("Addresses", "").Replace("Home ", "").Replace(" Home ", "").Replace("Mr ", "").Replace("NAME:", "");

            //LABEL------------12  
            #region "Name from Top"

            bool flag22 = false;
            try
            {
                int count = 15;
                Regex regNotName = null;
                regNotName = new Regex(@"[\|\s,\{\(\:](name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|address|cource|assetas|male|female|base info|client|rbs|position|thread|safe|Class|AREAS OF INTEREST|Message|green Card)[:\s]?[:\)\}\-\s]?", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                for (int cnt = 0; cnt < count && cnt < this.TempDataLines.Length && tName.Length < 2; cnt++)
                {
                    if (rgxBreak.IsMatch(this.TempDataLines[cnt].ToString().Trim() + "     ") && rgxBreak.Match(this.TempDataLines[cnt].ToString().Trim() + "     ").Index < 5) break;
                    if (rgxBreaks.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") || rgxBreaks.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Index > 5) break;
                    if (rgxBreaksLength.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") && rgxBreaksLength.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Length + 15 > TempDataLines[cnt].Trim().Length) break;
                    if (regNotName.IsMatch(" " + this.TempDataLines[cnt].Trim().ToLower()))
                        continue;
                    if ((rgxNumberMail.IsMatch(this.TempDataLines[cnt]) == false && (cnt + 1 < TempDataLines.Length - 1 && rgxNumberMail.IsMatch(this.TempDataLines[cnt + 1]) == false)) && flag22 == false || (this.TempDataLines[cnt].ToString().ToLower().Trim().IndexOf("technology") >= 0 || this.TempDataLines[cnt].ToString().ToLower().Trim().IndexOf("systems") >= 0 || this.TempDataLines[cnt].ToString().ToLower().Trim().IndexOf("position") >= 0)) continue; //TempDataLines
                    flag22 = true;
                    if (rgxNumberMail.IsMatch(this.TempDataLines[cnt]))
                    {
                        count = cnt + 6;
                        continue;
                    }
                    if (rgxBreaks.IsMatch(this.TempDataLines[cnt]) && rgxCheckNextLine1.IsMatch(" " + this.TempDataLines[cnt].ToString() + " ") == false) continue;

                    //if (TempDataLines.Length > cnt && cnt > 0)
                    //{
                    //    if (this.TempDataLines[cnt - 1].IndexOf("Address") >= 0) break; //
                    //    if (this.TempDataLines[cnt - 1].IndexOf("candicate referal sheet") >= 0) break;

                    //}
                    if (this.TempDataLines[cnt].Trim().Length > 75)
                    {
                        flag22 = false;
                        continue;
                    }
                    if (this.TempDataLines[cnt].Trim().Length < 2) continue;
                    if (rgxContinue.IsMatch(" " + this.TempDataLines[cnt] + " ")) continue;
                    if (TempDataLines[cnt].Trim().EndsWith(","))
                        TempDataLines[cnt] = TempDataLines[cnt].Trim().Remove(TempDataLines[cnt].Trim().Length - 1, 1);
                    if (isNumberExists(TempDataLines[cnt].Trim().ToCharArray()) && TempDataLines[cnt].Trim().Length < 75)
                        tName = TempDataLines[cnt].ToString().Trim();
                    if (tName.Length > 2 && rgxContinue.IsMatch(" " + tName.Trim() + " ") == true)
                    {
                        tName = "";
                        continue;
                    }
                }
            }
            catch { }
            #endregion

            //Label - 13
            #region "Name from Top Name will be like Name-other word, Name,Other word....."
            try
            {
                Regex rgxStartingName = new Regex(@"^([A-Za-z]{2,10}\s?[-]\s?[A-Za-z]{3,15}\s?|[A-Za-z][A-Za-z\.\s]{3,30})([:,\(\-\–\[\–]|\s{4})");
                Regex re = new Regex("[0-9]");
                Regex regNotName = null;
                regNotName = new Regex(@"[\|\s,\{\(\:](name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|address|professional|profile|cource|assetas|male|female|program|director|dealer|industrial|direct sales|base info|skills|pressures|explorer|basic information|native|nickname|educational|client|position|candidate referal sheet|client|date cv sent|thread|safe|Class|Green Card|Message|AREAS OF INTEREST)[:\s]?[:\)\}\-\s]?", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                for (int cnt = 0; cnt < 5 && cnt < TempDataLines.Length && tName.Trim().Length < 3; cnt++)
                {
                    if (rgxBreak.IsMatch(this.TempDataLines[cnt].ToString().Trim() + "     ") && rgxBreak.Match(this.TempDataLines[cnt].ToString().Trim() + "     ").Index < 5) break;
                    if (rgxBreaks.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") && rgxBreaks.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Length > 10) break;
                    if (rgxBreaksLength.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") && rgxBreaksLength.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Length + 15 > TempDataLines[cnt].Trim().Length && rgxBreaksLength.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Length > 10) break;
                    if (regNotName.IsMatch(" " + this.TempDataLines[cnt].Trim().ToLower()))
                        continue;
                    if (cnt > 2)
                    {
                        if (rgxBreaks.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") || rgxBreaks.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Index > 5) break;
                        if (rgxBreaksLength.IsMatch(" " + TempDataLines[cnt].ToString().Trim() + " ") && rgxBreaksLength.Match(" " + TempDataLines[cnt].ToString().Trim() + " ").Length + 15 > TempDataLines[cnt].Trim().Length) break;
                    }
                    if (re.IsMatch(TempDataLines[cnt].Trim() + "    ") && (cnt <= 5) && TempDataLines[cnt].ToString().Trim().Contains("(") == false) continue;
                    if (rgxStartingName.IsMatch(TempDataLines[cnt].Trim() + "    ") && (cnt <= 11))
                    {
                        tName = rgxStartingName.Match(TempDataLines[cnt].Trim().Replace(",", "")).ToString().Replace(",", "").Replace("(", "").Replace("-", " ").Replace("–", " ").Replace("[", " ").Replace(":", "");
                    }
                    else
                        if (rgxContinue.IsMatch(" " + TempDataLines[cnt].Replace("'", " ").Replace("Curriculum Vitae   :", " ").Replace("’", " ").ToString().Trim() + " ") && TempDataLines[cnt].ToLower().IndexOf("name") < 0)
                            continue;
                    if (tName.Trim().Length <= 4 && TempDataLines[cnt].Replace("Curriculum Vitae   :", " ").Trim().Length < 30 && isNumberExists(TempDataLines[cnt].Replace("Curriculum Vitae   :", " ").Trim().ToCharArray()))
                        tName = TempDataLines[cnt].Replace("Curriculum Vitae   :", " ").Replace("Name", "").Replace(":", "").Trim().ToString();
                    if (tName.Length > 2 && rgxContinue.IsMatch(" " + tName.Trim() + " ") == true)
                    {
                        tName = "";
                        continue;
                    }
                }
            }
            catch { }
            #endregion

            if (tName.Trim().Length > 1)
            {
                StringBuilder strbtName = new StringBuilder();
                strbtName.Append(tName.ToString().Trim());
                strbtName.Replace(".", " ");
                ReplaceFromName(ref strbtName, _strNameRemove);
                tName = strbtName.ToString().Trim();
            }
            tName = " " + tName + " ";
            if (rgxMrs.IsMatch(" " + tName + " "))
                tName = tName.Replace(rgxMrs.Match(" " + tName + " ").ToString(), " ");
            if (tName.Length > 0)
                tName = tName.Replace("   ", " ").Replace("  ", " ").ToString().Trim();


            #region "20 lines"

            int tEA = 0;
            //						if ( this.TempDataLines[0].ToLower().Trim().IndexOf("contact details")==0)
            //						{
            //							tEA=38;
            //						}
            //						
            for (int z = tEA; (z < tEA + 20 && z < TempDataLines.Length) && tName.Trim().Length == 0; z++)
            {

                ///Check the professional summary this.TempDataLines[z].ToLower().Trim().IndexOf("professional summary") == 0 
                if (this.TempDataLines[z].Trim().Length == 0) continue;
                if (this.TempDataLines[z].ToLower().Trim().IndexOf("educational qualification") >= 0 | this.TempDataLines[z].ToLower().Trim().IndexOf("educational qual.:") >= 0 | this.TempDataLines[z].ToLower().Trim().IndexOf("education qualification") >= 0 | this.TempDataLines[z].ToLower().Trim() == "experience" | this.TempDataLines[z].ToLower().Trim() == "brief summary" | this.TempDataLines[z].ToLower().Trim() == "education" | this.TempDataLines[z].ToLower().Trim() == "employment history" | this.TempDataLines[z].ToLower().Trim() == "professional objective" | this.TempDataLines[z].ToLower().Trim().IndexOf("career objective:") == 0 | this.TempDataLines[z].ToLower().Trim().IndexOf("educational") == 0 | this.TempDataLines[z].ToLower().Trim().IndexOf("candidate referal") == 0) break;
                int iNameBk = 0;
                for (int iNameCnt = 0; iNameCnt < strArrNameBk.Length; iNameCnt++)
                {
                    if (this.TempDataLines[z].ToLower().Trim().IndexOf(strArrNameBk[iNameCnt]) == 0)
                    {
                        iNameBk = 1;
                        break;
                    }
                }
                if (iNameBk == 1) break;


                ///if email is exists with name..as one string
                ///
                if (this.TempDataLines[z].Trim().ToLower().IndexOf("@") >= 0 && this.TempDataLines[z].Trim().ToLower().IndexOf("d.o.b") < 0)
                {
                    string tEmalWName = this.TempDataLines[z].Trim().ToLower();
                    if (tEmalWName.IndexOf("ph") == 0 | tEmalWName.IndexOf("e mail") == 0 | tEmalWName.IndexOf("email") == 0 || tEmalWName.IndexOf("e-mail") == 0 | tEmalWName.IndexOf("tel no. res") == 0) continue;
                    //if (tEmalWName.IndexOf("ph") == 0 | tEmalWName.IndexOf("e mail") == 0  || tEmalWName.IndexOf("e-mail") == 0 | tEmalWName.IndexOf("tel no. res") == 0) continue;
                    add = tEmalWName.Replace("contact by", "").Replace("emailgeneral", "").Replace("email id", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("email", "").Replace("cell", "").Replace("contact number", "").Replace("contact", "").Replace("name", "").Replace("cel no", "").Replace("e mail", "").Replace("e mail", "").Replace("e mail", "").Replace("e mail:", "").Replace("e-mail", "").Replace("e  mail:", "").Replace("email", "").Replace("e- mail:", "").Replace("mail id", "").Replace("mail id", "").Replace("mail id", "").Replace("mail id", "").Replace("ph", "").Replace("mail", "").Replace("e-mail", "").Replace("mail", "").Replace("or ", "").Replace(" or ", "").Replace("(m)", "").Replace("(res)", "").Replace(")", "").Replace(" and", "").Replace(" and ", "").Replace("envelopeback", "").Replace("sex", "").Replace("gender", "").Replace("address", "").Replace(",", "").Replace("old", "").Split(' ');
                    int iSpaceCnt = 0;
                    for (int y = 0; y < add.Length; y++)
                    {
                        if (add[y].Length >= 1)
                        {
                            if (iSpaceCnt > 2) break;
                            if (isNumberExists(add[y].Trim().ToCharArray()) && !(stringExist(add[y].Trim())))
                            {
                                if (tName == "")
                                    tName = tName + " " + add[y].Trim();
                                else
                                    tName = tName + " " + add[y].Trim();
                            }
                        }
                        else if (tName.Trim().Length > 1)
                        {
                            iSpaceCnt++;
                        }
                    }
                    if (stringExist(tName) == true && tName.Trim().Length > 0 || tName.Trim().Length == 1) tName = "";
                }
                if ((this.TempDataLines[z].Trim().ToLower().IndexOf("mobile") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("cell no") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("contact") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("contact no") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("mob") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("(mobile)") >= 0 || this.TempDataLines[z].Trim().ToLower().IndexOf("mobile no") >= 0) && tName.Trim().Length == 0)
                {
                    string tContact = this.TempDataLines[z].ToLower();
                    add = tContact.Replace("contact by", "").Replace("emailgeneral", "").Replace("email id", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("(res)", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("e- mail:", "").Replace("name", "").Replace("sex", "").Replace("gender", "").Replace("address", "").Split(' ');
                    for (int y = 0; y < add.Length; y++)
                    {
                        if (add[y].Length >= 1)
                        {
                            if (isNumberExists(add[y].Trim().ToCharArray()) && !(stringExist(add[y])))
                                tName = tName + " " + add[y].Trim().Replace("(", "").Replace(")", "").Trim();
                        }
                    }

                }
                int iNameNot = 0;
                for (int iNameCnt = 0; iNameCnt < strArrNameNot.Length; iNameCnt++)
                {
                    if (this.TempDataLines[z].ToLower().ToString().Trim().ToLower().Replace("address to correspond", "").IndexOf(" " + strArrNameNot[iNameCnt] + " ") >= 0)
                    {
                        iNameNot = 1;
                        break;
                    }
                }
                if (iNameNot == 1) continue;
                if (regExNameNot.IsMatch(" " + this.TempDataLines[z].ToString().Trim().ToLower().Replace("address to correspond", "")) | regExNameNot1.IsMatch(" " + this.TempDataLines[z].ToString().Trim().ToLower().Replace("address to correspond", "")))
                    continue;


                string checkStr = this.TempDataLines[z].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("Sex", "").Replace("name", "").Replace("}", "").Replace("{", "").Replace("sex", "").Replace("Address to Correspond", "").Replace("Address", "");
                if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)
                {
                    /// replace 1.  Full Name:
                    tName = checkStr.Trim();
                    try
                    {
                        if (this.TempDataLines[z + 1].ToLower().Trim().IndexOf("last name") == 0)
                        {
                            checkStr = this.TempDataLines[z + 2].Trim().Replace("SAP FI/CO Consultant", "").Replace("Candidate Name", "").Replace("FIRST NAME", "").Replace("first name", "").Replace("First Name", "").Replace("Candidate Name:", "").Replace(".Full Name", "").Replace("1.Full Name", "").Replace("1.  Full Name:", "").Replace("Full Name", "").Replace("full name", "").Replace("1.  NAME", "").Replace("Name:", "").Replace("Name –", "").Replace("NAME", "").Replace("Name", "").Replace("name", "").Replace("career", "").Replace(":", "").Replace(",", "").Replace("Project Details", "").Replace("(Current Proj)", "").Replace("Gender", "").Replace("Sex", "").Replace("R e s u m e", "").Replace("R  E  S  E  U  M  E", "").Replace("CURRICULUM VITAE", "").Replace("Personnel Information", "").Replace("B IO DATA", "").Replace("(mr.)", "").Replace("(Mr.)", "").Replace("sex", "").Replace("(MR.)", "").Replace("Telephone", "").Replace("Date of Birth", "").Replace("contact by", "").Replace("emailgeneral", "").Replace("email", "").Replace("general", "").Replace("information", "").Replace("mobile no.", "").Replace("mobile no", "").Replace("(mobile)", "").Replace("emailgeneral", "").Replace("information", "").Replace("mobile", "").Replace("mobile", "").Replace("mob", "").Replace("mob", "").Replace("emergency contact no.:", "").Replace("emergency contact no.:", "").Replace("emergency", "").Replace("contact no.:", "").Replace("contact no.", "").Replace("contact no", "").Replace("contact no", "").Replace("contact", "").Replace("contact", "").Replace("number", "").Replace("contact", "").Replace("mob", "").Replace("(mobile)", "").Replace("(mobile)", "").Replace("(r)", "").Replace("(r)", "").Replace("telephone", "").Replace("phone", "").Replace("phone", "").Replace("ph:", "").Replace("ph:", "").Replace("tel no. res", "").Replace("cell no", "").Replace("cell no", "").Replace("name", "").Replace("contact:", "").Replace("details", "").Replace("name", "").Replace("program", "").Replace("Directory", "");
                            if (isNumberExists(checkStr.ToCharArray()) && checkStr.Trim().Length > 3)
                                tName += " " + checkStr.Trim();
                        }
                    }
                    catch { }
                }
                if (checkStr.IndexOf("    ") >= 0 && tName.Trim().Length == 0)
                {
                    string tTEmp = checkStr;
                    checkStr = checkStr.Substring(0, checkStr.IndexOf("    "));
                    if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)//&& !(stringExist(this.TempDataLines[nCnt])))
                        tName = checkStr.Trim();
                    else
                    {
                        checkStr = tTEmp.Substring(tTEmp.IndexOf("    "));
                        if (isNumberExists(checkStr.ToCharArray()) && tName.Trim().Length == 0 && checkStr.Trim().Length > 3)//&& !(stringExist(this.TempDataLines[nCnt])))
                            tName = checkStr.Trim();
                    }
                }
                if (stringExist(tName) == true && tName.Trim().Length > 0) tName = "";
                if (tName.Trim().Length <= 2) tName = "";
            }
            #endregion
            //LABEL------------14 
            #region "taking name from email"
            try
            {
                Regex regxEmail = new Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*");
                if (tName.Replace(".", "").Trim().Length < 2)
                {
                    Regex rgxNameLast = new Regex(@"^([A-Z][A-Za-z]{1,10}([\.\s]\s?[A-Z][A-Za-z]{1,10})?([\.\s]\s?[A-Z][A-Za-z]{1,10})?|[A-Z][\.\s]\s?([A-Z][\.\s]\s?)?([A-Z][\.\s]\s?)?[A-Z][A-Za-z]{1,10}([\.\s]\s?[A-Z][A-Za-z]{1,10})?).{0,1}$");
                    if (rgxNameLast.IsMatch(TempDataLines[TempDataLines.Length - 1].Trim()) && rgxContinue.IsMatch(TempDataLines[TempDataLines.Length - 1].Trim()) == false)
                        tName = TempDataLines[TempDataLines.Length - 1].Trim();
                }
                if (tName.Replace(".", "").Trim().Length < 2)
                {
                    int RowCount = 20;
                    Regex rgxNameTop = new Regex(@"^([A-Z][A-Za-z]{2,14}\s\s?[A-Z][A-Za-z]{2,14}(\s\s?[A-Z][A-Za-z]{2,14})?|[A-Z][\.\s]\s?(\s?[A-Z][\.\s]\s?)?(\s?[A-Z][\.\s]\s?)?\s?[A-Z][A-Za-z]{2,14}|[A-Z][A-Za-z]{2,14}\s\s?[A-Z][\.]?(\s?\s[A-Z][\.]?)?(\s?\s[A-Z][\.]?)?)$");
                    for (int cnt = 0; cnt < RowCount && cnt < TempDataLines.Length && tName.Replace(".", "").Trim().Length < 2; cnt++)
                    {
                        if (regxEmail.IsMatch(TempDataLines[cnt]))
                            TempDataLines[cnt] = TempDataLines[cnt].Replace(regxEmail.Match(TempDataLines[cnt]).ToString(), " ").Trim();
                        if (TempDataLines[cnt].Replace(" ", "").Length < 15 && RowCount < 15) RowCount++;
                        if (rgxNameTop.IsMatch(TempDataLines[cnt].Trim()) && rgxContinue.IsMatch(TempDataLines[cnt].Trim().Replace("Address to Correspond", "")) == false)
                            tName = TempDataLines[cnt].Trim();
                        String Name = TempDataLines[cnt].Replace("Email:", "");
                        if (rgxNameTop.IsMatch(Name.Trim()) == true && TempDataLines[cnt].ToString() != "")
                            tName = TempDataLines[cnt].Replace("Email:", "").Trim();
                    }
                }
                if (tName.Replace(".", "").Trim().Length < 2)
                {
                    int RowCount = 0;
                    Regex rgxNameTop = new Regex(@"^[\(\{\[]?\s?([A-Z][A-Za-z]{2,14}\s\s?[A-Z][A-Za-z]{2,14}(\s\s?[A-Z][A-Za-z]{2,14})?|[A-Z][\.\s](\s?[A-Z][\.\s]\s?)?(\s?[A-Z][\.\s]\s?)?\s?[A-Z][A-Za-z]{2,14}|[A-Z][A-Za-z]{2,14}\s\s?[A-Z][\.]?(\s?\s[A-Z][\.]?)?(\s?\s[A-Z][\.]?)?)\s?[\)\}\]]?$");
                    for (int cnt = TempDataLines.Length - 1; cnt > 0 && RowCount < 10 && tName.Replace(".", "").Trim().Length < 2; cnt--)
                    {
                        RowCount++;
                        if (rgxNameTop.IsMatch(TempDataLines[cnt].Trim()) && rgxContinue.IsMatch(TempDataLines[cnt].Trim()) == false)
                            tName = TempDataLines[cnt].Trim();
                    }
                    if (tName.Trim().Length > 0 && (tName.Trim().StartsWith("(") | tName.Trim().StartsWith("{") | tName.Trim().StartsWith("[")))
                        tName = tName.Trim().Remove(0, 1).Trim();
                }
            }
            catch { }
            #endregion

            if (tName.Trim().Length > 1)
            {
                StringBuilder strbtName = new StringBuilder();
                strbtName.Append(tName.ToString().Trim());
                strbtName.Replace(".", " ");
                ReplaceFromName(ref strbtName, _strNameRemove);
                tName = strbtName.ToString().Trim();
            }
            tName = " " + tName + " ";
            if (rgxMrs.IsMatch(" " + tName + " "))
                tName = tName.Replace(rgxMrs.Match(" " + tName + " ").ToString(), " ");
            if (tName.Length > 0)
                fname = tName.Replace("   ", " ").Replace("  ", " ").ToString().Trim();
            tName = "";

        }

        private bool stringExist(string str)
        {
            if (str.Trim() == "") return false;
            StringBuilder tPattern = new StringBuilder();
            tPattern.Append(@"us|Park|detailed|worked in|target|pine|communications|consultants|division|greenwoods|need to check|male or female|towers|Language Known|market|Place:::|Key Strengths|Achievements|Key Strengths across Assignments|insurance|Insurance|introduction|requirement|enterprises|download|prepare|accountant|marketing|business management|telecom|budget|preparation|able to|Recognized|corporate|phone|global|Area HR Manager|Pvt\.Ltd|synopsis|residence|of|Cost To Company|\•|postgraduate|gmail|management|mob|resume headline|mail|pvt\. ltd\.|near|services|pvt\. limited|pvt limited|pvt ltd|pvt ltd\.|flat|offered|ibm|personal|nationality|passport number|joining|i am|more about|i need|objective|layout|from|post|office|consultant|consulting|personal|managaement|experience|negotiable|expected|current|road|flat|society|sector|street|stage|cross|main|section|date|phone|birth|joining period|mail id|contribution|employer");
            tPattern.Append(@"|Ref:|Ref |\(res\.\)|curriculam|vitae|india|web:|www|opp|district|resident|systems|system|solutions|out side|preferred|nilayam|is not|page|have not|i want|status|sincerly|truely|thanking you|thank|thanks|faithfully|sir|dear|would|should|glad|madam|master|thanking you|new|product|development|academic|background|finance|comments|communication is|she is|he is|not interested|i have|sent a|comment|school|TOWNSHIP|address|gardens|police station|station|apt,|summary|overview|nagar|colony|residency|hostel|medical college|p\.o|p\.o\.|p\.o:|passport|yes|applied|information|applied|information|private ltd,|automation|house|block|ctc|cuurent|always looking|looking|Electronic|Arts");
            Regex exPatter1 = new Regex(@"[\s,\(\:](" + tPattern.ToString() + @")[,\s]?[\s]?\b", RegexOptions.IgnoreCase);
            Regex exPatter2 = new Regex(@"[\s,\(\:](" + tPattern.ToString() + @")[,\s]?[\s]?$", RegexOptions.IgnoreCase);
            if (exPatter1.IsMatch(" " + str)) return true;
            if (exPatter2.IsMatch(" " + str)) return true;
            return false;
        }

        #endregion

        #region "present and expected salary"

        /// <summary>
        /// Checking for words  like one, two etc., from the string
        /// </summary>
        /// <param name="tToMatch"></param>
        /// <returns>return its integer value</returns>
        private int opCheckWords(string tToMatch)
        {
            string[] wordsArr = { "ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN", "TWENTY", "TWENTY ONE", "TWENTY TWO", "TWENTY THREE", "TWENTY FOUR", "TWENTY FIVE", "TWENTY SIX", "TWENTY SEVEN", "TWENTY EIGHT", "TWENTY NINE", "THIRTY", "THIRTY ONE", "THIRTY TWO", "THIRTY THREE", "THIRTY FOUR", "THIRTY FIVE", "THIRTY SIX", "THIRTY SEVEN", "THIRTY EIGHT", "THIRTY NINE", "FORTY", "FORTY ONE", "FORTY TWO", "FORTY THREE", "FORTY FOUR", "FORTY FIVE" };
            try
            {
                for (int i = 0; i <= wordsArr.GetUpperBound(0); i++)
                {
                    if (wordsArr[i].Trim().ToLower() == tToMatch.Trim().ToLower())
                    {
                        return i;
                    }
                }
            }
            catch { }
            return 0;
        }
        /// <summary>
        /// Fetching Present Salary
        /// step 1. Creating regualr expression
        /// step 2. Matching the string
        /// step 3. Match Found them 
        ///     step 1. Checking the String contain per month 
        ///     step 2. Checking the string Numeric 
        ///     step 3. Storing the present CTCT
        /// </summary>
        private void PresentSalary()
        {
            Regex regCheckPresentSalary = null, regCheckPresentSalary1 = null, regCheckPresentSalary2 = null, regCheckPresentSalary3 = null;
            try
            {
                tExpCTC = false;
                presentCTC = "";
                VariableCTC = "";
                string tCheckPresentSalary = "(Gross figures in € per annum)|Present Gross Emoluments:|salary:   ctc|cost to company (per annum)|ctc – cost to the company|cost to company|current ctc|current salary|current annual salary|present salary package|present ctc|present salary|last salary drawn|salary-ctc|salary drawn|last ctc|ctc:|ctc details|present emoluments:|current compensation|present remuneration|annual salary|CURRENT REMUNERATION |C.CTC|Salary sought|Present  Salary|Present Salary|Present Compensation|CTC|Salary|CCTC|Current Remuneration|Current salary|LCTC|Annual Salary";
                //string tVarCTCSTR = "variable ctc|variable pay|variable  ctc|variable  pay";
                regCheckPresentSalary = new Regex(@"[\s,\(\:](" + tCheckPresentSalary + @")[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                regCheckPresentSalary1 = new Regex(@"[\s,\(\:](" + tCheckPresentSalary + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
                regCheckPresentSalary2 = new Regex(@"[\s,\(\:]([\w\d]\))?(" + tCheckPresentSalary + @")[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                regCheckPresentSalary3 = new Regex(@"[\s,\(\:]([\w\d]\))?(" + tCheckPresentSalary + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
                string tFactor = "1.00";
                Regex rgcNotPresentSalary = new Regex(@"\b(sql server 2005|sql server 2008|sql server 2000|expected ctc:-n a|expected ctc|ectc:|expected:|employee ctc etc|expected Salary)\b", RegexOptions.IgnoreCase);
                string[] aCheckPresentSalary = tCheckPresentSalary.Split('|');
                string strPresentCTC = "";
                string strExpectedCTC = "";
                string strVariableCTC = "";
                string Vpay = "";
                Boolean vPayFlg = false;
                // HireCraft.FCommon.MS_Scale 
                for (int n = 0; n < this.DataLines.Length; n++)
                {
                    if (this.DataLines[n] == null || this.DataLines[n].Length == 0) continue;
                    string tMatchString = this.DataLines[n].Trim().ToLower();
                    int iflag = 0;
                    vPayFlg = false;
                    if (opFindMatch(this.DataLines[n], regCheckPresentSalary, regCheckPresentSalary1) == 1 || opFindMatch(this.DataLines[n], regCheckPresentSalary2, regCheckPresentSalary3) == 1 || tMatchString.ToLower().IndexOf("ctc") == 0)
                        iflag = 1;
                    if ((tMatchString.ToLower().IndexOf("variable ctc") >= 0 || tMatchString.ToLower().IndexOf("variable pay") >= 0 || tMatchString.ToLower().IndexOf("variable  pay") >= 0) && (iflag != 1 || vPayFlg == false))
                    {
                        vPayFlg = true;
                        iflag = 1;
                    }
                    if (iflag == 1)
                    {
                        int nInner = 0;
                        for (nInner = n; (nInner <= n + 2 && nInner < this.DataLines.Length); nInner++)
                        {
                            if (rgcNotPresentSalary.IsMatch(this.DataLines[nInner].Trim()) == true) break;
                            if (this.DataLines[nInner].Trim().ToLower().IndexOf("expected ctc:-n a") >= 0 || this.DataLines[nInner].Trim().ToLower().IndexOf("expected ctc") >= 0 || this.DataLines[nInner].Trim().ToLower().IndexOf("ectc:") >= 0 | this.DataLines[nInner].Trim().ToLower().IndexOf("expected:") >= 0 || this.DataLines[nInner].Trim().ToLower().IndexOf("expected") >= 0 || this.DataLines[nInner].Trim().ToLower().IndexOf("employee ctc etc") >= 0) break; //Expected CTC
                            strPresentCTC = this.DataLines[nInner].Trim().ToLower().Replace("salary:   ctc", "").Replace("cost to company (per annum) -", "").Replace("cost to company (per annum)", "").Replace("cost to company", "").Replace("current ctc:-", ":").Replace("current ctc: -", ":").Replace("current ctc—", "").Replace("1. current ctc", "").Replace("2.  current ctc", "").Replace("current ctc", "").Replace("current salary", "").Replace("current annual salary", "").Replace("present salary", "").Replace("present salary package –", "").Replace("salary drawn", "").Replace("rs.", "").Replace("rs", "").Replace("salary-ctc", "").Replace("present ctc", "").Replace("last ctc", "").Replace("ctc.", "").Replace(" - reimbuement allowances on actual", "").Replace("reimbursement allowances on actual", "").Replace("tctc-", "").Replace("tctc", "").Replace("ctc", "").Replace("last salary drawn", "").Replace("(in lacks per annum)", "").Replace("lpa", " lpa").Replace("current compensation", "").Replace("current", "").Replace("present emoluments:", "").Replace("lakh+", " lakh").Replace("¨", "").Replace("annual salary", "").Replace("current remuneration", "").Replace("remuneration", "").Replace("(Gross figures in € per annum)", "").Replace("w/y", "").Replace("l fixed", "lakh");
                            string[] strSplit1 = strPresentCTC.Split(':');
                            strPresentCTC = strSplit1[strSplit1.GetUpperBound(0)];
                            if (strPresentCTC.Trim().Length == 0) continue;

                            if (this.DataLines[nInner].ToString().Trim() == "(Gross figures in € per annum)")
                            {
                                string strPMonth = "";
                                if (this.DataLines[nInner].Trim().Trim().IndexOf("(Gross figures in € per annum)") >= 0)
                                {
                                    tExpCTC = true;
                                    string tExpctc = "";
                                    string MonthSalary = "0";
                                    char[] ExpMax = { ':', '-', '/' };
                                    String tESal1 = "0";
                                    String tESal2 = "0";
                                    if ("Present/Last drawn" != this.DataLines[nInner + 1].ToString().Trim())
                                    {
                                        if (this.DataLines[nInner + 1].ToLower().IndexOf("month") > 0 || this.DataLines[nInner + 1].ToLower().IndexOf("months") > 0)
                                        {
                                            MonthSalary = "1";
                                        }
                                        tExpctc = this.DataLines[nInner + 1].Trim().Trim().Trim().Replace("=", "").Replace("k", "").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/ month", "(").Replace("inr", "").Replace("basic", "").Replace("£", "").Replace("Equivalent to", "").Replace("€", "").Replace("$", "").Replace("per annum", "").Replace("pa", "");
                                        tExpctc = tExpctc.Replace(" ", "").Replace(",", "");
                                        if (tExpctc != "")
                                        {
                                            string[] tLast = tExpctc.Split(ExpMax);
                                            if (tLast.Length >= 2)
                                            {
                                                tESal1 = tLast[0];
                                                tESal2 = tLast[1];
                                            }
                                            if (tLast.Length == 1)
                                                tESal1 = tLast[0];
                                            if (Convert.ToInt64(tESal1) < Convert.ToInt64(tESal2))
                                                strPMonth = tESal2;
                                            else
                                                strPMonth = tESal1;
                                            if (MonthSalary == "1")
                                            {
                                                if (Convert.ToDecimal(strPMonth) < 1000000000)
                                                {
                                                    decimal d = Convert.ToDecimal(strPMonth);
                                                    strPresentCTC = Convert.ToString(d * 12);
                                                }
                                            }
                                            else
                                            {
                                                if (Convert.ToDecimal(strPMonth) < 1000000000)
                                                {
                                                    strPresentCTC = strPMonth.ToString();
                                                }
                                            }
                                            // break;
                                        }
                                    }
                                    if ("Present/Last drawn" != this.DataLines[nInner + 2].ToString().Trim())
                                    {
                                        tExpctc = this.DataLines[nInner + 2].Trim().Trim().Trim().Replace("=", "").Replace("k", "").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/ month", "(").Replace("inr", "").Replace("basic", "").Replace("£", "").Replace("Equivalent to", "").Replace("$", "").Replace("€", "").Replace("Above", "").Replace("pa", "").Replace("Negotiable", "").Replace("plus", "");
                                        tExpctc = tExpctc.Replace(" ", "").Replace(",", "");
                                        if (tExpctc != "")
                                        {
                                            MonthSalary = "0";
                                            if (this.DataLines[nInner + 1].ToLower().IndexOf("month") > 0 || this.DataLines[nInner + 1].ToLower().IndexOf("months") > 0)
                                            {
                                                MonthSalary = "1";
                                            }

                                            string[] tLast = tExpctc.Split(ExpMax);
                                            tESal1 = "0";
                                            tESal2 = "0";
                                            if (tLast.Length >= 2)
                                            {
                                                tESal1 = tLast[0];
                                                tESal2 = tLast[1];
                                            }

                                            if (tLast.Length == 1)
                                                tESal1 = tLast[0];

                                            if (Convert.ToInt64(tESal1) < Convert.ToInt64(tESal2))
                                                strPMonth = tESal2;
                                            else
                                                strPMonth = tESal1;
                                            if (MonthSalary == "1")
                                            {
                                                if (Convert.ToDecimal(strPMonth) < 1000000000)
                                                {
                                                    decimal d = Convert.ToDecimal(strPMonth);
                                                    strExpectedCTC = Convert.ToString(d * 12);
                                                }
                                            }
                                            else
                                            {
                                                if (Convert.ToDecimal(strPMonth) < 1000000000)
                                                {
                                                    strExpectedCTC = strPMonth.ToString();
                                                }
                                            }
                                            // break;
                                        }
                                    }
                                }
                            }
                            if (strPresentCTC.Trim().IndexOf("per month") >= 0 || strPresentCTC.Trim().IndexOf(" pm") >= 0 || strPresentCTC.Trim().IndexOf("/pm") >= 0 || strPresentCTC.Trim().IndexOf("/-pm") >= 0 || strPresentCTC.Trim().IndexOf("basic") >= 0)
                            {
                                try
                                {
                                    string strPMonth = strPresentCTC.Trim().Trim().Replace("k", "000").Replace("=", "").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/", "").Replace("-", "").Replace("inr", "").Replace("basic", "");
                                    if (Convert.ToDecimal(strPMonth) < 1000000000)
                                    {
                                        decimal d = Convert.ToDecimal(strPMonth);
                                        strPresentCTC = Convert.ToString(d * 12);
                                    }

                                }
                                catch
                                { }
                            }
                            if (strPresentCTC.Trim().IndexOf("/-") >= 0)
                            {
                                string[] strSplit = strPresentCTC.Trim().Split('/', '-');
                                for (int i = 0; i <= strSplit.GetUpperBound(0); i++)
                                {
                                    if (strSplit[i].Trim().Length > 0)
                                    {
                                        strPresentCTC = strSplit[i].Trim();
                                        break;
                                    }
                                }
                            }
                            if (CheckNumeric(strPresentCTC.Replace(", ", "").Replace(",", "").Replace("p.a.", "").Replace("p.a", "").Replace("=", "").Replace("per annum.", "").Replace("per annum", "").Trim().ToCharArray(), "") == true)
                            {
                                //Variable Pay and present CTC
                                if (strPresentCTC.Contains("+"))
                                {
                                    Vpay = strPresentCTC.Remove(0, strPresentCTC.ToString().ToLower().IndexOf("+") + 1);
                                    try
                                    {
                                        strPresentCTC = strPresentCTC.Remove(strPresentCTC.ToString().ToLower().IndexOf("+"), strPresentCTC.ToString().Length - strPresentCTC.ToString().ToLower().IndexOf("+"));
                                    }
                                    catch { }
                                }
                                strPresentCTC = opGetNumberWLakhs(strPresentCTC.Trim().Replace("l", " l")).Trim().Replace("/annum", "").Replace(" ", ".");
                                if (Vpay != "")
                                    strVariableCTC = opGetNumberWLakhs(Vpay.Trim().Replace("l", " l")).Trim().Replace("/annum", "").Replace(" ", ".");
                            }
                            else
                            {
                                //Variable Pay and present CTC
                                if (strPresentCTC.Contains("+"))
                                    Vpay = strPresentCTC.Remove(0, strPresentCTC.ToString().ToLower().IndexOf("+") + 1);
                                strPresentCTC = strPresentCTC.Replace(", ", "").Replace("p.a.", "").Replace(",", "").Replace("p.a", "").Replace("per annum.", "").Replace("per annum", "").Replace("=", "").Trim();
                                if (Vpay != "")
                                    strVariableCTC = Vpay.Replace(", ", "").Replace("p.a.", "").Replace(",", "").Replace("p.a", "").Replace("per annum.", "").Replace("per annum", "").Replace("=", "").Trim();
                            }
                            if (strPresentCTC.Trim().Length == 0) continue;
                            if (strPresentCTC.Trim().IndexOf("lacs") == 0)
                            {
                                //Variable Pay and present CTC
                                if (strPresentCTC.Contains("+"))
                                    Vpay = strPresentCTC.Remove(0, strPresentCTC.ToString().ToLower().IndexOf("+") + 3);

                                if (Vpay != "")
                                    strVariableCTC = Vpay.Replace("lacs", "");
                                strPresentCTC = strPresentCTC.Replace("lacs", "");
                            }
                            if ((strPresentCTC.Trim().IndexOf("lacs") >= 0) && strPresentCTC.Trim().IndexOf("thousand") < 0)
                            {
                                if (strPresentCTC.Contains("+"))
                                    Vpay = strPresentCTC.Remove(0, strPresentCTC.ToString().ToLower().IndexOf("+") + 1);

                                if (Vpay != "")
                                    strVariableCTC = Vpay.Trim().Replace("lacs", "");
                                strPresentCTC = strPresentCTC.Trim().Replace("lacs", "");
                            }
                            else if ((strPresentCTC.Trim().IndexOf("lacs") >= 0) && strPresentCTC.Trim().IndexOf("thousand") >= 0)
                            {
                                if (strPresentCTC.Contains("+"))
                                    Vpay = strPresentCTC.Remove(0, strPresentCTC.ToString().ToLower().IndexOf("+") + 1);
                                if (Vpay != "")
                                    strVariableCTC = ConvertStringDigit(Vpay);
                                strPresentCTC = ConvertStringDigit(strPresentCTC);
                            }

                            strVariableCTC = strVariableCTC.Trim().Replace("lacs", "");
                            strVariableCTC = strVariableCTC.Trim().Replace("thousand", "");

                            strPresentCTC = strPresentCTC.Replace(" ", "").Trim();
                            strVariableCTC = strVariableCTC.Replace(" ", "").Trim();
                            if (strPresentCTC.Trim().EndsWith(".")) strPresentCTC = strPresentCTC.Substring(0, strPresentCTC.Length - 1);
                            if (strVariableCTC.Trim().EndsWith(".")) strVariableCTC = strVariableCTC.Substring(0, strVariableCTC.Length - 1);

                            if (strPresentCTC.Trim().Length == 0) continue;
                            if (strPresentCTC.Trim().Length > 4 && strPresentCTC.Trim().IndexOf(".") < 0)
                            {
                                try
                                {
                                    if (Convert.ToDecimal(strPresentCTC) < 1000000000)
                                    {
                                        decimal d = Convert.ToDecimal(strPresentCTC) / 100000;
                                        strPresentCTC = Convert.ToString(d);
                                    }

                                }
                                catch
                                {
                                    strPresentCTC = "0";
                                }
                            }
                            //Variable Pay
                            if (strVariableCTC.Trim().Length > 4 && strVariableCTC.Trim().IndexOf(".") < 0)
                            {
                                try
                                {
                                    if (Convert.ToDecimal(strVariableCTC) < 1000000000)
                                    {
                                        decimal d = Convert.ToDecimal(strVariableCTC) / 100000;
                                        strVariableCTC = Convert.ToString(d);
                                    }

                                }
                                catch
                                {
                                    strVariableCTC = "0";
                                }
                            }
                            //For Bharat Benz -- Converting to Rupees If it's Lacs

                            if (strPresentCTC.Trim() != "")
                            {
                                try
                                {
                                    //FCommon.objfXMLCurrencyScale
                                    if (tFactor == "1.00")
                                    {
                                        decimal d = Convert.ToDecimal(strPresentCTC) * 100000;
                                        strPresentCTC = Convert.ToString(d);
                                    }

                                }
                                catch
                                {
                                    strPresentCTC = "0";
                                }
                            }
                            //For Bharat Benz -- Converting to Rupees If it's Lacs
                            if (strVariableCTC.Trim() != "")
                            {
                                try
                                {
                                    if (tFactor == "1.00")
                                    {
                                        decimal d = Convert.ToDecimal(strVariableCTC) * 100000;
                                        strVariableCTC = Convert.ToString(d);
                                    }
                                }
                                catch
                                {
                                    strVariableCTC = "0";
                                }
                            }


                            //Infosys
                            if (strExpectedCTC.Trim().Length > 4 && strExpectedCTC.Trim().IndexOf(".") < 0)
                            {
                                try
                                {
                                    if (Convert.ToDecimal(strExpectedCTC) < 1000000000)
                                    {
                                        decimal d = Convert.ToDecimal(strExpectedCTC) / 100000;
                                        strExpectedCTC = Convert.ToString(d);
                                    }
                                }
                                catch
                                {
                                    strExpectedCTC = "0";
                                }
                            }
                            //Infosys
                            //For Bharat Benz -- Converting to Rupees If it's Lacs
                            if (strExpectedCTC.Trim() != "")
                            {
                                try
                                {
                                    if (tFactor == "1.00")
                                    {
                                        decimal d = Convert.ToDecimal(strExpectedCTC) * 100000;
                                        strExpectedCTC = Convert.ToString(d);
                                    }

                                }
                                catch
                                {
                                    strExpectedCTC = "0";
                                }
                            }
                            if (CheckNumeric(strExpectedCTC.Trim().ToCharArray(), "CTC") == false)
                            {
                                this.ExpectedCTC = strExpectedCTC;
                                // break;
                            }
                            //Vavriable CTC 
                            if (CheckNumeric(strVariableCTC.Trim().ToCharArray(), "CTC") == false && this.VariableCTC == "")
                            {
                                this.VariableCTC = strVariableCTC;
                            }
                            if (CheckNumeric(strPresentCTC.Trim().ToCharArray(), "CTC") == false)
                            {
                                if (vPayFlg == true && strVariableCTC == "" && this.VariableCTC == "")
                                    this.VariableCTC = strPresentCTC;
                                else if (this.presentCTC == "")
                                    this.presentCTC = strPresentCTC;
                                break;
                            }
                            if (this.presentCTC.Length > 0 && this.VariableCTC.Length > 0)
                                break;
                        }
                        n = nInner;
                    }
                    //else
                    //{
                    //    //Variable pay
                    //}
                    //if (this.presentCTC.Length > 0)
                    //    break;
                    if (this.presentCTC.Length > 0 && this.VariableCTC.Length > 0)
                        break;
                }
            }
            catch { }
            finally
            {
                regCheckPresentSalary = null; regCheckPresentSalary1 = null; regCheckPresentSalary2 = null; regCheckPresentSalary3 = null;
            }
        }

        /// <summary>
        /// Getting Number and Lacs and thoushand from the strCTC string
        /// </summary>
        /// <param name="strCTC"></param>
        /// <returns></returns>
        private string opGetNumberWLakhs(string strCTC)
        {
            string strReturn = "";
            int iLacCnt = 0;
            string[] strSpaceSplit = strCTC.Replace(",", " ").Split(' ');
            for (int i = 0; i < strSpaceSplit.Length; i++)
            {
                if ((strSpaceSplit[i].Trim().IndexOf("lacs") >= 0 || strSpaceSplit[i].Trim().IndexOf("lac(s)") >= 0 || strSpaceSplit[i].Trim().IndexOf("lakhs") >= 0 || strSpaceSplit[i].Trim().IndexOf("lakh(s)") >= 0 || strSpaceSplit[i].Trim().IndexOf("lakh") >= 0) && iLacCnt <= 1)
                {
                    strReturn += " " + "lacs";
                    iLacCnt++;
                }
                if (strSpaceSplit[i].Trim().IndexOf("lpa") >= 0 || strSpaceSplit[i].Trim().IndexOf("pa") >= 0 || strSpaceSplit[i].Trim().IndexOf("per annum") >= 0) iLacCnt++;
                if (strSpaceSplit[i].Trim().IndexOf("thousand") >= 0)
                {
                    strReturn += " " + "thousand";
                    break;
                }
                string strRep = strSpaceSplit[i].Replace("lacs", "").Replace("lac(s)", "").Replace("lakh", "").Replace("lakhs", "").Replace("lakh(s)", "").Replace("thousands", "").Replace("thousand", "").Replace("/annum", "");
                if (strRep.Trim().Length == 0) continue;
                if (strRep.Trim().IndexOf("-") == 0 && strRep.Trim().Length == 1)
                    strReturn = "";

                if (CheckNumeric(strRep.Trim().ToCharArray(), "CTC") == false && iLacCnt <= 1)
                {
                    strReturn += " " + strRep.Trim();
                    iLacCnt++;
                    if (strCTC.ToLower().IndexOf("thousand") > 0) iLacCnt--;
                }
            }
            return strReturn;
        }
        /// <summary>
        /// Converting Character to Digits 
        /// eg:- 1 lacs 20 thousand convert it 120000
        /// </summary>
        /// <param name="strToConvert"></param>
        /// <returns></returns>
        private string ConvertStringDigit(string strToConvert)
        {
            string temp = "";
            string val = "";
            string word = strToConvert;
            string strDigit = "";
            int flag = 0;
            word = word.ToLower();
            string[] newword = word.Split(new char[] { ' ' });
            for (int i = 0; i < newword.Length; i++)
            {
                if ((newword[i] == "lac(s)") | (newword[i] == "lack") | (newword[i] == "lacs") | (newword[i] == "lakh") | (newword[i] == "lakhs") | (newword[i] == "lakh(s)"))
                {
                    i--;
                    val = newword[i];
                    break;
                }
            }

            for (int i = 0; i < newword.Length; i++)
            {
                if ((newword[i] == "thousand"))
                {
                    i--;
                    temp = newword[i];
                    if (temp.Length == 1)
                    {
                        val += 0;
                        val += newword[i];
                        flag = 1;
                        break;
                    }
                    else
                    {
                        val += newword[i];
                        flag = 1;
                        break;
                    }
                }
            }
            if (flag == 0)
            {
                strDigit = val + "00000";
            }
            if (flag == 1)
            {
                strDigit = val + "000";

            }
            return strDigit;
        }
        /// <summary>
        ///     step 1. Checking the String contain per month 
        ///     step 2. Checking the string Numeric 
        ///     step 3. returning the Expected CTC    /// </summary>
        /// <param name="tSalary"></param>
        /// <returns></returns>
        private string getSalary(string tSalary)
        {
            string tReturn = "";
            string tFactor = "1.00";
            try
            {
                if (tSalary.Trim().IndexOf("per month") >= 0 || tSalary.Trim().IndexOf(" pm") >= 0 || tSalary.Trim().IndexOf("/pm") >= 0 || tSalary.Trim().IndexOf("/-pm") >= 0 || tSalary.Trim().IndexOf("/month") >= 0)
                {
                    string strPMonth = "";
                    try
                    {

                        if (strPMonth == "")
                        {
                            strPMonth = tSalary.Trim().Trim().Replace("=", "").Replace("k", "000").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/ month", "(").Replace("/month", "(").Replace("/", "").Replace("-", "").Replace("inr", "");
                        }
                        decimal d = Convert.ToDecimal(strPMonth);
                        tSalary = Convert.ToString(d * 12);
                    }
                    catch
                    {
                        try
                        {
                            string[] aMonth = strPMonth.Split('(', ')');
                            for (int i = 0; i < aMonth.GetUpperBound(0); i++)
                            {
                                decimal d = Convert.ToDecimal(aMonth[i]);
                                tSalary = Convert.ToString(d * 12);
                            }

                        }
                        catch { }
                    }
                }
                if (tSalary.Trim().IndexOf("basic") >= 0)
                {
                    string strPMonth = "";
                    try
                    {
                        if (tSalary.Trim().IndexOf("basic") >= 0)
                        {
                            string tExpctc = "";
                            char[] ExpMax = { ':', '-', '/' };
                            tExpctc = tSalary.Trim().Trim().Replace("=", "").Replace("k", "000").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/ month", "(").Replace("/", "").Replace("inr", "").Replace("basic", "").Replace("£", "");
                            if (tExpctc != "")
                            {
                                string[] tLast = tExpctc.Split(ExpMax);
                                String tESal1 = "0";
                                String tESal2 = "0";
                                if (tLast.Length >= 2)
                                {
                                    tESal1 = tLast[0];
                                    tESal2 = tLast[1];
                                }
                                if (tLast.Length == 1)
                                {
                                    tESal1 = tLast[0];
                                }

                                if (Convert.ToInt64(tESal1) < Convert.ToInt64(tESal2))
                                    strPMonth = tESal2;
                                else
                                    strPMonth = tESal1;

                            }
                        }
                        if (strPMonth == "")
                        {
                            strPMonth = tSalary.Trim().Trim().Replace("=", "").Replace("k", "000").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/ month", "(").Replace("/month", "(").Replace("/", "").Replace("-", "").Replace("inr", "").Replace("basic", "").Replace("£", "");
                        }
                        decimal d = Convert.ToDecimal(strPMonth);
                        tSalary = Convert.ToString(d * 12);
                    }
                    catch
                    {
                        try
                        {
                            string[] aMonth = strPMonth.Split('(', ')');
                            for (int i = 0; i < aMonth.GetUpperBound(0); i++)
                            {
                                decimal d = Convert.ToDecimal(aMonth[i]);
                                tSalary = Convert.ToString(d * 12);
                            }

                        }
                        catch
                        {
                            tReturn = "";
                        }
                    }
                }
                if (tSalary.Trim().IndexOf("/-") >= 0)
                {
                    string[] strSplit = tSalary.Trim().Split('/', '-');
                    for (int i = 0; i <= strSplit.GetUpperBound(0); i++)
                    {
                        if (strSplit[i].Trim().Length > 0)
                        {
                            tSalary = strSplit[i].Trim();
                            break;
                        }
                    }
                }
                if (tSalary.StartsWith("page") == false)
                {
                    try
                    {
                        if (tSalary.IndexOf(" to ") >= 0)
                        {
                            string tSal = tSalary;
                            tSalary = tSalary.Remove(0, tSalary.IndexOf(" to ") + 3);
                            if (CheckNumeric(tSalary.Replace(", ", "").Replace(",", "").Replace("p.a.", "").Replace("p.a", "").Replace("per annum.", "").Replace("per annum", "").Replace("=", "").Trim().ToCharArray(), "") == false)
                            {
                                tSalary = tSal;
                                tSalary = tSalary.Remove(tSalary.IndexOf(" to "), tSalary.Length - tSalary.IndexOf(" to "));
                            }
                        }
                    }
                    catch { }
                    if (CheckNumeric(tSalary.Replace(", ", "").Replace(",", "").Replace("p.a.", "").Replace("p.a", "").Replace("per annum.", "").Replace("per annum", "").Replace("=", "").Trim().ToCharArray(), "") == true)
                        tSalary = opGetNumberWLakhs(tSalary.Trim().Replace("l", " l")).Trim().Replace("/annum", "");
                    else
                        tSalary = tSalary.Replace(", ", "").Replace(",", "").Replace("p.a.", "").Replace("p.a", "").Replace("per annum.", "").Replace("per annum", "").Replace("=", "").Trim();

                    if (tSalary.Trim().Length != 0)
                    {
                        if (tSalary.Trim().IndexOf("lacs") == 0)
                        {
                            tSalary = tSalary.Replace("lacs", "");
                        }
                        if ((tSalary.Trim().IndexOf("lacs") >= 0) && tSalary.Trim().IndexOf("thousand") < 0)
                            tSalary = tSalary.Trim().Replace("lacs", ".");
                        else if ((tSalary.Trim().IndexOf("lacs") >= 0) && tSalary.Trim().IndexOf("thousand") >= 0)
                            tSalary = ConvertStringDigit(tSalary);

                        tSalary = tSalary.Replace(" ", "").Trim();
                        if (tSalary.Trim().EndsWith(".")) tSalary = tSalary.Substring(0, tSalary.Length - 1);
                        if (tSalary.Trim().Length != 0)
                        {
                            if (tSalary.Trim().Length > 4 && tSalary.Trim().IndexOf(".") < 0)
                            {
                                try
                                {
                                    if (Convert.ToDecimal(tSalary) < 1000000000)
                                    {
                                        decimal d = Convert.ToDecimal(tSalary) / 100000;
                                        tSalary = Convert.ToString(d);
                                    }
                                }
                                catch
                                {
                                    tSalary = "0";
                                }
                            }

                            try
                            {
                                if (tSalary.Trim() != "")
                                {
                                    try
                                    {
                                        if (tFactor == "1.00")
                                        {
                                            decimal d = Convert.ToDecimal(tSalary) * 100000;
                                            tSalary = Convert.ToString(d);
                                        }
                                    }
                                    catch
                                    {
                                        tSalary = "0";
                                    }
                                }
                            }
                            catch { }
                            if (CheckNumeric(tSalary.Trim().ToCharArray(), "CTC") == false)
                            {
                                if (Convert.ToDecimal(tSalary) < 1000000000)
                                    tReturn = tSalary;
                                else
                                    tReturn = "";
                            }
                        }
                    }
                }
            }
            catch
            {
                tReturn = "";
            }
            return tReturn;

        }
        /// <summary>
        /// Fetching Expected Salary
        /// step 1. Creating regualr expression
        /// step 2. Matching the string
        /// step 3. Match Found them 
        ///     step 1. Checking the String contain per month 
        ///     step 2. Checking the string Numeric 
        ///     step 3. Storing the Expected CTC
        /// </summary>

        private void ExpSalary()
        {
            Regex regCheckPresentSalary = null, regCheckPresentSalary1 = null, regCheckPresentSalary2 = null, regCheckPresentSalary3 = null;
            try
            {
                //Salary Expectation
                string tCheckPresentSalary = @"expected cost to company \(ctc\)|expected cost to company|Escalation|expected salary \(per annum in rupee\)|expected salary \(per annum in rupees\)|EXPECTED SALARY \(IN RUPEES PER ANNUM\)|Salary Expectations|salary expected|expected ctc|expected ctc:|expected salary|ectc|expected annual salary|expected salary package|desired salary|expected remuneration|expected salary";
                //string tCheckLast = "(in lacks per annum)|hike|lpa|thousand|lacs|lac(s)|lac |lakhs|lakh(s)|lakh|/annum|/ annum|/pm|/-pm|/ pm|/- pm|/ - pm| pm |/- p.a|/-p.a|/- p/a|/month|p.a| inr |increase|(per annum in rupees)|per month|per annum|per month.|notice period|time required to join|minimum time to join|role| n a ";
                Regex exExpected = new Regex(@"[\s,\{“‘\(\.](" + tCheckPresentSalary + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex exExpected1 = new Regex(@"[\s,\{“‘\(\.](" + tCheckPresentSalary + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);

                tExpCTC = false;
                presentCTC = "";
                this.ExpectedCTC = "";
                //string tCheckPresentSalary = "(Gross figures in € per annum)|Present Gross Emoluments:|salary:   ctc|cost to company (per annum)|ctc – cost to the company|cost to company|current ctc|current salary|current annual salary|present salary package|present ctc|present salary|last salary drawn|salary-ctc|salary drawn|last ctc|ctc:|ctc details|present emoluments:|current compensation|present remuneration|annual salary|CURRENT REMUNERATION ";
                regCheckPresentSalary = new Regex(@"[\s,\(\:](" + tCheckPresentSalary + @")[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                regCheckPresentSalary1 = new Regex(@"[\s,\(\:](" + tCheckPresentSalary + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
                regCheckPresentSalary2 = new Regex(@"[\s,\(\:]([\w\d]\))?(" + tCheckPresentSalary + @")[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                regCheckPresentSalary3 = new Regex(@"[\s,\(\:]([\w\d]\))?(" + tCheckPresentSalary + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
                string[] aCheckPresentSalary = tCheckPresentSalary.Split('|');
                string strPresentCTC = "";
                string strExpectedCTC = "";
                for (int n = 0; n < this.DataLines.Length; n++)
                {
                    if (this.DataLines[n] == null || this.DataLines[n].Length == 0) continue;
                    string tMatchString = this.DataLines[n].Trim().ToLower();
                    int iflag = 0;
                    if (opFindMatch(this.DataLines[n], regCheckPresentSalary, regCheckPresentSalary1) == 1 || opFindMatch(this.DataLines[n], regCheckPresentSalary2, regCheckPresentSalary3) == 1 || tMatchString.ToLower().IndexOf("ctc") == 0)
                        iflag = 1;
                    if (iflag == 1)
                    {
                        int nInner = 0;
                        for (nInner = n; (nInner <= n + 2 && nInner < this.DataLines.Length); nInner++)
                        {
                            if (this.DataLines[nInner].Trim().ToLower().IndexOf("present ctc:-n a") > 0 || this.DataLines[nInner].Trim().ToLower().IndexOf("mobile") > 0 || this.DataLines[nInner].Trim().ToLower().IndexOf("present ctc") > 0 || this.DataLines[nInner].Trim().ToLower().IndexOf("ectc:") > 0 | this.DataLines[nInner].Trim().ToLower().IndexOf("present:") > 0) break;
                            strPresentCTC = this.DataLines[nInner].Trim().ToLower().Replace("escalation", "").Replace("salary expectations", "").Replace("expected salary (per annum in rupees): neg", "").Replace("expected salary (per annum in rupees)", "").Replace("expected salary (rs. in lacs):", "").Replace("expected salary (rs. in lacs", " ").Replace("expected salary (in rupees per annum)", "").Replace("expected salary (in rupees per annum", "").Replace("expected salary (rs. in lacs", " ").Replace("expected salary (per annum)", "").Replace("expected salary (per annum", "").Replace("expected ctc:-n a", ":").Replace("salary expected", ":").Replace("expected ctc", ":").Replace("ectc:", ":").Replace("expected ctc:-", ":").Replace("expected ctc: -", ":").Replace("expected ctc—", ":").Replace("1. expected ctc", ":").Replace("2.  expected ctc", ":").Replace("expected ctc", ":").Replace("expected salary", ":").Replace("rs.", "").Replace("rs", "").Replace("salary-ctc", ":").Replace("expected:", ":").Replace("ctc.", ":").Replace(" - reimbuement allowances on actual", "").Replace("reimbursement allowances on actual", "").Replace("tctc-", ":").Replace("tctc", ":").Replace("ctc", ":").Replace("(in lacks per annum)", "").Replace("(in lacks per annum", "").Replace("lpa", " lpa").Replace("lakh+", " lakh").Replace("¨", "").Replace("basic", "").Replace("£", "").Replace("gross figures in € per annum", "");
                            string[] strSplit1 = strPresentCTC.Split(':');
                            strPresentCTC = strSplit1[strSplit1.GetUpperBound(0)];
                            if (strPresentCTC.Trim().Length == 0) continue;

                            if (this.DataLines[nInner].ToString().Trim() == "(Gross figures in € per annum)")
                            {
                                string strPMonth = "";
                                if (this.DataLines[nInner].Trim().Trim().IndexOf("(Gross figures in € per annum)") >= 0)
                                {
                                    tExpCTC = true;
                                    string tExpctc = "";
                                    string MonthSalary = "0";
                                    char[] ExpMax = { ':', '-', '/' };
                                    String tESal1 = "0";
                                    String tESal2 = "0";
                                    if ("Present/Last drawn" != this.DataLines[nInner + 1].ToString().Trim())
                                    {
                                        if (this.DataLines[nInner + 1].ToLower().IndexOf("month") > 0 || this.DataLines[nInner + 1].ToLower().IndexOf("months") > 0)
                                        {
                                            MonthSalary = "1";
                                        }
                                        tExpctc = this.DataLines[nInner + 1].Trim().Trim().Trim().Replace("=", "").Replace("k", "").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/ month", "(").Replace("/", "").Replace("inr", "").Replace("basic", "").Replace("£", "").Replace("Equivalent to", "").Replace("€", "").Replace("$", "").Replace("per annum", "").Replace("pa", "");
                                        tExpctc = tExpctc.Replace(" ", "").Replace(",", "");
                                        if (tExpctc != "")
                                        {
                                            string[] tLast = tExpctc.Split(ExpMax);

                                            if (tLast.Length >= 2)
                                            {
                                                tESal1 = tLast[0];
                                                tESal2 = tLast[1];
                                            }

                                            if (tLast.Length == 1)
                                                tESal1 = tLast[0];

                                            if (Convert.ToInt64(tESal1) < Convert.ToInt64(tESal2))
                                                strPMonth = tESal2;
                                            else
                                                strPMonth = tESal1;
                                            if (MonthSalary == "1")
                                            {
                                                decimal d = Convert.ToDecimal(strPMonth);
                                                strPresentCTC = Convert.ToString(d * 12);
                                            }
                                            else
                                            {
                                                strPresentCTC = strPMonth.ToString();
                                            }
                                            // break;
                                        }

                                    }

                                    if ("Present/Last drawn" != this.DataLines[nInner + 2].ToString().Trim())
                                    {
                                        tExpctc = this.DataLines[nInner + 2].Trim().Trim().Trim().Replace("=", "").Replace("k", "").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/ month", "(").Replace("/", "").Replace("inr", "").Replace("basic", "").Replace("£", "").Replace("Equivalent to", "").Replace("$", "").Replace("€", "").Replace("Above", "").Replace("pa", "").Replace("Negotiable", "").Replace("plus", "");
                                        tExpctc = tExpctc.Replace(" ", "").Replace(",", "");
                                        if (tExpctc != "")
                                        {
                                            MonthSalary = "0";
                                            if (this.DataLines[nInner + 1].ToLower().IndexOf("month") > 0 || this.DataLines[nInner + 1].ToLower().IndexOf("months") > 0)
                                            {
                                                MonthSalary = "1";
                                            }

                                            string[] tLast = tExpctc.Split(ExpMax);
                                            tESal1 = "0";
                                            tESal2 = "0";
                                            if (tLast.Length >= 2)
                                            {
                                                tESal1 = tLast[0];
                                                tESal2 = tLast[1];
                                            }

                                            if (tLast.Length == 1)
                                                tESal1 = tLast[0];

                                            if (Convert.ToInt64(tESal1) < Convert.ToInt64(tESal2))
                                                strPMonth = tESal2;
                                            else
                                                strPMonth = tESal1;
                                            if (MonthSalary == "1")
                                            {
                                                decimal d = Convert.ToDecimal(strPMonth);
                                                strExpectedCTC = Convert.ToString(d * 12);
                                            }
                                            else
                                            {
                                                strExpectedCTC = strPMonth.ToString();
                                            }
                                            // break;
                                        }

                                    }



                                }

                            }

                            if (strPresentCTC.Trim().IndexOf("per month") >= 0 || strPresentCTC.Trim().IndexOf(" pm") >= 0 || strPresentCTC.Trim().IndexOf("/pm") >= 0 || strPresentCTC.Trim().IndexOf("/-pm") >= 0 || strPresentCTC.Trim().IndexOf("basic") >= 0)
                            {
                                try
                                {
                                    string strPMonth = strPresentCTC.Trim().Trim().Replace("k", "000").Replace("=", "").Replace("+", "").Replace("per month.", "").Replace("per month", "").Replace("pm", "").Replace("/", "").Replace("-", "").Replace("inr", "").Replace("basic", "");
                                    decimal d = Convert.ToDecimal(strPMonth);
                                    strPresentCTC = Convert.ToString(d * 12);
                                }
                                catch
                                { }
                            }
                            if (strPresentCTC.Trim().IndexOf("/-") >= 0)
                            {
                                string[] strSplit = strPresentCTC.Trim().Split('/', '-');
                                for (int i = 0; i <= strSplit.GetUpperBound(0); i++)
                                {
                                    if (strSplit[i].Trim().Length > 0)
                                    {
                                        strPresentCTC = strSplit[i].Trim();
                                        break;
                                    }
                                }
                            }
                            if (CheckNumeric(strPresentCTC.Replace(", ", "").Replace(",", "").Replace("p.a.", "").Replace("p.a", "").Replace("=", "").Replace("per annum.", "").Replace("per annum", "").Trim().ToCharArray(), "") == true)
                                strPresentCTC = opGetNumberWLakhs(strPresentCTC.Trim().Replace("l", " l")).Trim().Replace("/annum", "");
                            else
                                strPresentCTC = strPresentCTC.Replace(", ", "").Replace("p.a.", "").Replace(",", "").Replace("p.a", "").Replace("per annum.", "").Replace("per annum", "").Replace("=", "").Trim();
                            if (strPresentCTC.Trim().Length == 0) continue;
                            if (strPresentCTC.Trim().IndexOf("lacs") == 0)
                            {
                                strPresentCTC = strPresentCTC.Replace("lacs", "");
                            }
                            if ((strPresentCTC.Trim().IndexOf("lacs") >= 0) && strPresentCTC.Trim().IndexOf("thousand") < 0)
                                strPresentCTC = strPresentCTC.Trim().Replace("lacs", ".");//.Replace("lac(s)",".").Replace("lack",".").Replace("lakhs",".").Replace("lakh(s)",".").Replace("lakh",".");
                            else if ((strPresentCTC.Trim().IndexOf("lacs") >= 0) && strPresentCTC.Trim().IndexOf("thousand") >= 0)
                                strPresentCTC = ConvertStringDigit(strPresentCTC);
                            strPresentCTC = strPresentCTC.Replace(" ", "").Trim();
                            if (strPresentCTC.Trim().EndsWith(".")) strPresentCTC = strPresentCTC.Substring(0, strPresentCTC.Length - 1);
                            if (strPresentCTC.Trim().Length == 0) continue;
                            if (strPresentCTC.Trim().Length > 4 && strPresentCTC.Trim().IndexOf(".") < 0)
                            {
                                try
                                {
                                    decimal d = Convert.ToDecimal(strPresentCTC) / 100000;
                                    strPresentCTC = Convert.ToString(d);
                                }
                                catch
                                {
                                    strPresentCTC = "0";
                                }
                            }
                            //Infosys
                            if (strExpectedCTC.Trim().Length > 4 && strExpectedCTC.Trim().IndexOf(".") < 0)
                            {
                                try
                                {
                                    if (Convert.ToDecimal(strExpectedCTC) < 1000000000)
                                    {
                                        decimal d = Convert.ToDecimal(strExpectedCTC) / 100000;
                                        strExpectedCTC = Convert.ToString(d);
                                    }

                                }
                                catch
                                {
                                    strExpectedCTC = "0";
                                }
                            }
                            if (CheckNumeric(strExpectedCTC.Trim().ToCharArray(), "CTC") == false)
                            {
                                //this.ExpectedCTC = strExpectedCTC;
                                // break;
                            }
                            //Infosys
                            if (CheckNumeric(strPresentCTC.Trim().ToCharArray(), "CTC") == false)
                            {
                                this.ExpectedCTC = strPresentCTC;
                                break;
                            }

                            if (this.ExpectedCTC.Length > 0)
                                break;
                        }
                        n = nInner;
                    }
                    if (this.ExpectedCTC.Length > 0)
                        break;
                }
            }
            catch { }
            finally
            {
                regCheckPresentSalary = null; regCheckPresentSalary1 = null; regCheckPresentSalary2 = null; regCheckPresentSalary3 = null;
            }
        }

        private void ExpectedSalary()
        {
            try
            {
                string tSearchText = ResumeConvertedText;
                if (tExpCTC == false)
                {
                    this.ExpectedCTC = "";
                    int nCnt = 0;
                    Regex rgcNotExSalary = new Regex(@"(notice period|pin code|yea experience|year experience|helpdesk|present|7 x 24)", RegexOptions.IgnoreCase);

                    string tCheckPresentSalary = @"Expected:|expected cost to company \(ctc\)|expected cost to company|Escalation|expected salary \(per annum in rupee\)|expected salary \(per annum in rupees\)|EXPECTED SALARY \(IN RUPEES PER ANNUM\)|Salary Expectations|salary expected|expected ctc|expected ctc:|expected salary|ectc|expected annual salary|expected salary package|desired salary|expected remuneration|Salary Expectation|Expected salary|Expected compensation|ECTC|Expected Remuneration|Expected CTC|expected salary|Expect salary|expected  salary";
                    string tCheckLast = "(in lacks per annum)|hike|lpa|thousand|lacs|lac(s)|lac |lakhs|lakh(s)|lakh|/annum|/ annum|/pm|/-pm|/ pm|/- pm|/ - pm| pm |/- p.a|/-p.a|/- p/a|/month|p.a| inr |increase|(per annum in rupees)|per month|per annum|per month.|notice period|time required to join|minimum time to join|role| n a | INR|w/y";
                    Regex exExpected = new Regex(@"[\s,\{“‘\(\.](" + tCheckPresentSalary + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                    Regex exExpected1 = new Regex(@"[\s,\{“‘\(\.](" + tCheckPresentSalary + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);
                    MatchCollection mtch = exExpected.Matches(" " + tSearchText.Trim());
                    if (mtch.Count == 0) mtch = exExpected1.Matches(" " + tSearchText.Trim());
                    StringBuilder tExpectedctc = new StringBuilder();
                    string strExpectedCTC = "";
                    int posStart = 0; int posEnd = 0;
                    nCnt = mtch.Count;
                    string tMatchValue = "";
                    double cnttst = 0;
                    foreach (Match m in mtch)
                    {
                        if (nCnt == 2)
                        {
                            nCnt--; continue;
                        }
                        cnttst += 1;
                        if (m.Value.Trim().Length == 0) continue;
                        posStart = m.Index;
                        posEnd = 20 + m.Value.Trim().Length;
                        string[] tLast = tCheckLast.Split('|');
                        int iIndex = -1;
                        tMatchValue = m.Value.Trim();
                        for (int i = 0; i <= tLast.GetUpperBound(0); i++)
                        {
                            int iLast = 0;
                            iIndex = tSearchText.ToLower().IndexOf(tLast[i], posStart);
                            if (iIndex != -1)
                            {
                                iIndex += tLast[i].Length;
                                if (iIndex != -1)
                                {
                                    iIndex = iIndex - posStart;
                                    iLast = iIndex;
                                    if (iLast >= tSearchText.Trim().Length)
                                        iLast = tSearchText.Trim().Length - 1;
                                    tExpectedctc.Append(tSearchText.Trim().Substring(posStart, iLast).ToLower());
                                    tExpectedctc.Replace("escalation", "").Replace("salary expectations", "").Replace("expected salary (per annum in rupees): neg", "").Replace("expected salary (per annum in rupees)", "").Replace("expected salary (rs. in lacs):", "").Replace("expected salary (rs. in lacs", " ").Replace("expected salary (in rupees per annum)", "").Replace("expected salary (in rupees per annum", "").Replace("expected salary (rs. in lacs", " ").Replace("expected salary (per annum)", "").Replace("expected salary (per annum", "").Replace("expected ctc:-n a", ":").Replace("salary expected", ":").Replace("expected ctc", ":").Replace("ectc:", ":").Replace("expected ctc:-", ":").Replace("expected ctc: -", ":").Replace("expected ctc—", ":").Replace("1. expected ctc", ":").Replace("2.  expected ctc", ":").Replace("expected ctc", ":").Replace("expected salary", ":").Replace("rs.", "").Replace("rs", "").Replace("salary-ctc", ":").Replace("expected:", ":").Replace("ctc.", ":").Replace(" - reimbuement allowances on actual", "").Replace("reimbursement allowances on actual", "").Replace("tctc-", ":").Replace("tctc", ":").Replace("ctc", ":").Replace("(in lacks per annum)", "").Replace("(in lacks per annum", "").Replace("lpa", " lpa").Replace("lakh+", " lakh").Replace("¨", "").Replace("basic", "").Replace("£", "").Replace("gross figures in € per annum", "").Replace("S$", "").Replace("w/y", " ");
                                    if (tExpectedctc.ToString().Trim().Length > 0) break;
                                }
                                //break;
                            }
                        }
                        if (tExpectedctc.ToString().Trim().Length == 0)
                        {
                            if (posEnd >= tSearchText.Trim().Length)
                                posEnd = tSearchText.Trim().Length - 1;
                            try
                            {
                                tExpectedctc.Append(tSearchText.Trim().Substring(posStart, posEnd).ToLower());
                                tExpectedctc.Replace("salary expectations", "").Replace("expected ctc:-n a", ":").Replace("expected ctc", ":").Replace("ectc:", ":").Replace("expected ctc:-", ":").Replace("expected ctc: -", ":").Replace("expected ctc—", ":").Replace("1. expected ctc", ":").Replace("2.  expected ctc", ":").Replace("expected ctc", ":").Replace("expected salary", ":").Replace("rs.", "").Replace("rs", "").Replace("salary-ctc", ":").Replace("expected:", ":").Replace("ctc.", ":").Replace(" - reimbuement allowances on actual", "").Replace("reimbursement allowances on actual", "").Replace("tctc-", ":").Replace("tctc", ":").Replace("ctc", ":").Replace("(in lacks per annum)", "").Replace("lpa", " lpa").Replace("lakh+", " lakh").Replace("¨", "").Replace("S$", "");
                            }
                            catch
                            {
                                if (posEnd > 10)
                                    tExpectedctc.Append(tSearchText.Trim().Substring(posStart, posEnd - 5).ToLower());
                                tExpectedctc.Replace("salary expectations", "").Replace("expected ctc:-n a", ":").Replace("expected ctc", ":").Replace("ectc:", ":").Replace("expected ctc:-", ":").Replace("expected ctc: -", ":").Replace("expected ctc—", ":").Replace("1. expected ctc", ":").Replace("2.  expected ctc", ":").Replace("expected ctc", ":").Replace("expected salary", ":").Replace("rs.", "").Replace("rs", "").Replace("salary-ctc", ":").Replace("expected:", ":").Replace("ctc.", ":").Replace(" - reimbuement allowances on actual", "").Replace("reimbursement allowances on actual", "").Replace("tctc-", ":").Replace("tctc", ":").Replace("ctc", ":").Replace("(in lacks per annum)", "").Replace("lpa", " lpa").Replace("lakh+", " lakh").Replace("¨", "").Replace("S$", "");
                            }
                        }
                    }
                    if (tExpectedctc.ToString().IndexOf("negotiable") < 0 && tExpectedctc.ToString().IndexOf("expected ctc:-n a") < 0 && tExpectedctc.ToString().IndexOf("not disclosed") < 0 && tExpectedctc.ToString().IndexOf(" n a ") < 0) // && tExpectedctc.ToString().IndexOf("il") < 0 && tExpectedctc.ToString().IndexOf("%") != 1  present
                    //if (tExpectedctc.ToString().IndexOf("negotiable") < 0 && tExpectedctc.ToString().IndexOf("expected ctc:-n a") < 0 && tExpectedctc.ToString().IndexOf("not disclosed") < 0 && tExpectedctc.ToString().IndexOf("%") < 0)
                    {
                        string[] strSplit1 = tExpectedctc.ToString().Split(':', Convert.ToChar(13), Convert.ToChar(11), Convert.ToChar(9));
                        for (int i = 0; i <= strSplit1.GetUpperBound(0); i++)
                        {
                            strExpectedCTC = strSplit1[i].Trim();
                            if (strExpectedCTC.Trim().Length == 0) continue;
                            if (rgcNotExSalary.IsMatch(strExpectedCTC.ToLower()) == true) break;
                            strExpectedCTC = getSalary(strExpectedCTC);
                            if (strExpectedCTC.Trim().Length == 0) continue;
                            this.ExpectedCTC = strExpectedCTC;
                            break;
                        }
                    }
                }
            }
            catch { }
        }
        #endregion

        #region "contact number"
        /// <summary>
        /// Fetching the Numbers only from "str"
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private string opGetNumberOnly(string str)
        {
            string str1 = "";
            str = str.ToLower().Replace("(r )", ",").Replace("(m )", ",").Replace("(r)", "").Replace("(m)", "").Replace("(R)", ",").Replace("(M)", ",").Replace("®", ",").Replace("(mobile)", ",").Replace("(office)", ",").Replace("(ll)", ",").Replace("-", "").Replace(".", "").Replace("(res)", ",").Trim();

            if (str.Length < 5)
                return "";

            if (str.StartsWith(",") == true)
                str = str.Substring(1, str.Length - 1);

            try
            {
                int FalgCountChar = 0;
                char[] chStr = str.ToCharArray();
                for (int c = 0; c < chStr.Length; c++)
                {
                    FalgCountChar++;
                    if (str1.Length > 1 & str1.Length < 6)
                        if (FalgCountChar > 6)
                            return "";

                    for (int j = 48; j <= 57; j++)
                    {
                        if (str1.StartsWith(",") == true)
                            str1 = str1.Substring(1, str1.Length - 1);

                        if (chStr[c].ToString() == Convert.ToChar(j).ToString())
                        {
                            FalgCountChar = 0;
                            str1 = str1 + chStr[c].ToString();
                        }

                        if (chStr[c].ToString() == Convert.ToChar(44).ToString())
                            str1 = str1 + Convert.ToChar(44).ToString();

                        /////Checking for date

                        if (str1.StartsWith("91") == true || str1.StartsWith("0091") == true || str1.StartsWith("091") == true || str1.StartsWith("659") == true || str1.Trim().StartsWith("0097150") == true || str1.Trim().StartsWith("00971050") == true || str1.Trim().StartsWith("97150") == true || str1.Trim().StartsWith("971050") == true || str1.Trim().StartsWith("0097155") == true || str1.Trim().StartsWith("00971055") == true || str1.Trim().StartsWith("97155") == true || str1.Trim().StartsWith("971055") == true || str1.Trim().StartsWith("0097156") == true || str1.Trim().StartsWith("00971056") == true || str1.Trim().StartsWith("97156") == true || str1.Trim().StartsWith("971056") == true)
                        {
                            //  str1 = str1.Replace("0091", "91").Replace("091", "91");
                            if (str1.IndexOf("0091") < 2)
                                str1 = str1.Replace("0091", "91");
                            if (str1.IndexOf("091") < 2)
                                str1 = str1.Replace("091", "91");
                            continue;
                        }

                        if (chStr[c].ToString() == Convert.ToChar(45).ToString())
                            if ((c - 3) >= 0)
                                if (chStr[c - 3].ToString() == Convert.ToChar(45).ToString())
                                    return "";

                        if (chStr[c].ToString() == Convert.ToChar(46).ToString())
                            if ((c - 3) >= 0)
                                if (chStr[c - 3].ToString() == Convert.ToChar(46).ToString())
                                    return "";
                        if (chStr[c].ToString() == Convert.ToChar(47).ToString())
                            if ((c - 3) >= 0)
                                if (chStr[c - 3].ToString() == Convert.ToChar(47).ToString())
                                    return "";

                        if (chStr[c].ToString() == Convert.ToChar(95).ToString())
                            if ((c - 3) >= 0)
                                if (chStr[c - 3].ToString() == Convert.ToChar(95).ToString())
                                    return "";

                        if (chStr[c].ToString() == Convert.ToChar(92).ToString())
                            if ((c - 3) >= 0)
                                if (chStr[c - 3].ToString() == Convert.ToChar(92).ToString())
                                    return "";
                    }
                }
            }
            catch { }
            if (str1.Length > 5)
            {
                if (str1.Length == 8)
                {
                    if (str1.StartsWith("19") == true || str1.StartsWith("20") == true)
                        return "";
                    else
                        return str1;
                }
                else
                    return str1;
            }
            else
                return "";
        }
        /// <summary>
        /// Get the Candidate Phone and Mobile from DAtaLines
        /// </summary>
        private void GetContact()
        {
            mobile = "";
            phone = "";
            StringBuilder sbPhone = null, sbMobile = null;
            try
            {
                sbPhone = new StringBuilder();
                sbMobile = new StringBuilder();
                char[] SetPhone = { ':', '/', ';', ',', '’', '‘', '.', '•', '\\', '&', '*', '|', '—' };
                char[] SetCommaSemi = { ':', ';', ',', '’', '‘', '.', '•', '\\', '&', '*', '|', '–', '/' };
                char[] aComma = { ',' };
                string[] strPhoneNo1;
                string strphoneNo = "";

                Regex re = new Regex("[0-9]{6,11}");
                Regex re2 = new Regex(@"[\s,\(](Contact:|H:|M:|Phone:|TEL.|Tel.:|MOBILE:|Telephone number:|Cell:|Cel. Number|Landline:|Cel. Phone:|CONTACT NOS|residential phone numbers|Hello #|Fixed Line| res|contact –|residence no|Cell #|Cell#|cell no|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|Home-|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|resi|mobile|cell|cell-|\(cell\)|\(home\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |voice|gsm|resi|\(resi\)|\(P\)|\(p\)|\(r\)|resi |res|Contact#:)[,:\s]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex re3 = new Regex(@"[\s,\(](Contact:|M:|H:|Phone:|TEL.|Tel.:|MOBILE:|Telephone number:|Cell:|Cel. Number|Landline:|Cel. Phone:|residential phone numbers|Hello #|Fixed Line|res|residence|contact|contact –|residence no|residence -|Cell #|Cell#|cell no|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|Home-|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact. no.:|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|resi|mobile|cell|cell-|\(cell\)|\(home\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |voice|gsm|resi|\(resi\)|\(p\)|\(r\)|resi |res|Contact#)[,:\s]?[\s]?$", RegexOptions.IgnoreCase);
                Regex re4 = new Regex(@"Contact:|M:|H:|Phone:|TEL.|Tel.:|MOBILE:|Telephone number:|Cell:|Cel. Number|Landline:|Cel. Phone:|CONTACT NOS :|Contact#:|Personal Reach:|contact:|contact –|contact |contacts |contacts:|residence:|residence :| m:|\+919|\+91 9|91-9|\+91 - 9| 919|0 9|91-| 091| 093| 094| 095| 096| 097| 098|\(\+91\)|\+91-9|\+917|\+91 7|91-7|\+91 - 7| 917|0 7|91-| 071| 073| 074| 075| 076| 077| 078|\+91-7|\+918|\+91 8|91-8|\+91 - 8| 918|0 8|91-| 081| 083| 084| 085| 086| 088| 088|\+91-8|ph:|ph :|ph  :|residence -|Home-|home:|residential phone numbers|Hello #|Fixed Line|contact –|residence no|Cell #|Cell#|cell no|Ph#|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|\(r\)|\(res\)|\(h\)|landline|Telephone|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel no|phone no|tel no.|tel-|\(tel\)|tel no|res \#|mobile|cell-|\(cell\)|\(m\)|cellular|\(home\)|\(mob\)|mob-|mob:|gsm:|\(resi\)|\(P\)|\(p\)|\(r\)|\(m\)|mo\.-|CALL:|HP:|((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}", RegexOptions.IgnoreCase); //(0120) 2740822 ((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}
                Regex re5 = new Regex(@"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$", RegexOptions.IgnoreCase);
                //Regex regmobformate = new Regex("(\\d)(\\d)(\\s+)(\\d)(\\d)(\\s+)(\\()(\\d)(\\))(\\d)(\\d)(\\d)(\\d)", RegexOptions.IgnoreCase);
                Regex regmobformate = new Regex("(\\d+)(\\s+)(\\d+)(\\s+)(\\()(\\d+)(\\))(\\d+)|(\\d{3})(\\s+)(–)(\\s+)(\\d{3})(\\s+)(–)(\\s+)(\\d{4})|(\\d{3})(-|–|-)(\\d{3})(-|–|-)(\\d{4})", RegexOptions.IgnoreCase);  //973 – 714 – 5752  //585-469-6458 ////773-226-2919

                //973 – 714 – 5752
                Regex MobFomat1 = new Regex(@"^[\\(]{0,1}([0-9]){3}[\\)]{0,1}[ ]?([^0-1]){1}([0-9]){2}[ ]?[-]?[ ]?([0-9]){4}[ ]*((x){0,1}([0-9]){1,5}){0,1}");
                Regex Mobfrm = new Regex("(\\d{3})(\\.)(\\d{3})(\\.)(\\d{4})|(\\()(\\d{3})(\\))(\\s+)(\\d{3})(\\s+)(\\d{4})|(\\d{3})(\\s+)(\\d{3})(\\s+)(\\d{4})|(\\()(\\d{3})(\\))(\\s+)(\\d{3})(\\s+)(-)(\\s+)(\\d{4})|(\\()(\\d{3})(\\))(\\s+)(\\d{3})(-)(\\d{4})|(\\()(\\d{3})(\\))(\\d{3})(-)(\\d{4})|(\\()(\\d{3})(\\))(\\s+)(\\d{7})|(\\d{3})(-|–|-)(\\d{3})(-|–|-)(\\d{4})"); //"(607) 624 - 3627 (949) 701 8168"   "734 353 0203"   
                Regex MobFormat2 = new Regex("(\\+)(\\d)(\\d)(\\.)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)");

                //(718) 607-3735  
                int phNotFlag = 0;
                Match mtchPhone = null, MtchMobile = null;
                Regex reMobile = new Regex(@"Contact:|M:|MOBILE:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular");
                string tReplaceMobilePattern = @"M:|MOBILE:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular";
                Regex rePhone = new Regex(@"H:|Phone:|TEL.|Tel.:|Telephone number:|residential phone numbers|Landline:|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|ph:|ph :|ph  :|residence -|Home-|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\)");
                string tReplacePhonePattern = @"H:|Phone:|TEL.|Tel.:|Telephone number:|residential phone numbers|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|ph:|ph :|ph  :|residence -|Home-|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\)";
                Regex reMobile1 = new Regex(@"(M:|MOBILE:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular)[\s]?\d{3}-\d{3}[\/]\d{3}-\d{4}");
                Regex rePhone1 = new Regex(@"(H:|Phone:|TEL.|Tel.:|Telephone number:|Landline:|residential phone numbers|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|ph:|ph :|ph  :|residence -|Home-|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\))[\s]?\d{3}-\d{3}[\/]\d{3}-\d{4}|\(\d{4}\)\s\d{7}(\s|$)"); ////(0120) 2740822  (\d{4})\s\d{7}

                bool bIsReference = false;
                for (int cnt = 0; cnt < this.DataLines.Length; cnt++)
                {
                    if (this.DataLines[cnt].Trim().Length > 0)
                    {
                        if (((this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERENCES") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("referee") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("referees") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("referees:") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERALS OF") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFRENCES") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERENCE") == 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf(":¢REFERANCE:") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("reference:") >= 0) || ((this.DataLines[cnt].Trim().ToLower().IndexOf("reference :") >= 0)) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references :") >= 0) || this.DataLines[cnt].Trim().ToLower().IndexOf("selected publications:") >= 0 || (this.DataLines[cnt].Trim().ToLower().IndexOf("references:") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("character and work references") >= 0)) && ((this.DataLines[cnt].Trim().ToLower().IndexOf("location preference:") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("preference") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("preferences") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("location preference") < 0) && (this.DataLines[cnt].Trim().IndexOf("Contact Details") < 0)))
                        {
                            if (cnt >= (DataLines.Length / 2))
                            {
                                //Logic For After Searching Reference Details - Saravana
                                for (int ct = cnt; ct < this.DataLines.Length; ct++)
                                {
                                    if (regPersonal.IsMatch(" " + this.DataLines[ct].Trim()) == true)
                                    {
                                        bIsReference = true;
                                        cnt = ct;
                                        continue;
                                    }
                                }
                                if (bIsReference == false)
                                    break;
                            }
                            else
                                continue;
                        }
                        //Employer Experience Skipping for Parsing Contact Number
                        if (iExpStart > 0 && iExpEnd > 0)
                            if ((iExpStart <= cnt && cnt <= iExpEnd))
                                continue;
                        if (cnt - 1 > 1 && this.DataLines[cnt - 1].Contains("SELF")) continue;
                        phNotFlag = opFindMatch(this.DataLines[cnt].Trim(), regPhoneNot, regPhoneNot1);

                        if (phNotFlag == 1) continue;
                        Match mtch = re2.Match(" " + this.DataLines[cnt].Trim().ToLower());
                        if (!mtch.Success)
                            mtch = re3.Match(" " + this.DataLines[cnt].Trim().ToLower());
                        if (!mtch.Success)
                            mtch = re4.Match(this.DataLines[cnt].Trim());
                        if (!mtch.Success)
                            mtch = re5.Match(this.DataLines[cnt].Trim());
                        if (!mtch.Success)
                            mtch = re.Match(this.DataLines[cnt].Trim());
                        if (this.DataLines[cnt].Length < 60)
                        {
                            if (!mtch.Success)
                                mtch = regmobformate.Match(this.DataLines[cnt].Trim().ToLower());
                        }
                        if (!mtch.Success)
                            mtch = MobFormat2.Match(this.DataLines[cnt].Trim().ToLower());

                        if (!mtch.Success)
                            mtch = Mobfrm.Match(this.DataLines[cnt].Trim().ToLower());

                        if (mtch.Success)
                        {
                            try
                            {
                                int j = 0;
                                for (j = 0; j < 6; j++)
                                {
                                    if ((cnt + j) < this.DataLines.Length)
                                    {
                                        if ((((cnt - 1 > 1) && this.DataLines[cnt - j].Trim().ToUpper().IndexOf("REFERENCES") >= 0) || (this.DataLines[cnt + j].Trim().ToUpper().IndexOf("REFERENCES") >= 0) | (this.DataLines[cnt + j].Trim().ToUpper().IndexOf("REFERALS OF") >= 0) | (this.DataLines[cnt + j].Trim().ToUpper().IndexOf("REFRENCES") >= 0) | (this.DataLines[cnt + j].Trim().ToUpper().IndexOf(":¢REFERANCE:") >= 0) || (this.DataLines[cnt + j].Trim().ToLower().IndexOf("reference:") >= 0) || ((this.DataLines[cnt + j].Trim().ToLower().IndexOf("reference :") >= 0)) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references :") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references:") >= 0)) && ((this.DataLines[cnt].Trim().ToLower().IndexOf("location preference:") < 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("location preference") < 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("character and work references") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("variable") >= 0))) break;
                                        if ((this.DataLines[cnt + j].ToLower().Trim().IndexOf("passport") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("pass port no") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("worked as") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("education") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("educational") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("school") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("college") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("rank") >= 0) | (this.DataLines[cnt + j].ToLower().Trim().IndexOf("university") >= 0) || this.DataLines[cnt + j].ToLower().Trim().IndexOf("Academics") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("year") >= 0 | (this.DataLines[cnt + j].ToLower().Trim().IndexOf("specialization") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("subjects") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("experience") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("represented") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("expertise") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("telecom ") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("automobile") >= 0) || this.DataLines[cnt + j].ToLower().Trim().IndexOf("hardwares:-") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("telecommunication") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("telecoms") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("academic details:") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("reservations") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("reservations,") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("management") >= 0 | this.DataLines[cnt + j].ToLower().Trim().IndexOf("present address") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("permant address") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("date of birth") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("d.o.b.") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("postal") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("ctc") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("salary") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("linkedin") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("verification languages") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("iccad") >= 0 || ((cnt - 1 > 2) && this.DataLines[cnt - 1].ToLower().Trim().IndexOf("sss no") >= 0) || ((cnt - 1 > 2) && this.DataLines[cnt - 1].ToLower().Trim().IndexOf("pag-ibig no.") >= 0) ||
                                            (this.DataLines[cnt + j].ToLower().Trim().IndexOf("expiration date") >= 0) ||
                                            (this.DataLines[cnt + j].ToLower().Trim().IndexOf("issue date") >= 0) ||
                                            (this.DataLines[cnt + j].ToLower().Trim().IndexOf("certificate") >= 0))
                                            break; // && re2.IsMatch(" " + this.DataLines[cnt + j].ToString().Trim()) == false
                                        if ((this.DataLines[cnt + j].ToLower().Trim().IndexOf("major achievements:") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("networking products") >= 0)) break;
                                        string addComma = this.DataLines[cnt + j].ToLower().Trim().Replace("    ", ",").Replace("– mobile", ",– mobile").Replace("mobile -", ",mobile -").Replace("mobile+", ",mobile+").Replace("(toll free", "").Replace("or", ",").Replace("and", ",").Replace("(mob)", ",(mob)").Replace("office", "(office)").Replace("(p)", "(p),").Replace("(o)", "(o),").Replace("(h)", "(h),").Replace("(home)", "(home),").Replace("(res)", "(res),").Replace("8pm to 8am", "").Replace("®", ",").Replace("( (091)", "091").Replace(" - ", "").Replace("-", "").Replace(".", "").Replace("  ", " ,").Replace("(r)", "(r)").Trim();
                                        if (addComma.IndexOf("resume") == 0) continue;
                                        string[] strPhoneNo3 = this.DataLines[cnt + j].ToLower().Trim().Replace("    ", ",").Replace(".", "").Replace("-", " ").Split(SetCommaSemi, StringSplitOptions.RemoveEmptyEntries);
                                        if (strPhoneNo3.Length > 0)
                                        {
                                            bool bRgxCheckFlg = false;
                                            // bool bBreakLoop6 = false;
                                            MatchCollection Mtch = null;
                                            for (int matchus = 0; matchus < strPhoneNo3.Length; matchus++)
                                            {
                                                Match mtchPhone1 = null, MtchMobile1 = null;
                                                mtchPhone1 = rePhone1.Match(strPhoneNo3[matchus].Replace("-", "").Trim());
                                                MtchMobile1 = reMobile1.Match(strPhoneNo3[matchus].Replace("-", "").Trim());
                                                //rePhone1.Match(" (234) 456 1232"); 
                                                if (MtchMobile1.Success != true && Mobfrm.IsMatch(this.DataLines[cnt + j].Trim()) && bRgxCheckFlg == false)
                                                {
                                                    bRgxCheckFlg = true;
                                                    Mtch = Mobfrm.Matches(this.DataLines[cnt + j].Trim());
                                                    string strMobnumber = "";
                                                    foreach (Match M in Mtch)
                                                    {
                                                        strMobnumber = MobFomat1.Match(M.Value.ToString().Replace("-", " ").Replace("   ", " ")).ToString(); //607 624   3627

                                                        if (strMobnumber != "")
                                                        {
                                                            addComma = addComma.Replace(strMobnumber, String.Empty);
                                                            if (sbMobile.ToString().Trim() == "")
                                                                sbMobile.Append(Regex.Replace(strMobnumber.ToString().Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", "").Trim(), tReplaceMobilePattern, String.Empty));

                                                            else
                                                                sbMobile.Append("," + Regex.Replace(strMobnumber.Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", ""), tReplaceMobilePattern, String.Empty));

                                                            //   bBreakLoop6 = true;
                                                        }

                                                    }
                                                    if (mtchPhone1.Success)
                                                    {
                                                        addComma = addComma.Replace(mtchPhone1.Value, String.Empty);
                                                        if (sbPhone.ToString().Trim() == "")
                                                            sbPhone.Append(Regex.Replace(mtchPhone1.Value.ToString().Replace("(", "").Replace(")", "").Replace("-", ""), tReplacePhonePattern, String.Empty));
                                                        else
                                                        {
                                                            sbPhone.Append("," + Regex.Replace(mtchPhone1.Value.ToString().Replace("(", "").Replace(")", "").Replace("-", ""), tReplacePhonePattern, String.Empty));
                                                            //bBreakLoop6 = true;
                                                        }
                                                    }

                                                    if (mtchPhone1.Success && MtchMobile1.Success) //Mbile or Phone
                                                        break;
                                                    else
                                                        continue;

                                                }

                                                if (MtchMobile1.Success)
                                                {
                                                    addComma = addComma.Replace(MtchMobile1.Value, String.Empty);
                                                    if (sbMobile.ToString().Trim() == "")
                                                        sbMobile.Append(Regex.Replace(MtchMobile1.Value.ToString().Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", "").Trim(), tReplaceMobilePattern, String.Empty));

                                                    else
                                                        sbMobile.Append("," + Regex.Replace(MtchMobile1.Value.Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", ""), tReplaceMobilePattern, String.Empty));

                                                    //   bBreakLoop6 = true;
                                                }
                                                if (mtchPhone1.Success)
                                                {
                                                    addComma = addComma.Replace(mtchPhone1.Value, String.Empty);
                                                    if (sbPhone.ToString().Trim() == "")
                                                        sbPhone.Append(Regex.Replace(mtchPhone1.Value.ToString().Replace("(", "").Replace(")", "").Replace("-", ""), tReplacePhonePattern, String.Empty));
                                                    else
                                                    {
                                                        sbPhone.Append("," + Regex.Replace(mtchPhone1.Value.ToString().Replace("(", "").Replace(")", "").Replace("-", ""), tReplacePhonePattern, String.Empty));
                                                        //bBreakLoop6 = true;
                                                    }
                                                }
                                                if (mtchPhone1.Success && MtchMobile1.Success) //Mbile or Phone
                                                    break;
                                                // bBreakLoop6 = true;
                                            }
                                            //  if (bBreakLoop6) break;
                                            strPhoneNo1 = addComma.Split(SetPhone);
                                        }
                                        else
                                            strPhoneNo1 = addComma.Split(SetPhone);
                                    }
                                    else
                                        break;

                                    int subCnt, flag1 = 0;
                                    for (subCnt = 0; subCnt < strPhoneNo1.Length; subCnt++)
                                    {
                                        if (mtchPhone == null || !mtchPhone.Success)
                                            mtchPhone = rePhone.Match(strPhoneNo1[subCnt].Trim());
                                        if (MtchMobile == null || !MtchMobile.Success)
                                            MtchMobile = reMobile.Match(strPhoneNo1[subCnt].Trim());

                                        if (strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsibility") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("head") >= 0 || (strPhoneNo1[subCnt].Trim().ToLower().IndexOf("@") >= 0 && strPhoneNo1[subCnt].Trim().ToLower().IndexOf("+91") < 0) || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsible") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("response") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsive") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("residential") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsibly") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("resume") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("residency") >= 0 || strPhoneNo1[subCnt].ToLower().IndexOf("resumé") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf(" box") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("from") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("variable") >= 0) continue; //variable
                                        Match mtch1 = re2.Match(strPhoneNo1[subCnt].Trim().ToLower());

                                        if (mtch1.Success)
                                        {
                                            flag1 = 1;//flag1  set 1 for if match found and phone exists in second or third line   
                                            break;
                                        }
                                        else if (re.IsMatch(strPhoneNo1[subCnt].Replace(Convert.ToChar(8211).ToString(), "").Replace("+", "").Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", "").Trim()))
                                        {

                                            if (Mobfrm.IsMatch(strPhoneNo1[subCnt]) == true) continue;
                                            if (strPhoneNo1[subCnt].Trim().IndexOf("inr") < 0 && strPhoneNo1[subCnt].Trim().IndexOf("with") < 0 && strPhoneNo1[subCnt].Trim().Length < 60)
                                                strphoneNo = strPhoneNo1[subCnt];
                                            strphoneNo = opGetNumberOnly(strphoneNo);
                                            if (strphoneNo == "" || strphoneNo.Length <= 7 || strphoneNo.Length >= 20)
                                                continue;
                                            string[] arrPM = strphoneNo.Split(aComma, StringSplitOptions.RemoveEmptyEntries);
                                            for (int PM = arrPM.GetLowerBound(0); PM <= arrPM.GetUpperBound(0); PM++)
                                                if (opIsMobile(arrPM[PM].Trim()) || (MtchMobile != null && MtchMobile.Success))
                                                {
                                                    if (arrPM[PM].Trim().Length == 6)
                                                        if (opValidatePinCode(arrPM[PM].Trim()) == true)
                                                            continue;
                                                    arrPM[PM] = opCheckMobileFormat(arrPM[PM].Trim());
                                                    if (sbMobile.ToString().Trim() == "")
                                                        sbMobile.Append(arrPM[PM]);
                                                    else
                                                        sbMobile.Append("," + arrPM[PM]);

                                                    MtchMobile = null;
                                                }
                                                else
                                                {
                                                    if (opIsPhone(arrPM[PM].Trim()))
                                                    {
                                                        if (arrPM[PM].Trim().Length == 6)
                                                            if (opValidatePinCode(arrPM[PM].Trim()) == true)
                                                                continue;
                                                        if (sbPhone.ToString().Trim() == "")
                                                            sbPhone.Append(arrPM[PM]);
                                                        else if (arrPM[PM].ToString() != sbMobile.ToString())
                                                            sbPhone.Append("," + arrPM[PM]);
                                                        mtchPhone = null;
                                                    }
                                                }
                                        }
                                    }
                                    if (flag1 == 1)
                                    {
                                        for (int i = subCnt; i < strPhoneNo1.Length; i++)
                                        {
                                            if (mtchPhone == null || !mtchPhone.Success)
                                                mtchPhone = rePhone.Match(strPhoneNo1[i].Trim());
                                            if (MtchMobile == null || !MtchMobile.Success)
                                                MtchMobile = reMobile.Match(strPhoneNo1[i].Trim());
                                            strphoneNo = strPhoneNo1[i];
                                            if (strphoneNo.Trim().ToLower().IndexOf("@") >= 0 && strphoneNo.Trim().ToLower().Length < 60) continue;
                                            flag1 = 0;
                                            strphoneNo = opGetNumberOnly(strphoneNo);
                                            if (strphoneNo == "" || strphoneNo.Length <= 9)
                                                continue;
                                            string[] arrPM = strphoneNo.Split(aComma, StringSplitOptions.RemoveEmptyEntries);
                                            for (int PM = arrPM.GetLowerBound(0); PM <= arrPM.GetUpperBound(0); PM++)
                                                if (opIsMobile(arrPM[PM].Trim()) || (MtchMobile != null && MtchMobile.Success))
                                                {
                                                    if (arrPM[PM].Trim().Length == 6)
                                                        if (opValidatePinCode(arrPM[PM].Trim()) == true)
                                                            continue;
                                                    arrPM[PM] = opCheckMobileFormat(arrPM[PM].Trim());
                                                    if (sbMobile.ToString().Trim() == "")
                                                        sbMobile.Append(arrPM[PM]);
                                                    else
                                                        sbMobile.Append("," + arrPM[PM]); MtchMobile = null;
                                                }
                                                else
                                                {
                                                    if (opIsPhone(arrPM[PM].Trim()))
                                                    {
                                                        if (arrPM[PM].Trim().Length == 6)
                                                            if (opValidatePinCode(arrPM[PM].Trim()) == true)
                                                                continue;
                                                        if (sbPhone.ToString().Trim() == "")
                                                            sbPhone.Append(arrPM[PM]);
                                                        else
                                                            sbPhone.Append("," + arrPM[PM]);
                                                        mtchPhone = null;
                                                    }
                                                }
                                        }
                                    }//end if flag1==1
                                }//j loop
                                //cnt = cnt + j;
                            }
                            catch
                            {

                            }
                        }
                    }
                }
                if (sbMobile.ToString().Trim() != "") opRemoveSourceContact(ref sbMobile);
                if (sbPhone.ToString().Trim() != "") opRemoveSourceContact(ref sbPhone);
                mobile = opGetParseUniqueData(sbMobile.ToString());
                phone = opGetParseUniqueData(sbPhone.ToString());
                opRemoveDuplicateMobileinPhone(ref mobile, ref phone);
            }
            catch
            {

            }
            finally
            {
                sbMobile = null; sbPhone = null;
            }
        }

        private void opRemoveDuplicateMobileinPhone(ref string Mobile, ref string Phone)
        {
            try
            {
                string[] tMobileArray = Mobile.Split(',');

                string[] tphoneArray = Phone.Split(',');
                string[] tValid = new string[tMobileArray.Length];

                string[] tValidPH = new string[tphoneArray.Length];

                if (Mobile.Trim() != "")
                {
                    bool icheck = false; int j = 0;
                    for (int iMCnt = 0; iMCnt < tMobileArray.Length; iMCnt++)
                    {
                        if (tMobileArray[iMCnt].Length > 0)
                        {
                            icheck = false;
                            for (j = 0; j < tValid.Length && tValid[j] != null; j++)
                            {

                                if (string.IsNullOrEmpty(tMobileArray[iMCnt])) continue;
                                if (string.IsNullOrEmpty(tValidPH[j])) continue;
                                string t10CharPhne = (tValid[j].Trim().Length > 10 ? tValid[j].Trim().Substring(tValid[j].Trim().Length - 10, 10) : tValid[j]);
                                string t10CharMobile = (tMobileArray[iMCnt].Trim().Length > 10 ? tMobileArray[iMCnt].Trim().Substring(tMobileArray[iMCnt].Trim().Length - 10, 10) : tMobileArray[iMCnt]);

                                if (t10CharPhne == t10CharMobile)
                                {
                                    icheck = true;
                                    t10CharMobile = null; t10CharPhne = null;
                                    goto EXIT;
                                }
                                t10CharMobile = null; t10CharPhne = null;
                            }
                            if (icheck == false)
                            {
                                tValid[j] = tMobileArray[iMCnt];
                                j++;
                            }
                        EXIT: ;
                        }
                    }
                }

                try
                {
                    if (phone.Trim() != "")
                    {
                        bool icheck = false; int j = 0;
                        for (int iMCnt = 0; iMCnt < tphoneArray.Length; iMCnt++)
                        {
                            if (tphoneArray[iMCnt].Length > 0)
                            {
                                icheck = false;
                                for (j = 0; j < tValidPH.Length && tValidPH[j] != null; j++)
                                {

                                    if (string.IsNullOrEmpty(tphoneArray[iMCnt])) continue;
                                    if (string.IsNullOrEmpty(tValidPH[j])) continue;
                                    string t10CharPhne = (tValidPH[j].Trim().Length > 10 ? tValidPH[j].Trim().Substring(tValidPH[j].Trim().Length - 10, 10) : tValidPH[j]);
                                    string t10CharMobile = (tphoneArray[iMCnt].Trim().Length > 10 ? tphoneArray[iMCnt].Trim().Substring(tphoneArray[iMCnt].Trim().Length - 10, 10) : tphoneArray[iMCnt]);

                                    if (t10CharPhne == t10CharMobile)
                                    {
                                        icheck = true;
                                        t10CharMobile = null; t10CharPhne = null;
                                        goto EXIT;
                                    }
                                    t10CharMobile = null; t10CharPhne = null;
                                }
                                if (icheck == false)
                                {
                                    tValidPH[j] = tphoneArray[iMCnt];
                                    j++;
                                }
                            EXIT: ;
                            }
                        }
                    }

                }
                catch { }

                tMobileArray = tValid;
                tphoneArray = tValidPH;
                if (Mobile.Trim() != "" && Phone.Trim() != "")
                {
                    Mobile = ""; Phone = "";
                    for (Int16 iMCnt = 0; iMCnt <= tMobileArray.GetUpperBound(0); iMCnt++)
                    {
                        for (Int16 iPCnt = 0; iPCnt <= tphoneArray.Length - 1; iPCnt++)
                        {

                            if (string.IsNullOrEmpty(tphoneArray[iPCnt])) continue;
                            if (string.IsNullOrEmpty(tMobileArray[iMCnt])) continue;
                            try
                            {
                                string t10CharPhne = (tphoneArray[iPCnt].Trim().Length > 10 ? tphoneArray[iPCnt].Trim().Substring(tphoneArray[iPCnt].Trim().Length - 10, 10) : tphoneArray[iPCnt]);
                                string t10CharMobile = (tMobileArray[iMCnt].Trim().Length > 10 ? tMobileArray[iMCnt].Trim().Substring(tMobileArray[iMCnt].Trim().Length - 10, 10) : tMobileArray[iMCnt]);

                                if (t10CharPhne == t10CharMobile)
                                    tphoneArray[iPCnt] = "";
                                t10CharMobile = null; t10CharPhne = null;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                }
                else
                {
                    Mobile = "";
                    Phone = "";
                }
                try
                {
                    for (Int16 iMCnt = 0; iMCnt <= tphoneArray.GetUpperBound(0); iMCnt++)
                    {
                        if (string.IsNullOrEmpty(tphoneArray[iMCnt])) continue;
                        Phone += tphoneArray[iMCnt] + ",";
                    }
                    if (Phone.Trim().EndsWith(","))
                        Phone = Phone.Trim().Substring(0, Phone.Trim().Length - 1);
                }
                catch { }
                for (Int16 iMCnt = 0; iMCnt <= tMobileArray.GetUpperBound(0); iMCnt++)
                {
                    if (string.IsNullOrEmpty(tMobileArray[iMCnt])) continue;
                    Mobile += tMobileArray[iMCnt] + ",";
                }
                if (Mobile.Trim().EndsWith(","))
                    Mobile = Mobile.Trim().Substring(0, Mobile.Trim().Length - 1);
                tMobileArray = null; tphoneArray = null;

            }
            catch { }
        }


        //private void GetContact()
        //{
        //    mobile = "";
        //    phone = "";
        //    StringBuilder sbPhone = null, sbMobile = null;
        //    try
        //    {
        //        sbPhone = new StringBuilder();
        //        sbMobile = new StringBuilder();
        //        char[] SetPhone ={ ':', '/', ';', ',', '’', '‘', '.', '•', '\\', '&', '*', '|', '—' };
        //        char[] SetCommaSemi ={ ':', ';', ',', '’', '‘', '.', '•', '\\', '&', '*', '|', '–', '/' };
        //        char[] aComma ={ ',' };
        //        string[] strPhoneNo1;
        //        string strphoneNo = "";
        //        Regex re = new Regex("[0-9]{6,11}");
        //        Regex re2 = new Regex(@"[\s,\(](Contact:|H:|M:|Phone:|TEL.|Tel.:|MOBILE:|Telephone number:|Cell:|Cel. Number|Cel. Phone:|CONTACT NOS|residential phone numbers|Hello #|Fixed Line| res|contact –|residence no|Cell #|Cell#|cell no|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|resi|mobile|cell|cell-|\(cell\)|\(home\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |voice|gsm|resi|\(resi\)|\(P\)|\(p\)|\(r\)|resi |res|Contact#:)[,:\s]?[\s]?\b", RegexOptions.IgnoreCase);
        //        Regex re3 = new Regex(@"[\s,\(](Contact:|M:|H:|Phone:|TEL.|Tel.:|MOBILE:|Telephone number:|Cell:|Cel. Number|Cel. Phone:|residential phone numbers|Hello #|Fixed Line|res|residence|contact|contact –|residence no|residence -|Cell #|Cell#|cell no|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact. no.:|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|resi|mobile|cell|cell-|\(cell\)|\(home\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |voice|gsm|resi|\(resi\)|\(p\)|\(r\)|resi |res|Contact#)[,:\s]?[\s]?$", RegexOptions.IgnoreCase);
        //        Regex re4 = new Regex(@"Contact:|M:|H:|Phone:|TEL.|Tel.:|MOBILE:|Telephone number:|Cell:|Cel. Number|Cel. Phone:|CONTACT NOS :|Contact#:|Personal Reach:|contact:|contact –|contact |contacts |contacts:|residence:|residence :| m:|\+919|\+91 9|91-9|\+91 - 9| 919|0 9|91-| 091| 093| 094| 095| 096| 097| 098|\(\+91\)|\+91-9|ph:|ph :|ph  :|residence -|home:|residential phone numbers|Hello #|Fixed Line|contact –|residence no|Cell #|Cell#|cell no|Ph#|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|\(r\)|\(res\)|\(h\)|landline|Telephone|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel no|phone no|tel no.|tel-|\(tel\)|tel no|res \#|mobile|cell-|\(cell\)|\(m\)|cellular|\(home\)|\(mob\)|mob-|mob:|gsm:|\(resi\)|\(P\)|\(p\)|\(r\)|\(m\)|mo\.-|CALL:|HP:|((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}", RegexOptions.IgnoreCase);//
        //        Regex re5 = new Regex(@"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$", RegexOptions.IgnoreCase);
        //        //Regex regmobformate = new Regex("(\\d)(\\d)(\\s+)(\\d)(\\d)(\\s+)(\\()(\\d)(\\))(\\d)(\\d)(\\d)(\\d)", RegexOptions.IgnoreCase);
        //        Regex regmobformate = new Regex("(\\d+)(\\s+)(\\d+)(\\s+)(\\()(\\d+)(\\))(\\d+)", RegexOptions.IgnoreCase);
        //        Regex MobFomat1 = new Regex("(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)(\\d)");
        //        Regex Mobfrm = new Regex("(\\d)(\\d)(\\d)(\\.)(\\d)(\\d)(\\d)(\\.)(\\d)(\\d)(\\d)(\\d)");
        //        Regex MobFormat2 = new Regex("(\\+)(\\d)(\\d)(\\.)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)");
        //        //Regex -- (\\+)(\\d)(\\d)(\\.)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)(\\.)(\\d)(\\d)
        //        //^(\+?36)?[ -]?(\d{1,2}|(\(\d{1,2}\)))/?([ -]?\d){6,7}$
        //        //(@"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$");
        //        int phNotFlag = 0;
        //        Match mtchPhone = null, MtchMobile = null;
        //        Regex reMobile = new Regex(@"Contact:|M:|MOBILE:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular");
        //        string tReplaceMobilePattern = @"M:|MOBILE:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular";
        //        Regex rePhone = new Regex(@"H:|Phone:|TEL.|Tel.:|Telephone number:|residential phone numbers|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|ph:|ph :|ph  :|residence -|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\)");
        //        string tReplacePhonePattern = @"H:|Phone:|TEL.|Tel.:|Telephone number:|residential phone numbers|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|ph:|ph :|ph  :|residence -|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\)";
        //        Regex reMobile1 = new Regex(@"(M:|MOBILE:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular)[\s]?\d{3}-\d{3}[\/]\d{3}-\d{4}");
        //        Regex rePhone1 = new Regex(@"(H:|Phone:|TEL.|Tel.:|Telephone number:|residential phone numbers|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|ph:|ph :|ph  :|residence -|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\))[\s]?\d{3}-\d{3}[\/]\d{3}-\d{4}");
        //        for (int cnt = 0; cnt < this.DataLines.Length; cnt++)
        //        {
        //            if (this.DataLines[cnt].Trim().Length > 0)
        //            {
        //                if (((this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERENCES") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("referees:") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("EFERENCES") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERALS OF") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFRENCES") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERENCE") == 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf(":¢REFERANCE:") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("reference:") >= 0) || ((this.DataLines[cnt].Trim().ToLower().IndexOf("reference :") >= 0)) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references :") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references:") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("character and work references") >= 0)) && ((this.DataLines[cnt].Trim().ToLower().IndexOf("location preference:") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("preference") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("preferences") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("location preference") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("Contact Details") < 0)))
        //                {
        //                    if (cnt >= (DataLines.Length / 2))
        //                        break;
        //                    else
        //                        continue;
        //                }
        //                phNotFlag = opFindMatch(this.DataLines[cnt].Trim(), regPhoneNot, regPhoneNot1);

        //                if (phNotFlag == 1) continue;
        //                Match mtch = re2.Match(" " + this.DataLines[cnt].Trim().ToLower());
        //                if (!mtch.Success)
        //                    mtch = re3.Match(" " + this.DataLines[cnt].Trim().ToLower());
        //                if (!mtch.Success)
        //                    mtch = re4.Match(this.DataLines[cnt].Trim());
        //                if (!mtch.Success)
        //                    mtch = re5.Match(this.DataLines[cnt].Trim());
        //                if (!mtch.Success)
        //                    mtch = re.Match(this.DataLines[cnt].Trim());
        //                if (this.DataLines[cnt].Length < 60)
        //                {
        //                    if (!mtch.Success)
        //                        mtch = regmobformate.Match(this.DataLines[cnt].Trim().ToLower());
        //                }
        //                if (!mtch.Success)
        //                    mtch = MobFormat2.Match(this.DataLines[cnt].Trim().ToLower());

        //                if (!mtch.Success)
        //                    mtch = Mobfrm.Match(this.DataLines[cnt].Trim().ToLower());

        //                if (mtch.Success)
        //                {
        //                    try
        //                    {
        //                        int j = 0;
        //                        for (j = 0; j < 6; j++)
        //                        {
        //                            if ((cnt + j) < this.DataLines.Length)
        //                            {//(this.DataLines[cnt + j].ToLower().Trim().IndexOf("address") >= 0 )|
        //                                //if (j == 1)
        //                                //{
        //                                //    Match tmtch = re2.Match(" " + this.DataLines[cnt+j].Trim().ToLower());
        //                                //    if (!tmtch.Success)
        //                                //        tmtch = re3.Match(" " + this.DataLines[cnt + j].Trim().ToLower());
        //                                //    if (!tmtch.Success)
        //                                //        tmtch = re4.Match(this.DataLines[cnt + j].Trim());

        //                                //    if (tmtch.Success == true)
        //                                //        this.DataLines[cnt + j] = this.DataLines[cnt ].Trim() + this.DataLines[cnt + j].Trim();
        //                                //    this.DataLines[cnt + j] = this.DataLines[cnt + j].Trim();
        //                                //}
        //                                if (((this.DataLines[cnt + j].Trim().ToUpper().IndexOf("REFERENCES") >= 0) | (this.DataLines[cnt + j].Trim().ToUpper().IndexOf("REFERALS OF") >= 0) | (this.DataLines[cnt + j].Trim().ToUpper().IndexOf("REFRENCES") >= 0) | (this.DataLines[cnt + j].Trim().ToUpper().IndexOf(":¢REFERANCE:") >= 0) || (this.DataLines[cnt + j].Trim().ToLower().IndexOf("reference:") >= 0) || ((this.DataLines[cnt + j].Trim().ToLower().IndexOf("reference :") >= 0)) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references :") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references:") >= 0)) && ((this.DataLines[cnt].Trim().ToLower().IndexOf("location preference:") < 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("location preference") < 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("character and work references") >= 0))) break;
        //                                if ((this.DataLines[cnt + j].ToLower().Trim().IndexOf("passport") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("pass port no") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf(" iso") >= 0) | (this.DataLines[cnt + j].ToLower().Trim().IndexOf("p.o") >= 0 && this.DataLines[cnt + j].ToLower().Trim().IndexOf("tel") < 0 && this.DataLines[cnt + j].ToLower().Trim().IndexOf("mobile") < 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("worked as") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("education") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("educational") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("school") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("college") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("rank") >= 0) | (this.DataLines[cnt + j].ToLower().Trim().IndexOf("university") >= 0) || this.DataLines[cnt + j].ToLower().Trim().IndexOf("Academics") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("year") >= 0 | (this.DataLines[cnt + j].ToLower().Trim().IndexOf("specialization") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("subjects") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("experience") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("represented") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("expertise") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("telecom ") >= 0) || (this.DataLines[cnt + j].ToLower().Trim().IndexOf("automobile") >= 0) || this.DataLines[cnt + j].ToLower().Trim().IndexOf("hardwares:-") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("telecommunication") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("telecoms") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("academic details:") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("reservations") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("reservations,") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("management") >= 0 | this.DataLines[cnt + j].ToLower().Trim().IndexOf("present address") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("permant address") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("televisions") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("date of birth") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("d.o.b.") >= 0 || this.DataLines[cnt + j].ToLower().Trim().IndexOf("postal") >= 0) break;
        //                                if ((this.DataLines[cnt + j].ToLower().Trim().IndexOf("major achievements:") >= 0)) break;
        //                                string addComma = this.DataLines[cnt + j].ToLower().Trim().Replace("    ", ",").Replace("– mobile", ",– mobile").Replace("mobile -", ",mobile -").Replace("mobile+", ",mobile+").Replace("(toll free", "").Replace("or", ",").Replace("and", ",").Replace("(mob)", ",(mob)").Replace("office", "(office)").Replace("(p)", "(p),").Replace("(r)", "(r),").Replace("(o)", "(o),").Replace("(h)", "(h),").Replace("(home)", "(home),").Replace("(res)", "(res),").Replace("8pm to 8am", "").Replace("®", ",").Replace("( (091)", "091").Replace("-", "").Replace(".", "").Replace("  ", " ,").Trim();
        //                                if (addComma.IndexOf("resume") == 0) continue;
        //                                string[] strPhoneNo3 = this.DataLines[cnt + j].ToLower().Trim().Replace("    ", ",").Replace("-", "").Replace(".", "").Split(SetCommaSemi, StringSplitOptions.RemoveEmptyEntries);
        //                                if (strPhoneNo3.Length > 0)
        //                                {
        //                                    //bool bBreakLoop6 = false;
        //                                    for (int matchus = 0; matchus < strPhoneNo3.Length; matchus++)
        //                                    {
        //                                        Match mtchPhone1 = null, MtchMobile1 = null;
        //                                        mtchPhone1 = rePhone1.Match(strPhoneNo3[matchus].Trim());
        //                                        MtchMobile1 = reMobile1.Match(strPhoneNo3[matchus].Trim());
        //                                        //if (MtchMobile1.Success != true && re4.IsMatch(this.DataLines[cnt].Trim()))
        //                                        //    MtchMobile1 = MobFomat1.Match(strPhoneNo3[matchus].Trim());
        //                                        //if (MtchMobile1.Success != true && re.IsMatch(this.DataLines[cnt].Trim()))
        //                                        //   MtchMobile1 = MobFomat1.Match(strPhoneNo3[matchus].Trim());  
        //                                        if (MtchMobile1.Success)
        //                                        {
        //                                            addComma = addComma.Replace(MtchMobile1.Value, String.Empty);
        //                                            if (sbMobile.ToString().Trim() == "")
        //                                                sbMobile.Append(Regex.Replace(MtchMobile1.Value, tReplaceMobilePattern, String.Empty));

        //                                            else
        //                                                sbMobile.Append("," + Regex.Replace(MtchMobile1.Value, tReplaceMobilePattern, String.Empty));

        //                                            //   bBreakLoop6 = true;
        //                                        }
        //                                        if (mtchPhone1.Success)
        //                                        {
        //                                            addComma = addComma.Replace(mtchPhone1.Value, String.Empty);
        //                                            if (sbPhone.ToString().Trim() == "")
        //                                                sbPhone.Append(Regex.Replace(mtchPhone1.Value, tReplacePhonePattern, String.Empty));

        //                                            else
        //                                                sbPhone.Append("," + Regex.Replace(mtchPhone1.Value, tReplacePhonePattern, String.Empty));

        //                                            //  bBreakLoop6 = true;
        //                                        }

        //                                        if (mtchPhone1.Success && MtchMobile1.Success)
        //                                        {
        //                                            //  bBreakLoop6 = true;
        //                                            break;
        //                                        }
        //                                    }
        //                                    // if (bBreakLoop6) break;
        //                                    strPhoneNo1 = addComma.Split(SetPhone);
        //                                }
        //                                else
        //                                    strPhoneNo1 = addComma.Split(SetPhone);
        //                            }
        //                            else
        //                                break;

        //                            int subCnt, flag1 = 0;
        //                            for (subCnt = 0; subCnt < strPhoneNo1.Length; subCnt++)
        //                            {
        //                                if (mtchPhone == null || !mtchPhone.Success)
        //                                    mtchPhone = rePhone.Match(strPhoneNo1[subCnt].Trim());
        //                                if (MtchMobile == null || !MtchMobile.Success)
        //                                    MtchMobile = reMobile.Match(strPhoneNo1[subCnt].Trim());

        //                                if (strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsibility") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("head") >= 0 || (strPhoneNo1[subCnt].Trim().ToLower().IndexOf("@") >= 0 && strPhoneNo1[subCnt].Trim().ToLower().IndexOf("+91") < 0) || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsible") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("response") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsive") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("residential") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("responsibly") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("resume") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("residency") >= 0 || strPhoneNo1[subCnt].ToLower().IndexOf("resumé") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf(" box") >= 0 || strPhoneNo1[subCnt].Trim().ToLower().IndexOf("from") >= 0) continue;
        //                                Match mtch1 = re2.Match(strPhoneNo1[subCnt].Trim().ToLower());
        //                                if (mtch1.Success)
        //                                {
        //                                    flag1 = 1;//flag1  set 1 for if match found and phone exists in second or third line   
        //                                    break;
        //                                }
        //                                else if (re.IsMatch(strPhoneNo1[subCnt].Replace(Convert.ToChar(8211).ToString(), "").Replace("+", "").Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", "").Trim()))
        //                                {

        //                                    if (strPhoneNo1[subCnt].Trim().IndexOf("with") < 0 && strPhoneNo1[subCnt].Trim().Length < 60)
        //                                        strphoneNo = strPhoneNo1[subCnt];
        //                                    strphoneNo = opGetNumberOnly(strphoneNo);
        //                                    if (strphoneNo == "" || strphoneNo.Length <= 7 || strphoneNo.Length >= 20)
        //                                        continue;
        //                                    string[] arrPM = strphoneNo.Split(aComma, StringSplitOptions.RemoveEmptyEntries);
        //                                    for (int PM = arrPM.GetLowerBound(0); PM <= arrPM.GetUpperBound(0); PM++)
        //                                        if (opIsMobile(arrPM[PM].Trim()) || (MtchMobile != null && MtchMobile.Success))
        //                                        {
        //                                            if (arrPM[PM].Trim().Length == 6)
        //                                                if (opValidatePinCode(arrPM[PM].Trim()) == true)
        //                                                    continue;
        //                                            arrPM[PM] = opCheckMobileFormat(arrPM[PM].Trim());
        //                                            if (sbMobile.ToString().Trim() == "")
        //                                                sbMobile.Append(arrPM[PM]);
        //                                            else
        //                                                sbMobile.Append("," + arrPM[PM]);

        //                                            MtchMobile = null;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (opIsPhone(arrPM[PM].Trim()))
        //                                            {
        //                                                if (arrPM[PM].Trim().Length == 6)
        //                                                    if (opValidatePinCode(arrPM[PM].Trim()) == true)
        //                                                        continue;
        //                                                if (sbPhone.ToString().Trim() == "")
        //                                                    sbPhone.Append(arrPM[PM]);
        //                                                else
        //                                                    sbPhone.Append("," + arrPM[PM]);
        //                                                mtchPhone = null;
        //                                            }
        //                                        }
        //                                }
        //                            }
        //                            if (flag1 == 1)
        //                            {
        //                                for (int i = subCnt; i < strPhoneNo1.Length; i++)
        //                                {
        //                                    if (mtchPhone == null || !mtchPhone.Success)
        //                                        mtchPhone = rePhone.Match(strPhoneNo1[i].Trim());
        //                                    if (MtchMobile == null || !MtchMobile.Success)
        //                                        MtchMobile = reMobile.Match(strPhoneNo1[i].Trim());
        //                                    strphoneNo = strPhoneNo1[i];
        //                                    if (strphoneNo.Trim().ToLower().IndexOf("@") >= 0 && strphoneNo.Trim().ToLower().Length < 60) continue;
        //                                    flag1 = 0;
        //                                    strphoneNo = opGetNumberOnly(strphoneNo);
        //                                    if (strphoneNo == "" || strphoneNo.Length <= 9)
        //                                        continue;
        //                                    string[] arrPM = strphoneNo.Split(aComma, StringSplitOptions.RemoveEmptyEntries);
        //                                    for (int PM = arrPM.GetLowerBound(0); PM <= arrPM.GetUpperBound(0); PM++)
        //                                        if (opIsMobile(arrPM[PM].Trim()) || (MtchMobile != null && MtchMobile.Success))
        //                                        {
        //                                            if (arrPM[PM].Trim().Length == 6)
        //                                                if (opValidatePinCode(arrPM[PM].Trim()) == true)
        //                                                    continue;
        //                                            arrPM[PM] = opCheckMobileFormat(arrPM[PM].Trim());
        //                                            if (sbMobile.ToString().Trim() == "")
        //                                                sbMobile.Append(arrPM[PM]);
        //                                            else
        //                                                sbMobile.Append("," + arrPM[PM]); MtchMobile = null;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (opIsPhone(arrPM[PM].Trim()))
        //                                            {
        //                                                if (arrPM[PM].Trim().Length == 6)
        //                                                    if (opValidatePinCode(arrPM[PM].Trim()) == true)
        //                                                        continue;
        //                                                if (sbPhone.ToString().Trim() == "")
        //                                                    sbPhone.Append(arrPM[PM]);
        //                                                else
        //                                                    sbPhone.Append("," + arrPM[PM]);
        //                                                mtchPhone = null;
        //                                            }
        //                                        }
        //                                }
        //                            }//end if flag1==1
        //                        }//j loop
        //                        //cnt = cnt + j;
        //                    }
        //                    catch
        //                    {

        //                    }
        //                }
        //            }
        //        }
        //        if (sbMobile.ToString().Trim() != "") opRemoveSourceContact(ref sbMobile);
        //        if (sbPhone.ToString().Trim() != "") opRemoveSourceContact(ref sbPhone);
        //        mobile = opGetParseUniqueData(sbMobile.ToString());
        //        phone = opGetParseUniqueData(sbPhone.ToString());
        //    }
        //    catch
        //    {

        //    }
        //    finally
        //    {
        //        sbMobile = null; sbPhone = null;
        //    }
        //}

        private void opRemoveSourceContact(ref StringBuilder sbContact)
        {
            try
            {
                string[] aContact = sbContact.ToString().Split(',');
                string[] aSourceExcludeList;
                System.Xml.XmlNodeList _nodeSourceExcludeList = FCommon.objfXMLPlacementAgencies.GetElementsByTagName("SourceExcludeList");
                for (int nCntTemp = 0; nCntTemp <= aContact.GetUpperBound(0); nCntTemp++)
                    for (int iSourceCnt = 0; iSourceCnt <= _nodeSourceExcludeList.Count - 1; iSourceCnt++)
                        if (_nodeSourceExcludeList.Item(iSourceCnt).InnerText.Trim() != "")
                        {
                            aSourceExcludeList = null;
                            aSourceExcludeList = _nodeSourceExcludeList.Item(iSourceCnt).InnerText.Trim().Split(';', ',');
                            for (int iSourceInnCnt = 0; iSourceInnCnt <= aSourceExcludeList.GetUpperBound(0); iSourceInnCnt++)
                                if (aContact[nCntTemp].ToLower().Trim() == aSourceExcludeList[iSourceInnCnt].ToLower().Trim())
                                    sbContact.Replace(aContact[nCntTemp], "");
                        }
            }
            catch { }
        }
        /// <summary>
        /// Check the Mobile format
        /// Removing Mobile starting 0091,091,910,91 to 0
        /// </summary>
        /// <param name="tMobile"></param>
        /// <returns></returns>
        private string opCheckMobileFormat(string tMobile)
        {
            string formatMobile = tMobile;
            if (tMobile.Trim().StartsWith("91") == false && tMobile.Trim().StartsWith("0") == false)
            {
                formatMobile = formatMobile.Trim();
            }
            if (tMobile.Trim().StartsWith("0091") == true)
            {
                try
                {
                    formatMobile = tMobile.Substring(4, tMobile.Length - 3 - 1);
                }
                catch { }
            }
            else if (tMobile.Trim().StartsWith("091") == true && formatMobile.Trim().Length > 11)
            {
                try
                {
                    formatMobile = tMobile.Trim().Substring(3, tMobile.Trim().Length - 2 - 1);
                }
                catch { }
            }
            else if (tMobile.Trim().StartsWith("910") == true && formatMobile.Trim().Length > 10)
            {
                try
                {
                    formatMobile = tMobile.Trim().Substring(3, tMobile.Trim().Length - 2 - 1);
                }
                catch { }
            }
            else if (tMobile.Trim().StartsWith("91") == true & formatMobile.Trim().Length > 10)
            {
                try
                {
                    formatMobile = tMobile.Trim().Substring(2, tMobile.Trim().Length - 1 - 1);
                }
                catch { }
            }
            //if (formatMobile.Trim().StartsWith("0") == false && formatMobile.Trim().Length == 10 && formatMobile.Trim().StartsWith("65") == false && formatMobile.Trim().StartsWith("9715") == false)
            //    formatMobile = "0" + formatMobile.Trim();

            return formatMobile;

        }
        /// <summary>
        /// Validate the Phone
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private bool opIsPhone(string str)
        {
            try
            {
                str = str.Trim().Replace("+91", "").Replace("(", "").Replace(")", "");
                if (str.Trim().StartsWith("-") == true)
                    str = str.Trim().Substring(1, str.Length - 1);
                if (str.Trim().StartsWith("_") == true)
                    str = str.Trim().Substring(1, str.Length - 1);

                if (str.Trim().StartsWith("91") == true && str.Trim().Length > 10)
                    str = str.Trim().Substring(2, str.Length - 2);

                if (str.Trim().StartsWith("-") == true)
                    str = str.Trim().Substring(1, str.Length - 1);

                if (str.Trim().IndexOf("0") == 0 || str.Trim().IndexOf("1") == 0 || str.Trim().IndexOf("2") == 0 || str.Trim().IndexOf("3") == 0 || str.Trim().IndexOf("4") == 0 || str.Trim().IndexOf("5") == 0 || str.Trim().IndexOf("6") == 0 || str.Trim().IndexOf("7") == 0 || str.Trim().IndexOf("8") == 0 || str.Trim().IndexOf("9") == 0)
                    if (str.Trim().Length > 4)
                        return true;
            }
            catch { }
            return false;
        }
        /// <summary>
        /// Validate the Mobile
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private bool opIsMobile(string str)
        {
            try
            {
                str = str.Trim().Replace("+", "").Replace("(", "").Replace(")", "");
                if (str.Trim().StartsWith("-") == true)
                    str = str.Trim().Substring(1, str.Length - 1);
                if (str.Trim().StartsWith("_") == true)
                    str = str.Trim().Substring(1, str.Length - 1);

                if (str.Trim().StartsWith("91") == true && str.Trim().Length > 10)
                    str = str.Trim().Substring(2, str.Length - 2);

                if (str.Trim().StartsWith("0091") == true)
                    str = str.Trim().Substring(4, str.Length - 4);

                if (str.Trim().StartsWith("091") == true && str.Trim().Length > 11)
                    str = str.Trim().Substring(3, str.Length - 3);

                if (str.Trim().StartsWith("-") == true)
                    str = str.Trim().Substring(1, str.Length - 1);

                if (str.Trim().IndexOf("9") == 0)
                    if (str.Trim().Length == 10)
                        return true;
                if (str.Trim().IndexOf("09") == 0)
                    if (str.Trim().Length == 11)
                        return true;


                if (str.Trim().IndexOf("7") == 0)
                    if (str.Trim().Length == 10)
                        return true;
                if (str.Trim().IndexOf("07") == 0)
                    if (str.Trim().Length == 11)
                        return true;


                if (str.Trim().IndexOf("8") == 0)
                    if (str.Trim().Length == 10)
                        return true;
                if (str.Trim().IndexOf("08") == 0)
                    if (str.Trim().Length == 11)
                        return true;

                if (str.Trim().StartsWith("0065") == true)
                    str = str.Trim().Substring(2, str.Length - 2);
                if (str.Trim().StartsWith("00639") == true)
                    str = str.Trim().Substring(2, str.Length - 2);
                if (str.Trim().IndexOf("659") == 0)
                    if (str.Trim().Length > 8 && str.Trim().Length <= 10)
                        return true;
                if (str.Trim().StartsWith("0097150") == true || str.Trim().StartsWith("00971050") == true || str.Trim().StartsWith("97150") == true || str.Trim().StartsWith("971050") == true || str.Trim().StartsWith("0097155") == true || str.Trim().StartsWith("00971055") == true || str.Trim().StartsWith("97155") == true || str.Trim().StartsWith("971055") == true || str.Trim().StartsWith("0097156") == true || str.Trim().StartsWith("00971056") == true || str.Trim().StartsWith("97156") == true || str.Trim().StartsWith("971056") == true)//UAE Mobile Code  00971 - 50 for etisalat mobile,00971- 55 for du mobile 
                {
                    if (str.Trim().Length <= 15)
                        return true;
                }
                if (str.Trim().StartsWith("050") == true || str.Trim().StartsWith("055") == true || str.Trim().StartsWith("056") == true)
                {
                    if (str.Trim().Length == 10)
                        return true;
                }
                if (str.Trim().StartsWith("50") == true || str.Trim().StartsWith("55") == true || str.Trim().StartsWith("56") == true)
                {
                    if (str.Trim().Length == 9)
                        return true;
                }
                if (str.Trim().StartsWith("63917") == true || str.Trim().StartsWith("63918") == true || str.Trim().StartsWith("63915") == true || str.Trim().StartsWith("63912") == true || str.Trim().StartsWith("6390") == true)//Philipians Mobile Code 63-917/90/918/912/915
                {
                    if (str.Trim().Length > 10 && str.Trim().Length <= 15)
                        return true;
                }
                //Regex regexUs = new Regex(@"\d{3}-\d{4}");
                //if (regexUs.IsMatch(str))
                //    return true;
                //\d{3}-\d{4}
            }
            catch
            {
            }
            return false;
        }

        /// <summary>
        /// Check for pin from the tphone string
        /// </summary>
        /// <param name="tphone">candidate phone</param>
        /// <returns>if pin found true else false</returns>
        private bool opValidatePinCode(string tphone)
        {

            System.Xml.XmlNodeList _LocPinCode = FCommon.objfXMLResumeLocations.GetElementsByTagName("Pincode");
            for (int icnt = 0; icnt <= _LocPinCode.Count - 1; icnt++)
            {
                string tPin = _LocPinCode.Item(icnt).InnerText;
                string[] aPin = tPin.Split(';', ',');
                for (int i = 0; i <= aPin.GetUpperBound(0); i++)
                {
                    if (aPin[i].Trim().Length < 3) continue;
                    string tFirst3NoPin = aPin[i].Trim().Substring(0, 3);
                    string tFirst3NoPhone = tphone.Trim().Substring(0, 3);
                    if (tFirst3NoPin == tFirst3NoPhone)
                        return true;
                }
            }
            return false;
        }
        #endregion

        #region "email"


        private bool opCheckMailIDsNotToScan(string strEmail)
        {
            try
            {
                for (int i = 0; i <= arrMailIDsNotToScan.GetUpperBound(0); i++)
                {
                    if (arrMailIDsNotToScan[i].Trim().Length == 0) continue;
                    if (strEmail.Trim().ToLower().EndsWith(arrMailIDsNotToScan[i].Trim().ToLower()))
                    {
                        return true;
                    }
                }
            }
            catch
            {
                return false;
            }
            return false;
        }
        /// <summary>
        /// Get  removing numbers that occuring first on the email
        /// eg:- 0998776556 test@hirecraft.com
        /// </summary>
        /// <param name="str">Email</param>
        /// <returns>Email</returns>
        private string emailString(char[] str)
        {
            int iFlag = 0; string str1 = "";
            for (int x = 48; x <= 57; x++)
            {
                if (str[0].ToString() == Convert.ToChar(x).ToString())
                {
                    iFlag = 1; break;
                }
            }
            for (int z = 0; z < str.Length && iFlag == 1; z++)
            {
                for (int x = 92; x <= 122; x++)
                {
                    if (str[z].ToString() == Convert.ToChar(x).ToString())
                    {
                        iFlag = z; break;
                    }
                }
                if (iFlag != 1) break;
            }
            if (iFlag != 1)
            {
                for (int y = iFlag; y < str.Length; y++)
                {
                    str1 += str[y];
                }
            }

            return str1;
        }

        /// <summary>
        /// Validate the string 
        /// </summary>
        /// <param name="strIn">Email String</param>
        /// <returns></returns>
        bool IsValidEmail(string strIn)
        {
            // Return true if strIn is in valid e-mail format.
            return Regex.IsMatch(strIn, @"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$");
        }
        /// <summary>
        /// Fetch Candidate Email
        /// setp 1. Matching the String from the DataLines
        /// step 2. Dont take the Reference person email id's
        /// </summary>
        private void GetEmail()
        {
            string strEmail = "";
            email = "";
            StringBuilder sbEmail = new StringBuilder();
            bool bIsReference = false;
            Regex reEmail = new Regex(@"^[\w]+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", RegexOptions.CultureInvariant);
            try
            {
                int iEmailBk = 0;// EmailFlag = 0; Contact Details
                for (int outz = 0; outz < this.DataLines.Length; outz++)
                {
                    iEmailBk = 0;
                    if (opFindMatch0(this.DataLines[outz], regEmailBk, regEmailBk1) == 1)
                    {
                        if (outz > (DataLines.Length - (DataLines.Length / 3)) || outz > (DataLines.Length - (DataLines.Length / 2)))
                            iEmailBk = 1;
                    }
                    //Logic For After Searching Reference Details -- Saravana
                    for (int ct = outz; iEmailBk == 1 && ct < this.DataLines.Length; ct++)
                    {
                        if (regPersonal.IsMatch(" " + this.DataLines[ct].Trim()) == true)
                        {
                            bIsReference = true;
                            outz = ct;
                            continue;
                        }
                    }
                    if (bIsReference == false && iEmailBk == 1)
                        break;

                    // if (iEmailBk == 1) break;
                    if (regEmail.IsMatch(" " + this.DataLines[outz]))
                    {
                        try
                        {
                            strEmail = this.DataLines[outz].ToLower().Trim(); //.Replace(" email",":")
                            strEmail = strEmail.Replace("   ", ",").Replace("email id:-", "").Replace("e-mail:-", ":").Replace("e.mail-", ":").Replace("mail –", ":").Replace("mail id - ", ":").Replace("email :-", ":").Replace("|", ":").Replace("* w", ":").Replace("ph:", ":").Replace("+", ":").Replace("___", ",").Replace("email-", ":").Replace("e-mail id-", ":").Replace("email id  : -", ":").Replace("e mail –", ":").Replace("e-mail -", ":").Replace("e-mail-", ":").Replace("e-mail: -", ":").Replace("email: -", ":").Replace("email:-", ":").Replace("(preferred)", ":").Replace("e-mail: 1.", ":").Replace("* 1.", ":").Replace("email id –", ":").Replace("e-mail", ":").Replace(".com or", ".com :").Replace(".net or", ".net :").Replace(".in or", ".in :").Replace(".com and", ".com :").Replace(".net and", ".net :").Replace(".in and", ".in :").Replace("mail id:", ":").Replace("E.mail", ":").Replace("email", ":");

                            if (strEmail.Trim().Length != 0)
                                strEmail = emailString(strEmail.ToCharArray());
                            char[] CHR = { ',', ':', ';', '•', ' ', '/', '(', ')', '*', '<', '>', '\'', '?', '&', '›', Convert.ToChar(9) };
                            string[] arrEmail = strEmail.Split(CHR, StringSplitOptions.RemoveEmptyEntries);
                            for (int inS = 0; inS < arrEmail.Length; inS++)
                            {
                                Match mtch = reEmail.Match(arrEmail[inS].Trim());
                                if (mtch.Success)
                                {
                                    //if (opCheckMailIDsNotToScan(arrEmail[inS].Trim()) == true) continue;
                                    if (sbEmail.ToString().Trim().Length == 0)
                                    {
                                        sbEmail.Append(arrEmail[inS].Trim());
                                    }
                                    else
                                    {
                                        if (sbEmail.ToString().Trim().IndexOf(arrEmail[inS].Trim()) < 0)
                                        {
                                            sbEmail.Append("," + arrEmail[inS].Trim());
                                        }
                                    }
                                    if (sbEmail.ToString().EndsWith("contact"))
                                        sbEmail.Replace("contact", "");
                                }
                            }

                            if (sbEmail.Length > 0) opFindMatchReplace(ref sbEmail, regEmailRm);
                        }
                        catch
                        {

                        }
                    }
                }
                opRemoveSourceContact(ref sbEmail);
                email += sbEmail.ToString().Trim();
                try
                {
                    if (email.StartsWith("-") == true)
                        email = email.Substring(1, email.Length - 1);
                    if (email.EndsWith(".") == true)
                        email = email.Substring(0, email.Length - 1);
                }
                catch { }
            }
            catch { }
            finally
            {
                sbEmail = null;
            }
            email = opGetParseUniqueData(email);
        }
        #endregion

        #region "Passport"
        /// <summary>
        /// Check the String
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        private bool checkOnlyString(string str)
        {
            int nCount = 0;
            char[] strArr = str.Trim().ToCharArray();
            for (int z = 0; z < strArr.Length; z++)
            {
                for (int i = 0; i < 127; i++)
                {
                    if ((i >= 48 & i <= 57) || i == 43 || i == 45)
                        continue;
                    if (Convert.ToChar(i).ToString() == strArr[z].ToString())
                    {
                        nCount++;
                        break;
                    }
                }
            }
            if (nCount == str.Trim().Length)
                return true;
            else
                return false;
        }
        /// <summary>
        /// Finding the string - Number 0r First array value is a character
        /// </summary>
        /// <param name="charPass"></param>
        /// <returns></returns>
        private bool checkFCharNString(char[] charPass)
        {
            int isFChar = 0, isFAllChar = 0, nCount = 0;
            if (charPass.Length >= 1)
            {
                for (int az = 97; az <= 122; az++)
                {
                    if (Convert.ToChar(az).ToString() == charPass[0].ToString())
                    {
                        isFChar = 1;//found first array is a alphabetics
                        break;
                    }
                }
            }
            for (int oz = 0; oz < charPass.Length; oz++)
            {
                for (int az = 97; az <= 122; az++)
                {
                    if (Convert.ToChar(az).ToString() == charPass[oz].ToString())
                    {
                        nCount++;
                        break;
                    }
                    if (Convert.ToChar(32).ToString() == charPass[oz].ToString())
                    {
                        nCount++;
                        break;
                    }
                }
            }
            if (nCount == charPass.Length)
                isFAllChar = 1;//found all are  alphabetics
            if (isFChar == 1 && isFAllChar == 0)
                return true;// found first array value is a Alphabet and others are Numbers
            else
                return false;

        }
        /// <summary>
        /// Fetch Candidate Passport
        /// Finding the Passport,passport number etc.,
        /// Matching the string 
        /// Fetching the passport string 
        /// </summary>
        private void GetPassport()
        {
            //int fPass = 0, cnt = 0; //Passport No., Passport Number, Passport #, PP No., PP Number
            string add = "", strAdd = "";
            passport = "";
            //string[] substr = null, subsubstr = null;
            Regex exMatchNo = new Regex(@"[a-z]{1}([\s]|\s-|-|-\s)?[0-9]{6,7}", RegexOptions.IgnoreCase);
            Regex ex1Check = new Regex(mon, RegexOptions.IgnoreCase);
            int passBk = 0;
            for (int z = 0; z < this.DataLines.Length; z++)
            {
                this.DataLines[z] = this.DataLines[z].Trim().Replace("Possesses a valid Indian", "").Trim();
                if (this.DataLines[z].Trim().ToLower().IndexOf("passport number") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("citizenship & passport no.") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("*pass port") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("pass port no") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("valid passport no.") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("passpost no") >= 0 || this.DataLines[z].Trim().ToLower().IndexOf("passport no") >= 0 || this.DataLines[z].Trim().ToLower().IndexOf("passport") >= 0 || this.DataLines[z].Trim().ToLower().IndexOf("passport details") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("passport number:") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("passport no.") == 0 || this.DataLines[z].Trim().ToLower().IndexOf("passport") >= 0 || this.DataLines[z].Trim().ToLower().IndexOf("pp no") >= 0 || this.DataLines[z].Trim().ToLower().IndexOf("pp number") >= 0 || this.DataLines[z].Trim().ToLower().IndexOf("pp #") >= 0) //Passport No.
                {
                    for (int outL = z; outL < (z + 10) && outL < this.DataLines.Length; outL++)
                    {
                        passBk = opFindMatch(" " + this.DataLines[outL], regPassport, regPassport1);
                        if (passBk == 1) break;
                        string str = this.DataLines[outL].Trim();
                        str = str.ToLower().Replace("dt", " ").Replace("to", " ").Replace("no-", "").Replace("no.-", "").Replace("|", "").Replace("no.:-", ":").Replace("no:-", ":").Replace("#", "").Replace("*", "").Replace("--", "").Replace("issue", "");
                        strAdd = str.Trim().ToLower();
                        string[] strSplit = strAdd.Split(' ', '.', '&', ';', ':', '(', ')', '?', '/', ',', '¨');//-
                        string addStr = "";
                        /// Fetching the passport string 
                        for (int inn = 0; inn < strSplit.Length; inn++)
                        {
                            if (strSplit[inn].Trim().Length == 0) continue;
                            if (strSplit[inn].Trim().Length == 1 || !CheckNumeric(strSplit[inn].Trim().ToCharArray(), ""))
                            {
                                addStr += strSplit[inn];
                                if (addStr.Trim().Length == 1 || addStr.EndsWith(Convert.ToChar(8211).ToString()) || addStr.EndsWith("-")) continue;
                            }
                            if (checkFCharNString(addStr.Trim().ToCharArray()))
                            {
                                add = addStr.ToUpper();
                                break;
                            }
                            else if (checkFCharNString(strSplit[inn].Trim().ToCharArray()))
                            {
                                add = strSplit[inn].ToUpper();
                                if (ex1Check.IsMatch(add) == false)
                                    break;
                            }
                            addStr = "";
                        }
                        if (add.Trim().Length >= 5) break;
                    }
                    if (add.Trim().Length >= 5) break;
                }
            }
            if (exMatchNo.IsMatch(add.Trim()))
            {
                passport = add.Trim().Replace("Available", "").Replace("Expired Date", "").Replace("expired date", "").Replace("Place", "").Replace("place", "").Replace("Applied", "").Replace("applied", "").Replace("yes", "").Replace("Yes", "").Replace("(", "").Replace("NOT", "").Replace("not", "").Replace("NO", "").Replace("Status", "").Replace("Ready", "").Replace(".", "").Replace(")", "");
            }
        }
        #endregion

        #region "Designation"

        //private bool opExistsDesignation()
        //{
        //    bool nFound = false;
        //    try
        //    {
        //        if (FunctionalAreaID == "" && FunctionalAreaID == "0")
        //            return false;
        //        if (JobTitleID == "" && JobTitleID == "0")
        //            return false;
        //        if (FCommon.objfXMLDesignationFunction != null)
        //        {
        //            if (FCommon.objfXMLDesignationFunction.OuterXml.Trim() != "")
        //            {
        //                this.ds = new DataSet();
        //                ds.ReadXml(new StringReader(FCommon.objfXMLDesignationFunction.OuterXml));
        //                DataRow[] dr = ds.Tables[0].Select("JobCategoryID IN (" + SubFunctionID + ") AND JobTitleID in (" + JobTitleID + ")");
        //                if (dr.Length == 0)
        //                    nFound = false;
        //                else
        //                    nFound = true;
        //                this.ds.Dispose();
        //            }
        //        }
        //    }
        //    catch
        //    {

        //    }
        //    return nFound;
        //}
        private string GetCurrentLocationRID(string _strDataLines, string[,] _LocationArray)
        {
            Regex rgxLocation = null, rgxLocationExclude = null;
            _strDataLines = " " + _strDataLines.Trim().ToLower() + " ";
            string _LocationdID = "";

            //string str = m.Value.ToString().Trim().Replace(",", "").Replace(":", "").Replace("-", "");
            //string XpathString = FCommon.objfXMLSpecialization.FirstChild.Name.ToString() + "//" + FCommon.objfXMLSpecialization.FirstChild.FirstChild.LocalName.ToString() + "[SpecializationTitle[.= '" + str + "'] or  contains(IncludeList, '," + str + ",') or  contains(IncludeList ,  '," + str + "') or  contains(IncludeList ,  '" + str + ",') or  IncludeList[.= '" + str + "']]/SpecializationTitle";
            //System.Xml.XmlNodeList _nodelist = FCommon.objfXMLSpecialization.SelectNodes(XpathString);

            try
            {
                for (int _cnt = _LocationArray.GetLowerBound(0); _cnt < _LocationArray.GetUpperBound(0) && _LocationdID == ""; _cnt++)
                {
                    if (_LocationArray[_cnt, 0].Trim().Length == 0) continue;
                    //if (_LocationArray[_cnt, 1].Trim().Length > 1)
                    //    rgxLocation = new Regex(@"[\s,\[\{“‘\(\:](" + _LocationArray[_cnt, 0].ToString().Trim() + "|" + _LocationArray[_cnt, 1].Replace(",", "|").ToString().Trim() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.IgnoreCase);
                    //else
                    //    rgxLocation = new Regex(@"[\s,\[\{“‘\(\:](" + _LocationArray[_cnt, 0].ToString().Trim() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.IgnoreCase);
                    //Code Commended saravana -- Exact AMtch String 
                    if (_LocationArray[_cnt, 1].Trim().Length > 1)
                        rgxLocation = new Regex(@"(\d|\b)(" + _LocationArray[_cnt, 0].ToString().Trim() + "|" + _LocationArray[_cnt, 1].Replace(",", "|").ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                    else
                        rgxLocation = new Regex(@"(\d|\b)(" + _LocationArray[_cnt, 0].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                    if (rgxLocation.IsMatch("  " + _strDataLines.Trim() + "  "))
                    {
                        if (_LocationArray[_cnt, 3].Trim().Length > 1)
                        {
                            rgxLocationExclude = new Regex(@"[\s,\[\{“‘\(\:](" + _LocationArray[_cnt, 3].ToString().Trim() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.IgnoreCase);
                            if (rgxLocationExclude.IsMatch("  " + _strDataLines.Trim() + "  "))
                            {
                                rgxLocationExclude = null;
                                continue;
                            }
                            rgxLocationExclude = null;
                        }
                        _LocationdID = _LocationArray[_cnt, 2].ToString();
                        JobTitle = _LocationArray[_cnt, 0].ToString();
                        break;
                    }
                }

                //string str = m.Value.ToString().Trim().Replace(",", "").Replace(":", "").Replace("-", "");
                //string XpathString = FCommon.objfXMLSpecialization.FirstChild.Name.ToString() + "//" + FCommon.objfXMLSpecialization.FirstChild.FirstChild.LocalName.ToString() + "[SpecializationTitle[.= '" + str + "'] or  contains(IncludeList, '," + str + ",') or  contains(IncludeList ,  '," + str + "') or  contains(IncludeList ,  '" + str + ",') or  IncludeList[.= '" + str + "']]/SpecializationTitle";
                //System.Xml.XmlNodeList _nodelist = FCommon.objfXMLSpecialization.SelectNodes(XpathString);

            }
            catch { }
            return _LocationdID;
        }
        //,Boolean bPrevEmpFlg
        private string GetCurrentDesignationRID(string _strDataLines, bool bPrevEmpFlg)
        {
            _strDataLines = " " + _strDataLines.Trim().ToLower() + " ";
            string _LocationdID = "", _JobTitle = "", iMaxID = "0";
            string tRID = "", tJobTitle = "";
            MatchCollection MtchCol = null;
            try
            {
                try
                {
                    DataRow[] Drow;
                    MtchCol = HireCraft.FCommon.rgxDesignations.Matches(" " + _strDataLines.ToString());
                    //MtchCol = HireCraft.FCommon.rgxDesignations.Matches(" working as a net developer in swayam infologic hyderabad from jan 2011 to till date");
                    if (MtchCol.Count > 0)
                    {
                        foreach (Match m in MtchCol)
                        {
                            string str = m.Value.ToString().Replace(",", "").Replace(",", "").Replace("(", "").Replace(")", "").Replace("”", "").Replace("“", "").Trim();
                            //string tReturnString = "(JobTitle ='" + str + "'" + " or IncludeList Like '" + str + "' Or IncludeList Like '%," + str + ",%'" + " Or IncludeList Like '%," + str + "'" + " Or IncludeList Like '" + str + ",%'"  + ")";
                            if (str != "")
                            {
                                string tReturnString = "(JobTitle ='" + str + "'" + " or IncludeList Like '" + str + "' Or IncludeList Like '%," + str + ",%'" + " Or IncludeList Like '%," + str + "'" + " Or IncludeList Like '" + str + ",%'" + " And  (ExcludeList Not Like '" + str + "' Or ExcludeList Not Like '%," + str + ",%'" + " Or ExcludeList Not Like '%," + str + "'" + " Or ExcludeList Not Like '" + str + ",%')" + ")";
                                Drow = objDSDes.Tables[0].Select(tReturnString);
                                if (Drow.Length > 0)
                                {
                                    for (int i = 0; i <= Drow.Length - 1; i++)
                                    {
                                        tRID += Drow[i]["RID"].ToString() + ",";
                                        iMaxID += Drow[i]["JobTitle"].ToString().Length + ",";
                                        tJobTitle += Drow[i]["JobTitle"].ToString() + ",";
                                    }
                                }
                            }
                        }
                    }
                    string[] Lnth;
                    string[] ID;
                    string[] Title;
                    Lnth = iMaxID.Split(',');
                    ID = tRID.Split(',');
                    Title = tJobTitle.Split(',');

                    if (Lnth.Length == 0)
                    {
                        for (int _cnt1 = 0; _cnt1 < Lnth.Length; _cnt1++)
                        {
                            for (int _cnt = 0; _cnt < Lnth.Length; _cnt++)
                            {

                                if (_cnt == _cnt1) continue;
                                // tMaxId = Lnth[_cnt1].ToString().Length;
                                if (Title[_cnt1].ToString().Length <= Title[_cnt].ToString().Length)
                                {
                                    _LocationdID = ID[_cnt1].ToString();
                                    _JobTitle = Title[_cnt1].ToString();

                                }
                            }
                        }
                    }
                    else
                    {
                        _LocationdID = ID[0].ToString();
                        _JobTitle = Title[0].ToString();
                    }

                    if (_LocationdID != "")
                    {
                        if (bPrevEmpFlg == false)
                            JobTitle = _JobTitle;
                        if (bPrevEmpFlg == false)
                            return _LocationdID;
                        else
                            return _JobTitle + "+:+" + _LocationdID;
                    }
                    else
                    {
                        if (bPrevEmpFlg == false)
                            return "0";
                        else
                            return _JobTitle + "+:+" + _LocationdID;

                    }
                }
                catch
                {
                    if (bPrevEmpFlg == false)
                        return "0";
                    else
                        return _JobTitle + "+:+" + _LocationdID;
                }
            }
            catch
            { }

            if (bPrevEmpFlg == false)
                return _LocationdID;
            else
                return _JobTitle + "+:+" + _LocationdID;
        }

        ArrayList tblEmplrData = null;
        private void GetJobTitle()
        {
            JobTitleID = ""; JobTitle = "";
            try
            {
                string _JobTitle = @"\b(Current|Present|Recent)[\s]+(Designation|Role|Job Ttile|Position|Post|Job)[s]?\b" +
                                  @"|\b(Current|Present|Recent)\b\s{0,4}.{0,2}\s{0,4}\b(Employer|Company)[s]?\b\s{0,4}.{0,2}\s{0,4}\b(Current|Present|Recent)[\s]+(Designation|Role|Job Ttile|Position|Post|Job)[s]?\b\s{0,4}.{0,1}\s{1,4}" +
                                  @"|\b(|Recently|Presently|Currently|At present|present|Presently I am|Currently I am|At present I am|Permanent)\b\s*\b(designated|working|Serving|employed|associated)\b\s*\b(with|for|in|at)\b\s*.{0,100}\s*\bas\b";

                Regex regxJobTitle = new Regex(_JobTitle, RegexOptions.IgnoreCase);

                string strMonth = "January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb";
                string strTillNow = "(present|till date|to till date|to current date|current date|to current date|current date|till now|till present|onwards|onward|to present|to till now|now|till|Continuing|Till Date|Till Now|Present|Current Date|TillDate|Current|To Date|To Now|Now|onward|Actual|continuing)[s]?";
                string strMonthTillDate = @"\b(" + strMonth + @")\b\s?.{0,2}\b(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +

                                @"|\b(" + strMonth + @")(19\d{2}|20\d{2}|\d{1,2})\b\s?.{0,2}\s?\b" +
                                @"|\b(" + strMonth + @")\b\s?.{0,2}\b(19\d{2}|20\d{2}|\d{1,2})\b\s?.{0,2}\s?\b" +
                                @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}\s?\b" +
                                @"|\b(" + strMonth + @")\s?[,\']?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +
                                @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +
                                @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}\s?\b" +
                                @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +
                                @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}\s?\b" +
                                @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b" +
                                @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}\s?\b" +
                                @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}\s?\b" +
                                @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}\s?\b";
                string strMonthDate = @"\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // May 2000- june 2004
                                  @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July2000 - May2004 
                                  @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // May 2000- june2004
                                  @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July2000 - May 2004 
                                  @"|\b(" + strMonth + @")\s?[,\']?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\s?[,\']?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // May,04th 2000- june,22nd 2004
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July98 - May2004 
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July98 - May2004 
                                  @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                                  @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                                  @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                                  @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                                  @"|\b(" + strMonth + @")\b\s?[,\-]?\s?\b(" + strMonth + @")\b\s?.{0,1}\s?(\d{4}|\d{2})\b";


                string _strExperienceLTD = @"(work|working|w o r k|w o r k s|current|Relevant Work|Employment|My Work|Industry|professional|P r o f e s s i o n a l|P r o f e s s i o n a l s|Proffessional|PROFESSIONAL WORKING|ORGANIZATIONAL|ORGANISATIONAL)[s]?\s{0,4}\t?(E x p e r i e n c e|Experience|Experinece|Exeperience|Exeprience|Experiences|Exp|Exps|Experince|Summary|Synopsis)(\sIn Brief)?" +
                                           @"|(Employee|employment|career|Job Title|My Work|work|working|w o r k|w o r k s|Relevant Work|PROFESSIONAL WORKING)[s]?\s{1,4}\t?History" +
                                           @"|(Employer|ORGANIZATION|ORGANISATION|Company|Employnent)[s]?\s{1,4}\t?(List|Lists)" +
                                           @"|(ORGANIZATION|ORGANIZATIONAL|ORGANISATION|ORGANISATIONAL|Company|Experience)[s]?\s{1,4}\t?(DETAILS|Dteail)" +
                                            @"|Relevant Work Description|Company Profile|(Carrer|Carrers|Career|Careers|Job|Jobs) Profile" +
                                            @"|Experience|Experiences|employment|Career Review|ENGAGEMENT OVERVIEW|Work specialization" +
                                            @"|KEY EXPERIENCE|employment details|Professional Experience in Brief|Executive Performance Overview|WORK EXPERIENCE" +
                                            @"|Related Experience|CAREER HIGHLIGHTS|Work Exposures|Employment Profile|Career Synopsis|Employment Graph|Experience Synopsis|Experience Summary|SUMMARY OF EXPERIENCE|Work & Experience|CAREER PROGRESSION";

                string _Designation = @"(JobTitle|Designation|Role|Post Held|Position|Title|Title of Job)[s]?(\s{1,4}Name)?" +
                        @"|Name\s{1,4}(of|of the)\s{1,4}(JobTitle|Designation|Role|Post Held|Position)[s]?";

                string _strSinceMonthDate = @"(\s{0,3}([\-\–]|to)\s{0,3})?\b\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\b(\s{0,3}([\-\–]|to)\s{0,3})?" +
                                           @"|(\s{0,3}([\-\–]|to)\s{0,3})?\b(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\b(\s{0,3}([\-\–]|to)\s{0,3})?" +
                                           @"|(\s{0,3}([\-\–]|to)\s{0,3})?\b(20\d{2}|19\d{2})\b(\s{0,3}([\-\–]|to)\s{0,3})?" +
                                           @"|(\s{0,3}([\-\–]|to)\s{0,3})?\(\s?\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)(\s{0,3}([\-\–]|to)\s{0,3})?" +
                                           @"|(\s{0,3}([\-\–]|to)\s{0,3})?\(\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)(\s{0,3}([\-\–]|to)\s{0,3})?" +
                                           @"|(\s{0,3}([\-\–]|to)\s{0,3})?\(\s?(20\d{2}|19\d{2})\s?\)(\s{0,3}([\-\–]|to)\s{0,3})?";

                string _strMonthDate = @"\b\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s{0,3}([\-\–]|to)\s{0,3}\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\b" +
                                         @"|\b(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s{0,3}([\-\–]|to)\s{0,3}(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\b" +
                                         @"|\b(20\d{2}|19\d{2})\s{0,3}([\-\–]|to)\s{0,3}(20\d{2}|19\d{2})\b" +
                                         @"|\(\s?\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)\s{0,3}([\-\–]|to)\s{0,3}\(\s?\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)" +
                                         @"|\(\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)\s{0,3}([\-\–]|to)\s{0,3}\(\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)" +
                                         @"|\(\s?(20\d{2}|19\d{2})\s?\)\s{0,3}([\-\–]|to)\s{0,3}\(\s?(20\d{2}|19\d{2})\s?\)";

                string srgxExpTillDate = @"\b(" + strMonthTillDate + @")\b\s*\t?\s*(" + strTillNow + @")\b" +
                                        @"|(" + _strSinceMonthDate + @")\s*\t?\s*(" + strTillNow + @")\b" +
                                        @"|\b(From|Since|Onwards|Onward|Now to|Joining date)\b\s?.{0,2}\s?\b(" + strMonthTillDate + @")\b" +
                                        @"|\b(From|Since|Onwards|Onward|Now to|Joining date)\b\s?.{0,2}\s?(" + _strSinceMonthDate + @")";
                Regex rgxDesignNow = new Regex(@"^.{0,5}\s?\t{0,2}\b(Current|Present)?.{0,5}\s?\t{0,2}\b(" + _Designation + @")\b\s?(\s.{0,3})?(\s*[:\-\–]|\s{3}|\t\s{0,7})", RegexOptions.IgnoreCase);
                Regex rgxExperienceLTD = new Regex(@"^.{0,4}\s?\t{0,2}\b(" + _strExperienceLTD + @")[s]?\b(.{0,4}$|\s*\t*:|\s{1,}?[\-\–]|\s{8})", RegexOptions.IgnoreCase);
                Regex rgxExpTillDate = new Regex(srgxExpTillDate, RegexOptions.IgnoreCase | RegexOptions.RightToLeft);
                Regex rgxExpDate = new Regex(strMonthDate + "|" + _strMonthDate, RegexOptions.IgnoreCase);

                #region  New Label -------001
                try
                {
                    for (int cnt = 0; cnt < tblEmplrData.Count && JobTitleID == ""; cnt++)
                    {
                        if (rgxExpTillDate.IsMatch(tblEmplrData[cnt].ToString().Trim()) == false || rgxExpDate.IsMatch(tblEmplrData[cnt].ToString().Trim())) continue;
                        if (FCommon.rgxDesignations.IsMatch(" " + tblEmplrData[cnt].ToString().Trim()) == false) continue;
                        JobTitleID = GetCurrentDesignationRID(tblEmplrData[cnt].ToString().Trim(), false);
                        //  JobTitleID = GetCurrentLocationRID(tblEmplrData[cnt].ToString().Trim(), FCommon.JobTitleList);
                    }
                }
                catch { }
                #endregion



                #region New Label -------002
                try
                {
                    for (int cnt = 0; cnt < DataEmployer.Length && JobTitleID == ""; cnt++)
                    {
                        if (regxJobTitle.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                        string strTitle = DataEmployer[cnt].Trim().Remove(0, regxJobTitle.Match(DataEmployer[cnt].Trim()).Index + regxJobTitle.Match(DataEmployer[cnt].Trim()).Length);
                        if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                            strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                        if ((strTitle.Trim().Length > 1 && FCommon.rgxDesignations.IsMatch(" " + strTitle)) == false) continue;
                        JobTitleID = GetCurrentDesignationRID(strTitle, false);
                        //JobTitleID = GetCurrentLocationRID(strTitle, FCommon.JobTitleList);
                    }
                }
                catch { }
                #endregion
                #region  New Label -------003
                try
                {
                    for (int cnt = 0; cnt < DataEmployer.Length && JobTitleID == ""; cnt++)
                    {
                        if (rgxExpTillDate.IsMatch(DataEmployer[cnt].Trim()) == false || rgxExpDate.IsMatch(DataEmployer[cnt].Trim())) continue;
                        string strTitle = DataEmployer[cnt].Trim();
                        if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                            strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();

                        //code Added Saravana -- For Checking Current Row
                        if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                            strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                        if (FCommon.rgxDesignations.IsMatch(" " + strTitle) == true && JobTitleID == "")
                            JobTitleID = GetCurrentDesignationRID(strTitle, false);
                        //End

                        int End = cnt;
                        int Start = (cnt - 2);
                        for (int iBack = Start; iBack < End && iBack < DataEmployer.Length && JobTitleID == ""; iBack++)
                        {
                            strTitle = DataEmployer[iBack].Trim();
                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                            if (FCommon.rgxDesignations.IsMatch(" " + strTitle) == false || strTitle.Trim().Length > 250) continue;
                            JobTitleID = GetCurrentDesignationRID(strTitle, false);
                            //JobTitleID = GetCurrentLocationRID(strTitle, FCommon.JobTitleList);
                        }
                        End = cnt + 4;
                        for (int iBack = cnt; iBack < End && iBack < DataEmployer.Length && JobTitleID == ""; iBack++)
                        {
                            strTitle = DataEmployer[iBack].Trim();
                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                            if (FCommon.rgxDesignations.IsMatch(" " + strTitle) == false || strTitle.Trim().Length > 250) continue;
                            JobTitleID = GetCurrentDesignationRID(strTitle, false);
                            //JobTitleID = GetCurrentLocationRID(strTitle, FCommon.JobTitleList);
                        }
                        if (JobTitleID == "")
                        {
                            if (FCommon.rgxDesignations.IsMatch(" " + strTitle.Trim()) == false) continue;
                            JobTitleID = GetCurrentDesignationRID(strTitle.Trim(), false);
                            //JobTitleID = GetCurrentLocationRID(strTitle.Trim(), FCommon.JobTitleList);
                        }
                    }
                }
                catch { }
                #endregion
                #region   New Label -------004
                try
                {
                    bool flagTill = false, flagEnd = true;
                    for (int cnt = 0; cnt < tblEmplrData.Count && JobTitleID == ""; cnt++)
                    {
                        if (tblEmplrData[cnt].ToString().Trim().Length == 0)
                        {
                            flagTill = false;
                            flagEnd = true;
                        }
                        if (flagEnd == true && (rgxExpTillDate.IsMatch(tblEmplrData[cnt].ToString()) || rgxExpDate.IsMatch(tblEmplrData[cnt].ToString())))
                            flagTill = true;
                        if (rgxDesignNow.IsMatch(tblEmplrData[cnt].ToString().Trim()))
                        {
                            flagEnd = false;
                            int ct = 0;
                            if (flagTill == true)
                                for (ct = cnt; ct > 0 && JobTitleID == ""; ct--)
                                {
                                    if (tblEmplrData[ct].ToString().Length == 0) break;
                                    if (rgxExpTillDate.IsMatch(tblEmplrData[ct].ToString()) && rgxExpDate.IsMatch(tblEmplrData[ct].ToString().Trim()) == false)
                                    {
                                        if (FCommon.rgxDesignations.IsMatch(" " + tblEmplrData[cnt].ToString().Trim()) == false) continue;
                                        JobTitleID = GetCurrentDesignationRID(tblEmplrData[cnt].ToString().Trim(), false);
                                        //JobTitleID = GetCurrentLocationRID(tblEmplrData[cnt].ToString().Trim(), FCommon.JobTitleList);
                                    }
                                }
                            if (flagTill == false)
                                for (ct = cnt + 1; ct < tblEmplrData.Count && JobTitleID == ""; ct++)
                                {
                                    if (tblEmplrData[ct].ToString().Length == 0) break;
                                    if (rgxExpTillDate.IsMatch(tblEmplrData[ct].ToString()) && rgxExpDate.IsMatch(tblEmplrData[ct].ToString().Trim()) == false)
                                    {

                                        if (FCommon.rgxDesignations.IsMatch(" " + tblEmplrData[cnt].ToString().Trim()) == false) continue;
                                        JobTitleID = GetCurrentDesignationRID(tblEmplrData[cnt].ToString().Trim(), false);
                                        // JobTitleID = GetCurrentLocationRID(tblEmplrData[cnt].ToString().Trim(), FCommon.JobTitleList);
                                    }
                                }
                        }

                    }
                }
                catch { }
                #endregion
                #region   New Label -------005
                try
                {
                    bool flagTill = false, flagEnd = true;
                    for (int cnt = 0; cnt < DataEmployer.Length && JobTitleID == ""; cnt++)
                    {
                        if (DataEmployer[cnt].ToString().Trim().Length == 0)
                        {
                            flagTill = false;
                            flagEnd = true;
                        }
                        if (flagEnd == true && (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString()) || rgxExpDate.IsMatch(DataEmployer[cnt].ToString())))
                            flagTill = true;
                        if (rgxDesignNow.IsMatch(DataEmployer[cnt].ToString().Trim()))
                        {
                            flagEnd = false;
                            int ct = 0;
                            if (flagTill == true)
                                for (ct = cnt; ct > 0 && JobTitleID == ""; ct--)
                                {
                                    if (DataEmployer[ct].ToString().Length == 0) break;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString()) && rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false)
                                    {
                                        string strTitle = DataEmployer[cnt].Trim();
                                        if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                            strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                                        if (FCommon.rgxDesignations.IsMatch(" " + strTitle.Trim()) == false) continue;
                                        JobTitleID = GetCurrentDesignationRID(strTitle.Trim(), false);
                                        //JobTitleID = GetCurrentLocationRID(strTitle.Trim(), FCommon.JobTitleList);
                                    }
                                }
                            if (flagTill == false)
                                for (ct = cnt + 1; ct < DataEmployer.Length && JobTitleID == ""; ct++)
                                {
                                    if (DataEmployer[ct].ToString().Length == 0) break;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString()) && rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false)
                                    {
                                        string strTitle = DataEmployer[cnt].Trim();
                                        if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                            strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                                        if (FCommon.rgxDesignations.IsMatch(" " + strTitle.Trim()) == false) continue;
                                        JobTitleID = GetCurrentDesignationRID(strTitle.Trim(), false);
                                        //JobTitleID = GetCurrentLocationRID(strTitle.Trim(), FCommon.JobTitleList);
                                    }
                                }
                        }
                    }
                }
                catch { }
                #endregion

                #region
                try
                {
                    int _count = 0;
                    for (int cnt = 0; cnt < DataEmployer.Length && JobTitleID == ""; cnt++)
                    {
                        if (DataEmployer[cnt].Trim().Length < 2) continue;
                        if (rgxExperienceLTD.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                        _count = 0;
                        for (int ct = cnt; ct < DataEmployer.Length && JobTitleID == "" && _count < 5; ct++)
                        {
                            if (DataEmployer[ct].Trim().Length < 2) continue;
                            if (DataEmployer[ct].Replace(" ", "").Trim().Length > 150 || rgxExpDate.IsMatch(DataEmployer[ct].Trim())) break;
                            _count++;
                            string strTitle = DataEmployer[ct].Trim();
                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                            if (FCommon.rgxDesignations.IsMatch(" " + strTitle.Trim()) == false) continue;
                            JobTitleID = GetCurrentDesignationRID(strTitle.Trim(), false);
                            // JobTitleID = GetCurrentLocationRID(strTitle.Trim(), FCommon.JobTitleList);
                        }
                    }
                }
                catch { }
                #endregion
            }
            catch
            {

            }
            finally
            {
                if (JobTitleID == "") JobTitleID = "0";
            }
        }
        public void GetJobTitleID(int _DataRowNo, int cnt2, string[,] _LocationArray)
        {
            try
            {
                Regex rgxReporting = new Regex("Reporting|appreciation|Report |Achieved|Achievement", RegexOptions.IgnoreCase);
                int count;
                bool _FlagAsc = true, _FlagDesc = true;
                count = _DataRowNo - cnt2;
                string[] LocationAlias;
                Regex rgxNotJobTitles;
                for (int _cnt = _LocationArray.GetLowerBound(0); _cnt < _LocationArray.GetUpperBound(0) && JobTitleID == ""; _cnt++)
                {
                    if (_LocationArray[_cnt, 0].Trim().Length == 0) continue;

                    LocationAlias = (_LocationArray[_cnt, 0].ToString() + "," + _LocationArray[_cnt, 1].ToString()).Split(',');
                    for (int _cnt1 = 0; _cnt1 < LocationAlias.Length && JobTitleID == ""; _cnt1++)
                    {
                        _FlagAsc = true;
                        _FlagDesc = true;
                        if (LocationAlias[_cnt1].Trim().Length < 2) continue;
                        //string LocnAlias = " " + LocationAlias[_cnt1].Replace("-", " ").Replace("  ", " ").Trim().ToString().ToLower() + " ";
                        rgxNotJobTitles = new Regex(" " + @"(To|with|by|for)" + " " + LocationAlias[_cnt1].Replace("-", " ").Replace("  ", " ").Trim().ToString() + " ", RegexOptions.IgnoreCase);

                        //new
                        for (int cnt = _DataRowNo; cnt > count && cnt > 0 && JobTitleID == "" && _FlagDesc == true; cnt--)
                        {
                            if ((this.DataLines[cnt].ToUpper().IndexOf("EDUCATION") >= 0 || this.DataLines[cnt].ToUpper().IndexOf("UNIVERSITY") >= 0) && this.DataLines[cnt].Replace(" ", "").Length < 40)
                                _FlagDesc = false;
                            if (rgxReporting.IsMatch(" " + this.DataLines[cnt].ToString() + " ")) continue;
                            if (rgxNotJobTitles.IsMatch(" " + this.DataLines[cnt].ToString() + " ") && this.DataLines[cnt].ToString().ToLower().IndexOf("promote") < 0) continue;
                            string _strDataLines = " " + this.DataLines[cnt].ToLower().Replace(",", " ").Replace("-", " ").Replace(".", " ").Replace(":", " ").Replace("(", " ").Replace(")", " ").Replace("  ", " ").ToString() + " ";
                            if (_strDataLines.IndexOf(" " + LocationAlias[_cnt1].Replace("-", " ").Replace("  ", " ").Trim().ToString().ToLower() + " ") >= 0)
                            {
                                JobTitleID = _LocationArray[_cnt, 2].ToString();
                                JobTitle = _LocationArray[_cnt, 0].ToString();
                                break;
                            }
                        }
                        //end
                        for (int cnt = _DataRowNo + 1; cnt < (_DataRowNo + 4) && cnt < DataLines.Length && JobTitleID == "" && _FlagAsc == true; cnt++)
                        {
                            if ((this.DataLines[cnt].ToUpper().IndexOf("EDUCATION") >= 0 || this.DataLines[cnt].ToUpper().IndexOf("UNIVERSITY") >= 0) && this.DataLines[cnt].Replace(" ", "").Length < 40)
                                _FlagAsc = false;

                            if (rgxReporting.IsMatch(" " + this.DataLines[cnt].ToString() + " ")) continue;
                            if (rgxNotJobTitles.IsMatch(" " + this.DataLines[cnt].ToString() + " ") && this.DataLines[cnt].ToString().ToLower().IndexOf("promote") < 0) continue;
                            string _strDataLines = " " + this.DataLines[cnt].ToLower().Replace(",", " ").Replace("-", " ").Replace(".", " ").Replace(":", " ").Replace("(", " ").Replace(")", " ").Replace("  ", " ").ToString() + " ";
                            if (_strDataLines.IndexOf(" " + LocationAlias[_cnt1].Replace("-", " ").Replace("  ", " ").Trim().ToString().ToLower() + " ") >= 0)
                            {
                                JobTitleID = _LocationArray[_cnt, 2].ToString();
                                JobTitle = _LocationArray[_cnt, 0].ToString();
                                break;
                            }
                        }
                    }
                }
            }
            catch { }
        }

        #endregion

        #region "work experience"
        /// <summary>
        /// Fetching the Work Experience of Candidate
        /// </summary>
        private void GetExperience()
        {
            StringBuilder sbWorkExperience = new StringBuilder();
            Workexperience = "";
            try
            {
                for (int cnt = 0; cnt < this.DataLines.Length; cnt++)
                {
                    if (this.DataLines[cnt].ToLower().IndexOf("work experience") >= 0)
                    {
                        int posStart = this.DataLines[cnt].ToLower().IndexOf("work experience");
                        int posEnd = this.DataLines[cnt].Length - posStart - 15;
                        if (sbWorkExperience.ToString().Trim().Length > 1)
                            sbWorkExperience.Append(", " + this.DataLines[cnt].Substring(posStart + 15, posEnd));
                        else
                            sbWorkExperience.Append(this.DataLines[cnt].Substring(posStart + 15, posEnd));
                        break;
                    }
                    if (this.DataLines[cnt].ToLower().IndexOf("experience") >= 0)
                    {
                        int posStart = this.DataLines[cnt].ToLower().IndexOf("experience");
                        int posEnd = this.DataLines[cnt].Length - posStart - 10;
                        if (sbWorkExperience.ToString().Trim().Length > 1)
                            sbWorkExperience.Append(", " + this.DataLines[cnt].Substring(posStart + 10, posEnd));
                        else
                            sbWorkExperience.Append(this.DataLines[cnt].Substring(posStart + 10, posEnd));
                        break;
                    }
                }
                Workexperience = sbWorkExperience.ToString().Trim();
            }
            catch
            {

            }
            finally
            {
                sbWorkExperience = null;
            }
        }

        #endregion

        #region "total experience"
        /// <summary>
        /// Candidate Total Experience
        /// step 1.  Fetching the Experience from the ResumeConverted Text
        /// step 2. If 0 experience found  then take the Education Completed year (Last Completed Year -ccurrent Year)
        /// </summary>
        private void GetTotalExperience()
        {
            try
            {
                string texp = "0";
                //int MaxYear = 1;
                int CurrentYear = DateTime.Now.Year;
                double experience = 0;
                GetExpYear obj = null;
                TotalEXP = "0";
                RelevantEXP = "0";
                try
                {
                    this.eduCompleteYearEXP = opGetParseUniqueData(this.eduCompleteYear);
                    obj = new GetExpYear(this.DOB, this.eduCompleteYearEXP);
                    texp = obj.opCheckExperience(ResumeConvertedText.Replace("Manitenance", "").Replace("Expert", "").Replace("<Br>", "").Replace("<br>", "").Replace("Management", "").Replace("S/W", "").Replace("Expensive", "").Replace("expensive", "").Replace("-", " ").Replace("Software Exposure", "").Replace("software exposure", "")).ToString();
                    try
                    {
                        experience = Convert.ToDouble(texp);
                    }
                    catch { }

                    if (experience <= 0.5)
                        experience = Convert.ToDouble(geExperienceFromWorkExperience());

                    //if (experience <= 0.5 && this.eduCompleteYearEXP.Trim().Length != 0)
                    //{
                    //Code Comended by Saravana
                    // Experience <= 0.5 and Education <> 0 then it will take Educationcompleted year based on total exp.
                    //MaxYear = obj.GetMaxEducationYear();
                    //if (MaxYear == 0)
                    //    experience = 0;
                    //else
                    //    experience = CurrentYear - MaxYear;
                    //if (experience > 40 || experience <= 1)
                    //    experience = 0;
                    //if (DateTime.Now.Month < 8) experience--;
                    //if (experience < 0) experience = 0;
                    //}

                    string[] str = Convert.ToString(experience).Split('.');
                    if (str.Length > 1)
                    {
                        try
                        {
                            if (Convert.ToInt16(str[1]) > 9)
                                TotalEXP = str[0] + "." + Convert.ToString(str[1]);
                            else
                                TotalEXP = str[0] + ".0" + Convert.ToString(str[1]);

                        }
                        catch
                        {
                            TotalEXP = str[0] + ".0" + Convert.ToString(str[1]);
                        }
                        //TotalEXP = str[0] + ".0" + Convert.ToString(str[1]);
                    }
                    else
                    {
                        TotalEXP = experience.ToString();
                    }
                    if (RelevantEXP == "" || RelevantEXP == "0")
                        RelevantEXP = TotalEXP;
                }
                catch
                {
                }
                finally
                {
                    obj = null;
                }
            }
            catch
            {
            }
        }
        /// <summary>
        /// Get TotaL Experience from the Work Experience
        /// searching for Words related to experience eg:- worked as
        /// step1 matching the tPatter4Location
        /// step2 if Match found storing the string into tAdd String Builder variable
        /// step3 Checking from work experience,professional experecnce etc
        /// step4 if Match found storing the string into tAdd String Builder variable
        /// step5 fetching the Years from the tAdd String
        /// step6 Storing the the YEar into the ArraList
        /// step7 Finding the Smallest values from the ArrayList
        /// </summary>
        /// <returns></returns>
        private decimal geExperienceFromWorkExperience()
        {
            decimal dExp = 0;
            // decimal expyrs = 0;
            // bool FullYeaerTxt = false;
            StringBuilder tAdd = new StringBuilder();
            string tPatter4Location = @"presently working with|presently working in|currently working in" +
                                                          "|current employer|presently working at|Present employer" +
                                                          "|presently employer|Current organisation|Current organisation:" +
                                                          "|present organization:|currently associate with|currently associated with" +
                                                          "|presently associate with|presently associated with|employer:" +
                                                          "|present job|present employment:|presently working|currently working for" +
                                                          "|Presently working for|company :|company:|current working in:" +
                                                          "|current working in :|company name:|current status:|currently working with" +
                                                          "|current professional profile|currently working :|Current Organization:|current experience:" +
                                                          "|current assignment|WORK EXPOSURE :Presently with|at present working with|present company" +
                                                          @"|currently working as a (\w{3,25}\s){1,3}with" +
                                                          @"|currently working as (\w{3,25}\s){1,3}in" +
                                                          @"|currently working as an\s(\w{3,25}\s){1,3}for" +
                                                          "|currently working at" +
                                                          @"|working as\s(\w{2,25}\s){1,3}at|working as a\s(\w{2,25}\s){1,3}at|working as an\s(\w{2,25}\s){1,3}at" +
                                                          @"|currently working as\s(\w{2,25}\s){1,3}at|currently working as a\s(\w{2,25}\s){1,3}at|currently working as an\s(\w{2,25}\s){1,3}at" +
                                                          @"|working as an\s(\w{2,25}\s){1,3}for" +
                                                          @"|working as a\s(\w{2,25}\s){1,3}in" +
                                                          @"|working as\s(\w{2,25}\s){1,3}in" +
                                                          @"|working as\s(\w{2,25}\s){1,3}[\s]?with" +
                                                          @"|working as a\s(\w{2,25}\s){1,3}[\s]?with|PRESENT - Employments Details/ Projects Handled:" +
                                                          @"|\d\) Organization|Currently I am working for|Currently employed as a|current job profile|currently  working at" +
                                                          "|present experience:|present experience :|Comp Name :|Comp Name:" +
                                                          @"|since[\s]\d{2,4} associating with|work as a" +
                                                          @"|since[\s]" + mon + @"[\s'-]\d{2,4}|since[\s]" + month + @"[\s'-]\d{2,4}|Present Employer|Presently working as a|Presently associated with|Currently working as|working in|Working for|working at|Employer:|worked as|worked for|worked in|worked at";
            Regex exRemove = new Regex(@"[\s,\(\:](" + tPatter4Location + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
            Regex exRemove1 = new Regex(@"[\s,\(\:](" + tPatter4Location + @")[\s]?[\-\s]?$", RegexOptions.IgnoreCase);

            string tPatterWorkExperience = month + @"[\s]\d{4} [-–] " + month + @" \d{4}|" + mon + @"[\s]\d{4} [-–] " + mon + @" \d{4}" +
                                        "|" + month + @"[\s]?[\s`'’]\d{2,4}[\s]?[-–][\s]?" + month + @"[\s]?[\s`'’‘]\d{2,4}|" + mon + @"[\s]?[\s`'’]\d{2,4}[\s]?[-–][\s]?" + mon + @"[\s]?[\s`'’‘]\d{2,4}" +
                                        "|" + month + @"[\s]?[\s`'’’]\d{2,4}[\s]?to[\s]?[\s]?" + month + @"[\s]?[\s`'’‘]\d{2,4}|" + mon + @"[\s]?[\s`'’]\d{2,4}[\s]?to[[\s]?\s]?" + mon + @"[\s]?[\s`'’‘]\d{2,4}" +
                                        @"|\d{2,4}[,][\s]?" + mon +
                                        @"|\d{2,4}[,][\s]?" + month +
                                        @"|" + month + @"[,\.-]?[\s]?\d{2,4}|" + mon + @"[,\.-]?[\s]?\d{2,4}" +
                                        @"|\d{2,4}[\s]?[\s]?to[\s]?[\s]?\d{2,4}" +
                                        @"|\d{4}[\s]?to[\s]?\d{4}" +
                                        @"|\d{2}[\s]?[--–~][\s]?\d{4}" +
                                        @"|(?<month>\d{2})/(?<year>\d{2}|\d{4})" +
                                        @"|^([0-2]))\/(\d{4}$" +
                                        @"|^((0[1-9])|(1[0-2]))\/(\d{4})$" +
                                        @"|\d{4}[\s]?[--–~][\s]?\d{4}|\d{4}[\s]?[-–~][\s]?\d{2}" +
                                        @"|\d{4}[\s]?[--–~][\s‘’]?\d{2}|\d{4}[\s]?[--~][\s]?\d{2}";

            //September ‘05 to  Octomber ‘07 -- September ’07 to December ‘09  
            string strMonth = @"(January|February|March|April|May|June|July|August|September|October|Octomber|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl|Jan.|Feb.|Mar.|Apr.|May.|Jun.|Jul.|Aug.|Sep.|Oct.|Nov.|Dec.)\.?";

            string strMonthDate = @"\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000- june 2004
                               @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)\b\s?.?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000 - june 2004  -- January 2009 – December 2009
                               @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July2000 - May2004 
                               @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // May 2000- june2004
                               @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July2000 - May 2004 
                               @"|\b(" + strMonth + @")\s?[,\'’]?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\s?[,\'’]?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // May,04th 2000- june,22nd 2004
                               @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +
                               @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July98 - May2004 
                               @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +
                               @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July98 - May2004 
                               @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                               @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                               @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                               @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                               @"|\b(" + strMonth + @")\b\s?\s?.{0,1}(till|to|to Till)\s?(\d{4}|\d{2})\b\s?[,\-]?\s*(\d{4}|\d{2})\b" +    //May 1999 to 2000
                               @"|\b(" + strMonth + @")\b\s?[,\-]?\s?\b(" + strMonth + @")\b\s?.{0,1}\s?(\d{4}|\d{2})\b" +
                               @"\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000- june 2004  March 07 –Dec 10
                               @"|\b(" + strMonth + @")[\.’\s]?[\s]?(\d{4}|\d{2})[\s]?[\-\–][\s]?(" + strMonth + @")[\.’\s]?[\s]?(\d{4}|\d{2})\b" +
                               @"|" + strMonth + @" \d{4} to " + strMonth + @" \d{4}|\d{2}(st|nd|rd|Th)\s" + strMonth + @"\s\d{4}\s(till|to|to till)\sdate|\d{2}(st|nd|rd|Th)\s" + strMonth + @"\s\d{4}\s\d{2}(st|nd|rd|Th)\s" + strMonth + @"\s\d{4}\s";


            string _strMonthDate = @"\b(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\b";
            string _strMonthDate1 = "(\\d{1})(\\s+)(\\/)(\\s+)(\\d{2})(\\s+)(-)(\\s+)(\\d{1})(\\s+)(\\/)(\\s+)(\\d{2})|(\\d{1})(\\/)(\\d{2})(\\s+)(-)(\\s+)(\\d{1})(\\/)(\\d{2})";
            Regex exWorkdtFrmt = new Regex(@"[\s,\(\:](" + strMonthDate + "|" + _strMonthDate + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase); //5/90 -  5/94

            Regex exWorkExperience = new Regex(@"[\s,\(\:](" + tPatterWorkExperience + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
            Regex exWorkExperience1 = new Regex(@"[\s,\(\:](" + tPatterWorkExperience + @")[\s]?[\-\s]?$", RegexOptions.IgnoreCase);
            Regex exWorkExperience2 = new Regex(@"(?<month>\d{2})/(?<year>\d{2}|\d{4})", RegexOptions.IgnoreCase);
            Regex exWorkExperience3 = new Regex(mon + @"\ \d{2}$", RegexOptions.IgnoreCase);
            Regex exWorkExperience4 = new Regex(month + @"\ \d{2}$", RegexOptions.IgnoreCase);
            Regex exWorkExperience6 = new Regex(month + @"\ \d{2}\ \[-]" + mon + @"\ \d{2}$", RegexOptions.IgnoreCase); //March 09 –Dec 10
            Regex exWorkExperience5 = new Regex(@"(?<year>\d{4}) to (?<year>\d{4})", RegexOptions.IgnoreCase);

            string tWorkExperience = "Professional Work Experience|Total Full Time Experience (in Months)|Career Progression|LABOR EXPERIENCE|work experience|working experience|professional experience|experience" +
                                     "|employment history|highlights of professional experience|details of experience" +
                                     "|managerial experiences|previous work experience|professional summary|selected experience" +
                                     "|professional work experience|E x p e r i e n c e|OCCUPATIONAL CONTOUR|work history" +
                                     "|Professional Experience in Brief:|Professional Experience in Brief|Employee History" +
                                     "|employment history|career history|-: professional experience|proffesional experience|EMPLOYMENT HISTORY|Organisational Experience" +
                                     "|performance highlights|current assignment|assignments held|experience summary|Current Career Level|PROFESSIONA L EXPERIENCE|Relevant Experience|Professional Experience|CAREER HIGHLIGHTS|Career profile|Role:|Organizational Details";

            Regex exExperience = new Regex(@"[\s,\(\:](" + tWorkExperience + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
            Regex exExperience1 = new Regex(@"[\s,\(\:](" + tWorkExperience + @")[\s]?[\-\s]?$", RegexOptions.IgnoreCase);
            int Nos = 0;

            Regex regNotEXPs = null;
            Regex rgxPersnlStr = new Regex(@"[\|\s,\(\:](SKILS|EDUCATION|ACHIVEMENTS|PROFESSIONA L EXPERIENCE AND SIGNIFICANT ACHIEVEMENT|Personal Information|personal detail|Personal Dossier|personal details|personal particulars|personal data|personal facts|Personal Profile|Activities  Leadership|Key Tasks|CERTIFICATION|trainings|educational attainment|Academic Experience|Activities/Achievements|Mathematics|Educational Qualifications|EDUCATIONAL QUALIFICATION|ACADEMIA|Qualifications)[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
            string tNotExp = "Born|Date Of Birth|Education Year|Qualifications:|Date of Birth|Date of Birth:|BIRTHDAY:|Born:|Born on|Birth Date|Birth :|d. o. b|d-o-b|d o b|d  o  b|date and place of birth:|date and place of birth|date and country of birth|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|date of birth/age|date of birthage|b\\'date|b’date|date  of  birth|date of birth|date ofbirth|dob|date & place of birth|d.o.b|date of birth|date-of-birth|date   of   birth|date of  birth|date of birth:|date  of   birth  :|DOB-|DATE OF BIRTH:" +

                @"|sql server 2005/2008|sqlserver2008|dotnet2|sql server 2008r2|specification|quarterly|requirements|hedge funds|upgraded sql server|sql server 2005|sql server  2005|sql 2005|sql server 2000|windows 2003|windows 2008|sharepoint 2010|share point 2010|ssas 2008|ssrs 2008|powerview 2012|ssrs 2005|ssis 2008|ssis 2005|sql server 2012|windows servers 2000|windows servers 2003|PL/SQL|SQL Server 2000 to 2005|Server from 2000 to 2005|SQL 2000, 2005 and 2008" +
                @"|windows servers,2003/2008|mscse 2003|mcitp 2008 server|ms-windows 2000|exchange server2000|sql version 2000|customer name|SQL Server 7.0/2000 / 2005|visual studio2005|visual studio 2005|visual studio 2008|visual studio 2010|checkpoint 2000|norton 2002|services 2000|windows 2000|microsoft office 2007|Studio 2008|Studio 2005|Studio 2010|Visual Studio|SilverLight|Exchange server 2007|windows server 2008|Posted at|Reporting to|Position    :|SQL clusters" +
                @"|Enviroment|Has been to|Page\d{1}";

            regNotEXPs = new Regex(@"\b" + tNotExp + @"\b", RegexOptions.IgnoreCase);
            try
            {
                for (int OuterCnt = 0; OuterCnt < DataLines.Length; OuterCnt++)
                {
                    MatchCollection matches = exRemove.Matches(" " + DataLines[OuterCnt].Trim());
                    if (matches.Count == 0)
                        matches = exRemove1.Matches(" " + DataLines[OuterCnt].Trim());
                    if (matches.Count > 0)
                        for (int InnerCnt = OuterCnt; (InnerCnt < DataLines.Length && InnerCnt < (OuterCnt + 2)); InnerCnt++)
                        {
                            if (rgxPersnlStr.IsMatch(" " + DataLines[InnerCnt].ToString().Replace("&", "")) == true && DataLines[InnerCnt].Trim().Contains("Education Pvt") == false) break;
                            tAdd.Append(" " + DataLines[InnerCnt].Trim());
                        }
                    if (opFindMatch0(DataLines[OuterCnt].Trim(), exExperience, exExperience1) == 1)
                    {
                        int InnerWCnt = 0;
                        for (InnerWCnt = OuterCnt; (InnerWCnt < DataLines.Length); InnerWCnt++)
                        {
                            Nos = InnerWCnt;
                            bool YearFormat1 = false;
                            bool YearFormat2 = false;
                            int inncnt = 0;
                            matches = exWorkExperience.Matches(" " + DataLines[InnerWCnt].Trim());
                            if (matches.Count == 0)
                                matches = exWorkExperience1.Matches(" " + DataLines[InnerWCnt].Trim());

                            if ((DataLines[InnerWCnt].Trim().ToLower().Contains("company") == false && DataLines[InnerWCnt].Trim().Contains("Education Pvt") == false && DataLines[InnerWCnt].Trim().Contains("Management Skills") == false && opFindMatch(DataLines[InnerWCnt].Trim(), regSkillNot, regSkillNot1) == 1) || DataLines[InnerWCnt].Trim().ToLower().IndexOf("report shows") >= 0)
                                break;
                            //if (DataLines[InnerWCnt].Trim().ToLower().IndexOf("report shows") >= 0) break; Management Skills
                            if (matches.Count == 0)
                                matches = exWorkExperience2.Matches(" " + DataLines[InnerWCnt].Trim());
                            inncnt = 0;
                            inncnt = InnerWCnt + 1;
                            if (inncnt <= DataLines.Length)
                                if ((matches.Count > 1) && (DataLines[InnerWCnt + 1].ToString().Trim() != DataLines[InnerWCnt + 1].ToString().StartsWith("To").ToString()))
                                {
                                    YearFormat2 = true;
                                }
                            if (matches.Count == 0)
                            {
                                matches = exWorkExperience3.Matches(" " + DataLines[InnerWCnt].Trim());
                                inncnt = InnerWCnt + 1;
                                if (inncnt <= DataLines.Length)
                                    if ((matches.Count > 1) && (DataLines[InnerWCnt + 1].ToString().Trim() == "To"))
                                    {
                                        YearFormat1 = true;
                                    }
                            }
                            if (matches.Count == 0)
                            {
                                matches = exWorkExperience4.Matches(" " + DataLines[InnerWCnt].Trim());
                                inncnt = 0;
                                inncnt = InnerWCnt + 1;
                                if (inncnt <= DataLines.Length)
                                    if ((matches.Count > 1) && (DataLines[InnerWCnt + 1].ToString().Trim() == "To"))
                                    {
                                        YearFormat1 = true;
                                    }
                            }
                            if (matches.Count == 0)
                                matches = exWorkExperience5.Matches(" " + DataLines[InnerWCnt].Trim());
                            if (matches.Count == 0)
                                matches = exWorkdtFrmt.Matches(" " + DataLines[InnerWCnt].Trim());
                            if (matches.Count == 0)
                            {
                                string re1 = "((?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Sept|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?))( )(\\d+)( )(.)(\\s+)((?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Sept|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?))(\\s+)(\\d+)";	// Month 1

                                Regex r = new Regex(re1, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                                matches = r.Matches(DataLines[InnerWCnt].Trim());
                                inncnt = 0;
                                inncnt = InnerWCnt + 1;
                                if (inncnt <= DataLines.Length)
                                {
                                    //string CompareStr = DataLines[InnerWCnt + 1].ToString().Trim();
                                    if ((matches.Count == 1) && (DataLines[InnerWCnt + 1].ToString().Trim() != DataLines[InnerWCnt + 1].ToString().StartsWith("To").ToString()))
                                    {
                                        YearFormat2 = true;
                                    }
                                }

                                if (matches.Count == 0)
                                {
                                    //"March 09 –Dec 10" Formate Supported 
                                    string RgxFrmtYear = "(" + month + ")( )(\\d+)( )(.)" + mon + "(\\s+)(\\d+)";
                                    Regex REg = new Regex(RgxFrmtYear, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                                    matches = REg.Matches(DataLines[InnerWCnt].Trim());
                                    inncnt = 0;
                                    inncnt = InnerWCnt + 1;
                                    if (inncnt <= DataLines.Length)
                                        if ((matches.Count > 1) && (DataLines[InnerWCnt + 1].ToString().Trim() != DataLines[InnerWCnt + 1].ToString().StartsWith("To").ToString()))
                                        {
                                            YearFormat2 = true;
                                        }
                                }
                                if (matches.Count == 0)
                                {
                                    //  "2004 - 2006" "6/2008 – 4/2010"  
                                    string re11 = "(\\d{4})(\\s+)(.)(\\s+)(\\d{4})|(\\d{1})(\\/)(\\d{4})(\\s+)(–)(\\s+)(\\d{1})(\\/)(\\d{4})";
                                    Regex REg = new Regex(re11, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                                    matches = REg.Matches(DataLines[InnerWCnt].ToString());
                                    inncnt = 0;
                                    inncnt = InnerWCnt + 1;
                                    if (inncnt <= DataLines.Length)
                                        if ((matches.Count > 1) && (DataLines[InnerWCnt + 1].ToString().Trim() != DataLines[InnerWCnt + 1].ToString().StartsWith("To").ToString()))
                                        {
                                            YearFormat2 = true;
                                        }
                                }
                                if (matches.Count == 0)
                                {
                                    string regx11 = "(\\d)(\\d)(\\/)(\\d)(\\d)(\\d)(\\d)(-)(\\d)(\\d)(\\/)(\\d)(\\d)(\\d)";
                                    Regex REgexs = new Regex(regx11, RegexOptions.IgnoreCase | RegexOptions.Singleline);

                                    matches = REgexs.Matches(DataLines[InnerWCnt].Trim());
                                    inncnt = 0;
                                    inncnt = InnerWCnt + 1;
                                    if (inncnt <= DataLines.Length)
                                        if ((matches.Count > 1) && (DataLines[InnerWCnt + 1].ToString().Trim() != DataLines[InnerWCnt + 1].ToString().StartsWith("To").ToString()))
                                        {
                                            YearFormat2 = true;
                                        }
                                }
                            }
                            if (matches.Count > 0)
                            {
                                int InnerCnt = 0;
                                int Cnt = 2;
                                if (YearFormat1 == true)
                                    Cnt = 3;
                                if (YearFormat2 == true)
                                    Cnt = 1;

                                for (InnerCnt = InnerWCnt; (InnerCnt < DataLines.Length && InnerCnt < (InnerWCnt + Cnt)); InnerCnt++)
                                {
                                    string iExp = "";
                                    //string NonItExp = "0";
                                    dExp = 0;
                                    iExp = DataLines[InnerCnt].ToString();

                                    if (rgxPersnlStr.IsMatch(" " + DataLines[InnerCnt].ToString().Replace("&", "")) == true) break;
                                    if (DataLines[InnerCnt].ToString() == "SKILS" || DataLines[InnerCnt].ToString() == "EDUCATION" || (DataLines[InnerCnt].ToString() == "ACHIVEMENTS" && DataLines[InnerCnt].ToString() != "PROFESSIONA L EXPERIENCE AND SIGNIFICANT ACHIEVEMENT") || DataLines[InnerCnt].ToString() == "Key Tasks" || DataLines[InnerCnt].ToString().ToLower().Contains("personal data") || DataLines[InnerCnt].ToString() == "CERTIFICATION" || DataLines[InnerCnt].ToString().ToLower() == "trainings" || DataLines[InnerCnt].ToString().ToLower().Contains("educational attainment"))
                                        break;
                                    else
                                    {
                                        if (regNotEXPs.IsMatch(DataLines[InnerCnt].Trim()) == false)
                                            tAdd.Append(" " + DataLines[InnerCnt].Trim());
                                    }
                                    InnerWCnt = InnerCnt;
                                }
                                //Nos = InnerWCnt;
                            }
                        }
                    }
                }
                try
                {
                    if (tAdd.Length > 0)//&& FullYeaerTxt != true
                    {
                        ArrayList dArrayForExperience = new ArrayList();
                        Regex ex = new Regex(@"(" + tPatternEducationYear + "|" + _strMonthDate + ")", RegexOptions.IgnoreCase);
                        Regex exNewDt = new Regex(@"[\s,\(\:](" + _strMonthDate + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
                        Regex exNewDt1 = new Regex(@"[\s,\(\:](" + _strMonthDate1 + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
                        MatchCollection matches = ex.Matches(" " + tAdd);
                        bool bdtFrmtFlg = false;
                        if (matches.Count > 0)
                            foreach (Match m in matches)
                            {
                                bdtFrmtFlg = false;
                                string strTwo = "";
                                string str = "";
                                if (exNewDt.IsMatch(" " + str) == true)
                                    str = m.Value.ToLower().Trim().Replace("to ", "-").Replace("~", "-").Replace("`", "-").Replace("'", "-").Replace("’", "-").Replace(",", "").Replace("‘", "-").Replace("/", "-").Replace("‘", "").Replace("–", "-").Replace("&", " ").Replace(";", "");
                                else
                                    str = m.Value.ToLower().Trim().Replace("to ", "-").Replace("~", "-").Replace("`", "-").Replace("'", "-").Replace("’", "-").Replace(",", "").Replace("‘", "-").Replace("‘", "").Replace("–", "-").Replace("&", " ").Replace(":", "");

                                try
                                {
                                    if (str.EndsWith("-"))
                                        str = str.Remove(str.Length - 1, 1);
                                }
                                catch { }

                                if (exNewDt.IsMatch(" " + str) == true)
                                {
                                    try
                                    {  //Format 01/04 - 10/09
                                        if (str.Contains("/") == true && str.Contains("-") && exNewDt.IsMatch(str) == true && str.Contains("199") == false && str.Contains("198") == false && str.Contains("200") == false && str.Contains("201") == false && str.Contains("202") == false)
                                        {
                                            str = str.Remove(str.IndexOf("-"), str.Length - str.IndexOf("-"));
                                            str = str.Replace("/", "-");
                                            bdtFrmtFlg = true;
                                        }
                                    }
                                    catch
                                    {
                                        bdtFrmtFlg = false;
                                    }
                                }
                                Regex rgxstrMonth = new Regex(strMonth, RegexOptions.IgnoreCase);
                                string[] strSplit = null;
                                try
                                {
                                    if (str.IndexOf("-") > 0 || str.IndexOf("–") > 0)
                                    {
                                        strSplit = str.Split('-', '–');
                                        for (int k = 0; k <= strSplit.GetUpperBound(0); k++)
                                        {
                                            if (strSplit.Length >= 2)
                                            {
                                                if (strSplit[k].Length == 2 && strSplit[k + 1].Length == 4)
                                                {
                                                    str = strSplit[k + 1];
                                                    strTwo = strSplit[k + 1];
                                                }
                                                else if (strSplit[k].Trim().Length == 6 && strSplit[k + 1].Trim().Length == 6) // jun 07 - jul 07
                                                {
                                                    try
                                                    {
                                                        if (strSplit[k].Substring(4, 2).StartsWith("0"))
                                                            str = "20" + strSplit[k].Substring(4, 2);
                                                        else
                                                        {
                                                            if (Convert.ToInt16(strSplit[k].Substring(4, 2)) < 40)
                                                                str = "20" + strSplit[k].Substring(4, 2);
                                                            else
                                                                str = "19" + strSplit[k].Substring(4, 2);
                                                        }
                                                    }
                                                    catch { }
                                                }
                                                else if ((strSplit[k].Trim().Length == 4 && strSplit[k + 1].Trim().Length == 4) || (strSplit[k].Trim().Length > 4 && strSplit[k + 1].Trim().Length > 4 && rgxstrMonth.IsMatch(strSplit[k + 1]) == true && rgxstrMonth.IsMatch(strSplit[k]) == true)) // 2005 - 2010
                                                // else if ((strSplit[k].Trim().Length == 4 && strSplit[k + 1].Trim().Length == 4)) // 2005 - 2010
                                                {
                                                    str = rgxstrMonth.Replace(strSplit[k], "");
                                                    strTwo = rgxstrMonth.Replace(strSplit[k + 1], "");
                                                }
                                                else if (rgxstrMonth.IsMatch(strSplit[k]) == true && strSplit[k + 1].Trim().Length == 2)
                                                {
                                                    str = rgxstrMonth.Replace(strSplit[k + 1], "");
                                                    strTwo = rgxstrMonth.Replace(strSplit[k], "");
                                                }
                                                else if ((strSplit[k].Trim().Length == 2 || strSplit[k].Trim().Length == 1) && strSplit[k + 1].Trim().Length == 2 && bdtFrmtFlg == true) // 12 - 97  mm - yy
                                                {
                                                    try
                                                    {
                                                        if (strSplit[k + 1].StartsWith("0"))
                                                            str = "20" + strSplit[k];
                                                        else
                                                        {
                                                            if (Convert.ToInt16(strSplit[k + 1]) < 40)
                                                                str = "20" + strSplit[k + 1];
                                                            else
                                                                str = "19" + strSplit[k + 1];
                                                        }
                                                    }
                                                    catch { }
                                                }

                                            }
                                            else
                                            {
                                                if (strSplit.Length > 1)
                                                    str = strSplit[k];
                                                if (strSplit.Length > 0)
                                                    strTwo = strSplit[k];
                                                if (strTwo.Trim().Length != 0 && strTwo.Trim().Length > 2)
                                                    strTwo = strTwo.Substring(0, 2);
                                            }
                                            for (int j = 65; j < 122; j++)
                                            {
                                                str = str.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                                                strTwo = strTwo.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                                            }
                                            if (str.Trim().Length == 0) continue;

                                            if (str.Trim().Length == 2)
                                                str = getYear(str) + str.Trim();
                                            if (strTwo.Trim().Length == 2)
                                                strTwo = getYear(strTwo) + strTwo.Trim();

                                            dArrayForExperience.Add(str);
                                        }

                                    }
                                    else
                                    {
                                        for (int j = 65; j < 122; j++)
                                        {
                                            str = str.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                                            strTwo = strTwo.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                                        }
                                        if (str.Trim().Length == 0) continue;

                                        if (str.Trim().Length == 2)
                                            str = getYear(str) + str.Trim();
                                        if (strTwo.Trim().Length == 2)
                                            strTwo = getYear(strTwo) + strTwo.Trim();

                                        dArrayForExperience.Add(str);
                                    }
                                    if (strTwo.Trim().Length == 0) continue;
                                    dArrayForExperience.Add(strTwo);
                                }
                                catch { }
                            }
                        if (dArrayForExperience.Count > 0)
                        {
                            int CurrentYear = DateTime.Now.Year;
                            int expYear = GetMinYear(ref dArrayForExperience);
                            if (expYear == 0)
                                dExp = 0;
                            else
                                dExp = CurrentYear - expYear;
                            if (dExp > 40)
                                dExp = 0;
                            if (DateTime.Now.Month < 8) dExp--;
                            if (dExp < 0) dExp = 0;
                        }
                    }
                }

                catch { }

            }
            catch { }
            return dExp;
        }


        /// <summary>
        /// Get the Smallest values in the ArrayList
        /// </summary>
        /// <param name="dArrayForExperience"></param>
        /// <returns></returns>
        private int GetMinYear(ref ArrayList dArrayForExperience)
        {
            int iSmall = 0;
            try
            {
                if (dArrayForExperience[0].ToString().Trim().Length <= 5)
                    iSmall = Convert.ToInt32(dArrayForExperience[0]);
                for (int i = 0; i <= dArrayForExperience.Count - 1; i++)
                {
                    if (dArrayForExperience[i].ToString().Trim() != "" && dArrayForExperience[i].ToString().Trim().Contains("-") == false && dArrayForExperience[i].ToString().Trim().Contains("&") == false && dArrayForExperience[i].ToString().Trim().Contains(";") == false)
                        if (dArrayForExperience[i].ToString().Trim().Length > 2)
                            try
                            {
                                if (Convert.ToInt64(dArrayForExperience[i]) > 1940)
                                {
                                    if (iSmall > Convert.ToInt32(dArrayForExperience[i]) || iSmall == 0)
                                        iSmall = Convert.ToInt32(dArrayForExperience[i]);
                                }
                                else if (Convert.ToInt64(dArrayForExperience[i]) < 1940)
                                {
                                    iSmall = 0;
                                }
                            }
                            catch
                            {
                                continue;
                            }


                }
            }
            catch
            {
                iSmall = 0;
            }
            return iSmall;
        }
        #endregion

        #region "present location"
        /// <summary>
        /// Get the Location of the Candidate
        /// 	1.  Search for Current Address , Present Address etc.,
        /// 	2.  Search for current location etc
        /// 	3.  Search for Preferredlocation/preferr location/
        ///		4.  Checking From the Permanent address...
        ///		5.  Checking on the top 10 lines..
        ///	 Check the strAddress from the FCommon.PrefLocation
        /// </summary>
        private void GetCurrentLocation()
        {
            StringBuilder strAddress = null;
            try
            {
                strAddress = new StringBuilder();
                PrefLocations = "";
                LocationsIDs = ""; int prelBrFlag = 0, FlagPresent = 0, prelNotFlag = 0;
                // Match mtch = null;
                Regex regAddress = null, regAddress1 = null;

                Regex regPincode = null;
                //string tStrPin = "";
                string _strRegPinPattern = @"\s[a-z|A-Z]{0,2}?.\s\d{5}\b|\s[a-z|A-Z]{0,20}?.\s\d{5}?$|\s[a-z|A-Z]{0,20}\s\s\d{5}?\s\s\b" + // NJ 08514
                                           @"|\s[a-z|A-Z]{0,25}?.\d{5}?\s\s\b|\s[a-z|A-Z]{0,25}?.\d{5}?\b" + // Chicago-60607
                                           @"|\s[a-z|A-Z]{0,25}?.\d{3}\s\d{3}?\s\s\b|\s[a-z|A-Z]{0,25}?.\s\d{3}\s\d{3}?\b"; // maharastra, 400 098
                regPincode = new Regex(_strRegPinPattern, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);


                #region "Search for Current Address or Present Address"
                try
                {
                    regAddress = new Regex(@"[\|\s,\{\(\:](current address|present address|present add:|local address|address for communication|communication address|contact address|contact address:|mailing address|correspondence address|corresspondence address|corresspondence address:|postal address)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase); //residential addres
                    regAddress1 = new Regex(@"[\|\s,\{\(\:](current address|present address|present add:|local address|address for communication|communication address|contact address|contact address:|mailing address|correspondence address|corresspondence address|corresspondence address:|postal address)[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    for (int outText = 0; outText < this.DataLines.Length && strAddress.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regAddress, regAddress1);
                        if (FlagPresent == 1)
                        {
                            for (int innText = outText; innText <= (outText + 5) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if ((opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1) == 1) || rmSpace.Trim().IndexOf("permanent address") == 0 || rmSpace.Trim().IndexOf("same as above") >= 0 || rmSpace.Trim().IndexOf("phone") == 0)
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                strAddress.Append(" " + this.DataLines[innText].ToLower().Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("-", " ").Replace(":", " ").Trim());
                            }
                        }
                    }
                }
                catch
                { }
                finally
                {
                    regAddress = null; regAddress1 = null;
                }
                #endregion

                #region "Search for Current Loc"
                try
                {
                    regAddress = new Regex(@"[\|\s,\{\(\:](current location|currently staying in|present location|current location:|current location:|current location:|Current Work Location)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    regAddress1 = new Regex(@"[\|\s,\{\(\:](current location|currently staying in|present location|current location:|current location:|current location:|Current Work Location)[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    for (int outText = 0; outText < this.DataLines.Length && strAddress.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = 0;
                        if ((regAddress.IsMatch(" " + this.DataLines[outText].Trim()) == true) || (regAddress1.IsMatch(" " + this.DataLines[outText].Trim()) == true))
                            FlagPresent = 1;
                        if (FlagPresent == 1)
                        {
                            for (int innText = outText; innText < (outText + 3) && innText < this.DataLines.Length; innText++)
                            {
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                prelBrFlag = 0;
                                if ((opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1) == 1) || rmSpace.Trim().IndexOf("preferred location") == 0 || rmSpace.Trim().IndexOf("location preference") == 0 || rmSpace.Trim().IndexOf("prefered:") == 0 || rmSpace.Trim().IndexOf("phone") == 0 || rmSpace.Trim().IndexOf("pervious location") == 0)
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                strAddress.Append(" " + this.DataLines[innText].ToLower().Replace("current location", "").Replace("present location", "").Replace(":", " ").Trim());
                            }
                        }
                    }
                }
                catch
                {

                }
                finally
                {
                    regAddress = null; regAddress1 = null;
                }
                #endregion

                #region to search location Top 400 character
                if (strAddress.ToString().Trim().Length == 0)
                {
                    strAddress.Append(GetAddressFromTop());
                    if (strAddress.ToString().Trim().Length > 0)
                    {
                        GetPreferredLocation(strAddress.ToString(), FCommon.PrefLocation);
                        PrefLocations = opGetParseUniqueData(PrefLocations.Trim()).Replace(":", "").Trim();
                        LocationsIDs = opGetParseUniqueData(LocationsIDs);
                    }
                    if (PrefLocations.Length < 2)
                    {
                        try
                        {
                            strAddress.Remove(0, strAddress.Length);
                        }
                        catch
                        {
                            strAddress = new StringBuilder();
                        }
                    }
                }
                #endregion

                #region "Search for preferred Loc"
                if (strAddress.ToString().Trim().Length == 0)
                {
                    try
                    {
                        regAddress = new Regex(@"[\|\s,\{\(\:](preferredlocation|location preference|preferr location|preferred location|preferred job location|locations preferred:)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                        regAddress1 = new Regex(@"[\|\s,\{\(\:](preferredlocation|location preference|preferr location|preferred location|preferred job location|locations preferred:)[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);

                        for (int outText = 0; outText < this.DataLines.Length && strAddress.ToString().Trim().Length <= 1; outText++)
                        {
                            FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regAddress, regAddress1);
                            if (FlagPresent == 1)
                            {
                                for (int innText = outText; innText <= (outText + 5) && innText < this.DataLines.Length; innText++)
                                {
                                    prelBrFlag = 0;
                                    prelBrFlag = opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1);
                                    if (prelBrFlag == 1) break;
                                    strAddress.Append(" " + this.DataLines[innText].ToLower().Replace("current location", "").Replace("present location", "").Replace(":", " ").Trim());
                                }
                            }
                        }
                    }
                    catch
                    { }
                    finally
                    {
                        regAddress = null; regAddress1 = null;
                    }
                }
                #endregion

                #region "getting address from the file"
                if (strAddress.ToString().Trim().Length == 0)
                {
                    #region "getting address from perment address, etc..."
                    try
                    {
                        int prelFlag = 0;
                        int outText = 0;
                        for (outText = 0; outText < this.DataLines.Length && strAddress.ToString().Trim().Length == 0; outText++)
                        {
                            try
                            {
                                prelFlag = opFindMatch0(this.DataLines[outText].Trim(), regLocation, regLocation1);
                                if (prelFlag == 0)
                                    prelFlag = opFindMatch0(this.DataLines[outText].Trim(), regLocationAlpha, regLocationAlpha1);
                                if (prelFlag == 1) break;
                            }
                            catch
                            {

                            }
                        }
                        if (prelFlag == 1)
                        {
                            try
                            {
                                for (int innText = outText; innText < (outText + 35) && innText < this.DataLines.Length; innText++)
                                {
                                    outText = innText;
                                    string rmSpace = this.DataLines[innText].ToLower().Trim();
                                    prelBrFlag = opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1);
                                    if (prelBrFlag == 0)
                                        prelBrFlag = opFindMatch0(this.DataLines[innText].Trim(), regLocationAlphaBr, regLocationAlphaBr1);
                                    if (prelBrFlag == 1) break;
                                    string[] splitString = rmSpace.Split(' ');
                                    try
                                    {
                                        for (int splCnt = 0; splCnt < splitString.Length; splCnt++)
                                        {
                                            prelNotFlag = 0;
                                            if ((opFindMatch0(splitString[splCnt].Trim(), regLocationNot, regLocationNot1) == 1) || (!CheckNumeric(splitString[splCnt].Replace("-", "").ToCharArray(), "")))
                                                prelNotFlag = 1;
                                            if (prelNotFlag == 0)
                                            {
                                                if (splitString[splCnt].Trim().Length == 0) continue;
                                                strAddress.Append(" " + splitString[splCnt].Replace(":", " ").Trim());
                                            }
                                            else
                                                continue;
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }
                            }
                            catch
                            {

                            }
                        }

                        ///replace string
                        ///
                        if (strAddress.Length > 0) opFindMatchReplace(ref strAddress, regLocationRm);

                    }
                    catch
                    {

                    }

                    #endregion

                    #region "check address is in top check for 10 lines"
                    #region "checking passport"
                    try
                    {
                        if (strAddress.ToString().Trim().Length == 0)
                        {
                            int OutText;
                            for (OutText = 0; OutText <= 40 && OutText < this.DataLines.Length; OutText++)
                            {
                                string rmSpace = this.DataLines[OutText].ToLower().Trim();
                                if (rmSpace.Trim().IndexOf("passport") >= 0)
                                {
                                    for (int InText = OutText; (InText <= (OutText + 10) && InText < this.DataLines.Length); InText++)
                                    {
                                        prelBrFlag = opFindMatch0(this.DataLines[InText].Trim(), regLocationBr, regLocationBr1);
                                        rmSpace = this.DataLines[InText].ToLower().Trim();
                                        if (prelBrFlag == 1) break;
                                        string[] splitString = rmSpace.Split(' ');
                                        for (int splCnt = 0; splCnt < splitString.Length; splCnt++)
                                        {
                                            prelNotFlag = 0;
                                            if ((opFindMatch(splitString[splCnt].Trim(), regLocationNot, regLocationNot1) == 1) || (!CheckNumeric(splitString[splCnt].Replace("-", "").ToCharArray(), "")))
                                                prelNotFlag = 1;
                                            if (prelNotFlag == 0)
                                            {
                                                if (splitString[splCnt].Trim().Length == 0) continue;
                                                strAddress.Append(" " + splitString[splCnt].Replace(":", " ").Trim());
                                            }
                                            else
                                                continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {

                    }
                    #endregion

                    try
                    {
                        if (strAddress.ToString().Trim().Length == 0)
                        {
                            for (int OutText = 0; OutText <= 40 && OutText < this.DataLines.Length; OutText++)
                            {
                                prelBrFlag = 0;
                                prelBrFlag = opFindMatch0(this.DataLines[OutText].Trim(), regLocationBr, regLocationBr1);
                                string rmSpace = this.DataLines[OutText].ToLower().Trim();
                                if (prelBrFlag == 1) break;
                                string[] splitString = rmSpace.Split(' ');
                                for (int splCnt = 0; splCnt < splitString.Length; splCnt++)
                                {
                                    prelNotFlag = 0;
                                    if ((opFindMatch(splitString[splCnt].Trim(), regLocationNot, regLocationNot1) == 1) || (!CheckNumeric(splitString[splCnt].Replace("-", "").ToCharArray(), "")))
                                        prelNotFlag = 1;
                                    if (prelNotFlag == 0)
                                    {
                                        if (splitString[splCnt].Trim().Length == 0) continue;
                                        strAddress.Append(" " + splitString[splCnt].Replace(":", " ").Trim());
                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {

                    }
                    #endregion
                }
                #endregion

                #region "Getting preferred location"

                if (strAddress.ToString().Trim().Length > 0 && PrefLocations.Length < 2)
                {
                    try
                    {
                        GetPreferredLocation(strAddress.ToString(), FCommon.PrefLocation);
                        PrefLocations = opGetParseUniqueData(PrefLocations.Trim()).Replace(":", "").Trim();
                        LocationsIDs = opGetParseUniqueData(LocationsIDs);
                    }
                    catch
                    { }
                }

                #region "search from 9 line doc if Not found"

                try
                {
                    if (strAddress.Length > 2)
                        if (PrefLocations.Length > 1 || regPincode.IsMatch(strAddress.ToString()))
                        {
                            sbPinCode = new StringBuilder();
                            if (strAddress.Length > 0)
                                sbPinCode.Append(strAddress.ToString());
                        }
                }
                catch { }

                if (PrefLocations.Length < 2)
                {
                    GetPreferredLocationFullSearch(this.DataLines, FCommon.PrefLocation);
                    PrefLocations = opGetParseUniqueData(PrefLocations.Trim()).Replace(":", "").Trim();
                    LocationsIDs = opGetParseUniqueData(LocationsIDs);
                }

                if (PrefLocations.Length < 2)
                {
                    strAddress.Remove(0, strAddress.Length);
                    strAddress.Append(getLocationFromExperience());
                }
                #endregion



                #endregion


            }
            catch
            {

            }
            finally
            {
                strAddress = null;
            }
        }

        /// <summary>
        /// Get the Top 400 character from the Resume Converted TExt for Checking Candidate Location
        /// 
        /// </summary>
        /// <returns></returns>
        private string GetAddressFromTop()
        {
            string tAdd = "";
            int Len = 399;
            string tPatter4Location = "summary|Career Objective|Objectives|E x p e r i e n c e|work profile|project done|career history|job responsibilities|role" +
                "|responsibilities|details of experience|current organisation|current organization" +
                "|managerial experiences|job profile|key areas of exposure|domain expertise|relevant work experience" +
                "|previous work experience|areas Of expertise|presently working at|experience|functional expertise" +
                "|employment history|significant projects|project handled|professional growth|experience summary" +
                "|professional summary|selected experience|assignments|project description" +
                "|professional experience|summary of skills and experience|lists of projects" +
                "|project experience|professional work experience|work experience|project details|project" +
                "|projects|career summary|institute / university / board|academics:|scholastic" +
                "|scholastic credentials|scholastic records|scholastic information|graduation|scholastic record" +
                "|education|e d u c a t i o n|a c a d e m i c   q u a l i f i c a t i o n s" +
                "|q u a l i f i c a t i o n s|a c a d e m i c|qualification summary|academic|academia|acadamic" +
                "|acadamic details|academic background|educational|professional qualification" +
                "|academic qualification|qualification|qualifications|summary of qualifications|academics" +
                "|academic profile|academic chronicle|highest degree held|gender|sex|Date Of Birth|Date of|Nationality|Marital Status|Languages|contact|Highly motivated";
            Regex exRemove = new Regex(@"[\s,\(\:](" + tPatter4Location + @")[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
            Regex exRemove1 = new Regex(@"[\s,\(\:](" + tPatter4Location + @")[:\s]?[:\-\s]?$", RegexOptions.IgnoreCase);
            try
            {
                int eduFoundIndex = -1;
                if (ResumeConvertedText.Trim().Length != 0)
                {
                    if (ResumeConvertedText.Trim().Length < 400)
                        Len = ResumeConvertedText.Trim().Length;
                    tAdd = ResumeConvertedText.Substring(0, Len);
                    MatchCollection matches = exRemove.Matches(" " + tAdd.Trim());
                    if (matches.Count == 0)
                        matches = exRemove1.Matches(" " + tAdd.Trim());
                    foreach (Match match in matches)
                    {
                        eduFoundIndex = match.Index; break;
                    }
                    if (eduFoundIndex >= 0)
                    {
                        tAdd = tAdd.Substring(0, eduFoundIndex);
                    }
                }
            }
            catch { }

            return tAdd;
        }
        /// <summary>
        /// Geting Candidate Location from the Candidate Work Experience
        /// </summary>
        /// <returns></returns>
        private string getLocationFromExperience()
        {
            StringBuilder tAdd = new StringBuilder();
            int posEnd = 100;
            string tPatter4Location = "Present Employer|Presently working as a|Presently associated with|Currently working as|working in|Working for|working at|Employer:|working with" +
                                      "presently working with|presently working in|currently working in" +
                                              "|current employer|presently working at|Present employer" +
                                              "|presently employer|Current organisation|Current organisation:" +
                                              "|present organization:|currently associate with|currently associated with" +
                                              "|presently associate with|presently associated with|employer:" +
                                              "|present job|present employment:|presently working|currently working for" +
                                              "|Presently working for|company :|company:|current working in:" +
                                              "|current working in :|company name:|current status:|currently working with" +
                                              "|current professional profile|currently working :|Current Organization:|current experience:" +
                                              "|current assignment|WORK EXPOSURE :Presently with|at present working with|present company" +
                                              @"|currently working as a (\w{3,25}\s){1,3}with" +
                                              @"|currently working as (\w{3,25}\s){1,3}in" +
                                              @"|currently working as an\s(\w{3,25}\s){1,3}for" +
                                              "|currently working at" +
                                              @"|working as\s(\w{2,25}\s){1,3}at|working as a\s(\w{2,25}\s){1,3}at|working as an\s(\w{2,25}\s){1,3}at" +
                                              @"|currently working as\s(\w{2,25}\s){1,3}at|currently working as a\s(\w{2,25}\s){1,3}at|currently working as an\s(\w{2,25}\s){1,3}at" +
                                              @"|working as an\s(\w{2,25}\s){1,3}for" +
                                              @"|working as a\s(\w{2,25}\s){1,3}in" +
                                              @"|working as\s(\w{2,25}\s){1,3}in" +
                                              @"|working as\s(\w{2,25}\s){1,3}[\s]?with" +
                                              @"|working as a\s(\w{2,25}\s){1,3}[\s]?with|PRESENT - Employments Details/ Projects Handled:" +
                                              @"|\d\) Organization|Currently I am working for|Currently employed as a|current job profile|currently  working at" +
                                              @"|from " + mon + @"[\s]?\d{4}[\s]?till date[,\s]|from " + month + @"[\s]?\d{4}[\s]?till date[,\s]" +
                                              @"|" + mon + @"[’]\d{2}[\s]?[-][\s]?Current date working as|" + month + @"[’]\d{2}[\s]?[-][\s]?Current date working as" +
                                              "|present experience:|present experience :|Comp Name :|Comp Name:" +
                                              @"|\d{2}/\d{4} - Till Date|" + mon + @"[\s]?\d{2}(st|nd|rd|th)[,]?[\s]?\d{4}[\s]?till date|" + month + @"[\s]?\d{2}(st|nd|rd|th)[,]?[\s]?\d{4}[\s]?till date" +
                                              "|" + mon + @"[’]?[\s]?\d{4} till date[\s]?[:]?|" + month + @"[’]?[\s]?\d{4} till date[\s]?[:]?" +
                                              "|" + mon + @"[\s]?\d{4} to till date|" + month + @"[\s]?\d{4} to till date" +
                                              "|" + mon + @"[\s]?[‘']\d{2} to date|" + month + @"[\s]?[‘']\d{2} to date" +
                                              "|" + mon + @"[\s]\d{4}[\s]?[\s]?[-][\s]?till date|" + month + @"[\s]\d{4}[\s]?[\s]?[-][\s]?till date" +
                                              @"|\d{4}[\s]?to date|\d{4}[\s]?[-][\s]?till date|\d{4} to   till date|\d{2}\/\d{2}\/\d{2,4} Till Date|\d{2}(st|nd|rd|th)[\s]?" + mon + @"[\s]?\d{4}[\s]?[-]?[\s]?till date|\d{2}(st|nd|rd|th)[\s]?" + month + @"[\s]?\d{4}[\s]?[-]?[\s]?till date" +
                                              @"|since[\s]\d{2,4} associating with" +
                                              @"|since[\s]" + mon + @"[\s'-]\d{2,4}|since[\s]" + month + @"[\s'-]\d{2,4}";

            string tBreakLine = "since|worked as a|Till date|period|client|onwards)|? Present|Present";
            Regex exRemove = new Regex(@"[\s,\(\:](" + tPatter4Location + @")[\s]?[\-\s]?\b", RegexOptions.IgnoreCase);
            Regex exRemove1 = new Regex(@"[\s,\(\:](" + tPatter4Location + @")[\s]?[\-\s]?$", RegexOptions.IgnoreCase);
            try
            {
                int posStart = -1;
                if (ResumeConvertedText.Trim().Length != 0)
                {
                    MatchCollection matches = exRemove.Matches(" " + ResumeConvertedText.Trim());
                    if (matches.Count == 0)
                        matches = exRemove1.Matches(" " + ResumeConvertedText.Trim());
                    string[] tLast = tBreakLine.Split('|');
                    foreach (Match m in matches)
                    {
                        if (m.Value.Trim().Length == 0) continue;
                        posStart = m.Index;
                        if (posEnd >= ResumeConvertedText.Trim().Length)
                            posEnd = ResumeConvertedText.Trim().Length - 1;
                        try
                        {
                            tAdd.Append(" " + ResumeConvertedText.Substring(posStart, posEnd));
                            if (tAdd.ToString().Trim().Length > 0)
                            {
                                GetPreferredLocation(exRemove.Replace(tAdd.ToString(), ""), FCommon.PrefLocation);
                                PrefLocations = opGetParseUniqueData(PrefLocations.Trim()).Replace(":", "").Trim();
                                LocationsIDs = opGetParseUniqueData(LocationsIDs);
                                if (PrefLocations.Length > 2)
                                    break;
                            }
                            tAdd.Remove(0, tAdd.Length);
                        }
                        catch
                        {
                        }
                    }
                }
            }
            catch { }
            return tAdd.ToString();
        }
        /// <summary>
        /// Fetchin the Candidate Location
        /// </summary>
        /// <param name="Skillstr">string for searching Candidate Location</param>
        /// <param name="ListArrayCommon">Fcommon Array for searching Location</param>
        /// // Code Commended Saravana 
        private void GetPreferredLocation(string Skillstr, string[,] ListArrayCommon)
        {
            //	StringBuilder matchResult;
            bool flagBreakMatch = true;
            try
            {
                char[] cLocationSplit = {  Convert.ToChar(0),
                                            Convert.ToChar(1),
                                            Convert.ToChar(2),
                                            Convert.ToChar(3),
                                            Convert.ToChar(4),
                                            Convert.ToChar(5),
                                            Convert.ToChar(6),
                                            Convert.ToChar(7),
                                            Convert.ToChar(8),
                                            Convert.ToChar(9),
                                            Convert.ToChar(10),
                                            Convert.ToChar(11),
                                            Convert.ToChar(12),
                                            Convert.ToChar(13),
                                            Convert.ToChar(14),
                                            Convert.ToChar(15),
                                            Convert.ToChar(16),
                                            Convert.ToChar(17),
                                            Convert.ToChar(18),
                                            Convert.ToChar(19),
                                            Convert.ToChar(20),
                                            Convert.ToChar(21),
                                            Convert.ToChar(22),
                                            Convert.ToChar(23),
                                            Convert.ToChar(24),
                                            Convert.ToChar(25),
                                            Convert.ToChar(26),
                                            Convert.ToChar(27),
                                            Convert.ToChar(28),
                                            Convert.ToChar(29),
                                            Convert.ToChar(30),
                                            Convert.ToChar(31),
                                            Convert.ToChar(34),
                                            //Convert.ToChar(35),
                                            Convert.ToChar(36),',','.','-','•','–',':','(',')'
                                        };
                string[] locSearch = Skillstr.Split(cLocationSplit, StringSplitOptions.RemoveEmptyEntries);


                for (int cnt = ListArrayCommon.GetLowerBound(0); cnt <= ListArrayCommon.GetUpperBound(0) && flagBreakMatch == true; cnt++)
                {
                    StringBuilder Eduforsplit1 = new StringBuilder();
                    StringBuilder sbExcludeList = new StringBuilder();
                    #region "collecting from list"
                    try
                    {
                        if (ListArrayCommon[cnt, 0] != null)
                        {
                            if (ListArrayCommon[cnt, 1] != null)
                                if (ListArrayCommon[cnt, 1].Trim().Length != 0)
                                    Eduforsplit1.Append(ListArrayCommon[cnt, 1] + "," + ListArrayCommon[cnt, 0]);
                                else
                                    if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                        Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                    else
                                        continue;
                            else
                                if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                    Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                else
                                    continue;
                        }
                        else
                            continue;

                        try
                        {
                            if (ListArrayCommon[cnt, 3] != null)
                                if (ListArrayCommon[cnt, 3].Trim().Length != 0)
                                    sbExcludeList.Append(ListArrayCommon[cnt, 3]);
                        }
                        catch { }
                    }
                    catch
                    {

                    }
                    #endregion
                    Regex exLocation = null;
                    // Regex exLocation1 = null;
                    Regex exExclude = null;
                    //Regex exExclude1 = null;

                    #region "creating a regular expression"
                    try
                    {
                        if (Eduforsplit1.Length < 3)
                        {
                            Eduforsplit1.Replace(@"\", @"\\");
                            Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            Eduforsplit1.Replace("||", "|");

                            //exLocation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            exLocation = new Regex(@"[\s,\(\:](" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
                        }
                        else
                        {


                            Eduforsplit1.Replace(@"\", @"\\");
                            Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            Eduforsplit1.Replace("||", "|");
                            exLocation = new Regex(@"[\s,\(\:](" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        }

                        //  exLocation1 = new Regex(@"[\s,\(\:](" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        if (sbExcludeList.Length > 0)
                        {
                            sbExcludeList.Replace(@"\", @"\\");
                            sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            sbExcludeList.Replace("||", "|");
                            //exExclude1 = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            exExclude = new Regex(@"[\s,\(\:](" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        }
                    }
                    catch (Exception ex3) { FCommon.opWriteLog(ex3); }
                    finally
                    {
                        sbExcludeList = null; Eduforsplit1 = null;
                    }
                    #endregion
                    try
                    {
                        #region "finding location"
                        //string[] locSearch = @Skillstr.Split(',','.','-','•','–',':','(',')');
                        for (int i = locSearch.GetLowerBound(0); i <= locSearch.GetUpperBound(0) && flagBreakMatch == true; i++)
                        {
                            int iHitExcludeCount = 0;
                            MatchCollection mMatch = exLocation.Matches(" " + @locSearch[i].Trim());
                            if (mMatch.Count == 0)
                                mMatch = exLocation.Matches(" " + @locSearch[i].Trim());
                            if (mMatch.Count == 0) continue;
                            if (ListArrayCommon[cnt, 4] != null && opCheckMatchCount(mMatch, Convert.ToInt32(ListArrayCommon[cnt, 4])) < Convert.ToInt32(ListArrayCommon[cnt, 4])) continue;
                            foreach (Match m in mMatch)
                            {
                                if (m.Value.Trim() != "")
                                {
                                    if (exExclude != null)
                                    {
                                        mMatch = exExclude.Matches(@" " + @locSearch[i].Trim());
                                        iHitExcludeCount = mMatch.Count;
                                        //mMatch = exExclude1.Matches(@" " + @locSearch[i].Trim());
                                        //iHitExcludeCount += mMatch.Count;
                                        if (iHitExcludeCount > 0) continue;
                                    }
                                    // Code Commended  Length IF Lesthen 3 . Checking the Case Sensitive
                                    //if (m.Value.Trim().Length < 4)
                                    //{// if found value is less then 4 match exact text 
                                    //    if (m.Value.Trim() != @locSearch[i].Trim())
                                    //        continue;
                                    //}
                                    string strRmLastDot = m.Value.Trim();
                                    if (strRmLastDot.EndsWith(".") || strRmLastDot.EndsWith(",")) strRmLastDot = strRmLastDot.Substring(0, strRmLastDot.Trim().Length - 1);
                                    if (strRmLastDot.StartsWith(":") || strRmLastDot.StartsWith("(") || strRmLastDot.StartsWith(",")) strRmLastDot = strRmLastDot.Substring(1, strRmLastDot.Trim().Length - 1);
                                    if (strRmLastDot.Trim().Length == 0) continue;
                                    PrefLocations += ListArrayCommon[cnt, 0].Trim() + ":" + "" + ",";
                                    LocationsIDs += ListArrayCommon[cnt, 2].Trim() + ",";
                                    if (PrefLocations.Trim().Length > 2)
                                    {
                                        flagBreakMatch = false;
                                        break;
                                    }

                                }
                            }
                        }
                        #endregion
                    }
                    catch (Exception ex2) { FCommon.opWriteLog(ex2); }
                    finally
                    {
                        exExclude = null;
                        //exExclude1 = null;
                    }
                }
            }
            catch (Exception ex1) { FCommon.opWriteLog(ex1); }
        }

        /// <summary>
        /// First 10 array for searching Location
        /// </summary>
        /// <param name="Skillstr"></param>
        /// <param name="ListArrayCommon"></param>
        /// 
        private void GetPreferredLocationFullSearch(string[] Skillstr, string[,] ListArrayCommon)
        {
            char[] locSplit = { ',', '.', '-', '•', '–', ':', '(', ')' };
            bool flagBreakMatch = true;
            try
            {
                for (int cnt = ListArrayCommon.GetLowerBound(0); cnt <= ListArrayCommon.GetUpperBound(0) && flagBreakMatch == true; cnt++)
                {
                    StringBuilder Eduforsplit1 = new StringBuilder();
                    StringBuilder sbExcludeList = new StringBuilder();
                    #region "collecting the location from the list"
                    try
                    {
                        if (ListArrayCommon[cnt, 0] != null)
                        {
                            if (ListArrayCommon[cnt, 1] != null)
                                if (ListArrayCommon[cnt, 1].Trim().Length != 0)
                                    Eduforsplit1.Append(ListArrayCommon[cnt, 1] + "," + ListArrayCommon[cnt, 0]);
                                else
                                    if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                        Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                    else
                                        continue;
                            else
                                if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                    Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                else
                                    continue;
                        }
                        else
                            continue;

                        try
                        {
                            if (ListArrayCommon[cnt, 3].Trim().Length != 0)
                                sbExcludeList.Append(ListArrayCommon[cnt, 3]);
                        }
                        catch { }
                    }
                    catch
                    {

                    }

                    #endregion

                    Regex exLocation = null;
                    Regex exLocation1 = null;
                    Regex exExclude = null;
                    Regex exExclude1 = null;

                    #region "creating regular expression"
                    try
                    {
                        Eduforsplit1.Replace(@"\", @"\\");
                        Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                        Eduforsplit1.Replace("||", "|");
                        exLocation = new Regex(@"[\s,\(\:](" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        exLocation1 = new Regex(@"[\s,\(\:](" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        if (sbExcludeList.Length > 0)
                        {
                            sbExcludeList.Replace(@"\", @"\\");
                            sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            sbExcludeList.Replace("||", "|");
                            exExclude = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            exExclude1 = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        }
                    }
                    catch
                    {

                    }
                    finally
                    {
                        sbExcludeList = null; Eduforsplit1 = null;
                    }
                    #endregion

                    try
                    {
                        int prelBrFlag = 0;
                        for (int j = 0; j < 9 && j < Skillstr.Length && flagBreakMatch == true; j++)
                        {
                            prelBrFlag = opFindMatch0(Skillstr[j].Trim(), regLocationBr, regLocationBr1);
                            if (prelBrFlag == 1) break;
                            if (Skillstr[j].Trim().IndexOf("preferred location") == 0 || Skillstr[j].Trim().IndexOf("location preference") == 0 || Skillstr[j].Trim().IndexOf("prefered:") == 0)
                                break;
                            string[] locSearch = Skillstr[j].Split(locSplit);
                            for (int i = locSearch.GetLowerBound(0); i <= locSearch.GetUpperBound(0) && flagBreakMatch == true; i++)
                            {
                                int iHitExcludeCount = 0;
                                MatchCollection mMatch = exLocation.Matches("" + @locSearch[i].Trim());
                                if (mMatch.Count == 0) mMatch = exLocation1.Matches(" " + @locSearch[i].Trim());
                                if (mMatch.Count == 0) mMatch = exLocation.Matches(" " + @locSearch[i].Trim());
                                if (mMatch.Count == 0) continue;
                                if (ListArrayCommon[cnt, 4] != null && opCheckMatchCount(mMatch, Convert.ToInt32(ListArrayCommon[cnt, 4])) < Convert.ToInt32(ListArrayCommon[cnt, 4])) continue;
                                foreach (Match m in mMatch)
                                {
                                    if (m.Value.Trim() != "")
                                    {
                                        if (exExclude != null)
                                        {
                                            mMatch = exExclude.Matches(@" " + @locSearch[i].Trim());
                                            iHitExcludeCount = mMatch.Count;
                                            mMatch = exExclude1.Matches(@" " + @locSearch[i].Trim());
                                            //iHitExcludeCount += mMatch.Count;
                                            if (iHitExcludeCount > 0) continue;
                                        }

                                        if (m.Value.Trim().Length < 4)
                                        {   // if found value is less then 4 match exact text 
                                            if (m.Value.Trim() != @locSearch[i].Trim())
                                                continue;
                                        }

                                        string strRmLastDot = m.Value.Trim();
                                        if (strRmLastDot.EndsWith(".") || strRmLastDot.EndsWith(",")) strRmLastDot = strRmLastDot.Substring(0, strRmLastDot.Trim().Length - 1);
                                        if (strRmLastDot.StartsWith(":") || strRmLastDot.StartsWith("(") || strRmLastDot.StartsWith(",")) strRmLastDot = strRmLastDot.Substring(1, strRmLastDot.Trim().Length - 1);
                                        if (strRmLastDot.Trim().Length == 0) continue;
                                        if (opFindMatch(ListArrayCommon[cnt, 0].Trim(), regLocationNot, regLocationNot1) != 1)
                                        {
                                            PrefLocations += ListArrayCommon[cnt, 0].Trim() + ":" + "" + ",";
                                            LocationsIDs += ListArrayCommon[cnt, 2].Trim() + ",";
                                        }
                                        if (PrefLocations.Trim().Length > 2)
                                        {
                                            flagBreakMatch = false;
                                            break;
                                        }
                                    }
                                }
                            }
                            //j = j + 1;
                        }
                    }
                    catch { }
                    finally
                    {
                        exExclude = null;
                        //exExclude1 = null;
                    }
                }
            }
            catch { }
            finally
            {

            }
        }

        #endregion

        #region "Pin Code...01/Feb/2013"
        private void GetPinCode()
        {
            try
            {
                if (sbPinCode.Length > 2)
                {
                    Regex regPincode = null;
                    string tStrPin = "";        //\s?[,\'’]?\b\s?.
                    string _strRegPinPattern = @"\s[a-z|A-Z]{0,2}?.\s\d{5}\b|\s[a-z|A-Z]{0,20}?.\s\d{5}?$|\s[a-z|A-Z]{0,20}\s\s\d{5}?\s\s\b" + //NJ 08514
                                               @"|\s[a-z|A-Z]{0,25}?.\d{5}?\s\s\b|\s[a-z|A-Z]{0,25}?.\d{5}?\b" + // Chicago-60607
                        //City Start with Special character or Start with space
                                               @"|(\s|[,\'’])[a-z|A-Z]{0,25}?.\d{5}?\b" +   // BROOKLYN,NY 11214
                                               @"|\s[a-z|A-Z]{0,25}?.\d{3}\s\d{3}?\s\s\b|\s[a-z|A-Z]{0,25}?.\s\d{3}\s\d{3}?\b" + // maharastra, 400 098
                                               @"|(\s[a-z|A-Z]{0,25}?.[\s-][0-9]{6})";
                    //1523 W Taylor St Apt 1 Chicago-60607 

                    string _StrMobilePattern = "(\\d+)(\\s+)(\\d+)(\\s+)(\\()(\\d+)(\\))(\\d+)|(\\d{3})(\\s+)(–)(\\s+)(\\d{3})(\\s+)(–)(\\s+)(\\d{4})|(\\d{3})(-|–)(\\d{3})(-|–)(\\d{4})" + //(\\d{3})(-|–)(\\d{3})(-|–)(\\d{4})
                           "|(\\()(\\d{3})(\\))(\\s+)(\\d{3})(\\s+)(-|–)(\\s+)(\\d{4})|(\\()(\\d{3})(\\))(\\d{3})(-|–)(\\d{4})|(\\()(\\d{3})(\\))(-|–)(\\d{3})(-|–)(\\d{4})|(\\d{3})(-|–)(\\d{3})(\\s+)(\\d{4})|(\\d{3})(\\s)(\\d{3})(\\s)(\\d{4})"; //(585)754-0713 //(646)-823-6302 //973-444 6222

                    //Regex For Replaceing the EmailID In the Address String
                    Regex reEmail = new Regex(@"[\w]+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", RegexOptions.CultureInvariant);
                    //Regex Form Mobile Number in the Adddress
                    Regex RGxReplaceMobile = new Regex(_StrMobilePattern, RegexOptions.IgnoreCase); //973 – 714 – 5752  //585-469-6458
                    string tReplaceAdd = RGxReplaceMobile.Replace(sbPinCode.ToString().Trim(), "");
                    tReplaceAdd = reEmail.Replace(tReplaceAdd.Trim(), "");
                    //Regex For finding the US And Indian Pattern ZIP Code
                    regPincode = new Regex(_strRegPinPattern, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                    //Regex For Removing the City Name in Pin Code-- and other junk data
                    Regex regNotPincode = new Regex(@"^\s[a-z|A-Z]{0,20}\s\b|^\s[a-z|A-Z]{0,20}?.\s\b|^\s[a-z|A-Z]{0,25}\-|^(\s|[,\'’])[a-z|A-Z]{0,20}?.\s\b", RegexOptions.IgnoreCase);

                    if (regPincode.IsMatch(tReplaceAdd.Trim()))
                    {
                        tStrPin = regPincode.Match(tReplaceAdd.Trim()).ToString();
                        tStrPin = regNotPincode.Replace(tStrPin, "");
                        if (tStrPin.Length > 4 && tStrPin.Length < 10)
                            PINNumber = tStrPin;
                    }
                }
            }
            catch { }
        }

        #endregion

        #region "Education"
        /// <summary>
        /// Finding 
        /// </summary>
        /// <param name="CurrentPos"></param>
        /// <param name="Education2Find"></param>
        /// <returns></returns>
        private bool opFindEducationExist(int CurrentPos, string Education2Find)
        {
            try
            {
                for (int i = 0; i < eduPos.Count; i++)
                    if (eduPos[i].ToString() == CurrentPos.ToString())
                        for (int j = 0; j <= EduIncludeList.GetUpperBound(0); j++)
                            if (EducationStr[CurrentPos].ToString().Trim().ToLower().IndexOf(EduIncludeList[j].Trim().ToLower()) >= 0)
                                return true;
            }
            catch { }
            return false;
        }
        /// <summary>
        /// Check for Education Year exits on the same pos previous matched
        /// </summary>
        /// <param name="CurrentPos">Current matched year position</param>
        /// <returns>return true if found on the same position</returns>
        private bool opFindEducationYearExist(int CurrentPos)
        {
            try
            {
                for (int i = 0; i < eduPosYear.Count; i++)
                    if (eduPosYear[i].ToString() == CurrentPos.ToString())
                        return true;
            }
            catch { }
            return false;
        }

        private int opCheckMatchCount(MatchCollection mCollection, int iIncludeCount)
        {
            int iREturn = 1;
            try
            {
                ArrayList aList = new ArrayList();
                foreach (Match m in mCollection)
                {
                    if (aList.Contains(Regex.Replace(m.Value.ToLower(), "[^0-9a-zA-Z]+", "").Trim())) continue;

                    aList.Add(Regex.Replace(m.Value.ToLower(), "[^0-9a-zA-Z]+", "").Trim());
                }
                if (iIncludeCount <= aList.Count)
                    iREturn = aList.Count;
                else
                    iREturn = 0;
                aList = null;
            }
            catch { }

            return iREturn;
        }

        /// <summary>
        /// Fetching EducationID
        /// step 1. Storing Exclude and Include Alisas of Education from the ListArrayCommon Arrya
        /// step 2. Creating Regular Express for Include and Exclude Alias
        /// step 3. If Match Found 
        ///     step 1. Check for Exclude Alias
        ///     step 2. Match Found Exclude Continue for next Search
        ///     step 3. Storing the Matched Pos 
        ///     step 4. Check for Education Already exit in the same position
        ///     step 5. store the EducationID and EducationType
        ///     step 7. Search for Education Completed Year from the Matched position
        /// step 4. continue the search 
        /// </summary>
        /// <param name="Skillstr">Array List for Searching EducationIDs && Education Type </param>
        /// <param name="ListArrayCommon"></param>
        /// <param name="strMsg"></param>
        private void GetEdu_Spe_Skill(ArrayList Skillstr, string[,] ListArrayCommon, string strMsg)
        {
            StringBuilder matchResult;
            bool flagBreakMatch = true;

            eduPos = new ArrayList();
            StringBuilder returnRid = null, returnSkill = null;

            try
            {
                returnRid = new StringBuilder();
                returnSkill = new StringBuilder();
                matchResult = new StringBuilder();
                for (int cnt = ListArrayCommon.GetLowerBound(0); cnt <= ListArrayCommon.GetUpperBound(0); cnt++)
                {
                    StringBuilder Eduforsplit1 = new StringBuilder();
                    string SpecialString = "";
                    StringBuilder sbExcludeList = new StringBuilder();

                    #region "collecting"
                    try
                    {
                        if (ListArrayCommon[cnt, 0] != null)
                        {
                            if (ListArrayCommon[cnt, 0].Trim().Length == 1)
                                SpecialString = "#%" + ListArrayCommon[cnt, 0];
                            else
                            {
                                if (ListArrayCommon[cnt, 1] != null)
                                    if (ListArrayCommon[cnt, 1].Trim().Length != 0)
                                        Eduforsplit1.Append(ListArrayCommon[cnt, 1] + "," + ListArrayCommon[cnt, 0]);
                                    else
                                        if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                            Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                        else
                                            continue;
                                else
                                    if (ListArrayCommon[cnt, 0].Trim().Length != 0)
                                        Eduforsplit1.Append(ListArrayCommon[cnt, 0]);
                                    else
                                        continue;
                                //if (ListArrayCommon[cnt, 1].Trim().Length != 0)
                                //    Eduforsplit1.Append(ListArrayCommon[cnt, 1]);
                                //else
                                //    continue;
                            }
                        }
                        else
                            continue;
                        try
                        {
                            if (ListArrayCommon[cnt, 3].Trim().Length != 0)
                                sbExcludeList.Append(ListArrayCommon[cnt, 3]);
                        }
                        catch { }
                    }
                    catch
                    {

                    }
                    #endregion
                    //exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
                    Regex exEducation = null; Regex exEducation1 = null;
                    Regex exExclude = null; Regex exExclude1 = null;
                    #region "regular expression"
                    try
                    {
                        if (SpecialString.Length > 0)
                        {
                            SpecialString = SpecialString.Replace(@"#%", @"");
                            SpecialString = @SpecialString + "," + "| " + SpecialString + " |:" + SpecialString;
                            SpecialString = SpecialString.Replace("||", "|");
                            exEducation = new Regex(@"[\s,\(\:]?(" + SpecialString + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
                            exEducation1 = new Regex(@"[\s,\(\:](" + SpecialString + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant);
                        }
                        else if (Eduforsplit1.Length < 3)
                        {
                            Eduforsplit1.Replace(@"\", @"\\");
                            Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            Eduforsplit1.Replace("||", "|");
                            exEducation = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant);
                            exEducation1 = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant);

                        }
                        else
                        {
                            Eduforsplit1.Replace(@"\", @"\\");
                            Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            Eduforsplit1.Replace("||", "|");
                            exEducation = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            exEducation1 = new Regex(@"[\s,\[\{“‘\(\:](" + Eduforsplit1.ToString() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                        }
                        if (sbExcludeList.Length > 0)
                        {
                            sbExcludeList.Replace(@"\", @"\\");
                            sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                            sbExcludeList.Replace("||", "|");
                            exExclude = new Regex(@"[\s,\{“‘\(\:](" + sbExcludeList.ToString() + @")[,\}’\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            exExclude1 = new Regex(@"[\s,\[\{“‘\(\:](" + sbExcludeList.ToString() + @")[,\}’\]”\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                        }
                    }
                    catch
                    {

                    }
                    finally
                    {
                        sbExcludeList = null; Eduforsplit1 = null;
                    }
                    #endregion

                    #region "finding"
                    try
                    {
                        flagBreakMatch = true;
                        for (int exp = 0; exp < Skillstr.Count && flagBreakMatch == true; exp++) //for no. of edulist data
                        {
                            int iHitExcludeCount = 0;
                            if (Skillstr[exp] == null) continue;
                            if (Skillstr[exp].ToString().Trim().Length == 0) continue;

                            MatchCollection mMatch = exEducation.Matches(@" " + Skillstr[exp].ToString().Trim());

                            if (mMatch.Count == 0)
                                mMatch = exEducation1.Matches(@" " + Skillstr[exp].ToString().Trim());
                            //MatchCollection mMatch = exEducation1.Matches(@" " + Skillstr[exp].ToString().Trim());
                            //

                            if (mMatch.Count == 0) continue;
                            if (ListArrayCommon[cnt, 4] != null && opCheckMatchCount(mMatch, Convert.ToInt32(ListArrayCommon[cnt, 4])) < Convert.ToInt32(ListArrayCommon[cnt, 4])) continue;
                            foreach (Match m in mMatch)
                            {
                                if (m.Value.Trim() != "")
                                {
                                    if (exExclude != null)
                                    {
                                        mMatch = exExclude.Matches(@" " + Skillstr[exp].ToString().Trim());
                                        iHitExcludeCount = mMatch.Count;
                                        mMatch = exExclude1.Matches(@" " + Skillstr[exp].ToString().Trim());
                                        iHitExcludeCount += mMatch.Count;
                                        if (iHitExcludeCount > 0) continue;
                                    }
                                    string strRmLastDot = m.Value.Trim();
                                    if (strRmLastDot.EndsWith(".") | strRmLastDot.EndsWith("”") | strRmLastDot.EndsWith("}") | strRmLastDot.EndsWith("’") | strRmLastDot.EndsWith(",")) strRmLastDot = strRmLastDot.Substring(0, strRmLastDot.Trim().Length - 1);
                                    if (strRmLastDot.StartsWith(":") | strRmLastDot.StartsWith("‘") | strRmLastDot.StartsWith("{") | strRmLastDot.StartsWith("“") | strRmLastDot.StartsWith("(") || strRmLastDot.StartsWith(",")) strRmLastDot = strRmLastDot.Substring(1, strRmLastDot.Trim().Length - 1);
                                    if (strRmLastDot.Trim().Length == 0) continue;
                                    if (matchResult.ToString().Length == 0)
                                    {
                                        flagBreakMatch = false;
                                        eduPos.Add(exp);
                                        matchResult.Append(strRmLastDot.Trim());
                                        returnRid.Append(ListArrayCommon[cnt, 2] + ",");
                                        returnSkill.Append(ListArrayCommon[cnt, 0] + ":,");

                                        if (strMsg.Equals("Education"))
                                            if (getEducationCompletedYear(exp, strRmLastDot.Trim()) == 1)
                                            {
                                                eduCompleteYear += ",";
                                                eduDuration += ",";
                                                eduStartYear += ",";
                                                eduUniverSity += getEducationUniversity(exp, 0) + ",";
                                                getEducationSpecialization(exp, strRmLastDot.Trim());
                                                eduSpecialization += ",";

                                                eduSpecialization1 += ",";
                                                eduGrade += ",";
                                                eduInstitute += ",";
                                                break;
                                            }
                                        eduInstitute = eduInstitute.ToString().ToLower().Trim().Replace(strRmLastDot.ToString().ToLower().Replace("-", "").Trim(), "").Replace(".", "").Trim();
                                    }
                                    else
                                    {
                                        if (matchResult.ToString().Trim().IndexOf(":" + strRmLastDot.Trim()) < 0)
                                        {
                                            if (opFindEducationExist(exp, ListArrayCommon[cnt, 0]) == true && strMsg.Equals("Education")) continue;
                                            flagBreakMatch = false;
                                            eduPos.Add(exp);
                                            matchResult.Append(" : " + strRmLastDot);
                                            returnRid.Append(ListArrayCommon[cnt, 2] + ",");
                                            returnSkill.Append(ListArrayCommon[cnt, 0] + ":,");

                                            if (strMsg.Equals("Education"))
                                                if (getEducationCompletedYear(exp, strRmLastDot.Trim()) == 1)
                                                {
                                                    eduCompleteYear += ",";
                                                    eduDuration += ",";
                                                    eduStartYear += ",";
                                                    eduUniverSity += getEducationUniversity(exp, 0) + ",";
                                                    getEducationSpecialization(exp, strRmLastDot.Trim());
                                                    eduSpecialization += ",";
                                                    eduSpecialization1 += ",";

                                                    eduGrade += ",";
                                                    eduInstitute += ",";
                                                    break;
                                                }
                                            eduInstitute = eduInstitute.ToString().ToUpper().Trim().Replace(strRmLastDot.ToString().ToUpper().Replace("-", "").Trim(), "").Replace(".", " ").Replace("   ", "").Trim();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        exEducation = null; exEducation1 = null;
                        exExclude = null; exExclude1 = null;
                    }
                    #endregion

                }//end for
                if (strMsg.Equals("Specialization"))
                {
                    strSpecialization = returnSkill.ToString();
                    SpecialIDs = returnRid.ToString();
                }
                else if (strMsg.Equals("Education"))
                {
                    EduSpeFinal = returnSkill.ToString();
                    EducationsIDs = returnRid.ToString();
                }
            }
            catch { }
            finally
            {
                returnSkill = null;
                matchResult = null;
                returnRid = null;
            }
        }

        /// <summary>
        /// Fetching Education && Education Completed Year
        /// Setp 1 Fetching the Education Data from the DataLines
        /// Step 2 Check the Education Formation
        /// step 3 Fetching Education && Education Completed Year
        /// step 4 GEt the Unquie Education IDs
        /// </summary>
        /// <param name="iEduType"></param>
        private void GetEducation123()
        {
            int iEdu = 1;
            if (true)
            {
                int pos = -1, pos1 = -1;
                EducationStr = new ArrayList();
                try
                {
                    #region "EDUdata"
                    for (pos = 0; pos < DataLines.Length; pos++)
                    {
                        if (this.DataLines[pos].ToLower().IndexOf("ibm annex") >= 0) break; //dissertation
                        if (regEducation.IsMatch(" " + this.DataLines[pos].Trim()) || regEducation1.IsMatch(" " + this.DataLines[pos].Trim()))
                        {
                            try
                            {
                                for (pos1 = pos; pos1 < DataLines.Length; pos1++)
                                {
                                    if (this.DataLines[pos1].ToLower().IndexOf("ibm annex") >= 0 || this.DataLines[pos1].ToLower().IndexOf("clients in") >= 0 || this.DataLines[pos1].ToLower().IndexOf("worked in") >= 0 || this.DataLines[pos1].ToLower() == "certification" || this.DataLines[pos1].ToLower().Trim().IndexOf("operating systems") >= 0) break; //  
                                    Match mtch = regEducationNot.Match(" " + this.DataLines[pos1].Trim());
                                    if (!mtch.Success)
                                        mtch = regEducationNot1.Match(" " + this.DataLines[pos1].Trim());
                                    int eduNFlag = 0;
                                    if (((mtch.Success && (mtch.Index == 0 || mtch.Index == 1)) || this.DataLines[pos1].ToLower().Trim().IndexOf("academic websites") >= 0 || this.DataLines[pos1].ToLower().IndexOf("seminar on") >= 0 || this.DataLines[pos1].ToLower().Trim().IndexOf("education pvt") >= 0 || this.DataLines[pos1].ToLower().Trim().IndexOf("date of birth") >= 0) && (this.DataLines[pos1].ToLower().Trim().IndexOf("summary of qualification") < 0 && this.DataLines[pos1].ToUpper().Trim().IndexOf("EDUCATIONAL EXPERIENCE:-") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of education:") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of academics:") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of academics") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of academic") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("personal qualification") < 0))//
                                        eduNFlag = 1;

                                    if (eduNFlag == 0)
                                    {
                                        iEdu += 1;
                                        if (DataLines[pos1].Replace("Education :", "").Replace(Convert.ToChar(167).ToString(), "").Trim().IndexOf("-") == 0)
                                            EducationStr.Add(DataLines[pos1].Replace("Education :", "").Replace("BACKGROUND", "").Replace("Post Graduation/ Degree", "").Replace(Convert.ToChar(167).ToString(), "").Replace(Convert.ToChar(154).ToString(), "").Replace("-", "").Replace(Convert.ToChar(63).ToString(), "").Replace("?", "").Replace("*", "").Replace("|", "").Replace("?", "").Replace("M.E.S", "").Replace("Degree / Diploma", "Degree").Replace("&amp;", "&").Trim());
                                        else
                                            EducationStr.Add(DataLines[pos1].Replace("Education :", "").Replace("BACKGROUND", "").Replace("Post Graduation/ Degree", "").Replace(Convert.ToChar(167).ToString(), "").Replace(Convert.ToChar(154).ToString(), "").Replace(Convert.ToChar(63).ToString(), "").Replace("?", "").Replace("*", "").Replace("|", "").Replace("?", "").Replace("M.E.S", "").Replace("Degree / Diploma", "Degree").Replace("&amp;", "&").Trim());
                                        pos = pos1;
                                    }
                                    else
                                    {
                                        pos = pos1;
                                        break;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                        else
                            continue;
                    }
                    #endregion
                }
                catch
                {

                }
            }
            if (iEdu == 1)
            {
                int pos = -1, pos1 = -1;
                EducationStr = new ArrayList();
                try
                {
                    #region "EDUdata"
                    for (pos = 0; pos < DataLines.Length; pos++)
                    {
                        if (this.DataLines[pos].ToLower().IndexOf("education") >= 0 || this.DataLines[pos].ToLower().IndexOf("educational") >= 0 || this.DataLines[pos].ToLower().IndexOf("professional qualification") >= 0 || this.DataLines[pos].ToLower().IndexOf("academic qualification") >= 0 || this.DataLines[pos].ToLower().IndexOf("qualification") >= 0 || this.DataLines[pos].ToLower().IndexOf("academics") >= 0 || this.DataLines[pos].ToLower().IndexOf("academic profile") >= 0 || this.DataLines[pos].ToLower().IndexOf("highest degree held") >= 0)
                        {
                            try
                            {
                                for (pos1 = pos; pos1 < DataLines.Length; pos1++)
                                {
                                    if (!(this.DataLines[pos1].ToLower().IndexOf("computer knowledge:") >= 0 || this.DataLines[pos1].ToLower().IndexOf("references") >= 0 || this.DataLines[pos1].ToLower().IndexOf("technical knowledge") >= 0 || this.DataLines[pos1].ToLower().IndexOf("area of interest") >= 0 || this.DataLines[pos1].ToLower().IndexOf("personal") >= 0 || this.DataLines[pos1].ToLower().IndexOf("academic project") >= 0 || this.DataLines[pos1].ToLower().IndexOf("skill") >= 0 || this.DataLines[pos1].ToLower().IndexOf("awards") >= 0 || this.DataLines[pos1].ToLower().IndexOf("achievements") >= 0 || this.DataLines[pos1].ToLower().IndexOf("software competencies") >= 0 || this.DataLines[pos1].ToLower().IndexOf("extracurricular") >= 0 || this.DataLines[pos1].ToLower().IndexOf("project") >= 0 || this.DataLines[pos1].ToLower().IndexOf("title") >= 0 || this.DataLines[pos1].ToLower().IndexOf("client") >= 0 || this.DataLines[pos1].ToLower().IndexOf("description") >= 0 || this.DataLines[pos1].ToLower().IndexOf("role") == 0 || this.DataLines[pos1].ToLower().IndexOf("team") == 0 || this.DataLines[pos1].ToLower().IndexOf("duaration") >= 0 || this.DataLines[pos1].ToLower().IndexOf("work experience") >= 0 || this.DataLines[pos].ToLower().IndexOf("other") >= 0 || this.DataLines[pos].ToLower().IndexOf("languages") >= 0 || this.DataLines[pos].ToLower().IndexOf("experience") >= 0))
                                    {
                                        iEdu += 1;
                                        //EducationStr[iEdu] += DataLines[pos1].Replace("?", "");
                                        EducationStr.Add(DataLines[pos1].Replace("?", ""));
                                        //this.ParsedStrings[(int)ParsedData.ProjectDetails] += DataLines[pos1];
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                        else
                            continue;
                    }
                    #endregion
                    //Edu Parse		
                }
                catch
                {

                }
            }

            eduCompleteYear = "";
            eduDuration = "";
            eduStartYear = "";
            eduUniverSity = "";
            eduSpecialization = "";
            eduSpecialization1 = "";

            eduGrade = "";
            eduInstitute = "";

            EduSpeFinal = "";
            EducationsIDs = "";
            EDUCATION = "";
            educationYearCount = 0; aCheckEducationYear = null;
            bEducationYearStarting = false; bEducationYearNormal = true;

            string _strInstitute = "Qualification|Qualifications|Education|Institute|Institution|University|Institution/ University|University/|Board|UNIVERSITY/BOARD|Duration|year of Completion|Name of the College/School|Board/University|Year of Passing|School/college|Institute/College|Discipline/Specialization|Year|Specialization|Percentage|Aggregate|Marks|Average Mark|Score|Degree|Year of Passing|%/CGPA|CGPA/Percentage|Degree/Certificate|Institute/School|CGPA/%|School/University|Marks|Board / Council";
            string _strPercentage = "Percentage|Aggregate|Marks|Average Mark|Score|%/CGPA|CGPA/Percentage|CGPA/%|Marks";
            string _strDuration = "Year|Duration|Year of Passing";
            Regex rgxGradeEdu = new Regex(@"[\s,\[\{“‘\(\:](" + _strInstitute + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            Regex rgxPercentage = new Regex(@"[\s,\[\{“‘\(\:](" + _strPercentage + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            Regex rgxEdYear = new Regex(_strDuration, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            Boolean bPrecentageInStart = false;
            int tHitOne = 0, tHitTwo = 0, tHitThree = 0, tHitFour = 0, tHitFive = 0;

            try
            {
                for (int t = 0; t < EducationStr.Count; t++)
                {
                    if (rgxGradeEdu.IsMatch(" " + EducationStr[t].ToString().Trim()))
                    {
                        if (tHitOne == 0)
                            if (t == 0)
                                tHitOne = 1;
                            else
                                tHitOne = t;
                        if (tHitTwo == 0 && tHitOne != 0 && t != tHitOne)
                            tHitTwo = t;
                        if (tHitThree == 0 && tHitTwo != 0 && t != tHitTwo)
                            tHitThree = t;
                        if (rgxEdYear.IsMatch(EducationStr[t].ToString().Trim()))
                            bYearInLast = true;
                        if (rgxPercentage.IsMatch(" " + EducationStr[t].ToString().Trim()) || EducationStr[t].ToString().Trim() == "%")
                        {
                            tHitFive = t;
                            bPrecentageInStart = true;
                        }

                    }
                    else if (rgxPercentage.IsMatch(" " + EducationStr[t].ToString().Trim()) || EducationStr[t].ToString().Trim() == "%")
                    {
                        if (tHitFour == 0 && tHitOne != 0 & tHitTwo != 0 & tHitThree != 0)
                            tHitFour = t;

                        if (((tHitOne + 1) == tHitTwo) && ((tHitTwo + 1) == tHitThree) && (tHitThree < tHitFour))
                            bPrecentageInLast = true;

                    }
                }

                if (bPrecentageInStart == true && tHitFour == 0 && tHitOne != 0 & tHitTwo != 0 & tHitThree != 0 && tHitFive > tHitOne)
                    bPrecentageInLast = true;
            }
            catch { }

            try
            {
                //check the education fomat
                checkEducationFormat();
                //finding the education
                eduPosYear = new ArrayList();
                GetEdu_Spe_Skill(EducationStr, FCommon.EducationList, "Education");
                if (EducationsIDs != "")
                    opGetParseEducationUniqueData(EducationsIDs, eduStartYear, eduCompleteYear, eduDuration, eduGrade, eduInstitute, eduUniverSity, eduSpecialization, eduSpecialization1);
                EduSpeFinal = opGetParseUniqueData(EduSpeFinal);
                EducationsIDs = opGetParseUniqueData(EducationsIDs);

                //string tfrmYrs,  string tToYrs,  string tDur,  string tgrd,string tInstitute,string tUniversity


                EDUCATION = EduSpeFinal;
                strSpecialization = "";
                SpecialIDs = "";

            }

            catch { }
            finally
            {
                eduPosYear = null;
            }

        }//end of main	
        /// <summary>
        /// check the format of the education in the resume...
        /// 
        /// </summary>
        public void checkEducationFormat()
        {
            int posYear = -1;
            int startPos = -1;
            try
            {
                for (int i = 0; i < EducationStr.Count; i++)
                {
                    if (EducationStr[i] == null) continue;
                    if (EducationStr[i].ToString().Trim().ToLower().IndexOf("education") == 0) continue;
                    if ((EducationStr[i].ToString().Trim().ToLower().IndexOf("course") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("name of course") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("name of exam") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("qualification") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("degree") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("certificate / degree") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("examination") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("exam") == 0) & startPos == -1)
                        startPos = i;
                    if ((EducationStr[i].ToString().Trim().ToLower().IndexOf("year of passing") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("yr. of passing") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("academic year") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("specialization") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("month / year") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("month & year of passing") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("board / university / year") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("year") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("years") == 0 | EducationStr[i].ToString().Trim().ToLower().IndexOf("passed with aggregate") == 0) & posYear == -1) //| EducationStr[i].ToString().Trim().ToLower().IndexOf("passed") == 0
                        posYear = i;
                    if (posYear != -1 & startPos != -1)
                        break;
                }//end for loop
            }
            catch { }
            if (posYear == -1) { startPos = 0; posYear = 0; }
            int[] returnvalue = { startPos, posYear };
            aCheckEducationYear = returnvalue;
        }//end checkEducationFormat
        /// <summary>
        /// cheking the  year is comming before the education if education not specified any format...
        /// checkYearFirst()
        /// </summary>
        /// <param name="educationpos">position of the education</param>
        /// <returns></returns>
        public void checkYearFirst(int educationpos)
        {
            try
            {
                string strMonth = @"(January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl)\.?";

                string strMonthDate = @"\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000- june 2004
                   @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)\b\s?.?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000 - june 2004  -- January 2009 – December 2009
                   @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July2000 - May2004 
                   @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // May 2000- june2004
                   @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July2000 - May 2004 
                   @"|\b(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  //April – May 2011
                   @"|\b(" + strMonth + @")\s?[,\'’]?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\s?[,\'’]?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // May,04th 2000- june,22nd 2004
                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +
                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July98 - May2004 
                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +
                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July98 - May2004 
                   @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                   @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                   @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                   @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                   @"|\b(" + strMonth + @")\b\s?\s?.{0,1}(till|to|to Till)\s?(\d{4}|\d{2})\b\s?[,\-]?\s*(\d{4}|\d{2})\b" +    //May 1999 to 2000
                   @"|\b(" + strMonth + @")\b\s?[,\-]?\s?\b(" + strMonth + @")\b\s?.{0,1}\s?(\d{4}|\d{2})\b" +
                   @"\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000- june 2004  March 07 –Dec 10
                   @"|\b(" + strMonth + @")[\.’\s]?[\s]?(\d{4}|\d{2})[\s]?[\-\–][\s]?(" + strMonth + @")[\.’\s]?[\s]?(\d{4}|\d{2})\b";



                string _strMonthDate = @"\b[0-3]?\d\s?[\.\/]\s?(0[1-9]|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}\d{1,2}\s?[\.\/]\s?(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\b" + //02/11/2007 to 25/03/2008  
                                           @"|\b(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\b" + // 10/1996-07/2002
                    //@"|\b((0[1-9])|(1[02]))/\d{2}\b" + //01/00-12/06
                                           @"|\b(0\d|1[012]|[1-9])(?:[0-9]{2})\s?[\.\/]\s?\s[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(0\d|1[012]|[1-9])\s?[\.\/]\s?(?:[0-9]{2})\s{0,3}\b" +//01/00-12/06
                                           @"|\b(20[01]\d|19[4-9]\d)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(20[01]\d|19[4-9]\d)\b" + //1997-2001
                                           @"|\(\s?[0-3]?\d\s?[\.\/]\s?(0[1-9]|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}\(\s?[0-3]?\d\s?[\.\/]\s?(0[1-9]|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)" + // (02/11/2007) to (25/03/2008)
                                           @"|\(\s?(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}\(\s?(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)" + // (10/1996) - (07/2002)
                                           @"|\(\s?(20[01]\d|19[4-9]\d)\s?\)\s{0,3}[-]?\s?([\-\–\~]|to|till|to till)\s?[-]?\s{0,3}\(\s?(20[01]\d|19[4-9]\d)\s?\)"; // (1997) - (2001)

                string regex1 = "((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])(\\s+).*?((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])";
                string regex2 = "((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d])(.)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])(\\s+)((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d]).*?((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])";	// 10/2010 11/2011


                //Regex ex1 = new Regex(@"^([\(]?\w{3,9}[\s]|[\(]?\w{3,9}|[\(]?\w{3}[\.][\s]|[\(]?\w{3}[\.,][\s]?)?(\d{4}\sto\s\w*\d{4}|\d{4}-\w{3}\s\d{4}|\d{4}\s–\s\w{3,9}\s\d{4}|\d{4}-\s\w{3}\s\d{4}|\d{4}-\w{3}\d{4}|\d{4}\s–\s\w{3}\d{4}|\d{4}\s–\s\w{3,9} \d{4}|\d{4}\sto\s\w{3,9},\s\d{4}|\d{4}\s–\s\w{3}\.\s\d{4}|\d{4}-\s\d{4}|\d{4}\s-\s\w{3,9}\s\d{4}|\d{4}\s-\s\d{4}|\d{4}\s–\s\d{4}|\d{4}\s–\d{4}|\d{4}\sTo\s\w{3,9}\s\d{4}|\d{4}\sTo\s\w{3,9}\d{4}|\d{4}\s-\d{4}|\(\d{4}-\d{4}\)|\d{4}–\d{4}|\d{4}\sTO\s\d{4}|\d{4}-\d{4}|\d{4} - \d{2}|\d{4}-\d{2}|\d{4}-\s‘\d{2}|\d{4}\s–\s‘\d{2}|\d{4}-’\d{2}|\d{4} – \d{2}|\d{4}- \d{2}|\w{3,9}\s\s[`‘'’]\d{4}\sto\s\s\w{3,9}\s\s[`‘'’]\d{4}|\w{3,9}\s[`‘'’]\d{4}|\w{3}[`‘'’]\d{4}|\w{3,9}[`‘'’]\d{4}|\d{2}-\d{4}|\d{4}|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[`‘'’]\d{4}|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\.\s\d{2}|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[`‘'’]\d{2}|\w{3,9}\s[`‘'’]\d{2}|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\.\s\d{2}|\d{2}-\d{2}|\d{2}-\d{2})[\.\):\s]?$");
                Regex ex1 = new Regex(@"^([\(]?\w{3,9}[\s]|[\(]?\w{3,9}|[\(]?\w{3}[\.][\s]|[\(]?\w{3}[\.,][\s]?)?(\d{4}\sto\s\w*\d{4}|\d{4}-\w{3}\s\d{4}|\d{4}\s–\s\w{3,9}\s\d{4}|\d{4}-\s\w{3}\s\d{4}|\d{4}-\w{3}\d{4}|\d{4}\s–\s\w{3}\d{4}|\d{4}\s–\s\w{3,9} \d{4}|\d{4}\sto\s\w{3,9},\s\d{4}|\d{4}\s–\s\w{3}\.\s\d{4}|\d{4}-\s\d{4}|\d{4}\s-\s\w{3,9}\s\d{4}|\d{4}\s-\s\d{4}|\d{4}\s–\s\d{4}|\d{4}\s–\d{4}|\d{4}\sTo\s\w{3,9}\s\d{4}|\d{4}\sTo\s\w{3,9}\d{4}|\d{4}\s-\d{4}|\(\d{4}-\d{4}\)|\d{4}–\d{4}|\d{4}\sTO\s\d{4}|\d{4}-\d{4}|\d{4} - \d{2}|\d{4}-\d{2}|\d{4}-\s‘\d{2}|\d{4}\s–\s‘\d{2}|\d{4}-’\d{2}|\d{4} – \d{2}|\d{4}- \d{2}|\w{3,9}\s\s[`‘'’]\d{4}\sto\s\s\w{3,9}\s\s[`‘'’]\d{4}|\w{3,9}\s[`‘'’]\d{4}|\w{3}[`‘'’]\d{4}|\w{3,9}[`‘'’]\d{4}|\d{2}-\d{4}|\d{4}|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[`‘'’]\d{4}|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\.\s\d{2}|(January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl)[`‘'’]\d{2}|\w{3,9}\s[`‘'’]\d{2}|(January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl)\.\s\d{2}|\d{2}-\d{2}|\d{2}-\d{2})[\.\):\s]?$");
                Regex Regdtfrmt = new Regex("(\\d)(\\d)(\\/)(\\d)(\\d)(\\d)(\\d)");   // 04/1995
                Regex ex2 = new Regex(@"(" + tPatternEducationYear + @")[\.:\s]?");
                Regex ex = new Regex(@"(" + tPatternEducationYear + ")", RegexOptions.IgnoreCase);
                //Regex exdt2 = new Regex(@"(" + strMonthDate + @")[\.:\s]?");
                Regex exdt2 = new Regex(@"((now|Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?(From |FROM |FROM|Since )?\s?" + strMonthDate + "|" + _strMonthDate + "|" + regex1 + "|" + regex2 + "|" + Regdtfrmt, RegexOptions.IgnoreCase);
                int flag = 0;
                //Year found in Current Row
                if (ex2.IsMatch(EducationStr[educationpos].ToString()) | (educationpos - 1 > 0 && (EducationStr[educationpos - 1].ToString().ToLower().IndexOf("academic") >= 0 | EducationStr[educationpos - 1].ToString().ToLower().IndexOf("professional") >= 0)))
                {
                    bEducationYearNormal = true; flag = 1;
                }
                //Year found in First-
                if (ex2.IsMatch(EducationStr[educationpos - 1].ToString()) && (educationpos - 1 >= 0 && (EducationStr[educationpos - 1].ToString().ToLower().IndexOf("college") >= 0 | EducationStr[educationpos - 1].ToString().ToLower().IndexOf("university") >= 0)))
                {
                    if (EducationStr[educationpos - 1].ToString().ToLower().IndexOf("year") < 0 && EducationStr[educationpos].ToString().ToLower().IndexOf("year") < 0)
                        bEducationYearStarting = true; flag = 1;
                }
                try
                { // Find the Education Year Position ,Checking With Education Master , Based on the Array Position
                    for (int i = 0; i <= EducationStr.Count - 1 && flag == 0; i++)
                    {
                        if (EducationStr[i] == null) continue;
                        if (educationpos >= i && regEducationText.IsMatch(" " + EducationStr[i].ToString().Trim()) == true)
                        {
                            educationpos = i;
                            break;
                        }
                    }
                }
                catch { }
                for (int i = educationpos - 1; i >= 0 && flag == 0; i--)
                {
                    if (EducationStr[i] == null) continue;
                    if ((ex1.IsMatch(EducationStr[i].ToString()) || exdt2.IsMatch(" " + EducationStr[i].ToString()) || ex.IsMatch(EducationStr[i].ToString())) && EducationStr[i].ToString().Contains("Expecting") == false)
                        bEducationYearStarting = true;
                }

                bool InfyFormat = false;
                string tinfyKey = "0", tinfyKey1 = "0", tinfyKey2 = "0", tinfyKey3 = "0", tinfyKey4 = "0", tinfyKey5 = "0", tinfyKey6 = "0";
                try
                {
                    for (int ct = 0; ct < tblEmplrData.Count; ct++)
                    {
                        string InfyKey = "(E)(D)(U)(C)(A)(T)(I)(O)(N)";
                        string infyKey1 = "(L)(E)(V)(E)(L)";
                        string infyKey2 = "(C)(o)(u)(r)(s)(e)(\\s+)(o)(f)(\\s+)(S)(t)(u)(d)(y)";
                        string infyKey3 = "(N)(a)(m)(e)(\\s+)(\\&)(\\s+)(L)(o)(c)(a)(t)(i)(o)(n)(\\s+)(o)(f)(\\s+)(S)(c)(h)(o)(o)(l)(\\/)(\\s+)(I)(n)(s)(t)(i)(t)(u)(t)(i)(o)(n)";
                        string infyKey6 = "(N)(a)(m)(e)(\\s+)(\\&)(\\s+)(L)(o)(c)(a)(t)(i)(o)(n)(\\s+)(o)(f)(\\s+)(S)(c)(h)(o)(o)(l)(\\s+)(\\/)(\\s+)(I)(n)(s)(t)(i)(t)(u)(t)(i)(o)(n)";
                        string infyKey4 = "(D)(u)(r)(a)(t)(i)(o)(n)(\\s+)(o)(f)(\\s+)(t)(h)(e)(\\s+)(c)(o)(u)(r)(s)(e)";
                        string infyKey5 = "(E)(x)(a)(m)(i)(n)(a)(t)(i)(o)(n)(\\s+)(M)(a)(r)(k)";
                        Regex rKey = new Regex(InfyKey, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                        Regex rKey1 = new Regex(infyKey1, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                        Regex rKey2 = new Regex(infyKey2, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                        Regex rKey3 = new Regex(infyKey3, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                        Regex rKey4 = new Regex(infyKey4, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                        Regex rKey5 = new Regex(infyKey5, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                        Regex rKey6 = new Regex(infyKey6, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                        Match mtchKey = rKey.Match(EducationStr[ct].ToString());
                        Match mtchKey1 = rKey1.Match(EducationStr[ct].ToString());
                        Match mtchKey2 = rKey2.Match(EducationStr[ct].ToString());
                        Match mtchKey3 = rKey3.Match(EducationStr[ct].ToString());
                        Match mtchKey4 = rKey4.Match(EducationStr[ct].ToString());
                        Match mtchKey5 = rKey5.Match(EducationStr[ct].ToString());
                        Match mtchKey6 = rKey6.Match(EducationStr[ct].ToString());
                        if (mtchKey.Success == true)
                            tinfyKey = "1";
                        if (mtchKey1.Success == true)
                            tinfyKey1 = "1";
                        if (mtchKey2.Success == true)
                            tinfyKey2 = "1";
                        if (mtchKey3.Success == true)
                            tinfyKey3 = "1";
                        if (mtchKey4.Success == true)
                            tinfyKey4 = "1";
                        if (mtchKey5.Success == true)
                            tinfyKey5 = "1";
                        if (mtchKey6.Success == true)
                            tinfyKey6 = "1";

                        if (tinfyKey == "1" && tinfyKey1 == "1" && tinfyKey2 == "1" && (tinfyKey3 == "1" || tinfyKey6 == "1") && tinfyKey4 == "1" && tinfyKey5 == "1")
                        {
                            InfyFormat = true;
                            //bEducationYearInsecond = true;
                            bEducationYearNormal = true;
                            break;
                        }
                    }
                }
                catch { }

                if (InfyFormat == false)
                {
                    if (educationpos == 1)
                    {
                        bEducationYearInsecond = true;
                    }
                    if (EducationStr.Count > educationpos)
                    {
                        if (bEducationYearInsecond == false)
                        {
                            for (int i = educationpos + 1; i < EducationStr.Count; i++)
                            {
                                if (EducationStr[i] == null) continue;
                                if (ex1.IsMatch(EducationStr[i].ToString()))
                                {
                                    if ((educationpos + 1) == i)
                                        bEducationYearInsecond = true;
                                    if ((educationpos + 3) == i)
                                    {
                                        bEducationYearInsecond = true;
                                        bEduYearFound = true;
                                        break;
                                    }
                                }

                            }
                        }

                        for (int i = educationpos - 1; i >= 0; i--)
                        {
                            if (EducationStr[i] == null) continue;
                            if (ex1.IsMatch(EducationStr[i].ToString()))
                            {
                                if ((educationpos - 1) == i)
                                    bEducationYearInFirst = true; break;
                            }
                            if (ex2.IsMatch(EducationStr[i].ToString()) && EducationStr.Count < 6)
                            {
                                if ((educationpos - 1) == i)
                                    bEducationYearInFirst = true; break;
                            }
                        }
                    }
                }
            }
            catch
            { }
            if (bEducationYearStarting == true) bEducationYearNormal = false;
        }
        /// <summary>
        /// Unique Data
        /// </summary>
        /// <param name="tdata">data for getting unique value</param>
        /// <returns>Unique Data</returns>
        public static String opGetParseUniqueData(string tdata)
        {
            string tReturn = "";
            try
            {
                bool icheck = false;
                int j = 0;
                string[] tOriginal;
                char[] sep = { ',', ';', ':' };
                tOriginal = tdata.Split(sep);
                string[] tValid = new string[tOriginal.Length];
                for (int i = 0; i < tOriginal.Length; i++)
                {
                    if (tOriginal[i].Length > 0)
                    {
                        icheck = false;
                        for (j = 0; j < tValid.Length && tValid[j] != null; j++)
                        {
                            if (tOriginal[i].ToString().ToLower().Trim() == tValid[j].ToString().ToLower().Trim())
                            {
                                icheck = true;
                                goto EXIT;
                            }
                        }
                        if (icheck == false)
                        {
                            tValid[j] = tOriginal[i];
                            j++;
                        }
                    EXIT: ;
                    }
                }
                for (int k = 0; k < tValid.Length; k++)
                {
                    if (tValid[k] != null)
                    {
                        tReturn += tValid[k] + ",";
                    }
                }
                if (tReturn.EndsWith(","))
                {
                    tReturn = tReturn.Substring(0, tReturn.Length - 1);
                }
            }
            catch
            {
                return tdata;
            }

            return tReturn;
        }

        public void opGetParseEducationUniqueData(string tdata, string tfrmYrs, string tToYrs, string tDur, string tgrd, string tInstitute, string tUniversity, string tSpecialization, string tSpecialization1)
        {
            string tReturn = "";
            eduCompleteYear = "";
            try
            {
                bool icheck = false;
                int j = 0;
                string[] tOriginal;
                string[] tOrgTOYrs;
                string[] tOrgfrmYrs;
                string[] tOrgDur;
                string[] tOrggrd;
                string[] tOrgtInstitute;
                string[] tOrgtUniversity;
                string[] tOrgtSpecialization;
                string[] tOrgtSpecialization1;

                char[] sep = { ',', ';', ':' };
                tOriginal = tdata.Split(sep);
                tOrgTOYrs = tToYrs.Split(sep);
                tOrgfrmYrs = tfrmYrs.Split(sep);
                tOrgDur = tDur.Split(sep);
                tOrggrd = tgrd.Split(sep);
                tOrgtInstitute = tInstitute.Split(sep);
                tOrgtUniversity = tUniversity.Split(sep);
                tOrgtSpecialization = tSpecialization.Split(sep);
                tOrgtSpecialization1 = tSpecialization1.Split(sep);
                eduCompleteYear = "";
                eduDuration = "";
                eduStartYear = "";
                eduUniverSity = "";
                eduSpecialization = "";
                eduSpecialization1 = "";
                eduGrade = "";
                eduInstitute = "";


                string[] tValidTOYrs = new string[tOrgTOYrs.Length];
                string[] tValidfrmYrs = new string[tOrgfrmYrs.Length];
                string[] tValidDur = new string[tOrgDur.Length];
                string[] tValidgrd = new string[tOrggrd.Length];
                string[] tValidInst = new string[tOrgtInstitute.Length];
                string[] tValidUni = new string[tOrgtUniversity.Length];
                string[] tValidSpe = new string[tSpecialization.Length];
                string[] tValidSpe1 = new string[tSpecialization1.Length];
                string[] tValid = new string[tOriginal.Length];

                for (int i = 0; i < tOriginal.Length; i++)
                {
                    if (tOriginal[i].Length > 0)
                    {
                        icheck = false;
                        for (j = 0; j < tValid.Length && tValid[j] != null; j++)
                        {
                            if (tOriginal[i].ToString().ToLower().Trim() == tValid[j].ToString().ToLower().Trim())
                            {
                                icheck = true;
                                goto EXIT;
                            }
                        }
                        if (icheck == false)
                        {
                            tValid[j] = tOriginal[i];
                            tValidTOYrs[j] = tOrgTOYrs[i];
                            tValidfrmYrs[j] = tOrgfrmYrs[i];
                            tValidDur[j] = tOrgDur[i];
                            tValidgrd[j] = tOrggrd[i];
                            tValidInst[j] = tOrgtInstitute[i];
                            tValidUni[j] = tOrgtUniversity[i];
                            tValidSpe[j] = tOrgtSpecialization[i];
                            tValidSpe1[j] = tOrgtSpecialization1[i];
                            j++;
                        }
                    EXIT: ;
                    }
                }
                for (int k = 0; k < tValid.Length; k++)
                {
                    if (tValid[k] != null)
                    {
                        tReturn += tValid[k] + ",";
                        eduCompleteYear += tValidTOYrs[k] + ",";
                        eduStartYear += tValidfrmYrs[k] + ",";
                        eduDuration += tValidDur[k] + ",";
                        eduGrade += tValidgrd[k] + ",";
                        eduInstitute += tValidInst[k] + ",";
                        eduUniverSity += tValidUni[k] + ",";
                        eduSpecialization += tValidSpe[k] + ",";
                        eduSpecialization1 += tValidSpe1[k] + ",";
                    }
                }
                //if (tReturn.EndsWith(","))
                //{
                //    tReturn = tReturn.Substring(0, tReturn.Length - 1);
                //}
            }
            catch
            {
                //return tdata;
            }

            //return tReturn;
        }

        public string getEducationGrade(int pos, string strRmLastDot)
        {
            Match GrdMtch = null;
            string GradCrnt = "";
            Regex re1 = new Regex("[0-9]{1,2}");
            Regex rgxCgpa = new Regex(@"(cgpa|gpa|c.g.p.a|g.p.a)", RegexOptions.IgnoreCase);  //rgxNotLTD2
            string Gpa = "|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)(\\d)|(G)(P)(A)(:)(\\d)(\\.)(\\d)(\\d)|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)|(C)(\\.)(G)(\\.)(P)(\\.)(\\s+)(\\d+)(\\.)(\\d+)|(G)(P)(A)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)|(G)(P)(A)(\\s+)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)|(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)|(C)(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)|(\\d{1})(\\.)(\\d{1})(\\s+)(C)(G)(P)(A)";
            string Gpa1 = "|(G)(P)(A)(\\:)(\\s+)(\\d{1})(\\.)(\\d{2})(\\/)(\\d{1})(\\.)(\\d{2})"////GPA: 3.73/4.00
                //   + ""  
            + "|(G)(P)(A)(\\s+)(\\=)(\\d{1})(\\.)(\\d{2})(\\s+)(\\/)(\\s+)(\\d{1})(\\.)(\\d{2})"  //GPA =3.87 / 4.00
            + "|(G)(P)(A)(:)(\\d)(\\.)(\\d)(\\d)(\\/)(\\d+)"
            + "|(G)(P)(A)(:)(\\s+)(\\d{1})(\\.)(\\d{1})(\\/)(\\d{1})(\\.)(\\d{1})" //GPA: 3.7/4.0
             + "|(G)(P)(A)(:)(\\s+)(\\d{1})(\\.)(\\d{3})(\\/)(\\d{1})(\\.)(\\d{1})" //GPA: 3.7/4.0
            + "|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)(\\/)(\\d+)"
            + "|(C)(\\.)(G)(\\.)(P)(\\.)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\s+)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(C)(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(C)(G)(P)(A)(\\s+)(\\=)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"

            + "|(C)(G)(P)(A)(\\s+)(:)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(C)(G)(P)(A)(:)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(:)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(:)(\\d)(\\.)(\\d)(\\/)(\\d)(\\.)(\\d)"
            + "|(G)(P)(A)(\\s+)(:)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)|(G)(P)(A)(\\:)(\\s+)(\\d{1})(\\.)(\\d{2})(\\/)(\\d{1})(\\.)(\\d{1})|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d+)" //GPA: 3.52  //GPA : 3.52/10
            + "|(\\d)(\\.)(\\d)(\\/)(\\d+)(\\.)(\\d)"
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)(\\/)(\\d)(\\.)(\\d+)" //GPA 3.48/4.00   
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)(\\s+)(\\/)(\\s+)(\\d+)(\\.)(\\d)"
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)"
            + "|(\\d)(\\.)(\\d)(\\d)(\\/)(\\d)(\\d)(\\.)(\\d)" //8.56/85.6  
            + "|(C)(G)(P)(A)(\\s+)(\\()(\\d)(\\.)(\\d)(\\/)(\\d+)(\\))"
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)(\\s+)(\\/)(\\s+)(\\d+)"
            + "|(\\d{1})(\\.)(\\d{1})(\\s+)(G)(P)(A)"
            + "|(\\d{1})(\\.)(\\d{1})(\\s+)(C)(G)(P)(A)"  //8.5 CGPA
            + "|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)(\\d)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\s+)(\\–)(\\s+)(\\d)(\\.)(\\d)(\\s+)(\\/)(\\s+)(\\d)(\\.)(\\d)|(\\d{1})(\\.)(\\d{3})(\\/)(\\d{2})|(\\d{2})(\\.)(\\d{2})(\\/)(\\d{2})|(\\d{1})(\\.)(\\d{2})(\\/)(\\d{2})|(\\d{2})(\\.)(\\d{3})|(\\d{2})(\\.)(\\d{2})|(\\d{1})(\\.)(\\d{2})"; // GPA - 3.4 / 4.0 || 6.75/10
            //"GPA – 3.6 / 4.0"

            Regex rgxgrd = new Regex("(\\d)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(\\s+)(%)|(\\d)(\\d)(\\s+)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(\\s+)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(\\d)(\\s+)(%)" + Gpa1 + Gpa + "", RegexOptions.IgnoreCase);
            Regex rgxgrd1 = new Regex("(\\d{1})(\\.)(\\d{2})|(\\d{2})(\\.)(\\d{2})|(\\d{2})(\\.)(\\d{1})|" + @"\b(\s|^)(\d{2})(\s|$)\b", RegexOptions.IgnoreCase);

            try
            {
                if (bPrecentageInLast == true)
                {
                    for (int kGrd = pos; kGrd < EducationStr.Count; kGrd++)
                    {
                        if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                        {
                            if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                            {
                                GrdMtch = rgxgrd.Match(EducationStr[kGrd].ToString());
                                GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                if (GrdMtch.Success == true)
                                {
                                    return opReplaceGrade(GrdMtch.Value.ToString());

                                }
                                else
                                {
                                    GrdMtch = rgxgrd1.Match(EducationStr[kGrd].ToString());
                                    GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                }
                                if (GrdMtch.Success == true)
                                    return opReplaceGrade(GrdMtch.Value.ToString());

                            }

                        }
                        else if (pos < kGrd && regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == true && regEducationText.Match(" " + EducationStr[kGrd].ToString()).ToString().Trim() != strRmLastDot.Trim()) //strRmLastDot
                            break;
                    }
                }
            }
            catch
            { }
            if (bPrecentageInLast == false || GrdMtch.Success == false)
            {
                try
                {
                    //Added New Logic for Education Grade --- Saravana
                    try
                    {

                        if ((pos + 1) <= (EducationStr.Count - 1))
                            for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                            {
                                if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                if (GrdMtch != null && GrdMtch.Success == true)
                                    return opReplaceGrade(GrdMtch.Value.ToString());
                                else
                                    GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                if (GrdMtch != null && GrdMtch.Success == true)
                                    return opReplaceGrade(GrdMtch.Value.ToString());
                            }
                        if ((pos - 1) <= (EducationStr.Count - 1))
                            if (GrdMtch == null || GrdMtch.Success == false)
                                for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                {
                                    if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                    GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                    if (GrdMtch != null && GrdMtch.Success == true)
                                        return opReplaceGrade(GrdMtch.Value.ToString());
                                    else
                                        GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());   //return opReplaceGrade(GrdMtch.Value.ToString());
                                    if (GrdMtch != null && GrdMtch.Success == true)
                                        return opReplaceGrade(GrdMtch.Value.ToString());

                                }
                    }
                    catch
                    {
                        return "";
                    }

                    #region "Code Commended for New Logic"

                    //if ((pos + 1) <= (EducationStr.Count - 1))
                    //{
                    //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                    //    if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false || regEducationText.Match(" " + EducationStr[pos + 1].ToString()).ToString().Trim() == strRmLastDot.Trim())
                    //    {
                    //        GrdMtch2 = rgxgrd.Match(EducationStr[pos + 1].ToString());
                    //        Grade5 = EducationStr[pos + 1].ToString().Trim();
                    //    }
                    //    else
                    //        GrdMtch2 = rgxgrd.Match("");
                    //    if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false || regEducationText.Match(" " + EducationStr[pos - 1].ToString()).ToString().Trim() == strRmLastDot.Trim())
                    //    {
                    //        GrdMtch3 = rgxgrd.Match(EducationStr[pos - 1].ToString());
                    //        Grade6 = EducationStr[pos - 1].ToString().Trim();
                    //    }
                    //    else
                    //        GrdMtch3 = rgxgrd.Match("");


                    //    GradCrnt = EducationStr[pos].ToString().Trim();

                    //    if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success)
                    //    {
                    //        //Grade Normal
                    //        GrdMtch = rgxgrd1.Match(EducationStr[pos].ToString());
                    //        if (GrdMtch.Success == true)
                    //            if (Convert.ToDecimal(GrdMtch.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[pos].ToString().ToLower()) == false)
                    //                GrdMtch = rgxgrd1.Match("");
                    //        if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                    //            GrdMtch2 = rgxgrd1.Match(EducationStr[pos + 1].ToString());
                    //        if (GrdMtch2.Success == true)
                    //            if (Convert.ToDecimal(GrdMtch2.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[pos + 1].ToString().ToLower()) == false)
                    //                GrdMtch2 = rgxgrd1.Match("");
                    //            else
                    //                Grade5 = GrdMtch2.Value.ToString();
                    //        if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                    //            GrdMtch3 = rgxgrd1.Match(EducationStr[pos - 1].ToString());
                    //        if (GrdMtch3.Success == true)
                    //            if (Convert.ToDecimal(GrdMtch3.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[pos - 1].ToString().ToLower()) == false)
                    //                GrdMtch3 = rgxgrd1.Match("");
                    //    }
                    //    if ((pos + 2) <= (EducationStr.Count - 1))
                    //    {
                    //        if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success)
                    //        {
                    //            //Grade %
                    //            GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                    //            if (regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                    //                GrdMtch2 = rgxgrd.Match(EducationStr[pos + 2].ToString());
                    //            if ((pos - 2 > 0) && regEducationText.IsMatch(" " + EducationStr[pos - 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                    //                GrdMtch3 = rgxgrd.Match(EducationStr[pos - 2].ToString());
                    //            // GrdMtch3 =rgxgrd1.Match(EducationStr[i + 2].ToString());
                    //        }
                    //        if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success)
                    //        {
                    //            //Grade Normal
                    //            GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                    //            if (GrdMtch.Success == true)
                    //                if (Convert.ToDecimal(opReplaceGrade(GrdMtch.Value.ToString())) < 50 && rgxCgpa.IsMatch(EducationStr[pos].ToString().ToLower()) == false)
                    //                    GrdMtch = rgxgrd.Match("");
                    //            if (regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                    //                GrdMtch2 = rgxgrd.Match(EducationStr[pos + 2].ToString());
                    //            if (GrdMtch2.Success == true)
                    //                if (Convert.ToDecimal(opReplaceGrade(GrdMtch2.Value.ToString())) < 50 && rgxCgpa.IsMatch(EducationStr[pos - 2].ToString().ToLower()) == false)
                    //                    GrdMtch2 = rgxgrd.Match("");
                    //            if (regEducationText.IsMatch(" " + EducationStr[pos - 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                    //                GrdMtch3 = rgxgrd.Match(EducationStr[pos - 2].ToString());
                    //            if (GrdMtch3.Success == true)
                    //                if (Convert.ToDecimal(opReplaceGrade(GrdMtch3.Value.ToString())) < 50 && rgxCgpa.IsMatch(EducationStr[pos - 2].ToString().ToLower()) == false)
                    //                    GrdMtch3 = rgxgrd.Match("");
                    //            if (GrdMtch2.Success == false)
                    //                if (regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                    //                    GrdMtch2 = rgxgrd.Match(EducationStr[pos + 3].ToString());
                    //            if (GrdMtch2.Success == true)
                    //                if (Convert.ToDecimal(opReplaceGrade(GrdMtch2.Value.ToString())) < 50 && rgxCgpa.IsMatch(EducationStr[pos + 3].ToString().ToLower()) == false)
                    //                    GrdMtch2 = rgxgrd.Match("");
                    //        }
                    //    }

                    //    match2 = re1.Match(Grade5);
                    //    try
                    //    {
                    //        if (match2.Success == true)
                    //            if (Convert.ToDecimal(Grade5.ToString()) < 50 || Convert.ToDecimal(Grade5.ToString()) > 100 && rgxCgpa.IsMatch(EducationStr[pos + 1].ToString().ToLower()) == false)
                    //                match2 = re1.Match("");
                    //    }
                    //    catch { }
                    //    if (GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                    //    {
                    //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                    //            return opReplaceGrade(GrdMtch.Value.ToString());
                    //        else if (GradCrnt.ToString().Length <= 3)
                    //            return GradCrnt;
                    //        else if (GradCrnt.ToString().Length <= 4)
                    //            return GradCrnt;
                    //        else if (GradCrnt.ToString().Length <= 5)
                    //            return GradCrnt;
                    //        else if (GradCrnt.ToString().Length >= 6)
                    //            return GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5));
                    //    }
                    //    else
                    //    {
                    //        if (match2.Success == true || rgxCgpa.IsMatch(GrdMtch2.Value.ToString().ToLower()) == true || rgxCgpa.IsMatch(Grade5.ToLower()) == true || Grade5.IndexOf("%") > 0 || (match2.Success == true && (Grade5.ToString().Length <= 3 || (Grade5.ToString().Length <= 5 && Grade5.IndexOf(".") > 0))) && Grade5.IndexOf("D.G.P.A") < 0)
                    //        {
                    //            if (GrdMtch2.Success == true)
                    //                return opReplaceGrade(GrdMtch2.Value.ToString());
                    //            else if (Grade5.ToString().Length <= 3)
                    //                return Grade5;
                    //            else if (Grade5.ToString().Length <= 4)
                    //                return Grade5;
                    //            else if (Grade5.ToString().Length <= 5)
                    //                return Grade5;
                    //            else if (Grade5.ToString().Length >= 6)
                    //                return Grade5.Substring(Grade5.IndexOf("%") - 5);

                    //        }
                    //        else if (Grade6.IndexOf("%") > 0 && Grade6.IndexOf("D.G.P.A") < 0 || (rgxCgpa.IsMatch(Grade6.ToLower()) == true && Grade6.Length < 50))
                    //        {
                    //            if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade6.ToLower()) == true)
                    //                return opReplaceGrade(GrdMtch3.Value.ToString());
                    //            else if (Grade6.ToString().Length <= 3)
                    //                return Grade6;

                    //            else if (Grade6.ToString().Length <= 4)
                    //                return Grade6;
                    //            else if (Grade6.ToString().Length <= 5)
                    //                return Grade6;
                    //            else if (Grade6.ToString().Length >= 6)
                    //                return Grade6.Substring(Grade6.IndexOf("%") - 5);

                    //        }
                    //        else
                    //        {
                    //            return "";
                    //        }
                    //    }
                    //}
                    //else if ((pos - 1) <= (EducationStr.Count - 1))
                    //{
                    //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                    //    GrdMtch3 = rgxgrd.Match(EducationStr[pos - 1].ToString());

                    //    Grade6 = EducationStr[pos - 1].ToString().Trim();
                    //    GradCrnt = EducationStr[pos].ToString().Trim();
                    //    //match2 = re1.Match(Grade5);
                    //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                    //    {
                    //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                    //            return opReplaceGrade(GrdMtch.Value.ToString());
                    //        else if (GradCrnt.ToString().Length <= 3)
                    //            return GradCrnt;
                    //        else if (GradCrnt.ToString().Length <= 4)
                    //            return GradCrnt;
                    //        else if (GradCrnt.ToString().Length <= 5)
                    //            return GradCrnt;
                    //        else if (GradCrnt.ToString().Length >= 6)
                    //            return GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5));
                    //    }
                    //    else if (GrdMtch3.Success == true || Grade6.IndexOf("%") > 0 && Grade6.IndexOf("D.G.P.A") < 0 || rgxCgpa.IsMatch(Grade6.ToLower()) == true)
                    //    {
                    //        if (GrdMtch3.Success == true)
                    //            return opReplaceGrade(GrdMtch3.Value.ToString());
                    //        else if (Grade6.ToString().Length <= 3)
                    //            return Grade6;

                    //        else if (Grade6.ToString().Length <= 4)
                    //            return Grade6;
                    //        else if (Grade6.ToString().Length <= 5)
                    //            return Grade6;
                    //        else if (Grade6.ToString().Length >= 6)
                    //            return Grade6.Substring(Grade6.IndexOf("%") - 5);

                    //    }
                    //    else
                    //    {
                    //        return "";
                    //    }
                    //}
                    //else
                    //{
                    //    return "";
                    //}
                    #endregion
                }
                catch
                {
                    return "";
                }
            }

            return "";
        }

        public void getEducationInstitustion(int pos, int i)
        {
            try
            {
                Regex re1 = new Regex("[0-9]{1,2}");
                Regex rgxNotInstitute = new Regex(@"SCHOLASTICS|ACADAMIC PROJECT|:|Pass|Partially completed|IT related|Engineer Support|Project Maanger|Business Analyst|india’s top|summer internship |Insurance", RegexOptions.IgnoreCase);
                Regex rgxCgpa = new Regex(@"(cgpa|gpa|c.g.p.a|g.p.a)", RegexOptions.IgnoreCase);
                Regex rgxInstitute = new Regex(@"college|COLLAGE|COLLEGE|VIDYALAYA|SCHOOL|School|Polytech|Institution|Institute|Institute of Technology|Vidya Mandir|Education Board|Matriculation", RegexOptions.IgnoreCase);
                Regex rgxUniversity = new Regex(@"UNIVERSITY|università|universiteit|university", RegexOptions.IgnoreCase);

                //string FlagInstitute = "0", FlagInstitute2 = "0", FlagInstitute3 = "0";
                //string Institute1 = "", Institute2 = "", Institute3 = "";
                //Match MtchInst = null, MtchInst1 = null, MtchInst2 = null, mtchInstitute1 = null, mtchInstitute2 = null, mtchInstitute3 = null;
                bool bInsFlag = false;
                string Institute1 = "";
                //Added  Education Institution --- Saravana
                try
                {
                    if ((i + 1) <= (EducationStr.Count - 1))
                    {
                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                        {
                            Institute1 = "";
                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos)
                            {
                                bInsFlag = true;
                                eduInstitute += ",";
                                break;
                            }
                            if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                            Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                            if (Institute1 != "")
                                if (rgxInstitute.IsMatch(Institute1))
                                {
                                    bInsFlag = true;
                                    eduInstitute += Institute1 + ",";
                                    break;
                                }
                        }
                    }
                    else if ((i - 1) <= (EducationStr.Count - 1))
                    {
                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                        {
                            Institute1 = "";
                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos)
                            {
                                bInsFlag = true;
                                eduInstitute += ",";
                                break;
                            }
                            if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                            Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                            if (Institute1 != "") //rgxInstitute.IsMatch(Institute1)
                                if (rgxInstitute.IsMatch(Institute1))
                                {
                                    bInsFlag = true;
                                    eduInstitute += Institute1 + ",";
                                    break;
                                }
                        }
                    }
                }
                catch
                {
                    bInsFlag = true;
                    eduInstitute += ",";
                }

                if (bInsFlag == false)
                    eduInstitute += ",";

                #region "Code Commended"
                //    if ((i + 1) <= (EducationStr.Count - 1))
                //{
                //    if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                //        Institute1 = opReplaceInstitutions(EducationStr[pos + 1].ToString());
                //    if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                //        Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());

                //    Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                //    MtchInst = rgxNotInstitute.Match(Institute1);
                //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                //    MtchInst2 = rgxNotInstitute.Match(Institute3);
                //    if (EducationStr[i].ToString().IndexOf("%") >= 0 && EducationStr[i].ToString().IndexOf("%") >= 0)
                //        FlagInstitute = "0";
                //    else
                //        if (rgxInstitute.IsMatch(Institute1))
                //            if (isNumberExists2(EducationStr[pos].ToString().Replace(":", "").Trim().ToCharArray()) == false && isNumberExists2(EducationStr[pos + 1].ToString().Replace(":", "").Trim().ToCharArray()) == false)
                //                FlagInstitute = "0";
                //            else
                //                FlagInstitute = "1";
                //    if (rgxInstitute.IsMatch(Institute2))
                //    {
                //        if (regEducationText != null)
                //        {   //
                //            if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false && (regEducationText.IsMatch(" " + EducationStr[pos].ToString()) == true || regEducationText1.IsMatch(@" " + EducationStr[pos].ToString()) == true))
                //            {
                //                if (EducationStr[i - 1].ToString().Contains("%") == true && EducationStr[i].ToString().Contains("%") == true)
                //                    FlagInstitute2 = "0";
                //                else
                //                    FlagInstitute2 = "2";
                //            }
                //            else
                //                Institute2 = "";
                //        }
                //        else
                //            FlagInstitute2 = "2";
                //    }

                //    if (rgxInstitute.IsMatch(Institute3))
                //        FlagInstitute3 = "3";

                //    mtchInstitute1 = re1.Match(Institute1);
                //    mtchInstitute2 = re1.Match(Institute2);
                //    mtchInstitute3 = re1.Match(Institute3);

                //    if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                //    {
                //        if ((pos + 1) <= EducationStr.Count)
                //        {
                //            if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                //                Institute1 = opReplaceInstitutions(EducationStr[pos + 1].ToString());
                //            if (rgxNotInstitute.IsMatch(EducationStr[pos - 1].ToString()) == true || (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true))
                //                Institute2 = "";
                //            else
                //            {
                //                if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                //                    Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                //            }

                //        }
                //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                //        MtchInst = rgxNotInstitute.Match(Institute1);
                //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                //        MtchInst2 = rgxNotInstitute.Match(Institute3);

                //        if (rgxInstitute.IsMatch(Institute1) && EducationStr[pos + 1].ToString().IndexOf("%") < 0)
                //            if (isNumberExists2(EducationStr[pos].ToString().Trim().ToCharArray()) == false && isNumberExists2(EducationStr[pos + 1].ToString().Trim().ToCharArray()) == false)
                //                FlagInstitute = "0";
                //            else
                //                FlagInstitute = "1";
                //        if (rgxInstitute.IsMatch(Institute2))
                //        {
                //            if (regEducationText != null)
                //            {
                //                if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false && (regEducationText.IsMatch(@" " + EducationStr[pos].ToString()) == true || regEducationText1.IsMatch(@" " + EducationStr[pos].ToString()) == true))
                //                {
                //                    if (EducationStr[i - 1].ToString().Contains("%") == true && EducationStr[i].ToString().Contains("%") == true)
                //                        FlagInstitute2 = "0";
                //                    else
                //                        FlagInstitute2 = "2";
                //                }
                //                else
                //                    Institute2 = "";
                //            }
                //            else
                //                FlagInstitute2 = "2";
                //        }
                //        if (rgxInstitute.IsMatch(Institute3))
                //            FlagInstitute3 = "3";

                //        if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                //        {
                //            if ((pos + 2) <= (EducationStr.Count - 1) && rgxUniversity.IsMatch(EducationStr[pos].ToString()) == false && EducationStr.Count > 6 && EducationStr[pos + 2].ToString().IndexOf("%") < 0 && rgxNotInstitute.IsMatch(EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false)
                //                Institute1 = opReplaceInstitutions(EducationStr[pos + 2].ToString());

                //            if (rgxNotInstitute.IsMatch(EducationStr[pos - 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                //                Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                //            Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());
                //            if (rgxInstitute.IsMatch(Institute1) && rgxUniversity.IsMatch(EducationStr[pos].ToString()) == false && EducationStr.Count > 6 && EducationStr[pos].ToString().IndexOf("%") < 0)
                //                FlagInstitute = "1";
                //            if (rgxInstitute.IsMatch(Institute2))
                //            {
                //                if (regEducationText != null)
                //                {
                //                    if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos].ToString()) == true)
                //                    {
                //                        if (EducationStr[pos - 1].ToString().Contains("%") == true && EducationStr[pos].ToString().Contains("%") == true)
                //                            FlagInstitute2 = "0";
                //                        else
                //                            FlagInstitute2 = "2";
                //                    }
                //                    else
                //                        Institute2 = "";
                //                }
                //                else
                //                    FlagInstitute2 = "2";
                //            }
                //            if (rgxInstitute.IsMatch(Institute3))
                //                FlagInstitute3 = "3";
                //            if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                //                if (pos + 3 < EducationStr.Count && rgxNotInstitute.IsMatch(EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                //                    Institute2 = opReplaceInstitutions(EducationStr[pos + 3].ToString());

                //        }
                //        mtchInstitute1 = re1.Match(Institute1);
                //        mtchInstitute2 = re1.Match(Institute2);
                //        mtchInstitute3 = re1.Match(Institute3);

                //    }

                //    if ((Institute1.IndexOf("%") < 0 && (mtchInstitute1.Success == false && (Institute1.ToString().Length <= 80) && CheckNumeric(Institute2.ToString().Trim().ToCharArray(), "CTC") == true) && MtchInst.Success == false) && FlagInstitute2 != "2" && FlagInstitute3 != "3" && FlagInstitute == "1" || FlagInstitute == "1" && Institute2.ToString().Length <= 120 && FlagInstitute3 != "3")
                //    {
                //        try
                //        {
                //            Institute1 = opReplaceInstituteOne(Institute1);
                //        }
                //        catch { }
                //        eduInstitute += Institute1 + ",";
                //    }
                //    else if ((Institute2.IndexOf("%") < 0 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 80) && CheckNumeric(Institute2.ToString().Trim().ToCharArray(), "CTC") == true) && MtchInst1.Success == false) && (MtchInst2.Success == true || FlagInstitute3 != "3") && FlagInstitute2 == "2" || FlagInstitute2 == "2" && Institute2.ToString().Length <= 120 && (FlagInstitute3 != "3" || MtchInst2.Success == true))
                //    {
                //        try
                //        {
                //            Institute2 = opReplaceInstituteOne(Institute2);
                //        }
                //        catch { }
                //        eduInstitute += Institute2 + ",";
                //    }
                //    else if ((Institute3.IndexOf("%") < 0 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && CheckNumeric(Institute3.ToString().Trim().ToCharArray(), "CTC") == true) && MtchInst2.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                //    {
                //        try
                //        {
                //            Institute3 = opReplaceInstituteOne(Institute3);
                //        }
                //        catch { }
                //        eduInstitute += Institute3 + ",";
                //    }

                //    else
                //        eduInstitute += ",";
                //    //else
                //    //    eduInstitute += ",";
                //}
                //else if ((i - 1) <= (EducationStr.Count - 1))
                //{
                //    Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());
                //    //Institute1 = opReplaceInstitutions(EducationStr[i].ToString());
                //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());

                //    MtchInst2 = rgxNotInstitute.Match(Institute3);
                //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                //    mtchInstitute2 = re1.Match(Institute2);
                //    mtchInstitute3 = re1.Match(Institute3);
                //    if (rgxInstitute.IsMatch(Institute2))
                //        FlagInstitute = "2";
                //    if (rgxInstitute.IsMatch(Institute3))
                //        FlagInstitute3 = "3";

                //    if (FlagInstitute == "0" && FlagInstitute3 == "0")
                //    {
                //        if ((pos + 1) <= EducationStr.Count - 1)
                //            Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                //        MtchInst2 = rgxNotInstitute.Match(Institute3);

                //        if (rgxInstitute.IsMatch(Institute2))
                //            FlagInstitute2 = "2";
                //        if (rgxInstitute.IsMatch(Institute3))
                //            FlagInstitute3 = "3";

                //        mtchInstitute2 = re1.Match(Institute2);
                //        mtchInstitute3 = re1.Match(Institute3);

                //    }
                //    if ((Institute2.IndexOf("%") < 0 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 80) && CheckNumeric(Institute2.ToString().Trim().ToCharArray(), "CTC") == true) && MtchInst1.Success == false) && FlagInstitute3 != "3" && EducationStr[i].ToString().ToLower().IndexOf(" from ") < 0 || (FlagInstitute == "2" && FlagInstitute3 != "3")) //&& EducationStr[i].ToString().ToLower().IndexOf(" from ") < 0
                //    {
                //        try
                //        {
                //            Institute2 = opReplaceInstituteOne(Institute2);
                //        }
                //        catch { }
                //        eduInstitute += Institute2 + ",";
                //    }
                //    else if ((Institute3.IndexOf("%") < 0 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && CheckNumeric(Institute3.ToString().Trim().ToCharArray(), "CTC") == true) && MtchInst2.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                //    {
                //        try
                //        {
                //            Institute3 = opReplaceInstituteOne(Institute3);
                //        }
                //        catch { }
                //        eduInstitute += Institute3 + ",";
                //    }
                //    else
                //        eduInstitute += ",";
                //}
                //else
                //{
                //    eduInstitute += ",";
                //}
                #endregion

            }
            catch { }
        }

        private string opReplaceGrade(string GradeValue)
        {
            try
            {
                return GradeValue.ToLower().Replace(":", "").Replace("=", "").Replace("-", "").Replace("cgpa", "").Replace("gpa –", "").Replace("gpa", "").Replace("c.g.p.a", "").Replace("g.p.a", "").Replace("c g p a", "").Replace("g p a", "").Replace("percentage", "").Replace("(", "").Replace(")", "");
            }
            catch
            {
                return "";
            }
        }

        public string getEducationUniversity(int pos, int i)
        {
            Regex rgxNotUniversity = new Regex(@"school|sslc|ssc|intermediate|hige School|secondary|s.s.l.c|10th|ssc (10th)|x std|s.s.c|x standard|secondary Education|XII Standard|12th|10th", RegexOptions.IgnoreCase);
            Regex rgxNotUniversity1 = new Regex(@"cgpa|c.g.p.a|gpa|c g p a|g p a|%|g.p.a", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            Regex rgxUniversity = new Regex(@"UNIVERSITY|università|universiteit|university|university", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            string _sbMtchMonth = "";
            _sbMtchMonth = @"(Jan |January|February|March|April|May |June|July|August|September|October|November|December|Dec |jan |feb |mar |apr |may |jun|jul|aug |sep|oct |nov |dec |febs|aprl|Sept|Octb|Jan |Feb |Mar |Apr|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl|Qualification)[s]?";
            Regex rgxMonthFmt = new Regex(_sbMtchMonth, RegexOptions.IgnoreCase);
            Match GrdMtch = null;
            bool bUnivFlag = false;
            int iPos = 0;
            try
            {
                if ((pos + 1) <= (EducationStr.Count - 1))
                {
                    if (pos > i && i != 0)
                        iPos = i;
                    else
                        iPos = pos;

                    for (int kGrd1 = iPos; bUnivFlag == false && kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                    {
                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) //&& EducationStr[kGrd1].ToString().IndexOf(strRmLastDot) < 0
                            return "0";
                        if (regxUni.IsMatch(" " + EducationStr[kGrd1].ToString()))  //regxUni.Match(" University of California");
                        {

                            if (pos < kGrd1 && (regxUni.IsMatch(" " + EducationStr[kGrd1 - 1].ToString()) == true)) continue; //  regxUni.IsMatch(" " + EducationStr[kGrd1 - 1].ToString()))

                            if (((pos + 1) < kGrd1) && (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[kGrd1].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10)) return "0";

                            if (pos < kGrd1 && rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[kGrd1].ToString().ToLower()) == true) return "0"; //regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) == true

                            GrdMtch = regxUni.Match(" " + EducationStr[kGrd1].ToString());
                            if (GrdMtch.Success == true)
                            {
                                bUnivFlag = true;
                                return opAssignUniversity(GrdMtch);
                            }
                        }
                    }
                    if (bUnivFlag == false)
                        if ((pos + 1 <= EducationStr.Count) && regxUni.IsMatch(" " + EducationStr[pos - 1].ToString()) && rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                        {
                            if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos - 1].ToString().ToLower()) == true || EducationStr[pos - 1].ToString().ToLower().Contains("distance education")) return "0"; //
                            if (rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && (pos - 2 < EducationStr.Count && EducationStr[pos - 2].ToString().ToLower().IndexOf("college") >= 0 && pos - 2 < EducationStr.Count && EducationStr[pos - 2].ToString().ToLower().IndexOf("college") >= 0) == false)
                            {
                                GrdMtch = regxUni.Match(" " + EducationStr[pos - 1].ToString());
                                if (GrdMtch.Success == true)
                                {
                                    if (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";
                                    return opAssignUniversity(GrdMtch);
                                }
                                else
                                    return "0";
                            }
                        }
                }

                if (bUnivFlag == false)
                    if ((pos - 1) <= (EducationStr.Count - 1))
                    {
                        for (int kGrd1 = pos; bUnivFlag == false && kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                        {
                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) //&& EducationStr[kGrd1].ToString().IndexOf(strRmLastDot) < 0
                                return "0";
                            if (regxUni.IsMatch(" " + EducationStr[kGrd1].ToString()))
                            {
                                if ((pos > kGrd1) && rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[kGrd1].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";

                                if ((pos > kGrd1) && rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[kGrd1].ToString().ToLower()) == true || EducationStr[kGrd1].ToString().ToLower().Contains("distance education")) return "0";

                                GrdMtch = regxUni.Match(" " + EducationStr[kGrd1].ToString());
                                if (GrdMtch.Success == true)
                                {
                                    bUnivFlag = true;
                                    return opAssignUniversity(GrdMtch);
                                }
                            }
                        }
                    }

                if (bUnivFlag == false)
                    return "0";

                #region "Code Commended For University"

                //Code Commended For New Logic
                //if ((pos + 1) <= (EducationStr.Count - 1))
                //{
                //    ///// 
                //    if (regxUni.IsMatch(" " + EducationStr[pos].ToString()))
                //    {
                //        GrdMtch = regxUni.Match(" " + EducationStr[pos].ToString());
                //        if (GrdMtch.Success == true)
                //            return opAssignUniversity(GrdMtch);
                //        else
                //            return "0";
                //    }
                //    if (regxUni.IsMatch(" " + EducationStr[pos + 1].ToString()) && (regxUni.IsMatch(" " + EducationStr[pos - 1].ToString()) == false || (pos > 2 && regEducationText.IsMatch(" " + EducationStr[pos - 2].ToString())))) //
                //    {
                //        if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos + 1].ToString().ToLower()) == true || regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == true) return "0";
                //        GrdMtch = regxUni.Match(" " + EducationStr[pos + 1].ToString());
                //        if (GrdMtch.Success == true)
                //            return opAssignUniversity(GrdMtch);
                //        else
                //            return "0";
                //    }
                //    if ((pos + 1 <= EducationStr.Count) && regxUni.IsMatch(" " + EducationStr[pos - 1].ToString()) && rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                //    {
                //        if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos - 1].ToString().ToLower()) == true || EducationStr[pos - 1].ToString().ToLower().Contains("distance education")) return "0"; //
                //        if (rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && (pos - 2 < EducationStr.Count && EducationStr[pos - 2].ToString().ToLower().IndexOf("college") >= 0 && pos - 2 < EducationStr.Count && EducationStr[pos - 2].ToString().ToLower().IndexOf("college") >= 0) == false)
                //        {
                //            GrdMtch = regxUni.Match(" " + EducationStr[pos - 1].ToString());
                //            if (GrdMtch.Success == true)
                //            {
                //                if (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";
                //                return opAssignUniversity(GrdMtch);
                //            }
                //            else
                //                return "0";
                //        }
                //    }
                //    try
                //    {
                //        if (pos - 2 >= 1 && regxUni.IsMatch(" " + EducationStr[pos - 2].ToString()) && EducationStr[pos - 1].ToString().Trim().Length < 40 && rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && regEducationText.IsMatch(" " + EducationStr[pos - 2].ToString()) == false)
                //        {
                //            if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos - 2].ToString().ToLower()) == true) return "0";
                //            GrdMtch = regxUni.Match(" " + EducationStr[pos - 2].ToString());
                //            if (GrdMtch.Success == true)
                //            {
                //                if (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 2].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";
                //                return opAssignUniversity(GrdMtch);
                //            }
                //            else
                //                return "0";
                //        }
                //    }
                //    catch { }
                //    if ((pos + 2 < EducationStr.Count) && regxUni.IsMatch(" " + EducationStr[pos + 2].ToString()) && rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false)
                //    {
                //        if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos + 2].ToString().ToLower()) == true) return "0";
                //        GrdMtch = regxUni.Match(" " + EducationStr[pos + 2].ToString());
                //        if (GrdMtch.Success == true)
                //        {
                //            if (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos + 2].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";
                //            return opAssignUniversity(GrdMtch);
                //        }
                //        else
                //            return "0";
                //    }
                //    else if ((pos + 3 <= EducationStr.Count) && regxUni.IsMatch(" " + EducationStr[pos + 3].ToString()) && (rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && rgxNotUniversity.IsMatch(EducationStr[pos + 1].ToString().ToLower()) == false) && regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false)
                //    {
                //        if ((rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true || rgxNotUniversity1.IsMatch(EducationStr[pos + 1].ToString().ToLower()) == true) && rgxNotUniversity1.IsMatch(EducationStr[pos + 3].ToString().ToLower()) == true) return "0";
                //        GrdMtch = regxUni.Match(" " + EducationStr[pos + 3].ToString());
                //        if (GrdMtch.Success == true)
                //        {
                //            if (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 3].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10 || EducationStr[pos + 1].ToString().ToLower().Contains("educational qualifications") == true) return "0";
                //            return opAssignUniversity(GrdMtch);
                //        }
                //        else
                //            return "0";
                //    }
                //}
                //else if ((pos - 1) <= (EducationStr.Count - 1))
                //{
                //    try
                //    {
                //        if (regxUni.IsMatch(" " + EducationStr[pos].ToString()))
                //        {
                //            GrdMtch = regxUni.Match(" " + EducationStr[pos].ToString());
                //            if (GrdMtch.Success == true)
                //                return opAssignUniversity(GrdMtch);
                //            else
                //                return "0";
                //        }
                //        if ((pos - 1 >= 1) && regxUni.IsMatch(" " + EducationStr[pos - 1].ToString()) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                //        {
                //            if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos - 1].ToString().ToLower()) == true) return "0";
                //            GrdMtch = regxUni.Match(" " + EducationStr[pos - 1].ToString());
                //            if (GrdMtch.Success == true)
                //            {
                //                if (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";
                //                return opAssignUniversity(GrdMtch);
                //            }
                //            else
                //                return "0";
                //        }
                //        if ((pos - 2 >= 1) && regxUni.IsMatch(" " + EducationStr[pos - 2].ToString()) && rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && regEducationText.IsMatch(" " + EducationStr[pos - 2].ToString()) == false)
                //        {

                //            if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos - 2].ToString().ToLower()) == true) return "0";
                //            GrdMtch = regxUni.Match(" " + EducationStr[pos - 2].ToString());
                //            if (GrdMtch.Success == true)
                //            {
                //                //if ((rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true || rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true) && rgxUniversity.IsMatch(EducationStr[pos - 2].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";
                //                if ((rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true || rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true) && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0"; //rgxUniversity.IsMatch(EducationStr[pos - 2].ToString()) == true &&
                //                if (EducationStr[pos - 1].ToString().Replace(":", "").Contains("CERTIFICATION COURSE")) return "0";
                //                return opAssignUniversity(GrdMtch);
                //            }
                //            else
                //                return "0";
                //        }

                //    }
                //    catch { }
                //}
                //else
                //{
                //    return "0";
                //}
                //try
                //{
                //    if ((pos - 3 > 1) && regxUni.IsMatch(" " + EducationStr[pos - 3].ToString()) && rgxNotUniversity.IsMatch(EducationStr[pos].ToString().ToLower()) == false && EducationStr[0].ToString() == "EDUCATION" && regEducationText.IsMatch(" " + EducationStr[pos - 3].ToString()) == false)
                //    {
                //        if (rgxNotUniversity1.IsMatch(EducationStr[pos].ToString().ToLower()) == true && rgxNotUniversity1.IsMatch(EducationStr[pos - 3].ToString().ToLower()) == true) return "0";
                //        GrdMtch = regxUni.Match(" " + EducationStr[pos - 3].ToString());
                //        if (GrdMtch.Success == true)
                //        {
                //            if (rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 3].ToString()) == true && regxUni.IsMatch(" " + EducationStr[pos].ToString()) == false && EducationStr[pos].ToString().Length > 10) return "0";
                //            return opAssignUniversity(GrdMtch);
                //        }
                //        else
                //            return "0";
                //    }
                //}
                //catch
                //{
                //    return "0";
                //}
                #endregion

            }
            catch
            {
                return "0";
            }
            return "0";
        }

        public string opAssignUniversity(Match mtch)
        {
            string tResUniversity = "";
            try
            {
                string str = mtch.Value.ToString().Trim().Replace(",", "").Replace("&amp;", "&").Replace("(", "");
                DataRow[] Drow;
                string tReturnString = "(Title ='" + str + "'" + " or IncludeList Like '" + str + "' Or IncludeList Like '%," + str + ",%'" + " Or IncludeList Like '%," + str + "'" + " Or IncludeList Like '" + str + ",%'" + ")";
                Drow = objDSUni.Tables[0].Select(tReturnString);
                if (Drow.Length > 0)
                    tResUniversity += Drow[0]["RID"].ToString();
                else
                    return "0";

                //string XpathString = FCommon.objfXMLUniversity.FirstChild.Name.ToString() + "//" + FCommon.objfXMLUniversity.FirstChild.LastChild.Name.ToString() + "[Title[.= '" + str + "'] or  contains(IncludeList, '," + str + "') or  contains(IncludeList ,  '," + str + "') or  contains(IncludeList ,  '" + str + ",') or  IncludeList[.= '" + str + "']]/RID";
                ////string XpathString = FCommon.objfXMLUniversity.FirstChild.Name.ToString() + "//" + FCommon.objfXMLUniversity.FirstChild.LastChild.Name.ToString() + "[Title[.= '" + Convert.ToString(str) + "'] or  contains(IncludeList, '," + str + ",') or  contains(IncludeList ,  '," + str + "') or  contains(IncludeList ,  '" + str + ",') or  IncludeList[.= '" + str + "']]/RID";
                //System.Xml.XmlNode _nodelist = FCommon.objfXMLUniversity.SelectSingleNode(XpathString);
                //if (_nodelist != null)
                //{
                //    if (_nodelist.InnerText.Trim() != "")
                //        tResUniversity += _nodelist.InnerText.Trim();
                //}
                if (tResUniversity != "")
                    return tResUniversity;
                else
                    return "0";
            }
            catch
            {
                return "0";
            }
        }

        public void getEducationSpecialization(int pos, string tDotMatchStr)
        {
            MatchCollection GrdMtch = null;
            bEduSpeCheckMajor = false;
            bEduSpeCheckMinor = false;
            Regex rgxNotSpe = new Regex(@"sslc|ssc|hige School|secondary|s.s.l.c|10th|ssc (10th)|x std|x standard|secondary Education|xii standard|courses taught", RegexOptions.IgnoreCase);
            Regex rgxNotSpe1 = new Regex(@"course work|independent work|Coursework|Learning |Trained in", RegexOptions.IgnoreCase);
            Regex regexMajor = new Regex("Major|Minor|minor|major|Double major");
            Regex rgxUniversity = new Regex(@"UNIVERSITY|università|universiteit|university|university", RegexOptions.IgnoreCase);

            string _sbMtchMonth = "";
            _sbMtchMonth = @"(Jan |January|February|March|April|May |June|July|August|September|October|November|December|Dec |jan |feb |mar |apr |may |jun|jul|aug |sep|oct |nov |dec |febs|aprl|Sept|Octb|Jan |Feb |Mar |Apr|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl|Qualification)[s]?";
            Regex rgxMonthFmt = new Regex(_sbMtchMonth, RegexOptions.IgnoreCase);
            Boolean bLoopMajorFlg = false;
            string tstrEdu = "";
            try
            {
                if ((pos + 1) <= (EducationStr.Count - 1))
                {
                    try
                    {
                        bLoopMajorFlg = false; // Bachelor of Science in Computer Science
                        if ((pos + 1 <= EducationStr.Count && EducationStr[pos + 1].ToString().ToLower().Contains("major") == true && EducationStr[pos + 1].ToString().ToLower().Contains("minor") == true && EducationStr[pos].ToString().ToLower().Contains("major") == false && EducationStr[pos].ToString().ToLower().Contains("minor") == false && (EducationStr[pos + 1].ToString().ToLower().Contains("gpa") == true || EducationStr[pos + 1].ToString().ToLower().Contains("%") == true)))
                            bLoopMajorFlg = true;
                        if (regxSpe.IsMatch(" " + EducationStr[pos].ToString().Replace("&amp;", "&")))
                        {
                            bEduSpeCheckMajor = false;
                            bEduSpeCheckMinor = false;
                            if (bLoopMajorFlg == false)
                            {
                                tstrEdu = regEducationText.Match(" " + EducationStr[pos].ToString().Replace("&amp;", "&")).ToString();
                                if (tstrEdu.Trim() != "")
                                {
                                    GrdMtch = regxSpe.Matches(EducationStr[pos].ToString().Replace("&amp;", "&").Replace(tstrEdu.Trim(), ""));
                                    if (GrdMtch.Count == 0)
                                        GrdMtch = regxSpe.Matches(EducationStr[pos].ToString().Replace("&amp;", "&"));
                                }
                                else
                                    GrdMtch = regxSpe.Matches(EducationStr[pos].ToString().Replace("&amp;", "&"));

                                if (GrdMtch.Count > 0)
                                    opAssignSpeMajor(GrdMtch, pos);
                            }
                            if ((bEduSpeCheckMajor == false || bEduSpeCheckMinor == false) && pos + 1 <= EducationStr.Count && rgxNotSpe1.IsMatch(EducationStr[pos + 1].ToString()) == false && (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&")) == false || regEducationText.Match(" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&")).ToString().Trim() != tDotMatchStr.Trim())) //tDotMatchStr
                            {

                                GrdMtch = regxSpe.Matches(" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&"));
                                if (GrdMtch.Count > 0)
                                    if (GrdMtch.Count > 0 && regEducationText != null)
                                        if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                                            opAssignSpeMajor(GrdMtch, pos + 1);
                            }
                            if ((bEduSpeCheckMajor == true && bEduSpeCheckMinor == false) && pos + 2 <= EducationStr.Count && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && EducationStr[pos - 1].ToString().Contains("UNIVERSITY") == false && rgxNotSpe1.IsMatch(EducationStr[pos + 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&")) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false)//UNIVERSITY
                            {

                                GrdMtch = regxSpe.Matches(" " + EducationStr[pos + 2].ToString().Replace("&amp;", "&"));
                                if (GrdMtch.Count > 0)
                                    if (GrdMtch.Count > 0 && regEducationText != null)
                                        if (regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false)
                                            opAssignSpeMajor(GrdMtch, pos + 2);
                            }
                            if ((bEduSpeCheckMajor == false || bEduSpeCheckMinor == false) && pos + 3 < EducationStr.Count && regxSpe.IsMatch(" " + EducationStr[pos + 3].ToString().Replace("&amp;", "&")) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false) && rgxNotSpe1.IsMatch(EducationStr[pos + 3].ToString()) == false)
                            {

                                GrdMtch = regxSpe.Matches(" " + EducationStr[pos + 3].ToString().Replace("&amp;", "&"));
                                if (GrdMtch.Count > 0)
                                    opAssignSpeMajor(GrdMtch, pos + 3);

                                return;
                            }
                            bEduSpeCheckMajor = false;
                            bEduSpeCheckMinor = false;

                            return;
                        }
                        if (regxSpe.IsMatch(" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&")) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false && rgxNotSpe1.IsMatch(EducationStr[pos + 1].ToString()) == false || regEducationText.Match(" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&")).ToString().Trim() == tDotMatchStr.Trim()) //B.Tech B.Tech
                        {
                            GrdMtch = regxSpe1.Matches(@" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&"));
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos + 1);

                            GrdMtch = regxSpe.Matches(@" " + EducationStr[pos + 1].ToString().Replace("&amp;", "&"));
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos + 1);

                            return;
                        }
                        if (((pos - 1) < EducationStr.Count) && (regxSpe.IsMatch(" " + EducationStr[pos - 1].ToString().Replace("&amp;", "&")) && rgxNotSpe.IsMatch(EducationStr[pos - 1].ToString().ToLower()) == false) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                        {
                            if ((rgxUniversity.IsMatch(EducationStr[pos].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true) || (pos > 2 && regEducationText.IsMatch(" " + EducationStr[pos - 2].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos - 1].ToString()) == true && rgxUniversity.IsMatch(EducationStr[pos + 1].ToString()) == true))
                                return; // Used Or Condition for array have 1.MBA  2. university, specialization 3.BCOm 4 . university, specialization it will fetch only pos + 1 Specialization 

                            GrdMtch = regxSpe.Matches(" " + EducationStr[pos - 1].ToString().Replace("&amp;", "&"));

                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos - 1);

                            return;

                        }

                        if (pos + 2 < EducationStr.Count && regxSpe.IsMatch(" " + EducationStr[pos + 2].ToString().Replace("&amp;", "&")) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && rgxNotSpe1.IsMatch(EducationStr[pos + 2].ToString()) == false)
                        {

                            GrdMtch = regxSpe.Matches(" " + EducationStr[pos + 2].ToString().Replace("&amp;", "&"));
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos + 2);


                            return;
                        }
                        else if (pos + 3 < EducationStr.Count && regxSpe.IsMatch(" " + EducationStr[pos + 3].ToString().Replace("&amp;", "&")) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false) && rgxNotSpe1.IsMatch(EducationStr[pos + 3].ToString()) == false)
                        {

                            GrdMtch = regxSpe.Matches(" " + EducationStr[pos + 3].ToString().Replace("&amp;", "&"));
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos + 3);

                            return;
                        }
                        else if (pos + 4 < EducationStr.Count && (rgxNotSpe.IsMatch(EducationStr[pos + 4].ToString().ToLower()) == false && regxSpe.IsMatch(" " + EducationStr[pos + 4].ToString().Replace("&amp;", "&"))) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && (regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 4].ToString()) == false) && rgxNotSpe1.IsMatch(EducationStr[pos + 4].ToString()) == false)
                        {

                            GrdMtch = regxSpe.Matches(" " + EducationStr[pos + 4].ToString().Replace("&amp;", "&"));
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos + 4);

                            return;
                        }
                        else if (regexMajor.IsMatch(EducationStr[pos].ToString()))
                        {

                            GrdMtch = regxSpe.Matches(" " + EducationStr[pos].ToString().Replace("&amp;", "&"));
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos);

                            return;
                        }
                    }
                    catch
                    {
                        bEduSpeCheckMajor = false;
                        bEduSpeCheckMinor = false;
                    }
                }
                else if ((pos - 1) <= (EducationStr.Count - 1))
                {
                    try
                    {
                        if (regxSpe.IsMatch(" " + EducationStr[pos].ToString().Replace("&amp;", "&")) && EducationStr[pos - 1].ToString().ToLower().Contains("major") == false && EducationStr[pos - 1].ToString().ToLower().Contains("minor") == false)
                        {
                            tstrEdu = regEducationText.Match(" " + EducationStr[pos].ToString().Replace("&amp;", "&")).ToString();
                            if (tstrEdu.Trim() != "")
                            {
                                GrdMtch = regxSpe.Matches(EducationStr[pos].ToString().Replace("&amp;", "&").Replace(tstrEdu.Trim(), ""));
                                if (GrdMtch.Count == 0)
                                    GrdMtch = regxSpe.Matches(EducationStr[pos].ToString().Replace("&amp;", "&"));
                            }
                            else
                                GrdMtch = regxSpe.Matches(" " + EducationStr[pos].ToString());
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos);
                            return;
                        }
                        else if (regexMajor.IsMatch(EducationStr[pos].ToString()) && EducationStr[pos - 1].ToString().ToLower().Contains("major") == false && EducationStr[pos - 1].ToString().ToLower().Contains("minor") == false)
                        {
                            //eduSpecialization += opReplaceEduSpecializationsminor(EducationStr[pos].ToString());
                            //eduSpecialization1 += opReplaceEduSpecializationsMajor(EducationStr[pos].ToString());
                            return;
                        }
                        if (regxSpe.IsMatch(" " + EducationStr[pos - 1].ToString().Replace("&amp;", "&")) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                        {

                            GrdMtch = regxSpe.Matches(" " + EducationStr[pos - 1].ToString().Replace("&amp;", "&"));

                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos - 1);

                            return;
                        }
                        else if (regexMajor.IsMatch(EducationStr[pos].ToString()))
                        {
                            //eduSpecialization1 += opReplaceEduSpecializationsMajor(EducationStr[pos].ToString());
                            return;
                        }

                        if (regxSpe.IsMatch(" " + EducationStr[pos - 2].ToString().Replace("&amp;", "&")) && (rgxNotSpe.IsMatch(EducationStr[pos].ToString().ToLower()) == false || regexMajor.IsMatch(EducationStr[pos].ToString().ToLower()) == true) && regEducationText.IsMatch(" " + EducationStr[pos - 2].ToString()) == false)
                        {

                            GrdMtch = regxSpe.Matches(" " + EducationStr[pos - 2].ToString().Replace("&amp;", "&"));
                            if (GrdMtch.Count > 0)
                                opAssignSpeMajor(GrdMtch, pos - 2);

                            return;
                        }

                    }
                    catch
                    {
                        bEduSpeCheckMajor = false;
                        bEduSpeCheckMinor = false;
                    }
                }
                else
                {
                    // return "";
                    bEduSpeCheckMajor = false;
                    bEduSpeCheckMinor = false;
                }
            }
            catch
            {
                // return "";
                bEduSpeCheckMajor = false;
                bEduSpeCheckMinor = false;
            }
            // return "";
        }
        private void opAssignSpeMajor(MatchCollection mtch, int Pos)
        {
            string tSpeMajor = "";
            string tSpeMinor = "";
            Regex regexMajor = new Regex("major|Double major");
            Regex regexMinor = new Regex("minor");

            Boolean bMajor = false;
            Boolean bMinor = false;

            if (regexMajor.IsMatch(EducationStr[Pos].ToString().ToLower()))
                bMajor = true;
            if (regexMinor.IsMatch(EducationStr[Pos].ToString().ToLower()))
                bMinor = true;
            string tMinorID = "0";
            Boolean tExactMatch = false;
            Match MatchStr = null;
            foreach (Match m in mtch)
            {
                tMinorID = "0";
                //if (tExactMatch == false)
                //{
                //    MatchStr = regxSpe1.Match(EducationStr[Pos].ToString());
                //    if (MatchStr.Success == true)
                //        tExactMatch = true;
                //}
                string str = "";
                if (tExactMatch == false)
                    str = m.Value.ToString().Trim().Replace(",", "").Replace(":", "").Replace("-", "").Replace("(", "").Replace(")", "");
                else
                    str = MatchStr.Value.ToString().Trim().Replace(",", "").Replace(":", "").Replace("-", "");

                DataRow[] Drow;
                string tReturnString = "(SpecializationTitle ='" + str + "'" + " or IncludeList Like '" + str + "' Or IncludeList Like '%," + str + ",%'" + " Or IncludeList Like '%," + str + "'" + " Or IncludeList Like '" + str + ",%'" + ")";
                Drow = objDSSpe.Tables[0].Select(tReturnString);

                int i = 0;
                if (Drow.Length > 0)
                {
                    for (i = 0; i <= Drow.Length - 1; i++)
                        if (Drow[i]["SpecializationTitle"].ToString() != "")
                        {
                            if (bMajor == false && bMinor == false)
                            {
                                if ((tSpeMinor == "" && (tSpeMajor != "" || bEduSpeCheckMajor == true)) && bEduSpeCheckMinor == false)
                                    tSpeMinor = Drow[i]["SpecializationTitle"].ToString();
                                if (tSpeMajor == "" && bEduSpeCheckMajor == false)
                                    tSpeMajor = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                            }
                            if (bMajor == true && bMinor == false && (tSpeMajor == "" || EducationStr[Pos].ToString().ToLower().IndexOf("major") < EducationStr[Pos].ToString().IndexOf(str)))
                                if (bEduSpeCheckMajor == false)
                                    tSpeMajor = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                            if ((bMajor == false && bMinor == true) && bEduSpeCheckMinor == false)
                            {
                                if (EducationStr[Pos].ToString().ToLower().IndexOf("minor") < EducationStr[Pos].ToString().IndexOf(str))
                                {
                                    tMinorID = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                    if (tMinorID != "" && tMinorID != "0" && (tSpeMinor == "" || EducationStr[Pos].ToString().ToLower().IndexOf("minor") < EducationStr[Pos].ToString().IndexOf(str)))
                                        tSpeMinor = FCommon.opGetTitlefromXml(ref FCommon.objfXMLSpecialization, tMinorID, "SpecializationTitle");
                                }
                                else if (tSpeMajor == "")
                                {
                                    tSpeMajor = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                }
                                else if (tSpeMinor == "")
                                {
                                    tMinorID = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                    if (tMinorID != "" && tMinorID != "0" && (tSpeMinor == "" || EducationStr[Pos].ToString().ToLower().IndexOf("minor") < EducationStr[Pos].ToString().IndexOf(str)))
                                        tSpeMinor = FCommon.opGetTitlefromXml(ref FCommon.objfXMLSpecialization, tMinorID, "SpecializationTitle");
                                }
                            }
                            if (bMajor == true && bMinor == true && bEduSpeCheckMajor == false && bEduSpeCheckMinor == false)
                            {
                                if (EducationStr[Pos].ToString().ToLower().IndexOf("major") < EducationStr[Pos].ToString().ToLower().IndexOf("minor"))
                                {
                                    //Major
                                    if (EducationStr[Pos].ToString().ToLower().IndexOf("major") < EducationStr[Pos].ToString().IndexOf(str) && EducationStr[Pos].ToString().ToLower().IndexOf("minor") > EducationStr[Pos].ToString().IndexOf(str))
                                    {
                                        if (tSpeMajor == "")
                                            tSpeMajor = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                    }  //After Keyword -- Minor will Come
                                    else if (EducationStr[Pos].ToString().ToLower().IndexOf("major") > EducationStr[Pos].ToString().IndexOf(str) && EducationStr[Pos].ToString().ToLower().IndexOf("minor") > EducationStr[Pos].ToString().ToLower().IndexOf("major") && EducationStr[Pos].ToString().ToLower().IndexOf("minor") > EducationStr[Pos].ToString().IndexOf(str))
                                    {
                                        if (tSpeMajor == "")
                                            tSpeMajor = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                    }

                                    //Minor
                                    if (EducationStr[Pos].ToString().ToLower().IndexOf("minor") < EducationStr[Pos].ToString().IndexOf(str) && EducationStr[Pos].ToString().ToLower().IndexOf("major") < EducationStr[Pos].ToString().IndexOf(str))
                                    {
                                        tMinorID = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                        if (tMinorID != "" && tMinorID != "0" && tSpeMinor == "")
                                            tSpeMinor = FCommon.opGetTitlefromXml(ref FCommon.objfXMLSpecialization, tMinorID, "SpecializationTitle");
                                    }//Bachelor of Arts, Mathematics major, Philosophy minor, Brandeis University
                                    else if (EducationStr[Pos].ToString().ToLower().IndexOf("major") < EducationStr[Pos].ToString().IndexOf(str) && EducationStr[Pos].ToString().ToLower().IndexOf("minor") > EducationStr[Pos].ToString().ToLower().IndexOf("major") && EducationStr[Pos].ToString().ToLower().IndexOf("minor") > EducationStr[Pos].ToString().IndexOf(str) && tSpeMajor != "")
                                    {
                                        tMinorID = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                        if (tMinorID != "" && tMinorID != "0" && tSpeMinor == "")
                                            tSpeMinor = FCommon.opGetTitlefromXml(ref FCommon.objfXMLSpecialization, tMinorID, "SpecializationTitle");
                                    }
                                }
                                else
                                {
                                    //Major
                                    if (EducationStr[Pos].ToString().ToLower().IndexOf("minor") < EducationStr[Pos].ToString().IndexOf(str) && EducationStr[Pos].ToString().ToLower().IndexOf("major") > EducationStr[Pos].ToString().IndexOf(str))
                                        if (tSpeMajor == "")
                                            tSpeMajor = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");

                                    //Minor
                                    if (EducationStr[Pos].ToString().ToLower().IndexOf("major") < EducationStr[Pos].ToString().IndexOf(str) && EducationStr[Pos].ToString().ToLower().IndexOf("minor") < EducationStr[Pos].ToString().IndexOf(str))
                                    {
                                        tMinorID = FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, Drow[i]["SpecializationTitle"].ToString(), "SpecializationTitle");
                                        if (tMinorID != "" && tMinorID != "0" && tSpeMajor == "")
                                            tSpeMinor = FCommon.opGetTitlefromXml(ref FCommon.objfXMLSpecialization, tMinorID, "SpecializationTitle");
                                    }
                                }
                            }
                        }
                }
                tExactMatch = false;
            }
            if (tSpeMajor != "")
            {
                eduSpecialization += tSpeMajor;  //Specialization2 Column in Grid
                bEduSpeCheckMajor = true;
            }
            if (tSpeMinor != "")
            {
                eduSpecialization1 += tSpeMinor; //Specialization Column in Grid
                bEduSpeCheckMinor = true;
                //try
                //{
                //    eduSpecialization2 += FCommon.opGetUIDfromXml(ref FCommon.objfXMLSpecialization, tSpeMinor, "SpecializationTitle");
                //}
                //catch { }
            }
        }

        /// <summary>
        /// Fetching Candidate Education Completed YEar
        /// step 1. Which order to Search Education-Position to upwards or downwards based on the Education Format
        /// step 2. matching the string
        /// step 3. Match found then replace the character like -,~ etc.,
        /// </summary>
        /// <param name="pos">Position of Education Matched</param>
        /// <returns>Returing the Education Completed year if found else return ',' not do anyting return 1 </returns>

        public int getEducationCompletedYear(int pos, string strRmLastDot)
        {
            int tposMatch = pos;
            string FlgYrs = "0";
            Regex ex = new Regex(@"(" + tPatternEducationYear + ")", RegexOptions.IgnoreCase);
            Regex re1 = new Regex("[0-9]{1,2}");
            Regex rgxNotInstitute = new Regex(@"SCHOLASTICS|ACADAMIC PROJECT|:|Partially completed|IT related|Engineer Support|Project Maanger|Business Analyst|india’s top|summer internship | learning|Insurance", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            Regex rgxCgpa = new Regex(@"(cgpa|gpa|c.g.p.a|g.p.a)", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            Regex rgxInstitute = new Regex(@"college|COLLAGE|COLLEGE|VIDYALAYA|SCHOOL|School|Polytech|Institution|Institute|Institute of Technology|vidya mandir", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            Regex rgxUniversity = new Regex(@"UNIVERSITY|università|universiteit|university|university", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

            string Gpa = "|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)(\\d)|(G)(P)(A)(:)(\\d)(\\.)(\\d)(\\d)|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)|(C)(\\.)(G)(\\.)(P)(\\.)(\\s+)(\\d+)(\\.)(\\d+)|(G)(P)(A)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)|(G)(P)(A)(\\s+)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)|(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)|(C)(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)|(C)(G)(P)(A)(\\s+)(\\=)(\\s+)(\\d+)(\\.)(\\d+)|(C)(G)(P)(A)(\\s+)(:)(\\s+)(\\d+)(\\.)(\\d+)|(C)(G)(P)(A)(:)(\\d+)(\\.)(\\d+)|(G)(P)(A)(:)(\\d+)(\\.)(\\d+)|(G)(P)(A)(\\s+)(:)(\\s+)(\\d+)(\\.)(\\d+)|(\\d{1})(\\.)(\\d{1})(\\s+)(C)(G)(P)(A)";
            string Gpa1 = "|(G)(P)(A)(\\:)(\\s+)(\\d{1})(\\.)(\\d{2})(\\/)(\\d{1})(\\.)(\\d{2})"////GPA: 3.73/4.00
            + "|(G)(P)(A)(\\s+)(\\=)(\\d{1})(\\.)(\\d{2})(\\s+)(\\/)(\\s+)(\\d{1})(\\.)(\\d{2})"  //GPA =3.87 / 4.00
            + "|(G)(P)(A)(:)(\\d)(\\.)(\\d)(\\d)(\\/)(\\d+)"
            + "|(G)(P)(A)(:)(\\s+)(\\d{1})(\\.)(\\d{1})(\\/)(\\d{1})(\\.)(\\d{1})" //GPA: 3.7/4.0
             + "|(G)(P)(A)(:)(\\s+)(\\d{1})(\\.)(\\d{3})(\\/)(\\d{1})(\\.)(\\d{1})" //GPA: 3.7/4.0
            + "|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)(\\/)(\\d+)"
            + "|(C)(\\.)(G)(\\.)(P)(\\.)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\s+)(\\w+)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(C)(G)(P)(A)(\\w+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(C)(G)(P)(A)(\\s+)(\\=)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(C)(G)(P)(A)(\\s+)(:)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(C)(G)(P)(A)(:)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(:)(\\d+)(\\.)(\\d+)(\\/)(\\d+)"
            + "|(G)(P)(A)(:)(\\d)(\\.)(\\d)(\\/)(\\d)(\\.)(\\d)"
            + "|(G)(P)(A)(\\s+)(:)(\\s+)(\\d+)(\\.)(\\d+)(\\/)(\\d+)|(G)(P)(A)(\\:)(\\s+)(\\d{1})(\\.)(\\d{2})(\\/)(\\d{1})(\\.)(\\d{1})|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d+)" //GPA: 3.52  //GPA : 3.52/10  || GPA: 4.61/5.0
            + "|(\\d)(\\.)(\\d)(\\/)(\\d+)(\\.)(\\d)"
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)(\\/)(\\d)(\\.)(\\d+)" //GPA 3.48/4.00    
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)(\\s+)(\\/)(\\s+)(\\d+)(\\.)(\\d)"
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)"
            + "|(\\d)(\\.)(\\d)(\\d)(\\/)(\\d)(\\d)(\\.)(\\d)" //8.56/85.6  
            + "|(C)(G)(P)(A)(\\s+)(\\()(\\d)(\\.)(\\d)(\\/)(\\d+)(\\))"
            + "|(G)(P)(A)(\\s+)(\\d)(\\.)(\\d+)(\\s+)(\\/)(\\s+)(\\d+)"
            + "|(\\d{1})(\\.)(\\d{1})(\\s+)(G)(P)(A)"
            + "|(\\d{1})(\\.)(\\d{1})(\\s+)(C)(G)(P)(A)"  //8.5 CGPA
            + "|(G)(P)(A)(:)(\\s+)(\\d)(\\.)(\\d)(\\d)(\\/)(\\d+)"
            + "|(G)(P)(A)(\\s+)(\\–)(\\s+)(\\d{1})(\\.)(\\d{2})(\\/)(\\d{1})(\\.)(\\d{1})|(G)(P)(A)(\\s+)(\\-)(\\d{1})(\\.)(\\d{2})(\\/)(\\d{1})(\\.)(\\d{1})" //GPA – 3.40/4.0 || GPA -3.75/4.0
            + "|(G)(P)(A)(\\s+)(\\–)(\\s+)(\\d)(\\.)(\\d)(\\s+)(\\/)(\\s+)(\\d)(\\.)(\\d)|(\\d{1})(\\.)(\\d{3})(\\/)(\\d{2})|(\\d{2})(\\.)(\\d{2})(\\/)(\\d{2})|(\\d{1})(\\.)(\\d{2})(\\/)(\\d{2})|(\\d{2})(\\.)(\\d{3})|(\\d{2})(\\.)(\\d{2})|(\\d{1})(\\.)(\\d{2})"; // GPA - 3.4 / 4.0 || 6.75/10  || 9.1 CGPA (\\d{1})(\\.)(\\d{1})(\\s+)(C)(G)(P)(A)
            //GPA -3.75/4.0 
            Regex rgxgrd = new Regex("(\\d)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(%)|(\\d)(\\d)(\\.)(\\d)(\\s+)(%)|(\\d)(\\d)(\\s+)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(\\s+)(%)|(\\d)(\\d)(\\.)(\\d)(\\d)(\\d)(\\s+)(%)" + Gpa1 + Gpa + "", RegexOptions.IgnoreCase);

            Regex rgxgrd1 = new Regex("(\\d{1})(\\.)(\\d{2})|(\\d{2})(\\.)(\\d{2})|(\\d{2})(\\.)(\\d{1})|(\\d{1})(\\.)(\\d{2})(\\/)(\\d{2})|" + @"\b(\s|^)(\d{2})(\s|$)\b", RegexOptions.IgnoreCase); //8.03
            Regex rgxgrd5 = new Regex(@"\b(\s|^)(\d{2})(\s|$)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            //Education History
            Regex rgxEduBRK1 = new Regex(@"\b(Education History)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

            try
            {
                //will get from the Education Format
                int[] testValue = aCheckEducationYear;
                int startPos = testValue[0];
                int PosYear = testValue[1];
                if ((PosYear - startPos) < 0)
                {
                    pos = pos + PosYear - startPos;
                    if (pos.ToString().StartsWith("-"))
                    {
                        startPos = 0; PosYear = 0;
                        if (tposMatch == 0)
                            pos = 0;
                    }
                    else
                    {
                        bEducationYearNormal = false;
                        bEducationYearStarting = true;
                    }
                }
                if ((startPos == 0 & PosYear == 0) && educationYearCount == 0)
                    checkYearFirst(pos);
                educationYearCount++;

                Regex regNotEXPs = null;
                string tNotExp = "Born|Date Of Birth|Date of Birth|Date of Birth:|BIRTHDAY:|Born:|Born on|Birth Date|Birth :|d. o. b|d-o-b|d o b|d  o  b|date and place of birth:|date and place of birth|date and country of birth|dateofbirth|data of birth|date of  birth|birthdate|date of birth/age:|date of birth/age|date of birthage|b\\'date|b’date|date  of  birth|date of birth|date ofbirth|dob|date & place of birth|d.o.b|date of birth|date-of-birth|date   of   birth|date of  birth|date of birth:|date  of   birth  :|DOB-|DATE OF BIRTH:|SQL Server 2000|OutLook|Microsoft Office|Server 2000|SQL 2000|SQL Server 2005|SQL Server 2008|Operating Systems|operator computers|Project Worked|sql server 2005|sql server  2005|sql 2005|sql server 2000|windows 2003|windows 2008|sharepoint 2010|share point 2010|ssas 2008|ssrs 2008|powerview 2012|ssrs 2005|ssis 2008|ssis 2005|sql server 2012|windows servers 2000|windows servers 2003|windows servers, 2003/2008|mscse 2003|mcitp 2008 server|ms-windows 2000|exchange server2000|sql version 2000|customer name|SQL Server 7.0/2000 / 2005";
                regNotEXPs = new Regex(@"\b" + tNotExp + @"\b", RegexOptions.IgnoreCase);

                #region "normal education searching"
                for (int i = pos; i < EducationStr.Count && bEducationYearNormal == true; i++)
                {
                    if (EducationStr[i] == null) continue;

                    Regex regYrs3 = new Regex("(\\d+)(\\/)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])(-)(\\d+)(\\/)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])", RegexOptions.Singleline);  //05/1999-04/2000
                    Boolean yearformat = false;
                    MatchCollection matches = null;
                    try
                    {
                        if (pos < i && regEducationText != null && bPrecentageInLast == false || (bPrecentageInLast == true && bYearInLast == false))  //Board of Intermediate Education  //EducationStr[i].ToString() != "Intermediate Board of Education"
                            if (regEducationText.Match(" " + EducationStr[i].ToString()).ToString().Trim() != strRmLastDot && EducationStr[i].ToString().ToLower().Contains("board of intermediate education") == false && EducationStr[i].ToString().ToLower().Contains("intermediate board of education") == false)
                                if (regEducationText.IsMatch(" " + EducationStr[i].ToString()) == true && regEducationText.Match(" " + EducationStr[i].ToString()).ToString().Replace(".", "").Trim().Length >= 3) break;
                    }
                    catch { }

                    matches = regYrs3.Matches(EducationStr[i].ToString());
                    if (matches.Count > 0)
                        yearformat = true;
                    if (matches.Count == 0)
                        matches = ex.Matches(EducationStr[i].ToString());
                    Regex regYrs1 = new Regex("(\\d+){1,2}(\\s+)(years)|(\\d+){1,2}(\\s+)(year)", RegexOptions.IgnoreCase | RegexOptions.Singleline);

                    if (matches.Count == 0)
                        matches = regYrs3.Matches(EducationStr[i].ToString());
                    if (matches.Count == 0)
                        matches = regYrs1.Matches(EducationStr[i].ToString());
                    Regex regYrs2 = new Regex("(\\()(\\d{4})(\\))", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    if (matches.Count == 0 && (i > 0 && i == pos && i < 2))
                        matches = regYrs2.Matches(EducationStr[i - 1].ToString());

                    if (matches.Count == 0) continue;

                    try
                    {
                        if (matches.Count > 0 && pos + 1 <= i && regEducationText != null)
                            if (regEducationText.IsMatch(" " + EducationStr[i].ToString()) == true)
                                if (regEducationText.Match(" " + EducationStr[i].ToString()).ToString().Length > 4) continue;
                        if (regNotEXPs.IsMatch(EducationStr[i].ToString()) == true) continue;
                    }
                    catch { }

                    if (regNotEXPs.IsMatch(EducationStr[i].ToString()) == true) continue;
                    foreach (Match m in matches)
                    {
                        string strTwo = "";
                        string MinYEar = "0";
                        string str = m.Value.ToLower().Trim().Replace("to", "-").Replace("~", "-").Replace("`", "-").Replace("'", "-").Replace("’", "-").Replace(",", "").Replace("‘", "-").Replace("/", "-").Replace("‘", "");
                        string[] strSplit = null;
                        if (str.IndexOf("-") > 0 || str.IndexOf("–") > 0)
                        {
                            strSplit = str.Split('-', '–');
                            if (strSplit.Length > 1)
                                str = strSplit[strSplit.Length - 1];
                            if (strSplit.Length > 0)
                            {


                                if (yearformat == true)
                                {
                                    strTwo = strSplit[1];
                                    MinYEar = strSplit[1];
                                }
                                else
                                {
                                    //08/2007 – 06/2008
                                    if (strSplit.Length == 4 && strSplit[0].Trim().Length == 2 && strSplit[1].Trim().Length == 4 && strSplit[2].Trim().Length == 2 && strSplit[3].Trim().Length == 4)
                                    {
                                        strTwo = strSplit[1];
                                        MinYEar = strSplit[1];
                                    }
                                    else
                                    {

                                        string _sbMtchMonth = @"(jan |january|february|march|april|may |june|july|august|september|october|november|Ddecember|august|dec |jan |feb |mar |apr |may |jun |jul |aug |sep |oct |nov |dec |aprl|sept |octb|jan |feb |mar |apr |jun |jul |aug |sep |oct |nov |dec |febs|aprl)[s]?";
                                        strSplit[0] = Regex.Replace(strSplit[0].ToString().ToLower(), _sbMtchMonth, "");
                                        strTwo = strSplit[0];
                                        strTwo = Regex.Replace(strTwo, _sbMtchMonth, "");
                                        if (strSplit[0].Replace(" ", "").Length == 4)
                                            MinYEar = strSplit[0];
                                        else
                                            MinYEar = "0";
                                    }
                                }

                            }
                            if (strTwo.Trim().Length != 0 && strTwo.Trim().Length > 2)
                                strTwo = strTwo.Substring(0, 2);
                        }
                        else if (str.ToString().ToLower().Trim().IndexOf("year") > 0 || str.ToString().ToLower().Trim().IndexOf("years") > 0)
                        {
                            Regex re = new Regex("[0-9]{1,2}");
                            Match match = re.Match(str.Trim());
                            str = m.Value.ToLower().Trim().Replace("to", "-").Replace("~", "-").Replace("`", "-").Replace("'", "-").Replace("’", "-").Replace(",", "").Replace("‘", "-").Replace("/", "-").Replace("‘", "").Replace("years", "").Replace("year", "");
                            if (match.Success == true && Convert.ToInt64(str.ToString()) <= 10)
                            {
                                eduDuration += str.Trim() + ",";
                                eduStartYear += ",";
                                eduUniverSity += getEducationUniversity(pos, i) + ",";
                                eduCompleteYear += ",";

                                getEducationSpecialization(pos, strRmLastDot);
                                eduSpecialization += ",";
                                eduSpecialization1 += ",";
                                //Saravana Instead of i changed to pos for checking Grade
                                Match GrdMtch = null;
                                string GradCrnt = "";

                                try
                                {
                                    if (bPrecentageInLast == true)
                                    {
                                        for (int kGrd = pos; kGrd < EducationStr.Count; kGrd++)
                                        {
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                                            {
                                                if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                                                {
                                                    GrdMtch = rgxgrd.Match(EducationStr[kGrd].ToString());
                                                    GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                                    if (GrdMtch.Success == true)
                                                    {
                                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        GrdMtch = rgxgrd1.Match(EducationStr[kGrd].ToString());
                                                        GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                                    }
                                                    if (GrdMtch.Success == true)
                                                    {
                                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                        break;
                                                    }
                                                }
                                            }
                                            else if (pos < kGrd && regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == true && regEducationText.Match(" " + EducationStr[kGrd].ToString()).ToString().Trim() != strRmLastDot.Trim()) //strRmLastDot
                                                break;
                                        }
                                    }
                                }
                                catch
                                { }
                                if (bPrecentageInLast == false || GrdMtch.Success == false)
                                {
                                    try
                                    {
                                        // Added New Logic for Education Grade --- Saravana
                                        try
                                        {
                                            Boolean bGradeFlgPos = false;
                                            if ((i + 1) <= (EducationStr.Count - 1))
                                                for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                                {
                                                    if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                                    GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                                    if (GrdMtch == null && GrdMtch.Success == false)
                                                        GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                                    if (GrdMtch != null && GrdMtch.Success == true)
                                                    {
                                                        bGradeFlgPos = true;
                                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                        break;
                                                    }
                                                }
                                            if ((i - 1) <= (EducationStr.Count - 1))
                                                if (GrdMtch == null || GrdMtch.Success == false)
                                                    for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                                    {
                                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                                        GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                                        if (GrdMtch == null && GrdMtch.Success == false)
                                                            GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                                        if (GrdMtch != null && GrdMtch.Success == true)
                                                        {
                                                            bGradeFlgPos = true;
                                                            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                            break;
                                                        }
                                                    }

                                            if (bGradeFlgPos == false)
                                                eduGrade += ",";
                                        }
                                        catch
                                        {
                                            eduGrade += ",";
                                        }

                                        #region "Code Commended for New Lgic"

                                        //if ((i + 1) <= (EducationStr.Count - 1))
                                        //{
                                        //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                                        //    if (GrdMtch.Success == false)
                                        //    {
                                        //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                                        //        GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                                        //    }
                                        //    else
                                        //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");
                                        //    if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false || regEducationText.Match(" " + EducationStr[pos + 1].ToString()).ToString().Trim() == strRmLastDot.Trim())
                                        //    {
                                        //        Grade1 = EducationStr[pos + 1].ToString().Trim().Replace("Marks obtained:", "");
                                        //        GrdMtch2 = rgxgrd.Match(EducationStr[pos + 1].ToString());
                                        //    }
                                        //    else
                                        //        GrdMtch2 = rgxgrd.Match("");
                                        //    if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                                        //    {
                                        //        Grade2 = EducationStr[pos - 1].ToString().Trim().Replace("Marks obtained:", "");
                                        //        GrdMtch3 = rgxgrd.Match(EducationStr[pos - 1].ToString());
                                        //    }
                                        //    else
                                        //        GrdMtch3 = rgxgrd.Match("");

                                        //    match1 = re1.Match(Grade1);
                                        //    if (GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true || GrdMtch.Success == true)
                                        //    {
                                        //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                        //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                        //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                                        //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                                        //        else
                                        //            eduGrade += ",";
                                        //    }
                                        //    else
                                        //    {
                                        //        if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade1.ToLower()) == true || Grade1.IndexOf("%") > 0 || (match1.Success == true && (Grade1.ToString().Length <= 3 || (Grade1.ToString().Length <= 5 && Grade1.IndexOf(".") > 0)) && isNumberExists2(Grade1.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false) && Grade1.IndexOf("D.G.P.A") < 0)
                                        //        {
                                        //            if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade1.ToLower()) == true)
                                        //                eduGrade += opReplaceGrade(GrdMtch2.Value.ToString()) + ",";
                                        //            else if (Grade1.ToString().Length >= 6 && Grade1.Contains("%") == true)
                                        //                eduGrade += Grade1.Substring(Grade1.IndexOf("%") - 5) + ",";
                                        //            else
                                        //                eduGrade += ",";
                                        //        }
                                        //        else if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true || Grade2.IndexOf("%") > 0 && Grade2.IndexOf("D.G.P.A") < 0)
                                        //        {
                                        //            if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                                        //                eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                                        //            else if (Grade2.ToString().Length >= 6 && Grade2.Contains("%") == true)
                                        //                eduGrade += Grade2.Substring(Grade2.IndexOf("%") - 5) + ",";
                                        //            else
                                        //                eduGrade += ",";
                                        //        }
                                        //        else
                                        //            eduGrade += ",";
                                        //    }
                                        //}
                                        //else if ((i - 1) <= (EducationStr.Count - 1))
                                        //{
                                        //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                                        //    if (GrdMtch.Success == false)
                                        //    {
                                        //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                                        //        GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                                        //    }
                                        //    else
                                        //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");

                                        //    if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                                        //    {
                                        //        GrdMtch3 = rgxgrd.Match(EducationStr[pos - 1].ToString());
                                        //        Grade2 = EducationStr[pos - 1].ToString().Trim().Replace("Marks obtained:", "");
                                        //    }
                                        //    else
                                        //        GrdMtch3 = rgxgrd.Match("");
                                        //    match1 = re1.Match(Grade1);
                                        //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                        //    {
                                        //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                        //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";

                                        //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                                        //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                                        //        else
                                        //            eduGrade += ",";
                                        //    }
                                        //    else if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true || Grade2.IndexOf("%") > 0 && Grade2.IndexOf("D.G.P.A") < 0)
                                        //    {
                                        //        if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                                        //            eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                                        //        else if (Grade2.ToString().Length >= 6 && Grade2.Contains("%") == true)
                                        //            eduGrade += Grade2.Substring(Grade2.IndexOf("%") - 5) + ",";
                                        //        else
                                        //            eduGrade += ",";
                                        //    }
                                        //    else
                                        //    {
                                        //        eduGrade += ",";
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    eduGrade += ",";
                                        //}
                                        #endregion

                                    }
                                    catch
                                    {
                                        eduGrade += ",";
                                    }
                                }

                                string Institute1 = "";
                                bool bInsFlag = false;
                                //Added  Education Institution Logic
                                try
                                {
                                    if ((i + 1) <= (EducationStr.Count - 1) || pos < i)
                                    {
                                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                        {
                                            Institute1 = "";
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos && EducationStr[kGrd1].ToString().IndexOf(strRmLastDot) < 0)
                                            {
                                                bInsFlag = true;
                                                eduInstitute += ",";
                                                break;
                                            }
                                            if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                            Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                            if (Institute1 != "")
                                                if (rgxInstitute.IsMatch(Institute1))
                                                {
                                                    bInsFlag = true;
                                                    eduInstitute += Institute1 + ",";
                                                    break;
                                                }
                                        }
                                    }
                                    else if ((i - 1) <= (EducationStr.Count - 1))
                                    {
                                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                        {
                                            Institute1 = "";
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos)
                                            {
                                                bInsFlag = true;
                                                eduInstitute += ",";
                                                break;
                                            }
                                            if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                            Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                            if (Institute1 != "") //rgxInstitute.IsMatch(Institute1)
                                                if (rgxInstitute.IsMatch(Institute1))
                                                {
                                                    bInsFlag = true;
                                                    eduInstitute += Institute1 + ",";
                                                    break;
                                                }
                                        }
                                    }
                                }
                                catch
                                {
                                    bInsFlag = true;
                                    eduInstitute += ",";
                                }

                                if (bInsFlag == false)
                                    eduInstitute += ",";

                                #region "Code Commended"

                                //if ((i + 1) <= (EducationStr.Count - 1))
                                //{
                                //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == true)
                                //        Institute1 = "";
                                //    else
                                //        Institute1 = opReplaceInstitutions(EducationStr[i + 1].ToString());

                                //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == true)
                                //        Institute2 = "";
                                //    else
                                //        Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());

                                //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());

                                //    mtchInstitute1 = re1.Match(Institute1);
                                //    mtchInstitute2 = re1.Match(Institute2);
                                //    mtchInstitute3 = re1.Match(Institute3);

                                //    MtchInst = rgxNotInstitute.Match(Institute1);
                                //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //    MtchInst2 = rgxNotInstitute.Match(Institute3);

                                //    if (rgxInstitute.IsMatch(Institute1))
                                //        FlagInstitute = "1";
                                //    if (rgxInstitute.IsMatch(Institute2))
                                //        FlagInstitute2 = "2";
                                //    if (rgxInstitute.IsMatch(Institute3))
                                //        FlagInstitute3 = "3";

                                //    if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                                //    {
                                //        if ((pos + 1) <= EducationStr.Count)
                                //        {
                                //            if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                                //                Institute1 = opReplaceInstitutions(EducationStr[pos + 1].ToString());
                                //            if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                                //                Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                                //        }
                                //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                                //        MtchInst = rgxNotInstitute.Match(Institute1);
                                //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //        MtchInst2 = rgxNotInstitute.Match(Institute3);

                                //        if (rgxInstitute.IsMatch(Institute1))
                                //            FlagInstitute = "1";
                                //        if (rgxInstitute.IsMatch(Institute2))
                                //            FlagInstitute2 = "2";
                                //        if (rgxInstitute.IsMatch(Institute3))
                                //            FlagInstitute3 = "3";

                                //        mtchInstitute1 = re1.Match(Institute1);
                                //        mtchInstitute2 = re1.Match(Institute2);
                                //        mtchInstitute3 = re1.Match(Institute3);

                                //    }

                                //    if ((Institute1.IndexOf("%") < 0 && (mtchInstitute1.Success == false && (Institute1.ToString().Length <= 120) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false) && MtchInst.Success == false) && Institute1.Length > 3 && FlagInstitute2 != "2" || FlagInstitute == "1")
                                //    {
                                //        try
                                //        {
                                //            Institute1 = opReplaceInstituteOne(Institute1);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute1 + ",";
                                //    }
                                //    else if ((Institute2.IndexOf("%") < 0 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 120) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false) && MtchInst1.Success == false) || FlagInstitute2 == "2" && FlagInstitute3 != "3")
                                //    {
                                //        try
                                //        {
                                //            Institute2 = opReplaceInstituteOne(Institute2);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute2 + ",";
                                //    }
                                //    else if ((Institute3.IndexOf("%") < 0 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 120) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false) && MtchInst2.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                                //    {
                                //        try
                                //        {
                                //            Institute3 = opReplaceInstituteOne(Institute3);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute3 + ",";
                                //    }
                                //    else
                                //        eduInstitute += ",";
                                //    //else
                                //    //    eduInstitute += ",";
                                //}
                                //else if ((i - 1) <= (EducationStr.Count - 1))
                                //{
                                //    Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());
                                //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());
                                //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //    MtchInst2 = rgxNotInstitute.Match(Institute3);
                                //    mtchInstitute3 = re1.Match(Institute3);
                                //    mtchInstitute2 = re1.Match(Institute2);
                                //    if (rgxInstitute.IsMatch(Institute2))
                                //        FlagInstitute = "2";
                                //    if (rgxInstitute.IsMatch(Institute3))
                                //        FlagInstitute3 = "3";

                                //    if (FlagInstitute == "0" && FlagInstitute3 == "0")
                                //    {
                                //        if ((pos + 1) <= EducationStr.Count)
                                //            Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                                //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                                //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //        MtchInst2 = rgxNotInstitute.Match(Institute3);

                                //        if (rgxInstitute.IsMatch(Institute2))
                                //            FlagInstitute = "2";
                                //        if (rgxInstitute.IsMatch(Institute3))
                                //            FlagInstitute3 = "3";

                                //        mtchInstitute3 = re1.Match(Institute3);
                                //        mtchInstitute2 = re1.Match(Institute2);
                                //    }

                                //    if ((Institute2.IndexOf("%") < 0 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 80) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst1.Success == false) && FlagInstitute3 != "3" || FlagInstitute == "2")
                                //    {
                                //        try
                                //        {
                                //            Institute2 = opReplaceInstituteOne(Institute2);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute2 + ",";
                                //    }
                                //    else if ((Institute3.IndexOf("%") < 0 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 120) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst2.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                                //    {
                                //        try
                                //        {
                                //            Institute3 = opReplaceInstituteOne(Institute3);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute3 + ",";
                                //    }
                                //    else
                                //        eduInstitute += ",";
                                //}
                                //else
                                //{
                                //    eduInstitute += ",";
                                //}
                                #endregion

                                eduPosYear.Add(i);
                                return 0;
                            }
                        }

                        for (int j = 65; j < 122; j++)
                        {
                            str = str.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                            strTwo = strTwo.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                            MinYEar = MinYEar.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                        }
                        if (str.Trim().Length == 0 | (eduPosYear.Count > 0 && opFindEducationYearExist(i) == true))
                        {
                            eduCompleteYear += ",";
                            eduDuration += ",";
                            eduStartYear += ",";
                            eduUniverSity += getEducationUniversity(pos, i) + ",";
                            try
                            {
                                getEducationInstitustion(pos, i);
                            }
                            catch
                            {
                                eduInstitute += ",";
                            }
                            eduGrade += getEducationGrade(pos, strRmLastDot) + ",";
                            getEducationSpecialization(pos, strRmLastDot);
                            eduSpecialization += ",";
                            eduSpecialization1 += ",";

                            return 0;
                        }
                        else
                        {
                            if (str.Trim().Length == 2)
                            {
                                strTwo = getYear(str);
                                str = strTwo.Trim() + str.Trim();
                            }
                            if (str.Trim().Length != 2)
                            {
                                int CurrentYear = System.DateTime.Now.Year;
                                if (Convert.ToInt32(str) > CurrentYear || Convert.ToInt32(str) < 10 | (CurrentYear - Convert.ToInt32(str)) < 0 || (CurrentYear - Convert.ToInt32(str)) > 75)
                                {
                                    eduCompleteYear += ",";
                                    eduDuration += ",";
                                    eduStartYear += ",";
                                    eduUniverSity += getEducationUniversity(pos, i) + ",";
                                    eduGrade += getEducationGrade(pos, strRmLastDot) + ",";
                                    //eduInstitute  += ",";
                                    getEducationInstitustion(pos, i);
                                    getEducationSpecialization(pos, strRmLastDot);
                                    eduSpecialization += ",";
                                    eduSpecialization1 += ",";
                                    return 0;
                                }
                            }
                            eduCompleteYear += str.Trim() + ",";
                            eduStartYear += MinYEar.Trim() + ",";
                            eduUniverSity += getEducationUniversity(pos, i) + ",";

                            getEducationSpecialization(pos, strRmLastDot);
                            eduSpecialization += ",";
                            eduSpecialization1 += ",";
                            Match GrdMtch = null;
                            string GradCrnt = "";

                            try
                            {
                                if (bPrecentageInLast == true)
                                {
                                    for (int kGrd = pos; kGrd < EducationStr.Count; kGrd++)
                                    {
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                                        {
                                            GrdMtch = rgxgrd.Match(EducationStr[kGrd].ToString());
                                            GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                            if (GrdMtch.Success == true)
                                            {
                                                eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                break;
                                            }
                                            else
                                            {
                                                GrdMtch = rgxgrd1.Match(EducationStr[kGrd].ToString());
                                                GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                            }
                                            if (GrdMtch.Success == true)
                                            {
                                                eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                break;
                                            }
                                        }
                                        else if (pos < kGrd && regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == true && regEducationText.Match(" " + EducationStr[kGrd].ToString()).ToString().Trim() != strRmLastDot.Trim()) //strRmLastDot
                                            break;
                                    }
                                }
                            }
                            catch
                            { }
                            if (bPrecentageInLast == false || GrdMtch.Success == false)
                            {
                                try
                                {
                                    // Added New Logic for Education Grade --- Saravana  //Education History
                                    try
                                    {
                                        Boolean bGradeFlgPos = false;
                                        if ((i + 1) <= (EducationStr.Count - 1))
                                            for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                            {
                                                if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                                GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                                if (GrdMtch == null && GrdMtch.Success == false)
                                                    GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                                if (GrdMtch != null && GrdMtch.Success == true)
                                                {
                                                    bGradeFlgPos = true;
                                                    eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                    break;
                                                }
                                            }
                                        if ((i - 1) <= (EducationStr.Count - 1))
                                            if (GrdMtch == null || GrdMtch.Success == false)
                                                for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                                {
                                                    if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                                    GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                                    if (GrdMtch == null && GrdMtch.Success == false)
                                                        GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                                    if (GrdMtch != null && GrdMtch.Success == true)
                                                    {
                                                        bGradeFlgPos = true;
                                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                        break;
                                                    }
                                                }
                                        if (bGradeFlgPos == false)
                                            eduGrade += ",";
                                    }
                                    catch
                                    {
                                        eduGrade += ",";
                                    }


                                    #region "Code Commended for New Logic"

                                    //if (i == pos)
                                    //    bGradeFlgPos = true;
                                    //if ((i + 1) <= (EducationStr.Count - 1))
                                    //{
                                    //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                                    //    if (GrdMtch.Success == false)
                                    //    {
                                    //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                                    //        GradCrnt = EducationStr[i].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                    //    }
                                    //    else
                                    //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                    //    if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false || (regEducationText.Match(" " + EducationStr[pos + 1].ToString()).ToString().ToLower().Contains("intermediate") && EducationStr[pos + 1].ToString().ToLower().Contains("board of intermediate education") == false && EducationStr[pos + 1].ToString().ToLower().Contains("intermediate board of education") == false) || regEducationText.Match(" " + EducationStr[pos + 1].ToString()).ToString().Trim() == strRmLastDot.Trim())
                                    //    {
                                    //        GrdMtch2 = rgxgrd.Match(EducationStr[pos + 1].ToString());
                                    //        if (GrdMtch2.Success == false)
                                    //        {
                                    //            if (bGradeFlgPos == false)
                                    //                if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                                    //                    GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                                    //        }
                                    //    }
                                    //    if (bGradeFlgPos == true && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false && bEducationYearNormal == false)
                                    //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                                    //    else
                                    //        GrdMtch3 = rgxgrd.Match("");
                                    //    if (bGradeFlgPos == false)
                                    //    {
                                    //        if (i - 1 != pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                                    //            GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                                    //        else
                                    //            GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString()); // Pos == 1 -1 
                                    //    }

                                    //    if (rgxNotGrdMatch.IsMatch(EducationStr[i].ToString()) && rgxNotGrdMatch.IsMatch(EducationStr[pos].ToString()) && pos < i && GrdMtch.Success == true)
                                    //        GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());

                                    //    Grade3 = EducationStr[i + 1].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                    //    Grade4 = EducationStr[i - 1].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                    //    if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success)
                                    //    {
                                    //        GrdMtch = rgxgrd1.Match(EducationStr[i].ToString());
                                    //        if (GrdMtch.Success == true && (GrdMtch.Value.ToString().Contains("/") == false && GrdMtch.Value.ToString().Contains("%") == false))
                                    //            if (Convert.ToDecimal(GrdMtch.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i].ToString().ToLower()) == false)
                                    //                GrdMtch = rgxgrd1.Match("");//rgxgrd5
                                    //        GrdMtch = rgxgrd5.Match(EducationStr[i].ToString());
                                    //        if (GrdMtch.Success == true && (GrdMtch.Value.ToString().Contains("/") == false && GrdMtch.Value.ToString().Contains("%") == false))
                                    //            if (Convert.ToDecimal(GrdMtch.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i].ToString().ToLower()) == false)
                                    //                GrdMtch = rgxgrd1.Match("");//rgxgrd5
                                    //        if (i == pos && regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                                    //            GrdMtch2 = rgxgrd1.Match(EducationStr[i + 1].ToString());
                                    //        else if (i + 1 == pos && regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == true)
                                    //            GrdMtch2 = rgxgrd1.Match(EducationStr[i + 1].ToString());
                                    //        if (GrdMtch2.Success == true && (GrdMtch2.Value.ToString().Contains("/") == false && GrdMtch2.Value.ToString().Contains("%") == false))
                                    //            if (Convert.ToDecimal(GrdMtch2.Value.ToString()) < 50 && (rgxCgpa.IsMatch(EducationStr[i + 1].ToString().ToLower()) == false && EducationStr[i + 1].ToString().ToLower().Contains("percentage") == false))//Percentage
                                    //                GrdMtch2 = rgxgrd1.Match("");
                                    //        GrdMtch3 = rgxgrd1.Match(EducationStr[i - 1].ToString());
                                    //        if (GrdMtch3.Success == true && (GrdMtch3.Value.ToString().Contains("/") == false && GrdMtch3.Value.ToString().Contains("%") == false))
                                    //            if (Convert.ToDecimal(GrdMtch3.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i - 1].ToString().ToLower()) == false)
                                    //                GrdMtch3 = rgxgrd1.Match("");
                                    //    }
                                    //    if ((i + 2) <= (EducationStr.Count - 1))
                                    //    {
                                    //        if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success)
                                    //        {
                                    //            GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                                    //            if (GrdMtch.Success == false)
                                    //                GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                                    //            if ((i + 2) <= EducationStr.Count)
                                    //            {
                                    //                if (bGradeFlgPos == true)
                                    //                {
                                    //                    if (regEducationText.IsMatch(" " + EducationStr[i + 2].ToString()) == false)
                                    //                        GrdMtch2 = rgxgrd.Match(EducationStr[i + 2].ToString());
                                    //                    if ((i - 2 > 1) && regEducationText.IsMatch(" " + EducationStr[i - 2].ToString()) == false)
                                    //                        GrdMtch3 = rgxgrd.Match(EducationStr[i - 2].ToString());
                                    //                }
                                    //                else
                                    //                {
                                    //                    GrdMtch2 = rgxgrd.Match(EducationStr[i + 2].ToString());
                                    //                    // i -1 also checking Education Details...
                                    //                    if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                                    //                        GrdMtch3 = rgxgrd.Match(EducationStr[i - 2].ToString());
                                    //                }
                                    //            }
                                    //        }
                                    //        if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success && ((pos + 2) <= EducationStr.Count))
                                    //        {
                                    //            //Grade Normal
                                    //            GrdMtch = rgxgrd1.Match(EducationStr[i].ToString());
                                    //            if (GrdMtch.Success == true && (GrdMtch.Value.ToString().Contains("/") == false && GrdMtch.Value.ToString().Contains("%") == false))
                                    //                if (Convert.ToDecimal(GrdMtch.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i].ToString().ToLower()) == false)
                                    //                    GrdMtch = rgxgrd1.Match("");
                                    //            GrdMtch2 = rgxgrd1.Match(EducationStr[i + 2].ToString());
                                    //            if (GrdMtch2.Success == true && (GrdMtch2.Value.ToString().Contains("/") == false && GrdMtch2.Value.ToString().Contains("%") == false))
                                    //                if (Convert.ToDecimal(GrdMtch2.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i + 2].ToString().ToLower()) == false)
                                    //                    GrdMtch2 = rgxgrd1.Match("");
                                    //            GrdMtch3 = rgxgrd1.Match(EducationStr[i - 2].ToString());
                                    //            if (GrdMtch3.Success == true && (GrdMtch3.Value.ToString().Contains("/") == false && GrdMtch3.Value.ToString().Contains("%") == false))
                                    //                if (Convert.ToDecimal(GrdMtch3.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i - 2].ToString().ToLower()) == false)
                                    //                    GrdMtch3 = rgxgrd1.Match("");
                                    //            if (GrdMtch2.Success == false)
                                    //                if ((i + 3) <= EducationStr.Count)
                                    //                    GrdMtch2 = rgxgrd1.Match(EducationStr[i + 3].ToString());
                                    //            if (GrdMtch2.Success == true && (GrdMtch2.Value.ToString().Contains("/") == false && GrdMtch2.Value.ToString().Contains("%") == false))
                                    //                if (Convert.ToDecimal(GrdMtch2.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i + 3].ToString().ToLower()) == false)
                                    //                    GrdMtch2 = rgxgrd1.Match("");

                                    //            if (GrdMtch2.Success == false && (regEducationText.IsMatch(" " + EducationStr[i + 4].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos].ToString()) == true))
                                    //                if ((i + 4) < EducationStr.Count)
                                    //                    GrdMtch2 = rgxgrd.Match(EducationStr[i + 4].ToString());
                                    //            if (GrdMtch2.Success == false)
                                    //            {
                                    //                if (GrdMtch2.Success == false && (regEducationText.IsMatch(" " + EducationStr[i + 4].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos].ToString()) == true))
                                    //                    if ((i + 4) < EducationStr.Count)
                                    //                        GrdMtch2 = rgxgrd1.Match(EducationStr[i + 4].ToString());
                                    //                if (GrdMtch2.Success == true && (i + 4) < EducationStr.Count && (GrdMtch2.Value.ToString().Contains("/") == false && GrdMtch2.Value.ToString().Contains("%") == false))
                                    //                    if (Convert.ToDecimal(GrdMtch2.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i + 4].ToString().ToLower()) == false)
                                    //                        GrdMtch2 = rgxgrd1.Match("");
                                    //            }

                                    //        }
                                    //    }

                                    //    mtch6 = re1.Match(Grade3);
                                    //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || !GrdMtch.Success == false || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                    //    {
                                    //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                    //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                    //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                                    //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 4)) + ",";
                                    //        else
                                    //            eduGrade += ",";
                                    //    }
                                    //    else
                                    //    {
                                    //        if (GrdMtch2.Success == true || ((rgxCgpa.IsMatch(Grade3.ToLower()) == true && GradCrnt.Length < 100) || Grade3.IndexOf("%") > 0 || !GrdMtch2.Success == false || (mtch6.Success == true && (Grade3.ToString().Length <= 3 || (Grade3.ToString().Length <= 5 && Grade3.IndexOf(".") > 0)) && isNumberExists2(Grade3.Trim().ToCharArray()) == false)) && Grade3.ToUpper().IndexOf("D.G.P.A") < 0 && GradCrnt.ToUpper().IndexOf("DGPA") < 0)
                                    //        {
                                    //            if ((GrdMtch2.Success == true) || rgxCgpa.IsMatch(Grade3.ToLower()) == true)
                                    //                eduGrade += opReplaceGrade(GrdMtch2.Value.ToString()) + ",";
                                    //            else if (Grade3.ToString().Length >= 6 && Grade3.Contains("%") == true)
                                    //                eduGrade += Grade3.Substring(Grade3.IndexOf("%") - 5) + ",";
                                    //            else
                                    //                eduGrade += ",";
                                    //        }
                                    //        else if (GrdMtch3.Success == true || (rgxCgpa.IsMatch(Grade4.ToLower()) == true && GradCrnt.Length < 100) || Grade4.IndexOf("%") > 0 || (!GrdMtch3.Success == false))
                                    //        {
                                    //            if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade4.ToLower()) == true)
                                    //                eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                                    //            else if (Grade4.ToString().Length >= 6 && Grade4.Contains("%") == true)
                                    //                eduGrade += Grade4.Substring(Grade4.IndexOf("%") - 5) + ",";
                                    //            else
                                    //                eduGrade += ",";
                                    //        }
                                    //        else
                                    //            if (Grade3 == "Merit" || Grade4 == "Merit")
                                    //                eduGrade += "Merit,";
                                    //            else
                                    //                eduGrade += ",";
                                    //    }
                                    //}
                                    //else if ((i - 1) <= (EducationStr.Count - 1))
                                    //{
                                    //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                                    //    if (GrdMtch.Success == false)
                                    //    {
                                    //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                                    //        GradCrnt = EducationStr[i].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                    //    }
                                    //    else
                                    //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                    //    //GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                                    //    if (i != pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                                    //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                                    //    else
                                    //        GrdMtch3 = rgxgrd.Match("");

                                    //    //Grade3 = EducationStr[i + 1].ToString().Trim().Replace("Marks obtained:", "").Replace("(","").Replace(")","").Replace("[","").Replace("]","")    ;
                                    //    if (i != pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                                    //        Grade4 = EducationStr[i - 1].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                    //    if (GrdMtch != null && GrdMtch3 != null && !GrdMtch.Success && !GrdMtch3.Success)
                                    //    {
                                    //        GrdMtch = rgxgrd1.Match(EducationStr[i].ToString());
                                    //        if (Convert.ToDecimal(GrdMtch.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i].ToString().ToLower()) == false)
                                    //            GrdMtch = rgxgrd1.Match("");

                                    //        if (i != pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                                    //        {
                                    //            GrdMtch3 = rgxgrd1.Match(EducationStr[i - 1].ToString());
                                    //            if ((Convert.ToDecimal(GrdMtch3.Value.ToString().Trim()) < 50) && rgxCgpa.IsMatch(EducationStr[i - 1].ToString().ToLower()) == false)
                                    //                GrdMtch3 = rgxgrd1.Match("");
                                    //        }
                                    //        else
                                    //            GrdMtch3 = rgxgrd1.Match("");
                                    //    }

                                    //    if (GrdMtch != null && rgxCgpa.IsMatch(GradCrnt.ToLower()) == true || GradCrnt.IndexOf("%") > 0 || !GrdMtch.Success == false)
                                    //    {
                                    //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                    //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                    //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                                    //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 4)) + ",";
                                    //        else
                                    //            eduGrade += ",";
                                    //    }
                                    //    else if (GrdMtch3.Success || rgxCgpa.IsMatch(Grade4.ToLower()) == true || Grade4.IndexOf("%") > 0 || GrdMtch3.Success != false && Grade4.IndexOf("D.G.P.A") < 0 || GrdMtch3.Success == true)
                                    //    {
                                    //        if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade4.ToLower()) == true)
                                    //            eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                                    //        else if (Grade4.ToString().Length >= 6 && Grade4.Contains("%") == true)
                                    //            eduGrade += Grade4.Substring(Grade4.IndexOf("%") - 5) + ",";
                                    //        else
                                    //            eduGrade += ",";
                                    //    }
                                    //    else
                                    //    {
                                    //        eduGrade += ",";
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    eduGrade += ",";
                                    //}
                                    #endregion

                                }
                                catch
                                {
                                    eduGrade += ",";
                                }
                            }

                            if (str.Length > 0 && MinYEar.Length > 0)
                            {
                                int tDuration = (Convert.ToInt16(str.Trim()) - Convert.ToInt16(MinYEar.Trim()));
                                if (tDuration.ToString().Length <= 3)
                                    eduDuration += tDuration.ToString() + ",";
                                else
                                    eduDuration += ",";
                            }
                            else
                            {
                                eduDuration += ",";
                            }
                            //Education Institution 
                            try
                            {
                                //string FlagInstitute = "0", FlagInstitute2 = "0", FlagInstitute3 = "0";
                                //, Institute2 = "", Institute3 = "";
                                //Match MtchInst = null, MtchInst1 = null, MtchInst2 = null, mtchInstitute1 = null, mtchInstitute2 = null, mtchInstitute3 = null;
                                string Institute1 = "";
                                bool bInsFlag = false;
                                //Added  Education Institution Logic
                                try
                                {
                                    if ((i + 1) <= (EducationStr.Count - 1) || pos < i)
                                    {
                                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                        {
                                            Institute1 = "";
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos && EducationStr[kGrd1].ToString().IndexOf(strRmLastDot) < 0)
                                            {
                                                bInsFlag = true;
                                                eduInstitute += ",";
                                                break;
                                            }
                                            if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                            Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                            if (Institute1 != "")
                                                if (rgxInstitute.IsMatch(Institute1))
                                                {
                                                    bInsFlag = true;
                                                    eduInstitute += Institute1 + ",";
                                                    break;
                                                }
                                        }
                                    }
                                    else if ((i - 1) <= (EducationStr.Count - 1))
                                    {
                                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                        {
                                            Institute1 = "";
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos)
                                            {
                                                bInsFlag = true;
                                                eduInstitute += ",";
                                                break;
                                            }
                                            //if (pos == EducationStr.Count - 1) continue;
                                            if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                            Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                            if (Institute1 != "") //rgxInstitute.IsMatch(Institute1)
                                                if (rgxInstitute.IsMatch(Institute1))
                                                {
                                                    bInsFlag = true;
                                                    eduInstitute += Institute1 + ",";
                                                    break;
                                                }
                                        }
                                    }
                                }
                                catch
                                {
                                    bInsFlag = true;
                                    eduInstitute += ",";
                                }

                                if (bInsFlag == false)
                                    eduInstitute += ",";

                                #region "Code Commended for new Logic"

                                //if ((i + 1) <= (EducationStr.Count - 1))
                                //{
                                //    if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                                //        Institute1 = opReplaceInstitutions(EducationStr[pos + 1].ToString());
                                //    else if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                                //        Institute1 = opReplaceInstitutions(EducationStr[i + 1].ToString());
                                //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == true)
                                //        Institute2 = "";
                                //    else
                                //        Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());

                                //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());

                                //    MtchInst = rgxNotInstitute.Match(Institute1);
                                //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //    MtchInst2 = rgxNotInstitute.Match(Institute3);
                                //    if (EducationStr[i].ToString().IndexOf("%") >= 0 && EducationStr[i].ToString().IndexOf("%") >= 0)
                                //        FlagInstitute = "0";
                                //    else
                                //        if (rgxInstitute.IsMatch(Institute1))
                                //            if (isNumberExists2(EducationStr[i].ToString().Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false && isNumberExists2(EducationStr[i + 1].ToString().Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false)
                                //                FlagInstitute = "0";
                                //            else
                                //                FlagInstitute = "1";

                                //    if (rgxInstitute.IsMatch(Institute2))
                                //        if (regEducationText != null)
                                //        {
                                //            if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos].ToString()) == true)
                                //                FlagInstitute2 = "2";
                                //            else
                                //                Institute2 = "";
                                //        }
                                //        else
                                //            FlagInstitute2 = "2";

                                //    if (rgxInstitute.IsMatch(Institute3))
                                //        FlagInstitute3 = "3";

                                //    mtchInstitute1 = re1.Match(Institute1);
                                //    mtchInstitute2 = re1.Match(Institute2);
                                //    mtchInstitute3 = re1.Match(Institute3);

                                //    if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                                //    {
                                //        if ((pos + 1) <= EducationStr.Count)
                                //        {
                                //            if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                                //                Institute1 = opReplaceInstitutions(EducationStr[pos + 1].ToString());
                                //            if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                                //                if (rgxNotInstitute.IsMatch(EducationStr[pos - 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                                //                    Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                                //        }
                                //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                                //        MtchInst = rgxNotInstitute.Match(Institute1);
                                //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //        MtchInst2 = rgxNotInstitute.Match(Institute3);

                                //        if (rgxInstitute.IsMatch(Institute1) && EducationStr[pos + 1].ToString().IndexOf("%") < 0)
                                //            if (isNumberExists2(EducationStr[pos].ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false && isNumberExists2(EducationStr[pos + 1].ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false)
                                //                FlagInstitute = "0";
                                //            else
                                //                FlagInstitute = "1";
                                //        if (rgxInstitute.IsMatch(Institute2))
                                //            FlagInstitute2 = "2";
                                //        if (rgxInstitute.IsMatch(Institute3))
                                //            FlagInstitute3 = "3";

                                //        if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                                //        {  //regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false 
                                //            if ((pos + 2) <= (EducationStr.Count) && (regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false || regEducationText.Match(" " + EducationStr[pos + 2].ToString()).ToString().Replace(".", "").Trim().Length < 3))
                                //                if ((pos + 2) <= (EducationStr.Count - 1) && rgxUniversity.IsMatch(EducationStr[pos].ToString()) == false && EducationStr.Count > 6 && EducationStr[pos + 2].ToString().IndexOf("%") < 0 && rgxNotInstitute.IsMatch(EducationStr[pos + 2].ToString()) == false)
                                //                    if (((pos + 3 < EducationStr.Count) && regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == true && bPrecentageInLast == false) && regEducationText.Match(" " + EducationStr[pos + 3].ToString()).ToString().Replace(".", "").Length > 4)
                                //                        Institute1 = "";
                                //                    else
                                //                        Institute1 = opReplaceInstitutions(EducationStr[pos + 2].ToString());

                                //            if (rgxNotInstitute.IsMatch(EducationStr[pos - 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false && (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false))
                                //                Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                                //            Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());
                                //            if (rgxInstitute.IsMatch(Institute1) && rgxUniversity.IsMatch(EducationStr[pos].ToString()) == false && EducationStr.Count > 6 && EducationStr[pos].ToString().IndexOf("%") < 0)
                                //                FlagInstitute = "1";
                                //            if (rgxInstitute.IsMatch(Institute2))
                                //                FlagInstitute2 = "2";
                                //            if (rgxInstitute.IsMatch(Institute3))
                                //                FlagInstitute3 = "3";

                                //            if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                                //                if (pos + 3 < EducationStr.Count && rgxNotInstitute.IsMatch(EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false && (regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false))
                                //                {
                                //                    FlagInstitute = "1";
                                //                    Institute1 = opReplaceInstitutions(EducationStr[pos + 3].ToString());
                                //                }
                                //        }
                                //        mtchInstitute1 = re1.Match(Institute1);
                                //        mtchInstitute2 = re1.Match(Institute2);
                                //        mtchInstitute3 = re1.Match(Institute3);

                                //    }

                                //    if ((Institute1.IndexOf("%") < 0 && (mtchInstitute1.Success == false && (Institute1.ToString().Length <= 80) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst.Success == false) && FlagInstitute2 != "2" && FlagInstitute3 != "3" && FlagInstitute == "1" || FlagInstitute == "1" && Institute2.ToString().Length <= 120 && FlagInstitute3 != "3")
                                //    {
                                //        try
                                //        {
                                //            Institute1 = opReplaceInstituteOne(Institute1);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute1 + ",";
                                //    }
                                //    else if (Institute2.ToString().ToLower().IndexOf("university") < 0 && (Institute2.IndexOf("%") < 0 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 80) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst1.Success == false) && (MtchInst2.Success == true || Institute2.ToString().ToLower().IndexOf("university") < 0 && FlagInstitute3 != "3") && FlagInstitute2 == "2" || Institute2.ToString().ToLower().IndexOf("university") < 0 && FlagInstitute2 == "2" && Institute2.ToString().Length <= 120 && (FlagInstitute3 != "3" || MtchInst2.Success == true))
                                //    {
                                //        try
                                //        {
                                //            Institute2 = opReplaceInstituteOne(Institute2);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute2 + ",";
                                //    }
                                //    else if ((Institute3.IndexOf("%") < 0 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst2.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                                //    {
                                //        try
                                //        {
                                //            Institute3 = opReplaceInstituteOne(Institute3);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute3 + ",";
                                //    }

                                //    else
                                //        eduInstitute += ",";
                                //    //else
                                //    //    eduInstitute += ",";
                                //}
                                //else if ((i - 1) <= (EducationStr.Count - 1))
                                //{
                                //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == true)
                                //        Institute2 = "";
                                //    else
                                //        Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());
                                //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());

                                //    MtchInst2 = rgxNotInstitute.Match(Institute3);
                                //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //    mtchInstitute2 = re1.Match(Institute2);
                                //    mtchInstitute3 = re1.Match(Institute3);
                                //    if (rgxInstitute.IsMatch(Institute2))
                                //        FlagInstitute = "2";
                                //    if (rgxInstitute.IsMatch(Institute3))
                                //        FlagInstitute3 = "3";

                                //    if (FlagInstitute == "0" && FlagInstitute3 == "0")
                                //    {
                                //        if ((pos + 1) <= EducationStr.Count - 1 && (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false))
                                //            Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                                //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                                //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                                //        MtchInst2 = rgxNotInstitute.Match(Institute3);

                                //        if (rgxInstitute.IsMatch(Institute2))
                                //            FlagInstitute2 = "2";
                                //        if (rgxInstitute.IsMatch(Institute3))
                                //            FlagInstitute3 = "3";
                                //        mtchInstitute2 = re1.Match(Institute2);
                                //        mtchInstitute3 = re1.Match(Institute3);
                                //    }
                                //    if ((Institute2.IndexOf("%") < 0 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 80) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst1.Success == false) && FlagInstitute3 != "3" && EducationStr[i].ToString().ToLower().IndexOf(" from ") < 0 || FlagInstitute == "2") //&& EducationStr[i].ToString().ToLower().IndexOf(" from ") < 0
                                //    {
                                //        try
                                //        {
                                //            Institute2 = opReplaceInstituteOne(Institute2);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute2 + ",";
                                //    }
                                //    else if ((Institute3.IndexOf("%") < 0 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst2.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                                //    {
                                //        try
                                //        {
                                //            Institute3 = opReplaceInstituteOne(Institute3);
                                //        }
                                //        catch { }
                                //        eduInstitute += Institute3 + ",";
                                //    }
                                //    else
                                //        eduInstitute += ",";
                                //}
                                //else
                                //{
                                //    eduInstitute += ",";
                                //}
                                #endregion
                            }
                            catch
                            {
                                eduInstitute += ",";
                            }

                            eduPosYear.Add(i);
                            return 0;
                        }
                    }
                }
                #endregion

                if (pos == 1 && EducationStr[0].ToString() == "EDUCATION")
                    bEducationYearInsecond = true;
                else
                    bEducationYearInsecond = false;

                if (bEducationYearInsecond == false && bEducationYearInFirst == false && pos != EducationStr.Count - 3)
                    FlgYrs = "1";
                else if (bEducationYearStarting == true && bEducationYearInFirst == true && bEducationYearInsecond != true)
                    FlgYrs = "1";
                else if (bEducationYearInsecond == true && bEducationYearInFirst == false)
                    FlgYrs = "0";
                else if (bEducationYearStarting == true && bEducationYearInFirst == true && bEducationYearInsecond == false)
                    FlgYrs = "1";
                else if (bEducationYearStarting == true && bEducationYearInFirst == true && bEducationYearInsecond == true && bEduYearFound == false)
                    FlgYrs = "1";
                else
                    FlgYrs = "0";

                #region "year found first"

                //if (bEducationYearInsecond == true)
                for (int i = pos; i >= 0 && bEducationYearStarting == true && FlgYrs == "1"; i--)
                {
                    if (EducationStr[i] == null) continue;

                    MatchCollection matches = ex.Matches(EducationStr[i].ToString());
                    Regex regYrs1 = new Regex("(\\d+){1,2}(\\s+)(years)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    Regex regYrs2 = new Regex("(\\d+){1,2}(\\s+)(year)", RegexOptions.IgnoreCase | RegexOptions.Singleline);

                    try
                    {
                        if (pos > i && regEducationText != null && regEducationText.Match(" " + EducationStr[i].ToString()).ToString().Trim() != strRmLastDot)
                            if (regEducationText.IsMatch(" " + EducationStr[i].ToString()) == true) break;   //|| regEducationText.IsMatch(EducationStr[i - 1].ToString()) == true
                        if (regNotEXPs.IsMatch(EducationStr[i].ToString()) == true) continue;
                    }
                    catch { }

                    if (matches.Count == 0)
                        matches = regYrs1.Matches(EducationStr[i].ToString());
                    if (matches.Count == 0)
                        matches = regYrs2.Matches(EducationStr[i].ToString());
                    if (matches.Count == 0) continue;

                    if (i + 1 < EducationStr.Count && EducationStr[i + 1].ToString() == "Education Qualification:") continue;
                    //Education Qualification:
                    foreach (Match m in matches)
                    {
                        string strTwo = "";
                        string MinYEar = "";
                        string str = m.Value.ToLower().Trim().Replace("to", "-").Replace("~", "-").Replace("`", "-").Replace("'", "-").Replace("’", "-").Replace(",", "").Replace("‘", "-").Replace("/", "-").Replace("‘", "");
                        string[] strSplit = null;
                        if (str.IndexOf("-") > 0 || str.IndexOf("–") > 0)
                        {
                            strSplit = str.Split('-', '–');
                            if (strSplit.Length > 1)
                                str = strSplit[strSplit.Length - 1];
                            if (strSplit.Length > 2)
                            {   //08/2007 – 06/2008
                                if (strSplit.Length == 4 && strSplit[0].Trim().Length == 2 && strSplit[1].Trim().Length == 4 && strSplit[2].Trim().Length == 2 && strSplit[3].Trim().Length == 4)
                                {
                                    strTwo = strSplit[1];
                                    MinYEar = strSplit[1];
                                }
                                else
                                {
                                    strTwo = strSplit[0];
                                    MinYEar = strSplit[0];
                                }
                            }
                            else
                            {
                                string _sbMtchMonth = @"(jan |january|february|march|april|may |june|july|august|september|october|november|Ddecember|august|dec |jan |feb |mar |apr |may |jun |jul |aug |sep |oct |nov |dec |aprl|sept |octb|jan |feb |mar |apr |jun |jul |aug |sep |oct |nov |dec |febs|aprl|oct.|sep.|aug.|jan.|may.|feb.|mar.|apr.|nov.|dec.)[s]?";
                                strSplit[0] = Regex.Replace(strSplit[0].ToString().ToLower(), _sbMtchMonth, "");
                                strTwo = strSplit[0];
                                strTwo = Regex.Replace(strTwo, _sbMtchMonth, "");
                                if (strSplit[0].Replace(" ", "").Length == 4)
                                    MinYEar = strSplit[0];
                                else
                                    MinYEar = "0";
                            }
                            if (strTwo.Trim().Length != 0 && strTwo.Trim().Length > 2)
                                strTwo = strTwo.Substring(0, 2);
                        }
                        for (int j = 65; j < 122; j++)
                        {
                            str = str.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                            strTwo = strTwo.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                            MinYEar = MinYEar.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");

                        }

                        if (str.Trim().Length == 0 | (eduPosYear.Count > 0 && opFindEducationYearExist(i) == true))
                        {
                            eduCompleteYear += ",";
                            eduDuration += ",";
                            eduStartYear += ",";
                            eduUniverSity += getEducationUniversity(pos, i) + ",";
                            getEducationSpecialization(pos, strRmLastDot);
                            eduSpecialization += ",";
                            eduSpecialization1 += ",";
                            // eduInstitute += ",";
                            getEducationInstitustion(pos, i);
                            eduGrade += getEducationGrade(pos, strRmLastDot) + ",";
                            return 0;
                        }
                        else
                        {
                            if (str.Trim().Length == 2)
                            {
                                strTwo = getYear(str);
                                str = strTwo.Trim() + str.Trim();
                            }
                            if (str.Trim().Length != 2)
                            {
                                int CurrentYear = System.DateTime.Now.Year;
                                if (Convert.ToInt32(str) > CurrentYear || Convert.ToInt32(str) < 10 | (CurrentYear - Convert.ToInt32(str)) < 0 || (CurrentYear - Convert.ToInt32(str)) > 75)
                                {
                                    eduCompleteYear += ",";
                                    eduDuration += ",";
                                    eduStartYear += ",";
                                    eduUniverSity += getEducationUniversity(pos, i) + ",";
                                    getEducationSpecialization(pos, strRmLastDot);
                                    eduSpecialization += ",";
                                    eduSpecialization1 += ",";
                                    //eduGrade += ",";
                                    //eduInstitute += ",";
                                    getEducationInstitustion(pos, i);
                                    eduGrade += getEducationGrade(pos, strRmLastDot) + ",";
                                    return 0;
                                }
                            }
                            eduCompleteYear += str.Trim() + ",";
                            //eduDuration += ",";
                            eduStartYear += MinYEar.Trim() + ",";
                            eduUniverSity += getEducationUniversity(pos, i) + ",";

                            getEducationSpecialization(pos, strRmLastDot);
                            eduSpecialization += ",";
                            eduSpecialization1 += ",";
                            //eduSpecialization2 += ",";
                            eduGrade += getEducationGrade(pos, strRmLastDot) + ",";

                            #region "Commended Grade, Using New Method for Grade Parsing year found first"
                            //try
                            //{
                            //    if (bPrecentageInLast == true)
                            //    {
                            //        for (int kGrd = pos; kGrd < EducationStr.Count; kGrd++)
                            //        {
                            //            if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                            //            {

                            //                GrdMtch = rgxgrd.Match(EducationStr[kGrd].ToString());
                            //                GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                            //                if (GrdMtch.Success == true)
                            //                {
                            //                    eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                            //                    break;
                            //                }
                            //            }
                            //        }
                            //    }
                            //}
                            //catch
                            //{ }
                            //if (bPrecentageInLast == false || GrdMtch.Success == false)
                            //{
                            //    try
                            //    {
                            //        if (i == pos)
                            //            bGradeFlgPos = true;
                            //        if ((i + 1) <= (EducationStr.Count - 1))
                            //        {
                            //            GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //            if (GrdMtch.Success == false)
                            //            {
                            //                GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                            //                GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                            //            }
                            //            else
                            //                GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");
                            //            if (i == pos && regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //            {
                            //                GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                            //                Grade5 = EducationStr[i + 1].ToString().Trim().Replace("Marks obtained:", "");
                            //            }
                            //            else
                            //            {
                            //                GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                            //                Grade5 = EducationStr[i + 1].ToString().Trim().Replace("Marks obtained:", "");
                            //            }


                            //            if (i == pos && regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //            {
                            //                GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //                Grade6 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //            }
                            //            else
                            //            {
                            //                GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //                Grade6 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //            }


                            //            if (GrdMtch.Success == false && GrdMtch2.Success == false && GrdMtch3.Success == false)
                            //            {
                            //                GrdMtch = rgxgrd.Match(EducationStr[tposMatch].ToString());
                            //                if (tposMatch + 1 < EducationStr.Count)
                            //                {
                            //                    if (regEducationText.IsMatch(" " + EducationStr[tposMatch + 1].ToString()) == false)
                            //                    {
                            //                        GrdMtch2 = rgxgrd.Match(EducationStr[tposMatch + 1].ToString());
                            //                        GradCrnt = EducationStr[tposMatch].ToString().Trim();
                            //                    }
                            //                    else
                            //                        GrdMtch2 = rgxgrd.Match("");
                            //                    if (regEducationText.IsMatch(" " + EducationStr[tposMatch + 1].ToString()) == false)
                            //                    {
                            //                        GrdMtch3 = rgxgrd.Match(EducationStr[tposMatch - 1].ToString());
                            //                        Grade6 = EducationStr[tposMatch - 1].ToString().Trim();
                            //                    }
                            //                    else
                            //                        GrdMtch3 = rgxgrd.Match("");
                            //                    Grade5 = EducationStr[tposMatch + 1].ToString().Trim();
                            //                }
                            //            }
                            //            if ((i + 2) <= (EducationStr.Count - 1))
                            //            {
                            //                if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success)
                            //                {
                            //                    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //                    if (GrdMtch.Success == false)
                            //                        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                            //                    GradCrnt = EducationStr[i].ToString().Trim();
                            //                    if ((pos + 2) <= EducationStr.Count)
                            //                    {
                            //                        if (bGradeFlgPos == true)
                            //                        {
                            //                            if (regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false)
                            //                                GrdMtch2 = rgxgrd.Match(EducationStr[pos + 2].ToString());
                            //                            if ((i - 2 > 1) && regEducationText.IsMatch(" " + EducationStr[i - 2].ToString()) == false)
                            //                                GrdMtch3 = rgxgrd.Match(EducationStr[pos - 2].ToString());
                            //                        }
                            //                        else
                            //                        {
                            //                            GrdMtch2 = rgxgrd.Match(EducationStr[pos + 2].ToString());
                            //                            Grade5 = EducationStr[pos + 1].ToString().Trim();
                            //                            // i -1 also checking Education Details...
                            //                            if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                            //                                GrdMtch3 = rgxgrd.Match(EducationStr[pos - 2].ToString());

                            //                        }
                            //                    }
                            //                }
                            //            }
                            //            match2 = re1.Match(Grade5);
                            //            if (GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //            {
                            //                if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //                    eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                            //                else if (GradCrnt.ToString().Length <= 3)
                            //                    eduGrade += GradCrnt + ",";
                            //                else if (GradCrnt.ToString().Length <= 4)
                            //                    eduGrade += GradCrnt + ",";
                            //                else if (GradCrnt.ToString().Length <= 5)
                            //                    eduGrade += GradCrnt + ",";
                            //                else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                            //                    eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                            //                else
                            //                    eduGrade += ",";
                            //            }
                            //            else
                            //            {
                            //                if (rgxCgpa.IsMatch(Grade5.ToLower()) == true || Grade5.IndexOf("%") > 0 || (match2.Success == true && (Grade5.ToString().Length <= 3 || (Grade5.ToString().Length <= 5 && Grade5.IndexOf(".") > 0))) && Grade5.IndexOf("C.G.P.A") < 0 && Grade5.IndexOf("D.G.P.A") < 0)
                            //                {
                            //                    if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade5.ToLower()) == true)
                            //                        eduGrade += opReplaceGrade(GrdMtch2.Value.ToString()) + ",";
                            //                    else if (Grade5.ToString().Length <= 3)
                            //                        eduGrade += Grade5 + ",";
                            //                    else if (Grade5.ToString().Length <= 4)
                            //                        eduGrade += Grade5 + ",";
                            //                    else if (Grade5.ToString().Length <= 5)
                            //                        eduGrade += Grade5 + ",";
                            //                    else if (Grade5.ToString().Length >= 6 && Grade5.Contains("%") == true)
                            //                        eduGrade += Grade5.Substring(Grade5.IndexOf("%") - 5) + ",";
                            //                    else
                            //                        eduGrade += ",";

                            //                }
                            //                else if (Grade6.IndexOf("%") > 0 && Grade6.IndexOf("D.G.P.A") < 0 || (rgxCgpa.IsMatch(Grade6.ToLower()) == true && Grade6.Length <= 60))
                            //                {
                            //                    if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade6.ToLower()) == true)
                            //                        eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                            //                    else if (Grade6.ToString().Length <= 3)
                            //                        eduGrade += Grade6 + ",";
                            //                    else if (Grade6.ToString().Length <= 4)
                            //                        eduGrade += Grade6 + ",";
                            //                    else if (Grade6.ToString().Length <= 5)
                            //                        eduGrade += Grade6 + ",";
                            //                    else if (Grade6.ToString().Length >= 6 && Grade6.Contains("%") == true)
                            //                        eduGrade += Grade6.Substring(Grade6.IndexOf("%") - 5) + ",";
                            //                    else
                            //                        eduGrade += ",";

                            //                }
                            //                else
                            //                {
                            //                    eduGrade += ",";
                            //                }
                            //            }
                            //        }
                            //        else if ((i - 1) <= (EducationStr.Count - 1))
                            //        {
                            //            GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //            if (GrdMtch.Success == false)
                            //            {
                            //                GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                            //                GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                            //            }
                            //            else
                            //                GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");

                            //            if (i == pos && regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //            {
                            //                GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //                Grade6 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //            }
                            //            else
                            //            {
                            //                GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //                Grade6 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //            }
                            //            //match2 = re1.Match(Grade5);
                            //            if (GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //            {
                            //                if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //                    eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                            //                else if (GradCrnt.ToString().Length <= 3)
                            //                    eduGrade += GradCrnt + ",";
                            //                else if (GradCrnt.ToString().Length <= 4)
                            //                    eduGrade += GradCrnt + ",";
                            //                else if (GradCrnt.ToString().Length <= 5)
                            //                    eduGrade += GradCrnt + ",";
                            //                else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                            //                    eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                            //                else
                            //                    eduGrade += ",";
                            //            }
                            //            else if (Grade6.IndexOf("%") > 0 && rgxCgpa.IsMatch(Grade6.ToLower()) == true)
                            //            {
                            //                if (GrdMtch3.Success == true)
                            //                    eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                            //                else if (Grade6.ToString().Length <= 3)
                            //                    eduGrade += Grade6 + ",";

                            //                else if (Grade6.ToString().Length <= 4)
                            //                    eduGrade += Grade6 + ",";
                            //                else if (Grade6.ToString().Length <= 5)
                            //                    eduGrade += Grade6 + ",";
                            //                else if (Grade6.ToString().Length >= 6 && Grade6.Contains("%") == true)
                            //                    eduGrade += Grade6.Substring(Grade6.IndexOf("%") - 5) + ",";
                            //                else
                            //                    eduGrade += ",";

                            //            }
                            //            else
                            //            {
                            //                eduGrade += ",";
                            //            }
                            //        }
                            //        else
                            //        {
                            //            eduGrade += ",";
                            //        }
                            //    }
                            //    catch
                            //    {
                            //        eduGrade += ",";
                            //    }
                            //}
                            #endregion

                            if (str.Length > 0 && MinYEar.Length > 0)
                            {
                                int tDuration = (Convert.ToInt16(str.Trim()) - Convert.ToInt16(MinYEar.Trim()));
                                eduDuration += tDuration.ToString() + ",";
                            }
                            else
                            {
                                eduDuration += ",";
                            }
                            //Education Institution returnSkill 
                            string Institute1 = "";


                            bool bInsFlag = false;
                            //Added  Education Institution Logic
                            try
                            {
                                if ((i + 1) <= (EducationStr.Count - 1) || pos < i)
                                {
                                    for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                    {
                                        Institute1 = "";
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos && EducationStr[kGrd1].ToString().IndexOf(strRmLastDot) < 0)
                                        {
                                            bInsFlag = true;
                                            eduInstitute += ",";
                                            break;
                                        }
                                        if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                        Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                        if (Institute1 != "")
                                            if (rgxInstitute.IsMatch(Institute1))
                                            {
                                                bInsFlag = true;
                                                eduInstitute += Institute1 + ",";
                                                break;
                                            }
                                    }
                                }
                                else if ((i - 1) <= (EducationStr.Count - 1))
                                {
                                    for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                    {
                                        Institute1 = "";
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos)
                                        {
                                            bInsFlag = true;
                                            eduInstitute += ",";
                                            break;
                                        }
                                        if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                        Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                        if (Institute1 != "") //rgxInstitute.IsMatch(Institute1)
                                            if (rgxInstitute.IsMatch(Institute1))
                                            {
                                                bInsFlag = true;
                                                eduInstitute += Institute1 + ",";
                                                break;
                                            }
                                    }
                                }
                            }
                            catch
                            {
                                bInsFlag = true;
                                eduInstitute += ",";
                            }

                            if (bInsFlag == false)
                                eduInstitute += ",";

                            #region  "Code Commended For Institution"

                            //if ((i + 1) <= (EducationStr.Count - 1))
                            //{
                            //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == true)
                            //        Institute1 = "";
                            //    else if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //        Institute1 = opReplaceInstitutions(EducationStr[i + 1].ToString());
                            //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == true)
                            //        Institute2 = "";
                            //    else if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //        Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());

                            //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());

                            //    if (rgxInstitute.IsMatch(Institute1))
                            //        if (isNumberExists2(EducationStr[i].ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false && isNumberExists2(EducationStr[i + 1].ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false)
                            //            FlagInstitute = "0";
                            //        else
                            //            FlagInstitute = "1";
                            //    if (rgxInstitute.IsMatch(Institute2))
                            //        FlagInstitute2 = "2";
                            //    if (rgxInstitute.IsMatch(Institute3))
                            //        FlagInstitute3 = "3";

                            //    MtchInst = rgxNotInstitute.Match(Institute1);
                            //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                            //    MtchInst3 = rgxNotInstitute.Match(Institute3);

                            //    mtchInstitute1 = re1.Match(Institute1);
                            //    mtchInstitute2 = re1.Match(Institute2);
                            //    mtchInstitute3 = re1.Match(Institute3);

                            //    if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                            //    {
                            //        if (pos + 1 < EducationStr.Count)
                            //        {
                            //            if (i > 1 && rgxUniversity.IsMatch(EducationStr[i - 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                            //                Institute1 = opReplaceInstitutions(EducationStr[pos + 1].ToString());
                            //            if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                            //                Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                            //        }
                            //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                            //        MtchInst = rgxNotInstitute.Match(Institute1);
                            //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                            //        MtchInst3 = rgxNotInstitute.Match(Institute3);

                            //        if (rgxInstitute.IsMatch(Institute1))
                            //            if (isNumberExists2(EducationStr[pos].ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false && isNumberExists2(EducationStr[pos + 1].ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false)
                            //                FlagInstitute = "0";
                            //            else
                            //                FlagInstitute = "1";
                            //        if (rgxInstitute.IsMatch(Institute2))
                            //            FlagInstitute2 = "2";
                            //        if (rgxInstitute.IsMatch(Institute3))
                            //            FlagInstitute3 = "3";

                            //        mtchInstitute1 = re1.Match(Institute1);
                            //        mtchInstitute2 = re1.Match(Institute2);
                            //        mtchInstitute3 = re1.Match(Institute3);
                            //    }

                            //    if (((Institute1.IndexOf("%") < 0 && Institute2.Trim().Length > 4 && rgxUniversity.IsMatch(Institute3) != true && (mtchInstitute1.Success == false && (Institute1.ToString().Length <= 120) && isNumberExists2(Institute1.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst.Success == false) && FlagInstitute2 != "2" && FlagInstitute3 != "3") || (FlagInstitute == "1" && isNumberExists2(Institute1.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true && FlagInstitute3 != "3") == true)
                            //    {
                            //        try
                            //        {
                            //            Institute1 = opReplaceInstituteOne(Institute1);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute1 + ",";
                            //    }
                            //    else if ((Institute2.IndexOf("%") < 0 && Institute3 != "" && Institute2.Trim().Length > 4 && rgxUniversity.IsMatch(Institute2) != true && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 120) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst1.Success == false) && FlagInstitute3 != "3" || (FlagInstitute2 == "2" && Institute2.ToString().Length <= 80 && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true && FlagInstitute3 != "3") && rgxUniversity.IsMatch(Institute3) != true)
                            //    {
                            //        try
                            //        {
                            //            Institute2 = opReplaceInstituteOne(Institute2);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute2 + ",";
                            //    }
                            //    else if ((Institute3.IndexOf("%") < 0 && Institute2.Trim().Length > 4 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst3.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                            //    {
                            //        try
                            //        {
                            //            Institute3 = opReplaceInstituteOne(Institute3);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute3 + ",";
                            //    }
                            //    else
                            //        eduInstitute += ",";
                            //    //else
                            //    //    eduInstitute += ",";
                            //    //}
                            //}

                            //else if ((i - 1) <= (EducationStr.Count - 1))
                            //{
                            //    Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());
                            //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());

                            //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                            //    MtchInst3 = rgxNotInstitute.Match(Institute3);
                            //    mtchInstitute2 = re1.Match(Institute2);
                            //    mtchInstitute3 = re1.Match(Institute3);
                            //    if (rgxInstitute.IsMatch(Institute2))
                            //        FlagInstitute2 = "2";
                            //    if (rgxInstitute.IsMatch(Institute3))
                            //        FlagInstitute3 = "3";

                            //    if (FlagInstitute2 == "0" && FlagInstitute3 == "0")
                            //    {
                            //        if ((pos + 1) <= EducationStr.Count)
                            //            Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                            //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                            //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                            //        MtchInst3 = rgxNotInstitute.Match(Institute3);
                            //        mtchInstitute2 = re1.Match(Institute2);
                            //        mtchInstitute3 = re1.Match(Institute3);

                            //        if (rgxInstitute.IsMatch(Institute2))
                            //            FlagInstitute2 = "2";
                            //        if (rgxInstitute.IsMatch(Institute3))
                            //            FlagInstitute3 = "3";

                            //    }
                            //    if ((Institute2.IndexOf("%") < 0 && Institute2.Trim().Length > 4 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 80) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst1.Success == false) && FlagInstitute3 != "3" || FlagInstitute2 == "2" && FlagInstitute3 != "3")
                            //    {
                            //        try
                            //        {
                            //            Institute2 = opReplaceInstituteOne(Institute2);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute2 + ",";
                            //    }
                            //    else if ((Institute3.IndexOf("%") < 0 && Institute2.Trim().Length > 4 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst3.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                            //    {
                            //        try
                            //        {
                            //            Institute3 = opReplaceInstituteOne(Institute3);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute3 + ",";
                            //    }
                            //    else
                            //        eduInstitute += ",";
                            //}
                            //else
                            //{
                            //    eduInstitute += ",";
                            //}
                            #endregion

                            eduPosYear.Add(i);
                            return 0;
                        }
                    }
                }
                #endregion

                #region "year found Second"
                for (int i = pos; i >= 0 && bEducationYearStarting == true && FlgYrs == "0"; i++)
                {
                    if (EducationStr[i] == null) continue;
                    MatchCollection matches = ex.Matches(EducationStr[i].ToString());
                    Regex regYrs1 = new Regex("(\\d+){1,2}(\\s+)(years)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    Regex regYrs2 = new Regex("(\\d+){1,2}(\\s+)(year)", RegexOptions.IgnoreCase | RegexOptions.Singleline);

                    if (matches.Count == 0)
                        matches = regYrs1.Matches(EducationStr[i].ToString());
                    if (matches.Count == 0)
                        matches = regYrs2.Matches(EducationStr[i].ToString());
                    if (matches.Count == 0) continue;
                    try
                    {
                        if (matches.Count > 0 && pos + 2 <= i && regEducationText != null)
                            if (regEducationText.IsMatch(" " + EducationStr[i].ToString()) == true) continue; //|| regEducationText.IsMatch(EducationStr[i - 1].ToString()) == true
                        if (regNotEXPs.IsMatch(EducationStr[i].ToString()) == true) continue;
                    }
                    catch { }
                    foreach (Match m in matches)
                    {
                        string strTwo = "";
                        string MinYEar = "";
                        string str = m.Value.ToLower().Trim().Replace("to", "-").Replace("~", "-").Replace("`", "-").Replace("'", "-").Replace("’", "-").Replace(",", "").Replace("‘", "-").Replace("/", "-").Replace("‘", "");
                        string[] strSplit = null;
                        if (str.IndexOf("-") > 0 || str.IndexOf("–") > 0)
                        {
                            strSplit = str.Split('-', '–');
                            if (strSplit.Length > 1)
                                str = strSplit[strSplit.Length - 1];
                            if (strSplit.Length > 0)
                            {   //08/2007 – 06/2008
                                if (strSplit.Length == 4 && strSplit[0].Trim().Length == 2 && strSplit[1].Trim().Length == 4 && strSplit[2].Trim().Length == 2 && strSplit[3].Trim().Length == 4)
                                {
                                    strTwo = strSplit[1];
                                    MinYEar = strSplit[1];
                                }
                                else
                                {
                                    strTwo = strSplit[0];
                                    MinYEar = strSplit[0];
                                }
                                //strTwo = strSplit[0];
                                //MinYEar = strSplit[0];
                            }
                            else
                            {
                                string _sbMtchMonth = @"(jan |january|february|march|april|may |june|july|august|september|october|november|Ddecember|august|dec |jan |feb |mar |apr |may |jun |jul |aug |sep |oct |nov |dec |aprl|sept |octb|jan |feb |mar |apr |jun |jul |aug |sep |oct |nov |dec |febs|aprl)[s]?";
                                strSplit[0] = Regex.Replace(strSplit[0].ToString().ToLower(), _sbMtchMonth, "");
                                strTwo = strSplit[0];
                                strTwo = Regex.Replace(strTwo, _sbMtchMonth, "");
                                if (strSplit[0].Replace(" ", "").Length == 4)
                                    MinYEar = strSplit[0];
                                else
                                    MinYEar = "0";
                            }
                            if (strTwo.Trim().Length != 0 && strTwo.Trim().Length > 2)
                                strTwo = strTwo.Substring(0, 2);
                        }
                        for (int j = 65; j < 122; j++)
                        {
                            str = str.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                            strTwo = strTwo.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");
                            MinYEar = MinYEar.Replace(Convert.ToChar(j).ToString(), "").Replace(".", "").Replace(")", "").Replace("(", "");

                        }
                        if (str.Trim().Length == 0 | (eduPosYear.Count > 0 && opFindEducationYearExist(i) == true))
                        {
                            eduCompleteYear += ",";
                            eduDuration += ",";
                            eduStartYear += ",";
                            eduUniverSity += getEducationUniversity(pos, i) + ",";
                            getEducationSpecialization(pos, strRmLastDot);
                            eduSpecialization += ",";
                            eduSpecialization1 += ",";
                            // eduInstitute += ",";
                            try
                            {
                                getEducationInstitustion(pos, i);
                            }
                            catch
                            {
                                eduInstitute += ",";
                            }
                            eduGrade += getEducationGrade(pos, strRmLastDot) + ",";

                            return 0;
                        }
                        else
                        {
                            if (str.Trim().Length == 2)
                            {
                                strTwo = getYear(str);
                                str = strTwo.Trim() + str.Trim();
                            }
                            if (str.Trim().Length != 2)
                            {
                                int CurrentYear = System.DateTime.Now.Year;
                                if (Convert.ToInt32(str) > CurrentYear || Convert.ToInt32(str) < 10 | (CurrentYear - Convert.ToInt32(str)) < 0 || (CurrentYear - Convert.ToInt32(str)) > 75)
                                {
                                    eduCompleteYear += ",";
                                    eduDuration += ",";
                                    eduStartYear += ",";
                                    eduUniverSity += getEducationUniversity(pos, i) + ",";
                                    getEducationSpecialization(pos, strRmLastDot);
                                    eduSpecialization += ",";
                                    eduSpecialization1 += ",";
                                    getEducationInstitustion(pos, i);
                                    eduGrade += getEducationGrade(pos, strRmLastDot) + ",";

                                    return 0;
                                }
                            }
                            eduCompleteYear += str.Trim() + ",";
                            //eduDuration += ",";
                            eduStartYear += MinYEar.Trim() + ",";
                            eduUniverSity += getEducationUniversity(pos, i) + ",";

                            getEducationSpecialization(pos, strRmLastDot);
                            eduSpecialization += ",";
                            eduSpecialization1 += ",";
                            Match GrdMtch = null;
                            string GradCrnt = "";

                            try
                            {
                                if (bPrecentageInLast == true)
                                {
                                    for (int kGrd = pos; kGrd < EducationStr.Count; kGrd++)
                                    {
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                                        {
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                                            {
                                                GrdMtch = rgxgrd.Match(EducationStr[kGrd].ToString());
                                                GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                                if (GrdMtch.Success == true)
                                                {
                                                    eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                    break;
                                                }
                                                else
                                                {
                                                    GrdMtch = rgxgrd1.Match(EducationStr[kGrd].ToString());
                                                    GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                                }
                                                if (GrdMtch.Success == true)
                                                {
                                                    eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                    break;
                                                }
                                            }

                                        }
                                        else if (pos < kGrd && regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == true && regEducationText.Match(" " + EducationStr[kGrd].ToString()).ToString().Trim() != strRmLastDot.Trim()) //strRmLastDot
                                            break;
                                    }
                                }
                            }
                            catch
                            { }
                            if (bPrecentageInLast == false || GrdMtch.Success == false)
                            {
                                try
                                {
                                    // Added New Logic for Education Grade --- Saravana
                                    try
                                    {
                                        Boolean bGradeFlgPos = false;
                                        if ((i + 1) <= (EducationStr.Count - 1))
                                            for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                            {
                                                if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                                GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                                if (GrdMtch == null && GrdMtch.Success == false)
                                                    GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                                if (GrdMtch != null && GrdMtch.Success == true)
                                                {
                                                    bGradeFlgPos = true;
                                                    eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                    break;
                                                }
                                            }
                                        if ((i - 1) <= (EducationStr.Count - 1))
                                            if (GrdMtch == null || GrdMtch.Success == false)
                                                for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                                {
                                                    if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                                    GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                                    if (GrdMtch == null && GrdMtch.Success == false)
                                                        GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                                    if (GrdMtch != null && GrdMtch.Success == true)
                                                    {
                                                        bGradeFlgPos = true;
                                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                        break;
                                                    }
                                                }
                                        if (bGradeFlgPos == false)
                                            eduGrade += ",";
                                    }
                                    catch
                                    {
                                        eduGrade += ",";
                                    }


                                    #region "Code Commended for New Logic"

                                    //if ((i + 1) <= (EducationStr.Count - 1))
                                    //{
                                    //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                                    //    if (GrdMtch.Success == false)
                                    //    {
                                    //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                                    //        GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                                    //    }
                                    //    else
                                    //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");
                                    //    if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                                    //        GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                                    //    else
                                    //        GrdMtch2 = rgxgrd.Match("");

                                    //    if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                                    //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                                    //    else
                                    //        GrdMtch3 = rgxgrd.Match("");

                                    //    Grade5 = EducationStr[i + 1].ToString().Trim().Replace("Marks obtained:", "");
                                    //    Grade6 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");


                                    //    match2 = re1.Match(Grade5);

                                    //    if (GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                    //    {
                                    //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                    //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                    //        else if (GradCrnt.ToString().Length <= 3)
                                    //            eduGrade += GradCrnt + ",";
                                    //        else if (GradCrnt.ToString().Length <= 4)
                                    //            eduGrade += GradCrnt + ",";
                                    //        else if (GradCrnt.ToString().Length <= 5)
                                    //            eduGrade += GradCrnt + ",";
                                    //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                                    //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                                    //        else
                                    //            eduGrade += ",";
                                    //    }
                                    //    else
                                    //    {
                                    //        if (GrdMtch2.Success == true || Grade5.IndexOf("%") > 0 || rgxCgpa.IsMatch(Grade5.ToLower()) == true || (match2.Success == true && (Grade5.ToString().Length <= 3 || (Grade5.ToString().Length <= 5 && Grade5.IndexOf(".") > 0))) && Grade5.IndexOf("C.G.P.A") < 0 && Grade5.IndexOf("D.G.P.A") < 0 && GradCrnt.ToLower().IndexOf("cgpa") < 0)
                                    //        {
                                    //            if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade5.ToLower()) == true)
                                    //                eduGrade += opReplaceGrade(GrdMtch2.Value.ToString()) + ",";
                                    //            else if (Grade5.ToString().Length <= 3)
                                    //                eduGrade += Grade5 + ",";
                                    //            else if (Grade5.ToString().Length <= 4)
                                    //                eduGrade += Grade5 + ",";
                                    //            else if (Grade5.ToString().Length <= 5)
                                    //                eduGrade += Grade5 + ",";
                                    //            else if (Grade5.ToString().Length >= 6 && Grade5.Contains("%") == true)
                                    //                eduGrade += Grade5.Substring(Grade5.IndexOf("%") - 5) + ",";
                                    //            else
                                    //                eduGrade += ",";

                                    //        }
                                    //        else if (GrdMtch3.Success == true || Grade6.IndexOf("%") > 0 && rgxCgpa.IsMatch(Grade6.ToLower()) == true)
                                    //        {
                                    //            if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade6.ToLower()) == true)
                                    //                eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                                    //            else if (Grade6.ToString().Length <= 3)
                                    //                eduGrade += Grade6 + ",";
                                    //            else if (Grade6.ToString().Length <= 4)
                                    //                eduGrade += Grade6 + ",";
                                    //            else if (Grade6.ToString().Length <= 5)
                                    //                eduGrade += Grade6 + ",";
                                    //            else if (Grade6.ToString().Length >= 6 && Grade6.Contains("%") == true)
                                    //                eduGrade += Grade6.Substring(Grade6.IndexOf("%") - 5) + ",";
                                    //            else
                                    //                eduGrade += ",";

                                    //        }
                                    //        else
                                    //            eduGrade += ",";
                                    //    }
                                    //}
                                    //else if ((i - 1) <= (EducationStr.Count - 1))
                                    //{
                                    //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                                    //    if (GrdMtch.Success == false)
                                    //    {
                                    //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                                    //        GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                                    //    }
                                    //    else
                                    //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");
                                    //    //GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                                    //    GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());

                                    //    // Grade5 = EducationStr[i + 1].ToString().Trim().Replace("Marks obtained:", "");
                                    //    Grade6 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                                    //    GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                                    //    // match2 = re1.Match(Grade5);
                                    //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                    //    {
                                    //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                                    //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                    //        else if (GradCrnt.ToString().Length <= 3)
                                    //            eduGrade += GradCrnt + ",";
                                    //        else if (GradCrnt.ToString().Length <= 4)
                                    //            eduGrade += GradCrnt + ",";
                                    //        else if (GradCrnt.ToString().Length <= 5)
                                    //            eduGrade += GradCrnt + ",";
                                    //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                                    //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                                    //        else
                                    //            eduGrade += ",";
                                    //    }
                                    //    else if (GrdMtch3.Success == true || Grade6.IndexOf("%") > 0 || rgxCgpa.IsMatch(Grade6.ToLower()) == true && Grade6.IndexOf("D.G.P.A") < 0)
                                    //    {
                                    //        if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade6.ToLower()) == true)
                                    //            eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                                    //        else if (Grade6.ToString().Length <= 3)
                                    //            eduGrade += Grade6 + ",";

                                    //        else if (Grade6.ToString().Length <= 4)
                                    //            eduGrade += Grade6 + ",";
                                    //        else if (Grade6.ToString().Length <= 5)
                                    //            eduGrade += Grade6 + ",";
                                    //        else if (Grade6.ToString().Length >= 6 && Grade6.Contains("%") == true)
                                    //            eduGrade += Grade6.Substring(Grade6.IndexOf("%") - 5) + ",";

                                    //        else
                                    //            eduGrade += ",";

                                    //    }
                                    //    else
                                    //    {
                                    //        eduGrade += ",";
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    eduGrade += ",";
                                    //}
                                    #endregion
                                }
                                catch
                                {
                                    eduGrade += ",";
                                }
                            }
                            if (str.Length > 0 && MinYEar.Length > 0)
                            {
                                int tDuration = (Convert.ToInt16(str.Trim()) - Convert.ToInt16(MinYEar.Trim()));
                                eduDuration += tDuration.ToString() + ",";
                            }
                            else
                            {
                                eduDuration += ",";
                            }
                            //Education Institution returnSkill 
                            string Institute1 = "";

                            bool bInsFlag = false;
                            //Added  Education Institution Logic
                            try
                            {
                                if ((i + 1) <= (EducationStr.Count - 1) || pos < i)
                                {
                                    for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                    {
                                        Institute1 = "";
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos && EducationStr[kGrd1].ToString().IndexOf(strRmLastDot) < 0)
                                        {
                                            bInsFlag = true;
                                            eduInstitute += ",";
                                            break;
                                        }
                                        //Regex for Skipping Non Institution
                                        if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                        Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                        if (Institute1 != "")
                                            if (rgxInstitute.IsMatch(Institute1))
                                            {
                                                bInsFlag = true;
                                                eduInstitute += Institute1 + ",";
                                                break;
                                            }
                                    }
                                }
                                else if ((i - 1) <= (EducationStr.Count - 1))
                                {
                                    for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                    {
                                        Institute1 = "";
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos)
                                        {
                                            bInsFlag = true;
                                            eduInstitute += ",";
                                            break;
                                        }
                                        //Regex for Skipping Non Institution
                                        if (rgxNotInstitute.IsMatch(EducationStr[kGrd1].ToString())) continue;
                                        Institute1 = opReplaceInstitutions(EducationStr[kGrd1].ToString());
                                        if (Institute1 != "") //rgxInstitute.IsMatch(Institute1)
                                            if (rgxInstitute.IsMatch(Institute1))
                                            {
                                                bInsFlag = true;
                                                eduInstitute += Institute1 + ",";
                                                break;
                                            }
                                    }
                                }
                            }
                            catch
                            {
                                bInsFlag = true;
                                eduInstitute += ",";
                            }

                            if (bInsFlag == false)
                                eduInstitute += ",";

                            #region "Code Commended for institution "

                            //if ((i + 1) <= (EducationStr.Count - 1))
                            //{
                            //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == true)
                            //        Institute1 = "";
                            //    else if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //        Institute1 = opReplaceInstitutions(EducationStr[i + 1].ToString()).ToString().Trim();

                            //    if ((pos == i) && regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == true)
                            //        Institute2 = "";
                            //    else
                            //    {
                            //        if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //            Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString()).ToString().Trim();
                            //    }
                            //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString()).ToString().Trim();

                            //    if (rgxInstitute.IsMatch(Institute1) && rgxInstitute.IsMatch(EducationStr[pos].ToString()) == false)
                            //        FlagInstitute = "1";
                            //    if (rgxInstitute.IsMatch(Institute2))
                            //        FlagInstitute2 = "2";
                            //    if (rgxInstitute.IsMatch(Institute3))
                            //        FlagInstitute3 = "3";

                            //    MtchInst = rgxNotInstitute.Match(Institute1);
                            //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                            //    MtchInst3 = rgxNotInstitute.Match(Institute3);

                            //    mtchInstitute1 = re1.Match(Institute1);
                            //    mtchInstitute2 = re1.Match(Institute2);
                            //    mtchInstitute3 = re1.Match(Institute3);

                            //    if (FlagInstitute == "0" && FlagInstitute2 == "0" && FlagInstitute3 == "0")
                            //    {
                            //        if ((pos + 1) <= EducationStr.Count)
                            //        {
                            //            if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                            //                Institute1 = opReplaceInstitutions(EducationStr[pos + 1].ToString());
                            //            if (regEducationText.IsMatch(" " + EducationStr[pos - 1].ToString()) == false)
                            //                Institute2 = opReplaceInstitutions(EducationStr[pos - 1].ToString());
                            //        }
                            //        Institute3 = opReplaceInstitutions(EducationStr[pos].ToString());

                            //        MtchInst = rgxNotInstitute.Match(Institute1);
                            //        MtchInst1 = rgxNotInstitute.Match(Institute2);
                            //        MtchInst3 = rgxNotInstitute.Match(Institute3);

                            //        if (rgxInstitute.IsMatch(Institute1))
                            //            FlagInstitute = "1";
                            //        if (rgxInstitute.IsMatch(Institute2))
                            //            FlagInstitute2 = "2";
                            //        if (rgxInstitute.IsMatch(Institute3))
                            //            FlagInstitute3 = "3";

                            //        mtchInstitute1 = re1.Match(Institute1);
                            //        mtchInstitute2 = re1.Match(Institute2);
                            //        mtchInstitute3 = re1.Match(Institute3);

                            //    }


                            //    if (((Institute1.IndexOf("%") < 0 && rgxUniversity.IsMatch(Institute3) != true && (mtchInstitute1.Success == false && (Institute1.ToString().Length <= 120) && isNumberExists2(Institute1.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst.Success == false) && FlagInstitute2 != "2" && FlagInstitute3 != "3") || (FlagInstitute == "1" && isNumberExists2(Institute1.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true && FlagInstitute3 != "3") == true && rgxUniversity.IsMatch(Institute3) != true)
                            //    {
                            //        try
                            //        {
                            //            Institute1 = opReplaceInstituteOne(Institute1);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute1 + ",";
                            //    }
                            //    else if ((Institute2.IndexOf("%") < 0 && rgxUniversity.IsMatch(Institute2) == false && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 120) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst1.Success == false) && FlagInstitute3 != "3" || (FlagInstitute2 == "2" && Institute2.ToString().Length <= 80 && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false && FlagInstitute3 != "3"))
                            //    {
                            //        try
                            //        {
                            //            Institute2 = opReplaceInstituteOne(Institute2);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute2 + ",";
                            //    }
                            //    else if ((Institute3.IndexOf("%") < 0 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst3.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                            //    {
                            //        try
                            //        {
                            //            Institute3 = opReplaceInstituteOne(Institute3);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute3 + ",";
                            //    }
                            //    else
                            //        eduInstitute += ",";

                            //}

                            //else if ((i - 1) <= (EducationStr.Count - 1))
                            //{
                            //    Institute2 = opReplaceInstitutions(EducationStr[i - 1].ToString());
                            //    Institute3 = opReplaceInstitutions(EducationStr[i].ToString());
                            //    MtchInst1 = rgxNotInstitute.Match(Institute2);
                            //    MtchInst3 = rgxNotInstitute.Match(Institute3);
                            //    mtchInstitute2 = re1.Match(Institute2);
                            //    mtchInstitute3 = re1.Match(Institute3);
                            //    if (rgxInstitute.IsMatch(Institute2))
                            //        FlagInstitute2 = "2";
                            //    if (rgxInstitute.IsMatch(Institute3))
                            //        FlagInstitute3 = "3";

                            //    if ((Institute2.IndexOf("%") < 0 && Institute2.Trim().Length > 4 && (mtchInstitute2.Success == false && (Institute2.ToString().Length <= 80) && isNumberExists2(Institute2.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst1.Success == false) && FlagInstitute3 != "3" || FlagInstitute2 == "2")
                            //    {
                            //        try
                            //        {

                            //            Institute2 = opReplaceInstituteOne(Institute2);

                            //        }
                            //        catch { }
                            //        eduInstitute += Institute2 + ",";
                            //    }
                            //    else if ((Institute3.IndexOf("%") < 0 && Institute3.Trim().Length > 4 && (mtchInstitute3.Success == false && (Institute3.ToString().Length <= 80) && isNumberExists2(Institute3.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == true) && MtchInst3.Success == false) && FlagInstitute3 == "3" || (FlagInstitute3 == "3" && Institute2.ToString().Length <= 120))
                            //    {
                            //        try
                            //        {
                            //            Institute2 = opReplaceInstituteOne(Institute2);
                            //        }
                            //        catch { }
                            //        eduInstitute += Institute3 + ",";
                            //    }
                            //    else
                            //        eduInstitute += ",";
                            //}
                            //else
                            //{
                            //    eduInstitute += ",";
                            //}
                            #endregion

                            eduPosYear.Add(i);
                            return 0;
                        }
                    }
                }
                #endregion
            }
            catch { }

            #region "Grade One"

            try
            {

                for (int i = pos; i < EducationStr.Count && bEducationYearNormal == true; i++)
                {
                    eduDuration += ",";
                    eduStartYear += ",";
                    eduUniverSity += getEducationUniversity(pos, i) + ",";
                    getEducationSpecialization(pos, strRmLastDot);
                    eduSpecialization += ",";
                    eduSpecialization1 += ",";
                    eduCompleteYear += ",";
                    //eduInstitute += ",";
                    try
                    {
                        getEducationInstitustion(pos, i);
                    }
                    catch
                    {
                        eduInstitute += ",";
                    }

                    //eduStartYear += MinYEar.Trim() + ",";
                    //Education Grade
                    Match GrdMtch = null;
                    string GradCrnt = "";
                    try
                    {
                        if (bPrecentageInLast == true)
                        {
                            for (int kGrd = pos; kGrd < EducationStr.Count; kGrd++)
                            {
                                if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                                {
                                    GrdMtch = rgxgrd.Match(EducationStr[kGrd].ToString());
                                    GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                    if (GrdMtch.Success == true)
                                    {
                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                        break;
                                    }
                                    else
                                    {
                                        GrdMtch = rgxgrd5.Match(EducationStr[kGrd].ToString());
                                        GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                    }
                                    if (GrdMtch.Success == true)
                                    {
                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                        break;
                                    }
                                }
                                else if (pos < kGrd && regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == true && regEducationText.Match(" " + EducationStr[kGrd].ToString()).ToString().Trim() != strRmLastDot.Trim()) //strRmLastDot
                                    break;
                            }
                        }
                    }
                    catch
                    { }
                    if (bPrecentageInLast == false || GrdMtch.Success == false)
                    {
                        try
                        {
                            //Added New Logic for Education Grade --- Saravana
                            try
                            {
                                Boolean bGradeFlgPos = false;
                                if ((i + 1) <= (EducationStr.Count - 1))
                                    for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                    {
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                        GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                        if (GrdMtch == null && GrdMtch.Success == false)
                                            GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                        if (GrdMtch != null && GrdMtch.Success == true)
                                        {
                                            bGradeFlgPos = true;
                                            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                            break;
                                        }
                                    }
                                if ((i - 1) <= (EducationStr.Count - 1))
                                    if (GrdMtch == null || GrdMtch.Success == false)
                                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                        {
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                            GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                            if (GrdMtch == null && GrdMtch.Success == false)
                                                GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                            if (GrdMtch != null && GrdMtch.Success == true)
                                            {
                                                bGradeFlgPos = true;
                                                eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                break;
                                            }
                                        }
                                if (bGradeFlgPos == false)
                                    eduGrade += ",";
                            }
                            catch
                            {
                                eduGrade += ",";
                            }


                            #region "Code Commended for New Logic"

                            //if ((i + 1) <= (EducationStr.Count - 1))
                            //{
                            //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //    if (GrdMtch.Success == false)
                            //    {
                            //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                            //        GradCrnt = EducationStr[i].ToString().Trim();
                            //    }
                            //    else
                            //        GradCrnt = EducationStr[pos].ToString().Trim();
                            //    if (i == pos && regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //    {
                            //        GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                            //        Grade1 = EducationStr[i + 1].ToString().Trim();
                            //    }
                            //    else if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //    {
                            //        GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                            //        Grade1 = EducationStr[i + 1].ToString().Trim();
                            //    }
                            //    if (i == pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim();
                            //    }
                            //    else if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim();
                            //    }
                            //    try
                            //    {
                            //        if (GrdMtch2.Success == true && regEducationText != null)
                            //            if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == true && regEducationText.Match(" " + EducationStr[i + 1].ToString()).ToString().Trim() != strRmLastDot)
                            //                GrdMtch2 = rgxgrd.Match(EducationStr[i].ToString());
                            //    }
                            //    catch { }

                            //    if ((pos + 2) <= (EducationStr.Count - 1))
                            //    {
                            //        if (!GrdMtch.Success && !GrdMtch2.Success && !GrdMtch3.Success)
                            //        {
                            //            GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //            if (regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false)
                            //                GrdMtch2 = rgxgrd.Match(EducationStr[pos + 2].ToString());
                            //            else
                            //                GrdMtch2 = rgxgrd.Match("");

                            //            if (GrdMtch2.Success == true && regEducationText != null)
                            //                if (regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false)
                            //                {
                            //                    GradCrnt = EducationStr[pos].ToString().Trim();
                            //                    Grade1 = EducationStr[pos + 2].ToString().Trim();
                            //                }


                            //            if (GrdMtch2.Success == false)
                            //                if ((pos + 3) <= EducationStr.Count && regEducationText.IsMatch(" " + EducationStr[pos + 2].ToString()) == true && regEducationText.IsMatch(" " + EducationStr[pos + 1].ToString()) == false && regEducationText.IsMatch(" " + EducationStr[pos + 3].ToString()) == false)
                            //                    GrdMtch2 = rgxgrd1.Match(EducationStr[i + 3].ToString());
                            //                else
                            //                    GrdMtch2 = rgxgrd1.Match("");
                            //            if (GrdMtch2.Success == true && GrdMtch2.Value.ToString().Contains("/") == false && GrdMtch2.Value.ToString().Contains("%") == false)
                            //                if (Convert.ToDecimal(GrdMtch2.Value.ToString()) < 50 && rgxCgpa.IsMatch(EducationStr[i + 3].ToString().ToLower()) == false)
                            //                    GrdMtch2 = rgxgrd1.Match("");
                            //                else
                            //                    Grade1 = EducationStr[i + 3].ToString().Trim();
                            //        }

                            //    }

                            //    match1 = re1.Match(Grade1);
                            //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //    {
                            //        if (GrdMtch.Success == true)
                            //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                            //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                            //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //    else
                            //    {
                            //        if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade1.ToLower()) == true || Grade1.IndexOf("%") > 0 || (match1.Success == true && (Grade1.ToString().Length <= 3 || (Grade1.ToString().Length <= 5 && Grade1.IndexOf(".") > 0)) && isNumberExists2(Grade1.ToString().Replace(":", "").Replace("–", "").Replace("(", "").Replace(")", "").Replace(",", "").Trim().ToCharArray()) == false) && Grade1.IndexOf("D.G.P.A") < 0)
                            //        {
                            //            if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade1.ToLower()) == true)
                            //                eduGrade += opReplaceGrade(GrdMtch2.Value.ToString()) + ",";
                            //            else if (Grade1.ToString().Length >= 6 && Grade1.Contains("%") == true)
                            //                eduGrade += Grade1.Substring(Grade1.IndexOf("%") - 5) + ",";
                            //            else
                            //                eduGrade += ",";
                            //        }
                            //        else if (GrdMtch3.Success == true || Grade2.IndexOf("%") > 0 && rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //        {
                            //            if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //                eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";

                            //            else if (Grade2.ToString().Length >= 6 && Grade2.Contains("%") == true)
                            //                eduGrade += Grade2.Substring(Grade2.IndexOf("%") - 5) + ",";
                            //            else
                            //                eduGrade += ",";
                            //        }
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //}
                            //else if ((i - 1) <= (EducationStr.Count - 1))
                            //{
                            //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //    if (GrdMtch.Success == false)
                            //    {
                            //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                            //        GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    else
                            //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");

                            //    if (i == pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    else
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }

                            //    match1 = re1.Match(Grade1);
                            //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //    {
                            //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";

                            //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                            //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //    else if (GrdMtch3.Success == true || Grade2.IndexOf("%") > 0 && Grade2.IndexOf("D.G.P.A") < 0 || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //    {
                            //        if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //            eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                            //        else if (Grade2.ToString().Length >= 6 && Grade2.Contains("%") == true)
                            //            eduGrade += Grade2.Substring(Grade2.IndexOf("%") - 5) + ",";
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //    else
                            //    {
                            //        eduGrade += ",";
                            //        return 0;
                            //    }

                            //}
                            //else
                            //{
                            //    eduGrade += ",";
                            //    return 0;
                            //}

                            #endregion
                            return 0;
                        }
                        catch
                        {
                            eduGrade += ",";
                            return 0;
                        }
                    }
                    else
                        return 0; //Return for Grade got from Tabular Formate In Resume 

                }

            }
            catch
            {
                eduGrade += ",";

            }
            #endregion

            #region "Grade Two"
            try
            {
                for (int i = pos; i >= 0 && bEducationYearStarting == true && FlgYrs == "1"; i--)
                {
                    eduDuration += ",";
                    eduStartYear += ",";
                    eduUniverSity += getEducationUniversity(pos, i) + ",";
                    getEducationSpecialization(pos, strRmLastDot);
                    eduSpecialization += ",";
                    eduSpecialization1 += ",";
                    eduCompleteYear += ",";
                    //eduInstitute += ",";
                    getEducationInstitustion(pos, i);

                    eduGrade += getEducationGrade(pos, strRmLastDot) + ",";
                    return 0;

                }
            }
            catch { }
            #endregion

            #region Grade Three
            try
            {
                for (int i = pos; i >= 0 && (bEducationYearStarting == true && FlgYrs == "0"); i++)
                {
                    eduDuration += ",";
                    eduStartYear += ",";
                    eduUniverSity += getEducationUniversity(pos, i) + ",";
                    getEducationSpecialization(pos, strRmLastDot);
                    eduSpecialization += ",";
                    eduSpecialization1 += ",";
                    eduCompleteYear += ",";
                    getEducationInstitustion(pos, i);
                    Match GrdMtch = null;
                    string GradCrnt = "";

                    try
                    {
                        if (bPrecentageInLast == true)
                        {
                            for (int kGrd = pos; kGrd < EducationStr.Count; kGrd++)
                            {
                                if (regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == false || kGrd == pos)
                                {

                                    GrdMtch = rgxgrd.Match(EducationStr[kGrd].ToString());
                                    GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");

                                    if (GrdMtch.Success == true)
                                    {
                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                        break;
                                    }
                                    else
                                    {
                                        GrdMtch = rgxgrd1.Match(EducationStr[kGrd].ToString());
                                        GradCrnt = EducationStr[kGrd].ToString().Trim().Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "");
                                    }
                                    if (GrdMtch.Success == true)
                                    {
                                        eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                        break;
                                    }
                                }
                                else if (pos < kGrd && regEducationText.IsMatch(" " + EducationStr[kGrd].ToString()) == true && regEducationText.Match(" " + EducationStr[kGrd].ToString()).ToString().Trim() != strRmLastDot.Trim()) //strRmLastDot
                                    break;
                            }
                        }
                    }
                    catch
                    { }
                    if (bPrecentageInLast == false || GrdMtch.Success == false)
                    {
                        try
                        {
                            // Added New Logic for Education Grade --- Saravana
                            try
                            {
                                Boolean bGradeFlgPos = false;
                                if ((i + 1) <= (EducationStr.Count - 1))
                                    for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1++)
                                    {
                                        if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                        GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                        if (GrdMtch == null && GrdMtch.Success == false)
                                            GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                        if (GrdMtch != null && GrdMtch.Success == true)
                                        {
                                            bGradeFlgPos = true;
                                            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                            break;
                                        }
                                    }
                                if ((i - 1) <= (EducationStr.Count - 1))
                                    if (GrdMtch == null || GrdMtch.Success == false)
                                        for (int kGrd1 = pos; kGrd1 > 0 && kGrd1 < EducationStr.Count; kGrd1--)
                                        {
                                            if (regEducationText.IsMatch(" " + EducationStr[kGrd1].ToString()) && kGrd1 != pos) break;
                                            GrdMtch = rgxgrd.Match(EducationStr[kGrd1].ToString());
                                            if (GrdMtch == null && GrdMtch.Success == false)
                                                GrdMtch = rgxgrd1.Match(EducationStr[kGrd1].ToString());
                                            if (GrdMtch != null && GrdMtch.Success == true)
                                            {
                                                bGradeFlgPos = true;
                                                eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                                                break;
                                            }
                                        }
                                if (bGradeFlgPos == false)
                                    eduGrade += ",";
                            }
                            catch
                            {
                                eduGrade += ",";
                            }

                            #region "Code Commended for New Logic"

                            //if ((i + 1) <= (EducationStr.Count - 1))
                            //{
                            //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //    if (GrdMtch.Success == false)
                            //    {
                            //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                            //        GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    else
                            //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");

                            //    if (i == pos && regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //    {
                            //        GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                            //        Grade1 = EducationStr[i + 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    else if (regEducationText.IsMatch(" " + EducationStr[i + 1].ToString()) == false)
                            //    {
                            //        GrdMtch2 = rgxgrd.Match(EducationStr[i + 1].ToString());
                            //        Grade1 = EducationStr[i + 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    if (i == pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    else if (regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }

                            //    match1 = re1.Match(Grade1);
                            //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //    {
                            //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                            //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                            //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //    else
                            //    {
                            //        if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade1.ToLower()) == true || Grade1.IndexOf("%") > 0 || (match1.Success == true && (Grade1.ToString().Length <= 3 || (Grade1.ToString().Length <= 5 && Grade1.IndexOf(".") > 0)) && CheckNumeric(Grade1.ToString().Trim().ToCharArray(), "CTC") == false) && Grade1.IndexOf("D.G.P.A") < 0)
                            //        {
                            //            if (GrdMtch2.Success == true || rgxCgpa.IsMatch(Grade1.ToLower()) == true)
                            //                eduGrade += opReplaceGrade(GrdMtch2.Value.ToString()) + ",";
                            //            else if (Grade1.ToString().Length >= 6 && Grade1.Contains("%") == true)
                            //                eduGrade += Grade1.Substring(Grade1.IndexOf("%") - 5) + ",";
                            //            else
                            //                eduGrade += ",";
                            //        }
                            //        else if (GrdMtch3.Success == true || Grade2.IndexOf("%") > 0 && Grade2.IndexOf("D.G.P.A") < 0 || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //        {
                            //            if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //                eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                            //            else if (Grade2.ToString().Length >= 6 && Grade2.Contains("%") == true)
                            //                eduGrade += Grade2.Substring(Grade2.IndexOf("%") - 5) + ",";
                            //            else
                            //                eduGrade += ",";
                            //        }
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //}
                            //else if ((i - 1) <= (EducationStr.Count - 1))
                            //{
                            //    GrdMtch = rgxgrd.Match(EducationStr[pos].ToString());
                            //    if (GrdMtch.Success == false)
                            //    {
                            //        GrdMtch = rgxgrd.Match(EducationStr[i].ToString());
                            //        GradCrnt = EducationStr[i].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    else
                            //        GradCrnt = EducationStr[pos].ToString().Trim().Replace("Marks obtained:", "");
                            //    if (i == pos && regEducationText.IsMatch(" " + EducationStr[i - 1].ToString()) == false)
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    else
                            //    {
                            //        GrdMtch3 = rgxgrd.Match(EducationStr[i - 1].ToString());
                            //        Grade2 = EducationStr[i - 1].ToString().Trim().Replace("Marks obtained:", "");
                            //    }
                            //    match1 = re1.Match(Grade1);
                            //    if (GrdMtch.Success == true || GradCrnt.IndexOf("%") > 0 || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //    {
                            //        if (GrdMtch.Success == true || rgxCgpa.IsMatch(GradCrnt.ToLower()) == true)
                            //            eduGrade += opReplaceGrade(GrdMtch.Value.ToString()) + ",";
                            //        else if (GradCrnt.ToString().Length >= 6 && GradCrnt.Contains("%") == true)
                            //            eduGrade += GradCrnt.Substring(GradCrnt.IndexOf("%") - 5).Remove((GradCrnt.IndexOf("%") - 5)) + ",";
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //    else if (GrdMtch3.Success == true || Grade2.IndexOf("%") > 0 && Grade2.IndexOf("D.G.P.A") < 0 || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //    {
                            //        if (GrdMtch3.Success == true || rgxCgpa.IsMatch(Grade2.ToLower()) == true)
                            //            eduGrade += opReplaceGrade(GrdMtch3.Value.ToString()) + ",";
                            //        else if (Grade2.ToString().Length >= 6 && Grade2.Contains("%") == true)
                            //            eduGrade += Grade2.Substring(Grade2.IndexOf("%") - 5) + ",";
                            //        else
                            //            eduGrade += ",";
                            //    }
                            //    else
                            //    {
                            //        eduGrade += ",";
                            //        return 0;
                            //    }

                            //}
                            //else
                            //{
                            //    eduGrade += ",";
                            //    return 0;
                            //}
                            #endregion

                            return 0;
                        }
                        catch
                        {
                            eduGrade += ",";
                            return 0;
                        }
                    }
                    return 0;
                }
            }

            catch { }
            #endregion

            return 1;
        }

        public string opReplaceInstitutions(string tInstitution)
        {
            string RepInstitution = "";
            try
            {
                string _sbMtchMonth = "";
                _sbMtchMonth = @"(Jan |January|February|March|April|May |June|July|August|September|October|November|December|Dec |jan |feb |mar |apr |may |jun |jul |aug |sep |oct |nov |dec |febs|aprl|Sept |Octb|Jan |Feb |Mar |Apr |Jun |Jul |Aug |Sep |Oct |Nov |Dec |Febs|Aprl|Qualification)[s]?";
                //RepInstitution = regEducationText.Replace(RepInstitution ,

                RepInstitution = tInstitution.ToString();
                string tmtch = regEducationText.Matches(" " + RepInstitution).ToString();

                MatchCollection Mtch = regEducationText.Matches(" " + RepInstitution);
                try
                {
                    foreach (Match M in Mtch)
                    {
                        if (M.Value.ToString().Trim() != "" && M.Value.ToString().Trim().Replace(".", "").Length > 2)
                            RepInstitution = Regex.Replace(RepInstitution.Trim(), M.Value.ToString().Trim().Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+"), "");
                    }
                }
                catch { }

                if (tmtch.Trim() != "")
                    RepInstitution = Regex.Replace(RepInstitution.Trim(), tmtch.Trim(), "");
                if (RepInstitution.ToLower().StartsWith("in "))
                    RepInstitution = RepInstitution.Remove(0, 2);

                RepInstitution = RepInstitution.ToString().ToLower().Trim().Replace(",", "").Replace("name of institution", "").Replace("'", "").Replace("/", "").Replace("with", "").Replace("1st", "").Replace("division", "").Replace("b.tech", "").Replace("academic qualifications", "").Replace("academia", "").Replace("with", "").Replace("marks", "").Replace("mark ", "").Replace("secured", "").Replace("dgpa", "").Replace("cgpa", "").Replace("selected", "").Replace("master", "").Replace("of arts", "").Replace("bachelor", "").Replace("courses", "").Replace("      ", " ").Replace("-", "").Replace("/", "").Replace("  ", " ").Replace("+", "").Replace("first", "").Replace("class", "").Replace("distinction", "").Replace("distinctio", "").Replace("department of", "").Replace("–", "").Replace("gpa", "").Replace("cgpa", "").Replace("g.p.a", "").Replace("c.g.p.a", "").Replace("certificate", "").Replace("year", "").Replace(" of ", " ").Replace("passed", "").Replace("out", "").Replace("1", "").Replace("dept.", "").Replace("Rank(College)", "").Replace("pursuing", "").Replace("&amp;", "").Replace("finance & marketing", "").Replace("&", "");
                Regex rgxInstitute = new Regex(@"University College|college|COLLAGE|COLLEGE|VIDYALAYA|SCHOOL|School|Polytechnic|Polytech|Institution|Institute|Institute of Technology|Board of|Education Board|Matriculation|Vidya Mandir", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                RepInstitution = Regex.Replace(RepInstitution, @"\d", "");
                RepInstitution = Regex.Replace(RepInstitution, _sbMtchMonth, "");
                Regex rgxUniversity = new Regex(@"UNIVERSITY|università|universiteit|university", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                if (rgxUniversity.IsMatch(RepInstitution) == true && rgxInstitute.IsMatch(RepInstitution) == false)
                {
                    RepInstitution = RepInstitution.Replace(RepInstitution, "");
                    return "";
                }
                try
                {


                    if (RepInstitution.ToString().StartsWith("institute:") && (RepInstitution.IndexOf(rgxUniversity.Match(RepInstitution.Replace("institute:", "")).ToString()) < RepInstitution.IndexOf(rgxInstitute.Match(RepInstitution.Replace("institute:", "")).ToString())))
                        RepInstitution = RepInstitution.ToString().Replace("institute:", "");

                    if (rgxUniversity.IsMatch(RepInstitution) == true && rgxInstitute.IsMatch(RepInstitution) == true)
                        if (RepInstitution.IndexOf(rgxUniversity.Match(RepInstitution).ToString()) > RepInstitution.IndexOf(rgxInstitute.Match(RepInstitution).ToString()))
                            RepInstitution = RepInstitution.Remove(RepInstitution.ToString().IndexOf(rgxInstitute.Match(RepInstitution).ToString()) + rgxInstitute.Match(RepInstitution).ToString().Trim().Length, RepInstitution.Length - (RepInstitution.ToString().IndexOf(rgxInstitute.Match(RepInstitution).ToString()) + rgxInstitute.Match(RepInstitution).ToString().Trim().Length));
                        else
                        { // If Insttiute regex Match Multiple time
                            if (RepInstitution.ToString().StartsWith("institute:") && (RepInstitution.IndexOf(rgxUniversity.Match(RepInstitution.Replace("institute:", "")).ToString()) < RepInstitution.IndexOf(rgxInstitute.Match(RepInstitution.Replace("institute:", "")).ToString())))
                            {
                                RepInstitution = RepInstitution.ToString().Replace("institute:", "");
                                RepInstitution = RepInstitution.Remove(0, RepInstitution.Trim().Length - (RepInstitution.ToString().Trim().IndexOf(rgxUniversity.Match(RepInstitution).ToString().Trim()) - 2));
                            }
                            else
                            {
                                try
                                {
                                    RepInstitution = RepInstitution.Remove(0, (RepInstitution.ToString().IndexOf(rgxUniversity.Match(RepInstitution).ToString()) + rgxUniversity.Match(RepInstitution).ToString().Length + 1));
                                    //  RepInstitution = RepInstitution.Remove(0, RepInstitution.Length - (RepInstitution.ToString().IndexOf(rgxUniversity.Match(RepInstitution).ToString()) -2 ));
                                }
                                catch
                                {
                                    RepInstitution = RepInstitution.Remove(0, RepInstitution.Length - (RepInstitution.ToString().IndexOf(rgxUniversity.Match(RepInstitution).ToString()) - 2));
                                }
                            }

                        }

                }
                catch { }

                if (rgxInstitute.IsMatch(RepInstitution) == false)
                {
                    RepInstitution = RepInstitution.Replace(RepInstitution, "");
                    return "";
                }
                if (RepInstitution.ToString().ToLower().IndexOf(" from ") >= 0)
                    if (RepInstitution.ToString().Length > 4)
                        RepInstitution = RepInstitution.Remove(0, RepInstitution.ToString().ToLower().IndexOf("from") + 4);

                if (RepInstitution.ToString().ToLower().IndexOf(" in ") >= 0 && RepInstitution.ToString().ToLower().IndexOf(rgxInstitute.Match(RepInstitution).ToString().ToLower()) > RepInstitution.ToString().ToLower().IndexOf(" in "))
                {
                    if (RepInstitution.ToString().Length > 4)
                        RepInstitution = RepInstitution.Remove(0, RepInstitution.ToString().ToLower().IndexOf(" in ") + 4);
                }
                else if (RepInstitution.ToLower().Contains("university") == true && rgxInstitute.IsMatch(RepInstitution) == false)
                    RepInstitution = RepInstitution.Replace(RepInstitution, "");
                else
                    RepInstitution = RepInstitution.Replace(" in ", "");

                if (RepInstitution.ToString().ToLower().Trim().Replace("(", "").Replace(")", "").Replace("   ", "") == "school")
                    RepInstitution = RepInstitution.Replace(RepInstitution, "");

                if (RepInstitution.ToString().ToLower().IndexOf(" an ") >= 0)
                    RepInstitution = RepInstitution.Remove(RepInstitution.ToString().ToLower().IndexOf(" an "), (RepInstitution.ToString().Length - RepInstitution.ToString().ToLower().IndexOf(" an ")));

                if (RepInstitution.ToString().ToLower().IndexOf("):") >= 0)
                    RepInstitution = RepInstitution.Remove(0, RepInstitution.ToString().ToLower().IndexOf("):") + 2);

                if (RepInstitution.ToString().ToLower().IndexOf(":") >= 0 && 10 < RepInstitution.Length - RepInstitution.ToString().ToLower().IndexOf(":"))
                    if (RepInstitution.ToString().ToLower().IndexOf(":") < RepInstitution.ToString().ToLower().IndexOf("college"))
                        RepInstitution = RepInstitution.Remove(0, RepInstitution.ToString().ToLower().IndexOf(":") + 1);

                if (RepInstitution.ToString().ToLower().IndexOf("%") >= 0 && RepInstitution.Length > 5)
                    RepInstitution = RepInstitution.Remove(RepInstitution.ToString().ToLower().IndexOf("%") - 3, ((RepInstitution.ToString().ToLower().IndexOf("%") + 1) - (RepInstitution.ToString().ToLower().IndexOf("%") - 3)));

                try
                {
                    if (RepInstitution.ToString().ToLower().StartsWith("th ") && RepInstitution.ToString().Length > 3)
                        RepInstitution = RepInstitution.Remove(0, (RepInstitution.ToString().ToLower().IndexOf("th ") + 3));
                }
                catch { }

                try
                {
                    if (RepInstitution.ToString().ToLower().IndexOf(" at ") >= 0 && RepInstitution.ToString().Length > 3)
                        RepInstitution = RepInstitution.Remove(0, (RepInstitution.ToString().ToLower().IndexOf(" at ") + 3));
                }
                catch { }
                try
                {
                    //institute technology
                    if (RepInstitution.ToString().ToLower().StartsWith("institute technology") == true)
                        RepInstitution = RepInstitution.Remove(0, RepInstitution.Length);
                }
                catch { }

                //EduSpeFinal Replace
                if (EduSpeFinal != "")
                {
                    try
                    {
                        if (EduSpeFinal.IndexOf(",") >= 0)
                        {
                            string[] Chr = null;
                            Chr = EduSpeFinal.Split(',');
                            for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                RepInstitution = RepInstitution.Replace(Chr[i].ToLower(), "");
                        }
                        else
                        {
                            RepInstitution = RepInstitution.Replace(EduSpeFinal.ToLower(), "");
                        }
                    }
                    catch { }
                }
            }
            catch { }

            try
            {
                if (RepInstitution.ToString().ToLower().EndsWith(" of") && RepInstitution.ToString().Length > 10)
                    RepInstitution = RepInstitution.Remove(RepInstitution.ToString().ToLower().IndexOf(" of"), RepInstitution.Length - RepInstitution.ToString().ToLower().IndexOf(" of"));
            }
            catch
            { }

            return RepInstitution.ToLower().Replace(":", "").Replace("(", "").Replace(")", "").Replace("[", " ").Replace("]", " ").Replace("aggregate", "").Replace("%", "").Replace(".", " ").Replace("from", "").Replace("⋄", "").Trim();

        }

        public string opReplaceInstituteOne(string tInstitution)
        {
            try
            {
                //Replace University And College strings  HIGH SCHOOL
                if (tInstitution.ToString().ToLower().IndexOf("university") >= 0 && tInstitution.ToString().ToLower().IndexOf("college") >= 0)
                {
                    if (tInstitution.ToString().ToLower().IndexOf("college") < tInstitution.ToString().ToLower().IndexOf("university"))
                    {
                        if (tInstitution.ToString().Length > 10)
                            tInstitution = tInstitution.Remove(tInstitution.ToString().ToLower().IndexOf("university"), tInstitution.Length - tInstitution.ToString().ToLower().IndexOf("university"));
                    }
                    else if (tInstitution.ToString().ToLower().IndexOf("college") > tInstitution.ToString().ToLower().IndexOf("university"))
                    {
                        if (tInstitution.ToString().Length > 10)
                            tInstitution = tInstitution.Remove(0, tInstitution.ToString().ToLower().IndexOf("university") + 10);
                    }

                }
                else if (tInstitution.ToString().ToLower().IndexOf("university") >= 0 && tInstitution.ToString().ToLower().IndexOf("college") < 0 && tInstitution.ToString().ToLower().IndexOf("institute") < 0)
                {
                    if (tInstitution.ToString().Length > 10)
                        tInstitution = tInstitution.Remove(0, tInstitution.Length);
                }
                else if (tInstitution.ToString().ToLower().IndexOf("university") >= 0 && tInstitution.ToString().ToLower().IndexOf("college") < 0)
                {
                    if (tInstitution.ToString().Length > 10)
                        tInstitution = tInstitution.Remove(tInstitution.ToString().ToLower().IndexOf("university"), tInstitution.Length - tInstitution.ToString().ToLower().IndexOf("university"));
                }

                if (tInstitution.ToString().ToLower().IndexOf("college") >= 0)
                {
                    if (tInstitution.ToString().Length > 10)
                        tInstitution = tInstitution.Remove((tInstitution.ToString().ToLower().IndexOf("college") + 7), tInstitution.Length - (tInstitution.ToString().ToLower().IndexOf("college") + 7)).Trim();
                    if (tInstitution.ToString().Length < 8 && tInstitution.ToString().ToLower().IndexOf("college") >= 0)
                        tInstitution = tInstitution.Replace(tInstitution, "");
                }

                if (tInstitution.ToString().ToLower().IndexOf("school") >= 0)
                {
                    if (tInstitution.ToString().Length > 10)
                        tInstitution = tInstitution.Remove((tInstitution.ToString().ToLower().IndexOf("school") + 6), tInstitution.Length - (tInstitution.ToString().ToLower().IndexOf("school") + 6)).Trim();
                    if (tInstitution.ToString().Length < 8 && tInstitution.ToString().ToLower().IndexOf("school") >= 0)
                        tInstitution = tInstitution.Replace(tInstitution, "");
                }
                if (tInstitution.ToString().ToLower().IndexOf("advisors") >= 0) //institute technology
                    tInstitution = tInstitution.Replace(tInstitution, "");

            }
            catch { }

            return tInstitution.ToUpper().Replace(":", "").Replace("(", "").Replace(")", "").Replace("[", "").Replace("]", "").Trim();
        }

        /// <summary>
        /// Get the year 
        /// if you wrote 97 then i'll return 19
        /// </summary>
        /// <param name="tMatchYear"></param>
        /// <returns></returns>
        /// 

        public string getYear(string tMatchYear)
        {
            try
            {
                string CurrentYear = System.DateTime.Now.Year.ToString();
                int iFirst = Convert.ToInt32(CurrentYear.Substring(0, 2));
                int iSecond = Convert.ToInt32(CurrentYear.Substring(2, 2));
                int iMatchYear = Convert.ToInt32(tMatchYear);
                //30
                //if (iMatchYear <= iSecond)
                //    iFirst = iFirst;
                if (iMatchYear > iSecond)
                    iFirst = iFirst - 1;
                return iFirst.ToString();
            }
            catch
            {
                return "20";
            }
        }

        #endregion

        #region "NEW PRESENT EMPLOYER"

        #region "presnt var"
        char[] chrArrayASCII = {  Convert.ToChar(0),
									   Convert.ToChar(1),
									   Convert.ToChar(2),
									   Convert.ToChar(3),
									   Convert.ToChar(4),
									   Convert.ToChar(5),
									   Convert.ToChar(6),
									   Convert.ToChar(7),
									   Convert.ToChar(8),
									   //Convert.ToChar(9),
									   //Convert.ToChar(10),
									   Convert.ToChar(11),
									   Convert.ToChar(12),
									   Convert.ToChar(13),
									   Convert.ToChar(14),
									   Convert.ToChar(15),
									   Convert.ToChar(16),
									   Convert.ToChar(17),
									   Convert.ToChar(18),
									   Convert.ToChar(19),
									   Convert.ToChar(20),
									   Convert.ToChar(21),
									   Convert.ToChar(22),
									   Convert.ToChar(23),
									   Convert.ToChar(24),
									   Convert.ToChar(25),
									   Convert.ToChar(26),
									   Convert.ToChar(27),
									   Convert.ToChar(28),
									   Convert.ToChar(29),
									   Convert.ToChar(30),
									   Convert.ToChar(31),
									   Convert.ToChar(34),
									   //Convert.ToChar(35),
									   Convert.ToChar(36),
                    Convert.ToChar(194),
                    Convert.ToChar(226),
                    Convert.ToChar(128),	 
				};
        //New Create
        //public string eduUniversity = "";

        public string strHeader = "", strFooter = "";
        Regex rgxReference = new Regex(@"[\s]{4}(REFERENCES|EFERENCES|REFERALS OF|REFRENCES|REFERENCE|REFERANCE|reference|character and work references)|(REFERENCES|EFERENCES|REFERALS OF|REFRENCES|REFERENCE|REFERANCE|reference|character and work references)[\s]*([\s]{4}|:|[\-]{1})", RegexOptions.IgnoreCase);
        StringBuilder strbLocation = new StringBuilder();
        StringBuilder strbZipcode = new StringBuilder();
        // string mons = "Sept|Octb|Aprl";
        public string[] strPastOrgn = null;
        public string[] strDateOrgn = null;
        public string[] strPastDesignation = null;
        #endregion

        private string opGetPrevEmployerDesignation(int iPos, int iType)
        {
            string tPrevJobTitle = "";
            string _LocationdID = "", strTitle = "";
            try
            {
                string tPresentEmployerTop = @"currently working as a (\w{3,25}\s){1,3}with" + //For Replacing Employer
                 @"|currently working as (\w{3,25}\s){1,4}in" +
                 @"|currently working as an\s(\w{3,25}\s){1,4}for" +
                 "|currently working at" +
                 @"|working as\s(\w{2,25}\s){1,3}at|working as a\s(\w{2,25}\s){1,3}at|working as an\s(\w{2,25}\s){1,3}at" +
                 @"|working as\s(\w{2,25}\s){1,4}at|working as a\s(\w{2,25}\s){1,4}at|working as an\s(\w{2,25}\s){1,4}at" +
                 @"|worked as\s(\w{2,25}\s){1,4}at|worked as a\s(\w{2,25}\s){1,4}at|worked as an\s(\w{2,25}\s){1,4}at" +
                 @"|working as\s(\w{2,25}\s){1,5}at|working as a\s(\w{2,25}\s){1,5}at|working as an\s(\w{2,25}\s){1,5}at" +
                 @"|workes as\s(\w{2,25}\s){1,5}at|workes as a\s(\w{2,25}\s){1,5}at|workes as an\s(\w{2,25}\s){1,5}at" +
                 @"|working as an\s(\w{2,25}\s){1,4}for" +
                 @"|working as a\s(\w{2,25}\s){1,4}in" +
                 @"|working as\s(\w{2,25}\s){1,4}in" +
                 @"|working as\s(\w{2,25}\s){1,4}[\s]?with" +
                 @"|working as a\s(\w{2,25}\s){1,4}[\s]?with";
                Regex exPresentEmp1 = new Regex(@"[\s,\{“‘\(\.](" + tPresentEmployerTop + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);

                Regex rgxDesignation = new Regex(@"(JobTitle|Designation|Role|Post Held|Position|Title|Title of Job)[s]?(\s{1,4}Name)?" +
                    @"|Name\s{1,4}(of|of the)\s{1,4}(JobTitle|Designation|Role|Post Held|Position)[s]?", RegexOptions.IgnoreCase);
                Regex rgxLocation = new Regex(@"(Tools Used)[s]?", RegexOptions.IgnoreCase);
                Regex rgxDuration = new Regex(@"^.{0,5}\s*\b(Tenure|Title|Period|(Project|Client|consultant)[s]?\s(Title|Name)|Project|Client|Role)[s]?\d{0,2}\b(\s+.{1}\s|\s{3}|\s{0,3}.{0,3}\s{0,3}[#,:\-\(\–])", RegexOptions.IgnoreCase);
                string rgxNotJobTitle = "participated|using |developer frameworks|next generation|submitting to the|editor of books";
                Regex rgxNotDes = new Regex(@"[\|\s,\{\(\:](" + rgxNotJobTitle + @")[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                string tTillDate = "till date|to till date|to current date|current date|to current date|current date|till now|till present|to till now|Till Date|Till Now|until now";
                Regex rgxNotDes1 = new Regex(@"\b" + tTillDate + @"\b", RegexOptions.IgnoreCase);

                try
                {
                    if (iType == 0)
                    {
                        int End = iPos;
                        int Start = (iPos - 3);
                        for (int iBack = iPos; iBack > Start && iBack >= 0 && iBack < DataEmployer.Length && _LocationdID == ""; iBack--)
                        {


                            strTitle = DataEmployer[iBack].Trim();
                            try
                            {
                                if (iPos != iBack)
                                    if (exPresentEmp1.IsMatch(" " + strTitle) == true && exPresentEmp1.IsMatch(" " + DataEmployer[iPos].ToString().Trim()) == true) continue;
                                try
                                {
                                    if (rgxDuration.IsMatch(DataEmployer[iBack - 1].ToString().Trim()) == true && rgxDuration.IsMatch(DataEmployer[iPos + 1].ToString().Trim()) == true) continue;
                                }
                                catch { }
                            }
                            catch { }

                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                            try
                            {
                                if (rgxNotDes.IsMatch(" " + strTitle.ToLower()) == true)
                                    strTitle = strTitle.Replace(strTitle.ToString(), "");
                            }
                            catch { }

                            if (strTitle.Length > 200 || strTitle == "") continue;
                            try
                            {
                                if (rgxNotDes.IsMatch(" " + strTitle.ToLower()) == true)
                                    strTitle = strTitle.Replace(strTitle.ToString(), "");
                            }
                            catch { }
                            if (FCommon.rgxDesignations.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;

                            _LocationdID = GetCurrentDesignationRID(strTitle, true);

                            if (_LocationdID != "" && tPrevJobTitle.StartsWith(":") == false)
                                break;

                            // Code commended for Exact string Matching -- Saravana
                            //for (int _cnt = FCommon.JobTitleList.GetLowerBound(0); _cnt < FCommon.JobTitleList.GetUpperBound(0) && _LocationdID == ""; _cnt++)
                            //{ 
                            //    if (FCommon.JobTitleList[_cnt, 0].Trim().Length == 0) continue;
                            //    if (FCommon.JobTitleList[_cnt, 1].Trim().Length > 1)
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + "|" + FCommon.JobTitleList[_cnt, 1].Replace(",", "|").ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    else
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    if (rgxLocation.IsMatch("  " + strTitle + "  "))
                            //    {
                            //        if (FCommon.JobTitleList[_cnt, 3].Trim().Length > 1)
                            //        {
                            //            Regex rgxLocationExclude = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 3].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //            if (rgxLocationExclude.IsMatch("  " + strTitle.Trim() + "  "))
                            //            {
                            //                rgxLocationExclude = null;
                            //                continue;
                            //            }
                            //            rgxLocationExclude = null;
                            //        }
                            //        _LocationdID = FCommon.JobTitleList[_cnt, 2].ToString();
                            //        tPrevJobTitle = FCommon.JobTitleList[_cnt, 0].ToString();
                            //        break;
                            //    }
                            //}


                        }
                        for (int i = iPos; i < iPos + 3 && i < DataEmployer.Length && _LocationdID == ""; i++) //changed Loop count 2 to 3 for picking Desgnation
                        {
                            strTitle = DataEmployer[i].Trim();
                            try
                            {
                                if (iPos != i)
                                    if (exPresentEmp1.IsMatch(" " + strTitle) == true && exPresentEmp1.IsMatch(" " + DataEmployer[iPos].ToString().Trim()) == true) continue;
                            }
                            catch { }

                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();

                            //MatchCollection matches = Regex.Matches("[Programmer]|[Programmer Analyst]", strTitle);
                            //string tstr = "";
                            //foreach (Match match in matches)
                            //{
                            //    tstr = "Test";
                            //}
                            try
                            {
                                if (rgxNotDes.IsMatch(" " + strTitle.ToLower()) == true || rgxNotDes1.IsMatch(strTitle) == true)
                                    strTitle = strTitle.Replace(strTitle.ToString(), "");

                            }
                            catch { }
                            if (FCommon.rgxDesignations.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;
                            _LocationdID = GetCurrentDesignationRID(strTitle, true);
                            if (_LocationdID != "" && tPrevJobTitle.StartsWith(":") == false)
                                break;

                            //for (int _cnt = FCommon.JobTitleList.GetLowerBound(0); _cnt < FCommon.JobTitleList.GetUpperBound(0) && _LocationdID == ""; _cnt++)
                            //{
                            //    if (FCommon.JobTitleList[_cnt, 0].Trim().Length == 0) continue;
                            //    if (FCommon.JobTitleList[_cnt, 1].Trim().Length > 1)
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + "|" + FCommon.JobTitleList[_cnt, 1].Replace(",", "|").ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    else
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    if (rgxLocation.IsMatch("  " + strTitle + "  "))
                            //    {
                            //        if (FCommon.JobTitleList[_cnt, 3].Trim().Length > 1)
                            //        {
                            //            Regex rgxLocationExclude = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 3].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //            if (rgxLocationExclude.IsMatch("  " + strTitle.Trim() + "  "))
                            //            {
                            //                rgxLocationExclude = null;
                            //                continue;
                            //            }
                            //            rgxLocationExclude = null;
                            //        }
                            //        _LocationdID = FCommon.JobTitleList[_cnt, 2].ToString();
                            //        tPrevJobTitle = FCommon.JobTitleList[_cnt, 0].ToString();
                            //        break;
                            //    }
                            //}
                        }
                        for (int i = iPos; i < iPos + 5 && i < DataEmployer.Length && _LocationdID == ""; i++)
                        {
                            strTitle = DataEmployer[i].Trim();
                            try
                            {
                                if (iPos != i)
                                    if (exPresentEmp1.IsMatch(" " + strTitle) == true && exPresentEmp1.IsMatch(" " + DataEmployer[iPos].ToString().Trim()) == true) continue;
                            }
                            catch { }

                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                            if (rgxDesignation.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;
                            for (int j = i; j < i + 2 && j < DataEmployer.Length && _LocationdID == ""; j++)
                            {
                                strTitle = DataEmployer[j].Trim();
                                if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                    strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                                if (rgxLocation.IsMatch(strTitle) == true) break;

                                try
                                {
                                    if (rgxNotDes.IsMatch(" " + strTitle.ToLower()) == true || rgxNotDes1.IsMatch(strTitle) == true)
                                        strTitle = strTitle.Replace(strTitle.ToString(), "");
                                }
                                catch { }

                                if (FCommon.rgxDesignations.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;
                                _LocationdID = GetCurrentDesignationRID(strTitle, true);
                                if (_LocationdID != "" && tPrevJobTitle.StartsWith(":") == false)
                                    break;

                                //for (int _cnt = FCommon.JobTitleList.GetLowerBound(0); _cnt < FCommon.JobTitleList.GetUpperBound(0) && _LocationdID == ""; _cnt++)
                                //{
                                //    if (FCommon.JobTitleList[_cnt, 0].Trim().Length == 0) continue;
                                //    if (FCommon.JobTitleList[_cnt, 1].Trim().Length > 1)
                                //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + "|" + FCommon.JobTitleList[_cnt, 1].Replace(",", "|").ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                                //    else
                                //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                                //    if (rgxLocation.IsMatch("  " + strTitle + "  "))
                                //    {
                                //        if (FCommon.JobTitleList[_cnt, 3].Trim().Length > 1)
                                //        {
                                //            Regex rgxLocationExclude = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 3].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                                //            if (rgxLocationExclude.IsMatch("  " + strTitle.Trim() + "  "))
                                //            {
                                //                rgxLocationExclude = null;
                                //                continue;
                                //            }
                                //            rgxLocationExclude = null;
                                //        }
                                //        _LocationdID = FCommon.JobTitleList[_cnt, 2].ToString();
                                //        tPrevJobTitle = FCommon.JobTitleList[_cnt, 0].ToString();
                                //        break;
                                //    }
                                //}
                            }
                        }
                    }
                    else
                    {
                        int End = iPos;
                        int Start = (iPos - 2);
                        for (int iBack = iPos; iBack > Start && iBack >= 0 && iBack < tblEmplrData.Count && _LocationdID == ""; iBack--)
                        {
                            strTitle = tblEmplrData[iBack].ToString().Trim();
                            try
                            {
                                if (iPos != iBack)
                                    if (exPresentEmp1.IsMatch(" " + strTitle) == true && exPresentEmp1.IsMatch(" " + DataEmployer[iPos].ToString().Trim()) == true) continue;
                            }
                            catch { }

                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                            if (strTitle.Length > 150 || strTitle == "") continue;

                            try
                            {
                                if (rgxNotDes.IsMatch(" " + strTitle.ToLower()) == true)
                                    strTitle = strTitle.Replace(strTitle.ToString(), "");
                            }
                            catch { }
                            if (FCommon.rgxDesignations.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;
                            _LocationdID = GetCurrentDesignationRID(strTitle, true);
                            if (_LocationdID != "" && tPrevJobTitle.StartsWith(":") == false)
                                break;

                            //for (int _cnt = FCommon.JobTitleList.GetLowerBound(0); _cnt < FCommon.JobTitleList.GetUpperBound(0) && _LocationdID == ""; _cnt++)
                            //{
                            //    if (FCommon.JobTitleList[_cnt, 0].Trim().Length == 0) continue;
                            //    if (FCommon.JobTitleList[_cnt, 1].Trim().Length > 1)
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + "|" + FCommon.JobTitleList[_cnt, 1].Replace(",", "|").ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    else
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    if (rgxLocation.IsMatch("  " + strTitle + "  "))
                            //    {
                            //        if (FCommon.JobTitleList[_cnt, 3].Trim().Length > 1)
                            //        {
                            //            Regex rgxLocationExclude = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 3].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //            if (rgxLocationExclude.IsMatch("  " + strTitle.Trim() + "  "))
                            //            {
                            //                rgxLocationExclude = null;
                            //                continue;
                            //            }
                            //            rgxLocationExclude = null;
                            //        }
                            //        _LocationdID = FCommon.JobTitleList[_cnt, 2].ToString();
                            //        tPrevJobTitle = FCommon.JobTitleList[_cnt, 0].ToString();
                            //        break;
                            //    }
                            //}
                        }
                        for (int i = iPos; i < iPos + 2 && i < tblEmplrData.Count && _LocationdID == ""; i++)
                        {
                            strTitle = tblEmplrData[i].ToString().Trim();
                            try
                            {
                                if (iPos != i)
                                    if (exPresentEmp1.IsMatch(" " + strTitle) == true && exPresentEmp1.IsMatch(" " + DataEmployer[iPos].ToString().Trim()) == true) continue;
                            }
                            catch { }

                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();


                            try
                            {
                                if (rgxNotDes.IsMatch(" " + strTitle.ToLower()) == true || rgxNotDes1.IsMatch(strTitle.ToLower()) == true)
                                    strTitle = strTitle.Replace(strTitle.ToString(), "");
                            }
                            catch { }
                            if (FCommon.rgxDesignations.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;
                            _LocationdID = GetCurrentDesignationRID(strTitle, true);
                            if (_LocationdID != "" && tPrevJobTitle.StartsWith(":") == false)
                                break;

                            //for (int _cnt = FCommon.JobTitleList.GetLowerBound(0); _cnt < FCommon.JobTitleList.GetUpperBound(0) && _LocationdID == ""; _cnt++)
                            //{
                            //    if (FCommon.JobTitleList[_cnt, 0].Trim().Length == 0) continue;
                            //    if (FCommon.JobTitleList[_cnt, 1].Trim().Length > 1)
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + "|" + FCommon.JobTitleList[_cnt, 1].Replace(",", "|").ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    else
                            //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //    if (rgxLocation.IsMatch("  " + strTitle + "  "))
                            //    {
                            //        if (FCommon.JobTitleList[_cnt, 3].Trim().Length > 1)
                            //        {
                            //            Regex rgxLocationExclude = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 3].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                            //            if (rgxLocationExclude.IsMatch("  " + strTitle.Trim() + "  "))
                            //            {
                            //                rgxLocationExclude = null;
                            //                continue;
                            //            }
                            //            rgxLocationExclude = null;
                            //        }
                            //        _LocationdID = FCommon.JobTitleList[_cnt, 2].ToString();
                            //        tPrevJobTitle = FCommon.JobTitleList[_cnt, 0].ToString();
                            //        break;
                            //    }
                            //}

                        }
                        for (int i = iPos; i < iPos + 5 && i < tblEmplrData.Count && _LocationdID == ""; i++)
                        {
                            strTitle = tblEmplrData[i].ToString().Trim();
                            try
                            {
                                if (iPos != i)
                                    if (exPresentEmp1.IsMatch(" " + strTitle) == true && exPresentEmp1.IsMatch(" " + DataEmployer[iPos].ToString().Trim()) == true) continue;
                            }
                            catch { }

                            if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();

                            if (rgxDesignation.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;
                            for (int j = i; j < i + 2 && j < tblEmplrData.Count && _LocationdID == ""; j++)
                            {
                                strTitle = tblEmplrData[j].ToString().Trim();
                                if (strTitle.ToLower().IndexOf("reporting to ") > 0)
                                    strTitle = strTitle.Substring(0, strTitle.ToLower().IndexOf("reporting to ")).Trim();
                                if (rgxLocation.IsMatch(strTitle) == true) break;

                                try
                                {
                                    if (rgxNotDes.IsMatch(" " + strTitle.ToLower()) == true || rgxNotDes1.IsMatch(strTitle) == true)
                                        strTitle = strTitle.Replace(strTitle.ToString(), "");
                                }
                                catch { }
                                if (FCommon.rgxDesignations.IsMatch(strTitle) == false && FCommon.rgxDesignations.IsMatch(" " + strTitle) == false) continue;
                                _LocationdID = GetCurrentDesignationRID(strTitle, true);
                                if (_LocationdID != "" && tPrevJobTitle.StartsWith(":") == false)
                                    break;

                                //for (int _cnt = FCommon.JobTitleList.GetLowerBound(0); _cnt < FCommon.JobTitleList.GetUpperBound(0) && _LocationdID == ""; _cnt++)
                                //{
                                //    if (FCommon.JobTitleList[_cnt, 0].Trim().Length == 0) continue;
                                //    if (FCommon.JobTitleList[_cnt, 1].Trim().Length > 1)
                                //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + "|" + FCommon.JobTitleList[_cnt, 1].Replace(",", "|").ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                                //    else
                                //        rgxLocation = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 0].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                                //    if (rgxLocation.IsMatch("  " + strTitle + "  "))
                                //    {
                                //        if (FCommon.JobTitleList[_cnt, 3].Trim().Length > 1)
                                //        {
                                //            Regex rgxLocationExclude = new Regex(@"(\d|\b)(" + FCommon.JobTitleList[_cnt, 3].ToString().Trim() + @")(\d|\b)", RegexOptions.IgnoreCase);
                                //            if (rgxLocationExclude.IsMatch("  " + strTitle.Trim() + "  "))
                                //            {
                                //                rgxLocationExclude = null;
                                //                continue;
                                //            }
                                //            rgxLocationExclude = null;
                                //        }
                                //        _LocationdID = FCommon.JobTitleList[_cnt, 2].ToString();
                                //        tPrevJobTitle = FCommon.JobTitleList[_cnt, 0].ToString();
                                //        break;
                                //    }
                                //}
                            }
                        }
                    }
                }
                catch { }
            }
            catch { }
            //return tPrevJobTitle + "+:+" + _LocationdID;
            return _LocationdID;
        }

        private void opGetEmployerArrayList()
        {
            int iEmp = 1;
            if (EmployerList == null)
            {
                Regex regEmployerList = null;//, regProjectList = null;
                //New String For Filtering Employer Array
                string _strExpArrayFilter = @"(ORGANIZATIONAL EXPERIENCE|Professional Experience|work|working|w o r k|w o r k s|current|currently|Relevant Work|Employment|My Work|Industry|professional|P r o f e s s i o n a l|P r o f e s s i o n a l s|Proffessional|PROFESSIONAL WORKING|ORGANIZATIONAL|ORGANISATIONAL)[s]?\s{0,4}\t?(E x p e r i e n c e|Experience|Experinece|Exeperience|Exeprience|Experiences|Exp|Exps|Experince)(\sIn Brief)?" + //Work Experince
                               @"|(Employee|employment|career|Job Title|My Work|work|working|w o r k|w o r k s|Relevant Work|PROFESSIONAL WORKING|PROFESSIONAL)[s]?\s{1,4}\t?History" +
                               @"|(Employer|ORGANIZATION|ORGANISATION|Company|Employnent)[s]?\s{1,4}\t?(List|Lists)" +
                               @"|(ORGANIZATION|ORGANIZATIONAL|ORGANISATION|ORGANISATIONAL|Company|Experience)[s]?\s{1,4}\t?(DETAILS|Dteail)" +
                               @"|Career Summary|Company Profile" + //Company Profile|(Carrer|Carrers|Career|Careers|Job|Jobs) Profile
                               @"|E X P E R I E N C E|Experience|Experiences|employment|Career Review|ENGAGEMENT OVERVIEW|Work specialization|Career Profile|PROFESSIONAL PORTFOLIO|DETAILS OF CURRENT JOB|CAREER PROFILE|Present Job|Professional Career|CAREER GRAPH|Companies" +
                               @"|(Experience|Experiences|employment|Career Review|ENGAGEMENT OVERVIEW)" +
                               @"|KEY EXPERIENCE|employment details|Professional Experience in Brief|Executive Performance Overview|WORK EXPERIENCE|WORKING STATUS|Work profile|Current Position|CURRENT STATUS" +
                               @"|Career Contour|ORGANIZATIONAL SCAN|Experience Chronology|organisational scan|Career Progression|LABOR EXPERIENCE|highlights of professional experience|ORGANIZATIONAL EXPOSURE" +
                               @"|details of experience|managerial experiences|previous work experience|OCCUPATIONAL CONTOUR" +
                               @"|Related Experience|CAREER HIGHLIGHTS|Work Exposures|Employment Graph|Experience Synopsis|Work & Experience|CAREER PROGRESSION|Work Exposure|Job and Profile|PROFESSIONAL EXPOSURE";

                string _strEducation = @"Education|E d u c a t i o n|A c a d e m i c   q u a l i f i c a t i o n s|Q u a l i f i c a t i o n s|A c a d e m i c|(qualification|Qualfication|Educational|Academic|Education)[s]? summary" +
                      @"|(Educational|Academic|Education|professional)[s]? (Qualification|Qualfication)|High Academic[s]? (Education|Qualification|Qualfication)" +
                      @"|Higher[s]? Academic[s]? (Education|Qualification|Qualfication)|Higher[s]? (Academic|Education|Qualification|Qualfication)" +
                      @"|(EDUCATION|QUALIFICATION|QUALFICATION|ACADEMIC)[S]? BACKGROUND" +
                      @"|(EDUCATION|QUALIFICATION|QUALFICATION|ACADEMIC)[S]?\s?\/\s?TRAINING[S]?" +
                      @"|(EDUCATIONAL|EDUCATION|EDUCATIONAL|QUALIFICATION|QUALFICATION)[s]? PROFILE|EDUCATION[s]? AND TRAINING|EDUCATION[s]? & TRAINING" +
                      @"|(Qualification|Qualfication|Education)[s]? AND TRAINING|(Qualification|Qualfication|Education)[s]? & TRAINING|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? AND CREDENTIAL" +
                      @"|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? & CREDENTIAL|(EDUCATION|QUALIFICATION|QUALFICATION|ACADEMIC)[s]? HISTORY|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? / CERTIFICATION" +
                      @"|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? & CERTIFICATION|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? AND CERTIFICATION|Summary of (qualification|Qualfication|Education|Academic)" +
                      "|PROFESSIONAL & EDUCATIONAL CREDENTIALS|EDUCATION|Qualification|Qualfication|ACADEMIC|scholastic|Academea|ACADEMIA|scholastic (credential|record|information|Selected Publications|COURSES/WORKSHOPS|EDUCATIONAL CREDENTIALS)|educational:|educational|Certificates|SELECTED PROJECT EXPERIENCE";


                string strSubstring12 = @"(ASSOCIATED|EMPLOYED|Worked|Served)[\s]*(WITH|IN|FOR|AT)" +
                        @"|(ASSOCIATED|ASSOCIATE|WORKING|WORKED|EMPLOYED|SERVING|SERVED|CURRENTLY|Company presently working)\s{1,4}AS\s.{1,100}\s(IN|FOR|WITH|AT)";

                string _PresentEmpr1 = @"(presently working|Presently working as|presently serving|at present working|at present serving|Presenting working|presently I am working|presently I am serving|Presently i am|I am an associate|I am associated|Till date" +
                                      @"|currently working|Currently working as|currently serving|Currently I am working|Currently I am serving|Currently working full time|Currently i am|Currently)[\s]+(with|for|in|at)\b" +
                                      @"|Permanent employee of|Permanent employee for|Currently joined|Company presently working" +
                                      @"|(WORKING|SERVING|ASSOCIATED|ASSOCIATE|EMPLOYED|CURRENTLY)\b[\s]*(WITH|IN|FOR|AT)\b" +
                                      @"|(ASSOCIATED|ASSOCIATE|WORKING|EMPLOYED|SERVING)\b\s{1,4}AS\s.{1,50}?\s(IN|FOR|WITH|AT)\b";

                string _PreviousEmpr = @"\b(WORKING|SERVING|ASSOCIATED|ASSOCIATE|EMPLOYED|WORKED|CURRENTLY)\b[\s]*(WITH|IN|FOR|AT)\b" +
                                     @"|(ASSOCIATED|ASSOCIATE|WORKING|EMPLOYED|SERVING|WORKED)\b\s{1,4}AS\s.{1,50}?\s(IN|FOR|WITH|AT)\b";

                string _PresentEmpr2 = @"(presently working|presently serving|at present working|at present serving|Presenting working|presently I am working|presently I am serving|Presently i am|I am an associate|I am associated" +
                                        @"|currently working|currently serving|Currently I am working|Currently I am serving|Currently working full time|Currently i am|currently)[\s]+(with|for|in|at)\b" +
                                        @"|Permanent employee of|Permanent employee for|Currently joined|Company presently working|Presently, serving as" +
                                        @"|(Present|currently|Current)\s+(Organisation|Organisation|Organization|Company|Employment|Employer)[s]?\b\s?(\s?.{0,2}\s?\bDesignation[s]?\b\s?.{0,2}\s?)?[\s]*([\s]{3}|[#,:\-])";

                string _Employer2 = @"(Employer|Firm|Employers|Company|Organisation|Organization|Organisations|Organizations)[\s]*Name" +
                         "|Employer|Firm|Employers|Company|Organisation|Organization|Organisation|Organization|Organisations|Organizations" +
                         @"|(Employer|Firm|Employer|Company|Organisation|Organization|Organisations|Organizations|Corporates)[\s]*Name" +
                         "|Employer|Firm|Company|Organisation|Organization|Organisations|Organizations|Corporates";

                string _NotEmpSkip = "INTERNSHIP EXPERIENCE|RELEVENT COURSEWORK AND PROJECTS|Area of expertise|Institute/University|SKILL SUMMARY|SUMMER INTERNSHIP|Second Highest Education|Highest Education|Project     Experiences|Qualifications|Project working experiences|PROFESSIONAL SKILL SET|OTHER INVOLVEMENTS AND ACHIEVEMENTS|PROJECTS MANAGEMENT AND EXECUTION|Preceding Assignments|CUSTOMER MANAGEMENT SKILLS|Key Projects Handled|Achievements, Awards and Scholarships|Skills Profile|Free Lancing Work|Proficient in|PERSONAL SKILLS|INTERNSHIP|ADDITIONAL QUALIFICATIONS|CAREER OBJECTIVE|Other Accolades|Awards & Laurels|Selected Project Experience:|Product Experience|PROJECT EXPERIENCE|SOFTWARE & HARDWARE PROFICIENCY|CERTIFIED COURSES:|PROFESSIONAL QUALIFICATIONS|Responsibility and Duties|Workshops Attended" + //Key Achievements //Key Responsibilities
                                    "|PRESTIGIOUS PATRONS NURTURED OVER THE YEARS|TRAININGS ATTENDED|Certifications|Paper Presentations|VOCATIONAL COURSE|Responsibilities Executed|Key Skills:|Programming: Languages:|Key Responsibilities Held|ACHIEVEMENTS AND POSITIONS OF RESPONSIBILITY|Software and Languages" + //Achivements
                                    "|SEMINARS ATTENDED|Core  Responsibilities|Objective|Personal Contribution|AREAS OF EXPERTISE|AWARDS AND RECOGNITION|PROJECTS EXECUTED|Onsite Experience|S o f t w a r e   K n o w l e d g e|COMMISSIONING|APPLICATION FOR THE POST|Remarkable Attainments|TEAM MANAGEMENT|Activities & Leadership|Activities/Achievements|Activities Achievements|INDUSTRIAL TRAINING|Training and Academic Projects|Academic Projects|EXTRA-CURRICULAR INVOLVEMENT|EXTRA CURRICULAR|International Experience|Personnel Information|Independent Assignments|Previous Assignments|PROJECT UNDERTAKEN|Projects Undertaken:|Project Summary";//Project profile

                Regex regNotEmpSkip = new Regex(@"[\|\s,\(\:](" + _NotEmpSkip + @")[:\s]?[:\-\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                Regex rgxEmp2 = new Regex(_Employer2, RegexOptions.IgnoreCase);
                Regex rgxNowWorking = new Regex(@"\b(" + _PresentEmpr2 + @")", RegexOptions.IgnoreCase);
                Regex rgxWorkedExp = new Regex(_PreviousEmpr, RegexOptions.IgnoreCase);
                Regex rgxTillWorking = new Regex(_PresentEmpr1, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                Regex rgxWorkedAs = new Regex(@"\b(" + strSubstring12 + @")\b", RegexOptions.IgnoreCase);
                regEmployerList = new Regex(@"[\|\s,\(\:](" + _strExpArrayFilter + @")[:\s]?[:\-\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                Regex rgxEducnEnd = new Regex(@"[\|\s,\(\:](" + _strEducation + @")[:\s]?[:\-\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                //Finding the Project Section   &amp;
                //string _strProjectDet = "Project Details|Project Name|Client Name|Environment|Role|Project Title|Client|Project|Team Size|Relevant Projects";
                //regProjectList = new Regex(@"[\|\s,\(\:](" + _strProjectDet + @")[:\s]?[:\-\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                int pos = -1, pos1 = -1;
                EmployerList = new ArrayList();
                try
                {
                    #region "Employer Data"
                    for (pos = 0; pos < DataLines.Length; pos++)
                    {
                        if (regEmployerList.IsMatch(" " + this.DataLines[pos].Trim()) || rgxNowWorking.IsMatch(this.DataLines[pos].Trim()) || (rgxWorkedExp.IsMatch(this.DataLines[pos].Trim()) && rgxWorkedExp.Match(this.DataLines[pos].Trim()).Index < 300 && this.DataLines[pos].Length < 400) || (rgxTillWorking.IsMatch(this.DataLines[pos].Trim()) && rgxTillWorking.Match(this.DataLines[pos].Trim()).Index < 300) || (rgxWorkedAs.IsMatch(this.DataLines[pos].Trim()) && rgxWorkedAs.Match(this.DataLines[pos].Trim()).Index < 300))
                        {
                            Match EmpMtch = regEmployerList.Match(" " + this.DataLines[pos].Trim());
                            if (((EmpMtch.Success && (EmpMtch.Index > 25)))) continue; //&&  this.DataLines[pos].Trim().ToLower()!= "career"
                            try
                            {
                                Match mtch = null;
                                for (pos1 = pos; pos1 < DataLines.Length; pos1++)
                                {   //Array Skipping Based on Skill Keywords
                                    mtch = rgxEducnEnd.Match(" " + this.DataLines[pos1].Trim().Replace("&amp;", "&"));
                                    if ((mtch.Success == false || mtch.Index >= 4) && this.DataLines[pos1].Trim().Length < 60)
                                        mtch = regSkillNot.Match(" " + this.DataLines[pos1].Trim().Replace("&amp;", "&"));
                                    if ((mtch.Success == false || mtch.Index >= 4) && this.DataLines[pos1].Trim().Length < 60) //Certification
                                        mtch = regNotEmpSkip.Match(" " + this.DataLines[pos1].Trim().Replace("&amp;", "&")); //regPersonal
                                    if (mtch.Success == false || mtch.Index >= 4)
                                        mtch = regPersonal.Match(" " + this.DataLines[pos1].Trim().Replace("&amp;", "&")); //regPersonal
                                    int eduNFlag = 0;
                                    if (((mtch.Success && (mtch.Index == 0 || mtch.Index == 1))))
                                        eduNFlag = 1;
                                    if (eduNFlag == 0)
                                    {
                                        iEmp += 1;
                                        if (DataLines[pos1].Replace("Experience", "").Replace(Convert.ToChar(167).ToString(), "").Trim().IndexOf("-") == 0)
                                            EmployerList.Add(DataLines[pos1].Replace("&amp;", "&").Replace(Convert.ToChar(63).ToString(), "").Trim());
                                        else
                                            EmployerList.Add(DataLines[pos1].Replace("&amp;", "&").Replace(Convert.ToChar(167).ToString(), "").Replace(Convert.ToChar(154).ToString(), "").Replace(Convert.ToChar(63).ToString(), "").Replace("?", "").Replace("*", "").Replace("|", "").Trim());
                                        pos = pos1;
                                        //EmployerList.Add(DataEmployer[pos1].Replace("&amp", "&").Replace(Convert.ToChar(167).ToString(), "").Replace(Convert.ToChar(154).ToString(), "").Replace("?", "").Replace("*", "").Replace("|", "").Trim()); 
                                    }
                                    else
                                    {
                                        pos = pos1;
                                        break;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                        else
                            continue;
                    }
                    #endregion
                    //
                    #region "Skipping Project Details..."

                    if (EmployerList.Count > 0)
                    {
                        bEmpFilteredData = true;
                        try
                        {
                            int posYear = -1;
                            int startPos = -1;
                            try
                            {
                                
                                for (int i = 0; i < EmployerList.Count - 1; i++)
                                {
                                    if (EmployerList[i] == null) continue;
                                    if (EmployerList[i].ToString().Trim().ToLower().Replace(":", "").Trim() == "project details" || EmployerList[i].ToString().Trim().ToLower().Replace(":", "").Trim() == "project experience" || EmployerList[i].ToString().Trim().ToLower().Replace(":", "").Trim() == "project work" || EmployerList[i].ToString().Trim().ToLower().Replace(":", "").Trim() == "projects details") //Projects Details
                                    {
                                        startPos = i; posYear = EmployerList.Count - 1;
                                    }
                                    if (regEmployerList.IsMatch(" " + EmployerList[i]) == true) continue;
                                    //ProMtch = regProjectList.Match(" " + EmployerList[i]);
                                    //if (ProMtch.Success == true && (ProMtch.Index == 0 || ProMtch.Index == 1) & startPos == -1)
                                    //    startPos = i;
                                    //if ((EmployerList[i].ToString().Trim().ToLower().IndexOf("duration") == 0 | EmployerList[i].ToString().Trim().ToLower().IndexOf("period") == 0 | EmployerList[i].ToString().Trim().ToLower().IndexOf("team size") == 0 | EmployerList[i].ToString().Trim().ToLower().IndexOf("role") == 0) & posYear == -1)  //Role
                                    //    posYear = i;
                                    if (posYear != -1 & startPos != -1)
                                    {
                                        for (int j = startPos; posYear >= j && j < EmployerList.Count; j++)
                                            EmployerList[j] = "";
                                    }
                                } //end for loop
                            }
                            catch { }

                            try
                            {
                                int DataEmployercount = 0;
                                for (int i = EmployerList.ToArray().GetLowerBound(0); i <= EmployerList.ToArray().GetUpperBound(0); i++)
                                    if (EmployerList[i].ToString().Trim() != "" && EmployerList[i].ToString().Trim() != "_" && EmployerList[i].ToString().Trim() != "ü" && EmployerList[i].ToString().Trim().Length > 1)
                                        DataEmployercount += 1;
                                DataEmployer = new string[DataEmployercount];
                                DataEmployercount = 0;
                                for (int cnt = 0; cnt < EmployerList.Count; cnt++)
                                    if (EmployerList[cnt].ToString().Trim() != "" && EmployerList[cnt].ToString().Trim() != "_" && EmployerList[cnt].ToString().Trim() != "ü" && EmployerList[cnt].ToString().Trim().Length > 1)
                                    {
                                        DataEmployer[DataEmployercount] = EmployerList[cnt].ToString().Trim().Replace("*", " ").Replace(Convert.ToChar(10).ToString(), " ").Trim();
                                        DataEmployercount += 1;
                                    }
                            }
                            catch { }

                            //Checking Organization find in First row and Duration find in 3 or 4 th row
                            #region "Finding the organization In First and Duration in Last row"
                            string _strOrg = @"^(Employer Name|Organization|Company|Company Name|Organisation)";
                            string _strDes = @"^(Designation|Position Held)";
                            string _strLoc = @"^(Posted at|Work Location|Location)";
                            string _strPeriod = @"^(Duration|Period)";
                            Regex rgxEmpOrg = new Regex(@"[\s,\[\{“‘\(\:](" + _strOrg + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            Regex rgxEmpYear = new Regex(_strPeriod, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            Regex rgxEmpDesc = new Regex(_strDes, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            Regex rgxEmpLocation = new Regex(_strLoc, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            int tHitOne = 0, tHitTwo = 0, tHitThree = 0, tHitFour = 0;
                            bool bEmployerYrs = false;
                            try
                            {
                                for (int t = 0; t < DataEmployer.Length; t++)
                                {
                                    if (rgxEmpOrg.IsMatch(" " + DataEmployer[t].ToString().Trim()))
                                        if (tHitOne == 0)
                                            if (t == 0)
                                                tHitOne = 1;
                                            else
                                                tHitOne = t;
                                    if (rgxEmpDesc.IsMatch(" " + DataEmployer[t].ToString().Trim()) || rgxEmpYear.IsMatch(DataEmployer[t].ToString().Trim()))
                                        if (tHitTwo == 0 && tHitOne != 0 && t != tHitOne)
                                            tHitTwo = t;
                                    if (rgxEmpLocation.IsMatch(" " + DataEmployer[t].ToString().Trim()))
                                        if (tHitThree == 0 && tHitTwo != 0 && t != tHitTwo)
                                            tHitThree = t;
                                    if (rgxEmpYear.IsMatch(DataEmployer[t].ToString().Trim()) && tHitOne > 0 && (tHitTwo > tHitOne || tHitThree > tHitOne))
                                        bEmployerYrs = true;
                                }
                                // if (bEmpYearInStart == true && tHitFour == 0 && tHitOne != 0 & tHitTwo != 0 & tHitThree != 0 && tHitFive > tHitOne)
                                if (bEmployerYrs == true && tHitFour == 0 && tHitOne != 0 & (tHitTwo != 0 || tHitThree != 0))
                                    bEmployerYearInLast = true;
                            }
                            catch { }

                            #endregion
                            Regex rgxLTD = new Regex(@"\b(Corporation|Limited|LIMITED|LLC|llc|L\.L\.C|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Bank|Financial Services|GLOBAL SERVICES|agency|Corp|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.?[\s\(]|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc|ASSOCIATES|Software Solutions|global solution|company|Group|Bank|Services| Computers|TECHNOLOGIES|Technology|TECH|COMPUTERS|INCORPORATED|Corporate|Healthcare|Centre|CLINIC|CONSTRUCTION CO|CONTRACTING CO)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase); //Firm
                            //Regular Expresion for Finding the Employer Name Based on [ 1) ABC LTD , 2) RK & Co ]
                            string strEmpNm = @"\b\d\)?\b";
                            Regex ExEmplNm = new Regex(strEmpNm, RegexOptions.IgnoreCase);

                            #region "Regular Expresion for Finding the Employer Order Based on [ 1) ABC LTD , 2) RK & Co ]"

                            try
                            {
                                tHitOne = 0; tHitTwo = 0; tHitThree = 0; tHitFour = 0; ;
                                for (int t = 0; t < DataEmployer.Length; t++)
                                {
                                    if (ExEmplNm.IsMatch(DataEmployer[t].ToString().Trim()) && rgxLTD.IsMatch(DataEmployer[t].ToString().Trim()) == true)
                                    {
                                        if (tHitOne == 0)
                                        {
                                            if (t == 0)
                                                tHitOne += 1;
                                            else
                                                tHitOne += 1;
                                        }
                                        else
                                        {
                                            tHitOne += 1;
                                        }
                                    }
                                }
                                if (tHitOne > 1)
                                    bEmpOrderFlg = true;
                            }
                            catch { }

                            #endregion
                        }
                        catch { }
                    }

                    #endregion
                }
                catch
                {

                }
            }
        }


        private void opGetEmployerInTab(ref StringBuilder strbPastEmp)
        {
            try
            {
                Regex rgxSpace = new Regex(@"\s{7,}?|\t|\t{2,}?|\t\s*\t");
                Regex rgxLTD = new Regex(@"\b(([A-Za-z\.\&-]){1,25}\s){1,3}(at)\s(([A-Za-z\.\&-]){1,25}\s){0,3}|(\w{2,25}\s){1,3}at\s(\w{2,25}\s){1,3}(Company|company|Technology|Technologies|Fasteners|Technology)|(Corporation|Limited|LIMITED|LLC|llc|L\.L\.C|Firm|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Bank|Financial Services|GLOBAL SERVICES|agency|Corp|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.?[\s\(]|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc|ASSOCIATES|Software Solutions|global solution|company|Group|Bank|Services| Computers|TECHNOLOGIES|Technology|TECH|COMPUTERS|INCORPORATED|Corporate|Healthcare|Centre|CLINIC|CONSTRUCTION CO)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                if (rgxSpace.IsMatch(strbPastEmp.ToString()) == true)
                {
                    strbPastEmp.Replace(rgxSpace.Match(strbPastEmp.ToString()).ToString(), Convert.ToChar(9).ToString());

                    int tTbPos = rgxSpace.Match(strbPastEmp.ToString()).Index;
                    if (rgxSpace.IsMatch(strbPastEmp.ToString().Trim()) == true)
                        if (rgxLTD.IsMatch(strbPastEmp.ToString()))
                            if ((rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index || (rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index + 1)
                                strbPastEmp.Remove(tTbPos, strbPastEmp.Length - tTbPos);
                            else if (rgxLTD.Match(strbPastEmp.ToString().Trim()).Index > 10 && rgxLTD.Match(strbPastEmp.ToString().Trim()).Index > rgxSpace.Match(strbPastEmp.ToString().Trim()).Index)
                                strbPastEmp.Remove(rgxLTD.Match(strbPastEmp.ToString().Trim()).Index, strbPastEmp.ToString().Trim().Length - rgxLTD.Match(strbPastEmp.ToString().Trim()).Index);

                    //if ((rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index || (rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index + 1)
                    //if ((rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index || (rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index + 1)
                    //strbPastEmp.Remove(0, 5);

                }

            }
            catch { }
        }

        private void opGetEmployerName(ref StringBuilder strbPastEmp)
        {

            try
            {

                Regex rgxSpace = new Regex(@"\s{7,}?|\t|\t{2,}?|\t\s*\t");
                Regex rgxLTD = new Regex(@"\b(([A-Za-z\.\&-]){1,25}\s){1,3}(at)\s(([A-Za-z\.\&-]){1,25}\s){0,3}|(\w{2,25}\s){1,3}at\s(\w{2,25}\s){1,3})\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                if (rgxSpace.IsMatch(strbPastEmp.ToString()) == true)
                {

                    strbPastEmp.Replace(rgxSpace.Match(strbPastEmp.ToString()).ToString(), Convert.ToChar(9).ToString());
                    int tTbPos = rgxSpace.Match(strbPastEmp.ToString()).Index;

                    if (rgxSpace.IsMatch(strbPastEmp.ToString().Trim()) == true)
                    {

                        if (rgxLTD.IsMatch(strbPastEmp.ToString()))
                        {
                            if ((rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index || (rgxLTD.Match(strbPastEmp.ToString().Trim()).Index + rgxLTD.Match(strbPastEmp.ToString().Trim()).Index) == rgxSpace.Match(strbPastEmp.ToString().Trim()).Index + 1)
                            {
                                strbPastEmp.Remove(tTbPos, strbPastEmp.Length - tTbPos);
                            }
                            else if (rgxLTD.Match(strbPastEmp.ToString().Trim()).Index > 10 && rgxLTD.Match(strbPastEmp.ToString().Trim()).Index > rgxSpace.Match(strbPastEmp.ToString().Trim()).Index)
                            {
                                strbPastEmp.Remove(rgxLTD.Match(strbPastEmp.ToString().Trim()).Index, strbPastEmp.ToString().Trim().Length - rgxLTD.Match(strbPastEmp.ToString().Trim()).Index);
                            }
                        }
                    }

                }

            }
            catch { }

        }

        private void opGetPresentEmployer()
        {
            #region "Settings"
            try
            {
                opGetEmployerArrayList();
            }
            catch { }

            for (int ct = 0; ct < this.DataEmployer.Length; ct++)
                if (this.DataEmployer[ct].ToLower().IndexOf("relatives working") >= 0 || this.DataEmployer[ct].ToLower().IndexOf("partner employed by") >= 0 || this.DataEmployer[ct].ToLower().IndexOf("page1") >= 0 || this.DataEmployer[ct].ToLower().IndexOf("patent") >= 0)
                    this.DataEmployer[ct] = "";
            for (int ct = 0; ct < this.tblEmplrData.Count; ct++)
                if (this.tblEmplrData[ct].ToString().ToLower().IndexOf("relatives working") >= 0 || this.tblEmplrData[ct].ToString().ToLower().IndexOf("partner employed by") >= 0 || this.tblEmplrData[ct].ToString().ToLower().IndexOf("patent") >= 0)
                    this.tblEmplrData[ct] = "";
            PresentEmployer = "";
            Regex rgxIdentifyStartWithcompanyName = new Regex(@"^(Company)[\t]?[\s]*[:]", RegexOptions.IgnoreCase);
            try
            {
                string _strExperienceLTD = @"(ORGANIZATIONAL EXPERIENCE|Professional Experience|work|working|w o r k|w o r k s|current|currently|Relevant Work|Employment|My Work|Industry|professional|P r o f e s s i o n a l|P r o f e s s i o n a l s|Proffessional|PROFESSIONAL WORKING|ORGANIZATIONAL|ORGANISATIONAL)[s]?\s{0,4}\t?(E x p e r i e n c e|Experience|Experinece|Exeperience|Exeprience|Experiences|Exp|Exps|Experince|Summary)(\sIn Brief)?" +
                                               @"|(Employee|employment|career|Job Title|My Work|work|working|w o r k|w o r k s|Relevant Work|PROFESSIONAL WORKING)[s]?\s{1,4}\t?History" +
                                               @"|(Employer|ORGANIZATION|ORGANISATION|Company|Employnent)[s]?\s{1,4}\t?(List|Lists)" +
                                               @"|(ORGANIZATION|ORGANIZATIONAL|ORGANISATION|ORGANISATIONAL|Company|Experience)[s]?\s{1,4}\t?(DETAILS|Dteail)" +
                                               @"|Relevant Work Description|Company Profile|(Carrer|Carrers|Career|Careers|Job|Jobs) Profile" +
                                               @"|Professional Profile|E X P E R I E N C E|Experience|Experiences|employment|Career Review|ENGAGEMENT OVERVIEW|Work specialization" +
                                               @"|(Experience|Experiences|employment|Career Review|ENGAGEMENT OVERVIEW)" +
                                               @"|KEY EXPERIENCE|employment details|Professional Experience in Brief|Executive Performance Overview|WORK EXPERIENCE" +
                                               @"|Related Experience|CAREER HIGHLIGHTS|Work Exposures|Employment Profile|Career Synopsis|Employment Graph|Experience Synopsis|Experience Summary|SUMMARY OF EXPERIENCE|Work & Experience|CAREER PROGRESSION|serving as";

                string _strWorkingTillNow = @"\s(To Date|Current|Present|Working|Associated|Employed|Currently)\s(with|for|in|at)\s\s.{2,100}?\s(till date|to till date|to current date|current date|till now|till present|to present|to till now|Summer)\s" +
                                            @"|\s(Working|Associated|Employed|Currently)\sAs\s.{5,20}\s(with|for|in|at|[,])\s.{2,70}?\s(till date|to till date|to current date|current date|till now|till present|to present| – Presently|to till now)\s" +
                                            @"|" + _strExperienceLTD + @"\s.{2,70}?\s(till date|to till date|to current date|current date|till now|till present|to present|to till now)\s";

                string _Employer = @"(Employer|Firm|Company|Organisation|Organization|serving)[s]?(\s{1,4}Name)?" +
                        @"|Name\s{1,4}(of|of the)\s{1,4}(Employer|Firm|Company|Organisation|Organization|serving)[s]?";

                string _Employer2 = @"(Employer|Firm|Employers|Company|Organisation|Organization|Organisations|Organizations)[\s]*Name" +
                                         "|Employer|Firm|Employers|Company|Organisation|Organization|Organisation|Organization|Organisations|Organizations" +
                                         @"|(Employer|Firm|Employer|Company|Organisation|Organization|Organisations|Organizations|Corporates)[\s]*Name" +
                                         "|Employer|Firm|Company|Organisation|Organization|Organisations|Organizations|Corporates";

                //Regular expression using for Finding Previous employer When Not Getting the Previos Employer In Last logic - Saravana
                Regex rgxEmpDets = new Regex(_strExperienceLTD, RegexOptions.IgnoreCase);
                //Regular expression using for Finding the Employer While Skipping the Education details -- Saravana
                Regex rgxEmp2 = new Regex(_Employer2, RegexOptions.IgnoreCase);
                //Regular expression using for Finding the Employer While Skipping the Education details -- Saravana
                Regex rgxWorkingTillNow = new Regex(_strWorkingTillNow, RegexOptions.IgnoreCase);

                //Regular Expresion Commended by Saravana NOt Used
                #region "Regular Expresion Commended  Not Used"
                //Regex rgxPreExp = new Regex(@"(Pre[\s]{1}|Perior[\s]{1}|Prior[\s]{1}|Previous|Past)[\s]*\w{0,20}[\s]*Experience", RegexOptions.IgnoreCase);
                //Regex rgxEmployerLTD = new Regex(@"(\s(with|With|WITH|for|FOR|For|in|In|IN|at|AT|At|on|ON|On)|[,:;“])\s.{3,50}?\s(Limited|LIMITED|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|Technology|(Co|CO|co)\.|&\s{0,3}(CO|Co|co|Corp)|Inc\.|(M|m)/(S|s))\s?\.?\,?\s");
                #endregion

                Regex rgxExperienceLTD = new Regex(@"^.{0,4}\s?\t{0,2}\b(" + _strExperienceLTD + @")(\s?[\-]?\s?Detail[s]?)?[s]?\b(.{0,4}$|\s*\t*:|\s{1,}?[\-\–]|\s{8})", RegexOptions.IgnoreCase);
                Regex rgxPastExperience = new Regex(@"^.{0,4}\s?\t{0,2}\b(Past|Previous|Present|Current)?\s?\s?(" + _strExperienceLTD + @")(\s?[\-]?\s?Detail[s]?)?\b(.{0,4}$|\s*\t*:|\s{2,}?\-)", RegexOptions.IgnoreCase);
                //Code Commended For Testing Purpose -- Saravana
                //Regex rgxLTD = new Regex(@"\b(([A-Za-z\.\&-]){1,25}\s){1,3}(at)\s(([A-Za-z\.\&-]){1,25}\s){0,3}|(\w{2,25}\s){1,3}at\s(\w{2,25}\s){1,3}(Company|company|Technology|Technologies|Fasteners|Technology)|(Corporation|Limited|LIMITED|LLC|llc|L\.L\.C|Firm|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Bank|Financial Services|GLOBAL SERVICES|agency|Corp|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.?[\s\(]|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc|ASSOCIATES|Software Solutions|global solution|company|Group|Bank|Services| Computers|TECHNOLOGIES|Technology|TECH|COMPUTERS|INCORPORATED|Corporate|Healthcare|Centre|CLINIC|CONSTRUCTION CO)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                Regex rgxLTD = new Regex(@"\b(Pte Ltd|Pte|Pte\.|Corporation|Limited|LIMITED|LLC|llc|L\.L\.C|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Bank|Financial Services|GLOBAL SERVICES|agency|Corp|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.?[\s\(]|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc|ASSOCIATES|Software Solutions|global solution|company|Group|Bank|Services| Computers|TECHNOLOGIES|Technology|TECH|COMPUTERS|INCORPORATED|Corporate|Healthcare|Centre|CLINIC|CONSTRUCTION CO|CONTRACTING CO|DISTRIBUTRS|Distribution|International Airport|Insurance| Infotech|Vice President|Sdn\. Bhd\.|Sdn Bhd|Bhd\.|Sendirian Berhad|Berhad)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                Regex rgxEmployerSplit = new Regex(@"\b(System|Systems|InfoTech|InfoSystems|Outsourcing|Infosolutions)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                //string used for skipping the not limited keywords
                string _tNotLimitedStr = @"birh date|d.o.b|dob|date of birth|tcp/ip|project name|held on|designation:|provided by" +
                     @"|professional studies|computer courses|passport details|passport valid|passport date|practical training" +
                     @"|training program|existing systems|replace existing|Frameworks/APIs|state board|vb6.0,oracle 8i|consulting assignments|consulting assignment" +
                     @"|Consulting Employment|revenues worth|I was on assignment|summer training|previous work area|location|multi-cultural|asia pacific|human resource" + //Human Resource

                     @"|skills|asia-pacific|deployed|Published|Support busines|upgrade|implementaion|pre-sales|playing the role|elected position|top performers|performers of|Hospital projects" +
                     @"|page |strictly confidential|achievement|summer training|operating system|major accomplishments|successful transitions|ms-office|workflow|successful completions|address|Office Products Sales|Language and technology" +
                     @"|trainee exp|top management|planning & scheduling|user meet|symposium|country head|Consultant/Developer|Consultant/Developper|power stations|retail pricing|project management|different process| without|same years of|Designation:" +

                     @"|turn around|law firm|validity|commission basis|counsel / assistant|attending|single system|performing week|reconciliation process|subject matter|Late Mr.|symposium|behalf of|Fun at work|Good at|Alumni Association|Software Skill Set|Technologies used|Execution stage|Excellence In|Bank Loan|Payment Client|Securities Division" +
                     @"|policies|ms office|open Office|academea|percentage|having knowledge|worked on outlook|conversion|valid upto|valid till|passport :|scholarship|fellowship|statistics|student|mathematical|fixed income|package shipping|successfully|training in|Responsible for|PROFILE|Punching Sale bills|payments during|resolving all|for the complete|Installed a foreign" +

                     @"|Service Tax|Making Service|Services like|AMC Services|Contd on page|Contd from page|Activization rate of|Place         :|one of Company|a joint group|Reporting directly to|Group Board Pack|events and projects|Performed personal interviews" +
                     @"|followed up|up cases|associate (corporate)|un-reconciled accounts|zero attrition|responsibilities|sql agent|sponsored|email|honors/activties|tech ed 2006|change requests|ms-office 1997-2000" +
                     @"|part time|Part-time|star performer|promoted to|pat on the back|database on|dashboard server|server databases|invoices processed|OBJECTIVE|Foundation course|Project work|the associates|associates in|Designed and taught|Undergrad thesis|largest Group of|next promotion|Position Held|individual and company|.Bank Reconciliation|Bank Reconciliation|Basic concepts|group housing|Organise the team" + // 
                @"|remoting|must provide|assemblies|framework|extra-curricular|extra curriculam|project/thesis|chapter|award|prize|special training|iccad|card division|application:|email:|graduate student|undergraduate|seminar|applications for|using ssis|created ssis|developed for|Major Projects|SUPPORT PACKAGE|FRONT END|residential project" +

                @"|sql server 2005/2008|sqlserver2008|dotnet2|sql server 2008r2|specification|quarterly|requirements|hedge funds|upgraded sql server|sql server 2005|sql server  2005|sql 2005|sql server 2000|windows 2003|windows 2008|sharepoint 2010|share point 2010|ssas 2008|ssrs 2008|powerview 2012|ssrs 2005|ssis 2008|ssis 2005|sql server 2012|windows servers 2000|windows servers 2003|PL/SQL|SQL Server 2000 to 2005|Server from 2000 to 2005|SQL 2000, 2005 and 2008" +
                @"|windows servers,2003/2008|mscse 2003|mcitp 2008 server|ms-windows 2000|exchange server2000|sql version 2000|customer name|SQL Server 7.0/2000 / 2005|visual studio2005|visual studio 2005|visual studio 2008|visual studio 2010|checkpoint 2000|norton 2002|services 2000|windows 2000|microsoft office 2007|Studio 2008|Studio 2005|Studio 2010|Visual Studio|SilverLight|Exchange server 2007|windows server 2008|Posted at|Reporting to|Position    :|SQL clusters" +
                @"|Enviroment|Has been to|Page\d{1}|ERP 2005|project\:|MS Access 2000|hand over to me|Company code|personal handling";

                Regex rgxNotLTD2 = new Regex(@"[\s,\[\{“‘\(\:](" + _tNotLimitedStr + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase | RegexOptions.Multiline);

                string _tNotLimitedStr1 = @"Service Tax|Making Service|Services like|AMC Services|Bank Reconciliation|group housing|largest Group of|Professional Services|Web Technologies|client Telecommunication services|Telecommunication services to|advancement of technology|Site :|Co ordination|Bank Transections|bank transactions|quality services|Cost Centre/Profit|Insurance services|Web Services|focus groups|service-oriented|Bank Loan|staff with technology";
                Regex rgxNotLTD3 = new Regex(@"[\s,\[\{“‘\(\:](" + _tNotLimitedStr1 + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase | RegexOptions.Multiline);
                string _EmployerBreak = @"(Residential Address|Correspondance Address)";

                Regex rgxEmpbreak = new Regex(_EmployerBreak, RegexOptions.IgnoreCase);


                #region "Regex & Variables"
                //Used in Present Employer Section
                Regex rgxEmplrNow = new Regex(@"^.{0,5}\s?\t{0,2}\b(Current|currently|Present|Present:|Till date|Summer)?.{0,5}\s?\t{0,2}\b((Previous\s?)?" + _Employer + @")\b\s?(\s.{0,3})?(\s*[:\-\–]|\s{3}|\t\s{0,7})", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                //Used in Previos Employer Section
                Regex rgxPrevEmp = new Regex(@"^.{0,5}\s?\t{0,2}\b(Past|Previous)?\s{0,4}(" + _Employer + @")\s?(\s.{0,3})?(\s*[:\-\–]|\s{8}|\t\s{0,7}|\s{3})", RegexOptions.IgnoreCase);
                string strTillNow = @"[\-]?\s?(\bTill\b)?(\bTo\b)?\s?(Today|present|Presently|till date|to till date|to current date|current date|to current date|current date|till now|till present|onwards|onward|ongoing|to present|to till now|now|till|Due|Continuing|Till the Date|Till Date|Till Now|Present|Current Date|TillDate|Current|To Date|to-date|To Now|Now|onward|ongoing|Till|Date|Currently|Current|Actual|continuing|Till the Date)[s]?";//Present
                string strMonth = @"(January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Apl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl|Summer|Winter|Spring)\.?";



                string strMonthTillDate = @"\b(" + strMonth + @")\b\s?.{0,2}\b(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +
                                  @"|\b(" + strMonth + @")(19\d{2}|20\d{2}|\d{1,2})\b\s?.{0,2}\s?\b" + //Feb 2009 – Till Date

                                  @"|\b(" + strMonth + @")(19\d{2}|20\d{2}|\d{1,2})\b\s?.{0,2}\s?\b" +
                                  @"|\b(" + strMonth + @")\b\s?.{0,2}\b(19\d{2}|20\d{2}|\d{1,2})\b\s?.{0,2}\s?\b" +
                                  @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}\s?\b" +
                                  @"|\b(" + strMonth + @")\s?[,\'’]?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}\s?\b" +
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}\s?\b" +
                                  @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}\s?\b" +
                                  @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b" +
                                  @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}\s?\b" +
                                  @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}\s?\b" +
                                  @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}\s?\b";

                string strMonthDate = @"\b(" + strMonth + @")\s?[,\'’]?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\s?\d{1,2}[,\'’]\s(19\d{2}|20\d{2}|\d{2}|\d)\b" + // SEP, 2001 - May 31, 2004 
                                   @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000- june 2004
                                   @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)\b\s?.?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000 - june 2004  -- January 2009 – December 2009
                                   @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July2000 - May2004       
                                   @"|\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // May 2000- june2004
                                   @"|\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July2000 - May 2004 

                                   @"|\b(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  //April – May 2011
                                   @"|\b(" + strMonth + @")\s?[,\'’]?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\s?[,\'’]?\s?\d{1,2}(st|nd|rd|th)?\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // May,04th 2000- june,22nd 2004
                                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +

                                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +  // July98 - May2004 
                                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\b" +
                                   @"|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?(" + strMonth + @")\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b" +  // July98 - May2004 
                                   @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                                   @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                                   @"|\b(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(19\d|20\d|\d)\d(" + strMonth + @")\b" +
                                   @"|\b(19\d|20\d|\d)\d(" + strMonth + @")\b\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?(\d{2}|19\d{2}|20\d{2})\s?.{0,1}\s?\b(" + strMonth + @")\b" +
                                   @"|\b(" + strMonth + @")\b\s?\s?.{0,1}(till|to|to Till)\s?(\d{4}|\d{2})\b\s?[,\-]?\s*(\d{4}|\d{2})\b" +    //May 1999 to 2000

                                   @"|\b(" + strMonth + @")\b\s?[,\-]?\s?\b(" + strMonth + @")\b\s?.{0,1}\s?(\d{4}|\d{2})\b" +
                                   @"\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b(" + strMonth + @")\b\s?.{0,2}(19\d{2}|20\d{2}|[456789]\d|[0]\d|\d)\b" +  // May 2000- june 2004  March 07 –Dec 10
                                   @"|\b(" + strMonth + @")[\.’\s]?[\s]?(\d{4}|\d{2})[\s]?[\-\–][\s]?(" + strMonth + @")[\.’\s]?[\s]?(\d{4}|\d{2})\b";
                //Summer 2009

                string _strEducation = @"Education|E d u c a t i o n|A c a d e m i c   q u a l i f i c a t i o n s|Q u a l i f i c a t i o n s|A c a d e m i c|(qualification|Qualfication|Educational|Academic|Education)[s]? summary" +
                                      @"|(Educational|Academic|Education|professional)[s]? (Qualification|Qualfication)|High Academic[s]? (Education|Qualification|Qualfication)" +
                                      @"|Higher[s]? Academic[s]? (Education|Qualification|Qualfication)|Higher[s]? (Academic|Education|Qualification|Qualfication)" +
                                      @"|(EDUCATION|QUALIFICATION|QUALFICATION|ACADEMIC)[S]? BACKGROUND" +
                                      @"|(EDUCATION|QUALIFICATION|QUALFICATION|ACADEMIC)[S]?\s?\/\s?TRAINING[S]?" +
                                      @"|(EDUCATIONAL|EDUCATION|EDUCATIONAL|QUALIFICATION|QUALFICATION)[s]? PROFILE|EDUCATION[s]? AND TRAINING|EDUCATION[s]? & TRAINING" +
                                      @"|(Qualification|Qualfication|Education)[s]? AND TRAINING|(Qualification|Qualfication|Education)[s]? & TRAINING|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? AND CREDENTIAL" +
                                      @"|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? & CREDENTIAL|(EDUCATION|QUALIFICATION|QUALFICATION|ACADEMIC)[s]? HISTORY|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? / CERTIFICATION" +
                                      @"|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? & CERTIFICATION|(EDUCATION|QUALIFICATION|QUALFICATION)[S]? AND CERTIFICATION|Summary of (qualification|Qualfication|Education|Academic)" +
                                      "|EDUCATION|Qualification|Qualfication|ACADEMIC|scholastic|Academea|ACADEMIA|scholastic (credential|record|information|Selected Publications|COURSES/WORKSHOPS|Patents|Good working knowledge)|Patents|Patent|Educational|Certificates";

                string strSubstring12 = @"(ASSOCIATED|EMPLOYED|Worked|Served)[\s]*(WITH|IN|FOR|AT)" +
                                        @"|(ASSOCIATED|ASSOCIATE|WORKING|WORKED|EMPLOYED|SERVING|SERVED|CURRENTLY|Company presently working)\s{1,4}AS\s.{1,100}\s(IN|FOR|WITH|AT)";

                string _PresentEmpr1 = @"(presently working|Presently working as|presently serving|at present working|at present serving|Presenting working|presently I am working|presently I am serving|Presently i am|I am an associate|I am associated|Till date" +
                                      @"|currently working|Currently working as|currently serving|Currently I am working|Currently I am serving|Currently working full time|Currently i am|Currently)[\s]+(with|for|in|at)\b" +
                                      @"|Permanent employee of|Permanent employee for|Currently joined|Company presently working" +
                                      @"|(WORKING|SERVING|ASSOCIATED|ASSOCIATE|EMPLOYED|CURRENTLY)\b[\s]*(WITH|IN|FOR|AT)\b" +
                                      @"|(ASSOCIATED|ASSOCIATE|WORKING|EMPLOYED|SERVING)\b\s{1,4}AS\s.{1,50}?\s(IN|FOR|WITH|AT)\b";

                string _PreviousEmpr = @"\b(WORKING|SERVING|ASSOCIATED|ASSOCIATE|EMPLOYED|WORKED|CURRENTLY)\b[\s]*(WITH|IN|FOR|AT)\b" +
                                     @"|(ASSOCIATED|ASSOCIATE|WORKING|EMPLOYED|SERVING|WORKED)\b\s{1,4}AS\s.{1,50}?\s(IN|FOR|WITH|AT)\b";

                string _PresentEmpr2 = @"(presently working|presently serving|at present working|at present serving|Presenting working|presently I am working|presently I am serving|Presently i am|I am an associate|I am associated" +
                                        @"|currently working|currently serving|Currently I am working|Currently I am serving|Currently working full time|Currently i am|currently)[\s]+(with|for|in|at)\b" +
                                        @"|Permanent employee of|Permanent employee for|Currently joined|Company presently working|Presently, serving as" +
                                        @"|(Present|currently|Current)\s+(Organisation|Organisation|Organization|Company|Employment|Employer)[s]?\b\s?(\s?.{0,2}\s?\bDesignation[s]?\b\s?.{0,2}\s?)?[\s]*([\s]{3}|[#,:\-])";

                string _strMonthDate = @"\b[0-3]?\d\s?[\.\/]\s?(0[1-9]|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s{0,3}[-]?\s?([\-\–\—]|to|till|to till)\s?[-]?\s{0,3}\d{1,2}\s?[\.\/]\s?(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\b" + //02/11/2007 to 25/03/2008 

                                           @"|\b(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\b" + // 10/1996-07/2002  
                                           @"|\b(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[1-9]\d|[0]\d)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[1-9]\d|[0]\d)\b" + // 10/09-07/10
                                           @"|\b(0\d|1[012]|[1-9])(?:[0-9]{2})\s?[\.\/]\s?\s[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(0\d|1[012]|[1-9])\s?[\.\/]\s?(?:[0-9]{2})\s{0,3}\b" +//01/00-12/06 

                                           @"|\b(20[01]\d|19[4-9]\d)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}(20[01]\d|19[4-9]\d)\b" + //1997-2001
                                           @"|\(\s?[0-3]?\d\s?[\.\/]\s?(0[1-9]|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}\(\s?[0-3]?\d\s?[\.\/]\s?(0[1-9]|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)" + // (02/11/2007) to (25/03/2008)

                                           @"|\(\s?(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)\s{0,3}[-]?\s?([\-\–]|to|till|to till)\s?[-]?\s{0,3}\(\s?(0\d|1[012]|[1-9])\s?[\.\/]\s?(19[4-9]\d|20[01]\d|[4-9]\d|[0]\d)\s?\)" + // (10/1996) - (07/2002)
                                           @"|\(\s?(20[01]\d|19[4-9]\d)\s?\)\s{0,3}[-]?\s?([\-\–\~]|to|till|to till)\s?[-]?\s{0,3}\(\s?(20[01]\d|19[4-9]\d)\s?\)"; // (1997) - (2001)



                string _strSinceMonthDate = @"(\s{0,3}([\-\–\’]|to)\s{0,3})?\b\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\b(\s{0,3}([\-\–]|to)\s{0,3})?" +
                @"|(\s{0,3}([\-\–\’]|to)\s{0,3})?\b(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\b(\s{0,3}([\-\–]|to)\s{0,3})?" +
                @"|(\s{0,3}([\-\–\’]|to)\s{0,3})?\b(20\d{2}|19\d{2})\b(\s{0,3}([\-\–]|to)\s{0,3})?" +
                @"|(\s{0,3}([\-\–\’]|to)\s{0,3})?\(\s?\d{1,2}\s?/\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)(\s{0,3}([\-\–]|to)\s{0,3})?" +
                @"|(\s{0,3}([\-\–\’]|to)\s{0,3})?\(\s?(0\d|1[012]|[1-9])\s?/\s?(20\d{2}|19\d{2}|\d{2})\s?\)(\s{0,3}([\-\–]|to)\s{0,3})?" +

                @"|(\s{0,3}([\-\–\’]|to)\s{0,3})?\(\s?(20\d{2}|19\d{2})\s?\)(\s{0,3}([\-\–]|to)\s{0,3})?";

                string srgxExpTabTillDate = @"(\s{8}|\t\s{0,7})(.{0,2}\b(From|Since|FROM )\b)?.{0,2}\s?\b(" + strMonthTillDate + @")\b\s*\t?\s*(" + strTillNow + @")\b\s?.{0,1}?\s?.{0,2}$" +
                                              @"|(\s{8}|\t\s{0,7})(.{0,2}\b(From|Since|FROM )\b)?\s?\s?(" + _strSinceMonthDate + @")\s*\t?\s*(" + strTillNow + @")\b\s?.{0,1}?\s?.{0,2}$" +
                                              @"|(\s{8}|\t\s{0,7}).{0,2}\b(From|Since|FROM |Onwards|Onward|ongoing|Now to|Joining date)\b.{0,2}\s?(" + strMonthTillDate + @")\b\s?.{0,1}?\s?.{0,2}\b\s*\t?\s*(" + strTillNow + @")$" +
                                              @"|(\s{8}|\t\s{0,7}).{0,2}\b(From|Since|FROM |Onwards|Onward|ongoing|Now to|Joining date)\b.{0,2}\s?(" + strMonthTillDate + @")\b\s?.{0,1}?\s?.{0,2}$" +
                                              @"|(\s{8}|\t\s{0,7}).{0,2}\b(From|Since|FROM |Onwards|Onward|ongoing|Now to|Joining date)\b.{0,2}\s?(" + _strSinceMonthDate + @")\s?$";

                string srgxStartEndTillDate = @"^((Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?(.{0,2}\b(From|FROM |Since)\b)?.{0,2}\s?\b(" + strMonthTillDate + @")\b\s*\t?\s*(" + strTillNow + @")\b" +
                                                @"|\b(" + strMonthTillDate + @")\b\s*\t?\s*(" + strTillNow + @")\b\s?.{0,1}?\s?.{0,2}$" +
                                                @"|^((Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?(.{0,2}\b(From|FROM |Since)\b)?\s?(" + _strSinceMonthDate + @")\s*\t?\s*(" + strTillNow + @")\b" +
                                                @"|(" + _strSinceMonthDate + @")\s*\t?\s*(" + strTillNow + @")\b\s?.{0,1}?\s?.{0,2}$" +
                                                @"|^((Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?.{0,2}\b(From|FROM |Since|Onwards|Onward|ongoing|Now to|Joining date)\b.{0,2}\s?\b(" + strMonthTillDate + @")\b" +
                                                @"|\b(From|FROM |Since|Onwards|Onward|ongoing|Now to)\b\s?.{0,2}\s?\b(" + strMonthTillDate + @")\b\s?.{0,1}?\s?.{0,2}$" +
                                                @"|^((Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?.{0,2}\b(From|FROM |Since|Onwards|Onward|ongoing|Now to|Joining date)\b\s?(" + _strSinceMonthDate + @")" +
                                                @"|\b(From|FROM |Since|Onwards|Onward|ongoing|Now to)\b\s?\s?(" + _strSinceMonthDate + @")\s?$";

                string srgxExpTillDate = @"(\b|\s)(" + strMonthTillDate + @")\s*\t?(\b|\s|\t)\s*(" + strTillNow + @")(\b|\s)" + //23rd May 2011 – Till date
                                         @"|(" + _strSinceMonthDate + @")\s*\t?\s*(" + strTillNow + @")(\b|\s)" +
                                         @"|(\b|\s)(From|FROM |Since|Onwards|Onward|ongoing|Now to|Joining date)\b\s?.{0,2}\s?(\b|\s)(" + strMonthTillDate + @")(\b|\s)" +
                                         @"|(\b|\s)(From|FROM |Since|Onwards|Onward|ongoing|Now to|Joining date)(\b|\s)\s?.{0,2}\s?(" + _strSinceMonthDate + @")";
                // Used for present employer -- Logic 4
                Regex rgxExpTabTillDate = new Regex(srgxExpTabTillDate, RegexOptions.IgnoreCase | RegexOptions.RightToLeft);
                Regex rgxStartEndTillDate = new Regex(srgxStartEndTillDate, RegexOptions.IgnoreCase | RegexOptions.RightToLeft);
                Regex rgxExpTillDate = new Regex(srgxExpTillDate, RegexOptions.IgnoreCase | RegexOptions.RightToLeft);

                Regex rgxTillWorking = new Regex(_PresentEmpr1, RegexOptions.IgnoreCase);
                Regex rgxNowWorking = new Regex(@"\b(" + _PresentEmpr2 + @")", RegexOptions.IgnoreCase);
                Regex rgxWorkedExp = new Regex(_PreviousEmpr, RegexOptions.IgnoreCase);
                //infy Year:2011
                string reFrmt = "((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d])(\\/)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])"; // 10/2010
                string reFrmtONE = "((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d])(-)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])"; // 10-2010  

                //infy
                string strTabDateTab = @"(\s{8}|\t\s{0,7})(.{0,2}\b(From|FROM |Since)\b)?.{0,2}\s?(" + strMonthDate + "|" + _strMonthDate + @")\s*(\s{8}|\t\s{0,7})" +
                                       @"|(\s{8}|\t\s{0,7})(.{0,2}\b(From|FROM |Since)\b)?.{0,2}\s?(" + strMonthDate + "|" + _strMonthDate + @")\s*$" +
                                       @"|" + reFrmt + "|" + reFrmtONE + "|" + reFrmt +
                                       @"|^((Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?(.{0,2}\b(From|FROM |Since)\b)?.{0,2}\s?(" + strMonthDate + "|" + _strMonthDate + @")\s*(\s{8}|\t\s{0,7})";

                Regex rgxTabDateTab = new Regex(strTabDateTab, RegexOptions.IgnoreCase);

                //Saravana
                string regex1 = "((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])(\\s+).*?((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])";
                string regex2 = "((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d])(.)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])(\\s+)((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d]).*?((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])";	// 10/2010 11/2011

                Regex rgxExpTabDate = new Regex(@"(\s{8}|\t\s{0,7})(.{0,2}\b(From|FROM |Since)\b)?.{0,2}\s?(" + strMonthDate + "|" + _strMonthDate + "|" + regex1 + "|" + regex2 + @")\s?.{0,20}$", RegexOptions.IgnoreCase); // "Year:2011"
                Regex rgxStartEndDate = new Regex(@"^((Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?(.{0,2}\b(From|FROM |Since)\b)?.{0,2}\s?(" + strMonthDate + "|" + _strMonthDate + @")|(" + strMonthDate + "|" + _strMonthDate + @")\s?.{0,2}$", RegexOptions.IgnoreCase);


                string regxDatateFrm = "(()(\\d)(\\d)(\\d)(\\d)(-)(\\d)(\\d)())"; //2002-04
                Regex REgexsDatateFrm = new Regex(regxDatateFrm, RegexOptions.IgnoreCase);

                Regex rgxExpDate = new Regex(@"((now|Duration|Tenure|Period)\s{0,4}[:\-\s]\s{0,4})?(From |FROM |FROM|Since )?\s?" + strMonthDate + "|" + _strMonthDate + "|" + regex2 + "|" + regex1, RegexOptions.IgnoreCase); // reFormate4 10/10 01/12   //New Format --  1st Jun’2011 Test
                Regex rgxExpDateOnly = new Regex(@"((Duration|Tenure|Period)?\s{0,4}[:\-\s]\s{0,4})?(.{0,2}\b(From|Since)\b)?.{0,2}\s?(" + strMonthDate + "|" + _strMonthDate + @")\s?.{0,2}$", RegexOptions.IgnoreCase);

                string strResponsibilty = @".{0,10}\bResponsible|Responsibilty|Reponsibilities|Achievement";
                Regex rgxReponsibility = new Regex(strResponsibilty, RegexOptions.IgnoreCase);
                Regex rgxWorkedAs = new Regex(@"\b(" + strSubstring12 + @")\b", RegexOptions.IgnoreCase);

                //Used for Education Skipping While parsing Employer
                Regex rgxEducnEnd = new Regex(@"(" + _strEducation + ")", RegexOptions.IgnoreCase);

                //Regex rgxSkills = new Regex(@"\b(Technical|Skill|CERTIFICATION|Training)[s]?\b", RegexOptions.IgnoreCase); // 
                Regex rgxDuration = new Regex(@"^.{0,5}\s*\b(Tenure|Title|Period|(Project|Client|consultant)[s]?\s(Title|Name)|Project|Client|Role)[s]?\d{0,2}\b(\s+.{1}\s|\s{3}|\s{0,3}.{0,3}\s{0,3}[#,:\-\(\–])", RegexOptions.IgnoreCase);

                Regex rgxPeriod = new Regex(@"^.{0,2}\b(Duration|Tenure|Period)[s]?\b", RegexOptions.IgnoreCase);
                Regex rgxClient = new Regex(@"^.{0,2}\s{0,4}\b(Client|Customer|Title)[s]?\b|^.{0,2}\s{0,4}\bProject[s]?\s{0,4}([,:\-]|\s{4})", RegexOptions.IgnoreCase);

                Regex rgxTblOrgn = new Regex(@"\t\s*(Name of\s)?(Company|Firm|Organization|Total Expr|Total Exp|From|Organisation|Employer)[s]?(\sName)?\b|\b(Name of\s)?(Company|Firm|Organization|Organisation|Employer)[s]?(\sName)?\s*[:]?\s*\t");
                Regex rgxTblDurn = new Regex(@"\t(Duration|Tenure|Period|Designation|Role|Job[s]? Title)\b|\b(Duration|Tenure|Period|Designation|Role|Job[s]? Title)\s*[:]?\t", RegexOptions.IgnoreCase);

                //6.2 years with Bank of America having
                string tPresentEmployerTop1 = @"^(\d{1}|\d{2})\syears with|Company Name |Company    :|COMPANY:|Organization|Organisation|Company";
                //"|Company Name ";
                Regex exPresentEmp2 = new Regex(@"[\s,\{“‘\(\.](" + tPresentEmployerTop1 + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                //@"|working as a\s(\w{2,25}\s){1,4}[\s]?with";

                string tAddressSearch = @"plot no|street|flat no|door no|street no|d.no |place of birth:|st cross| colony|address:|address-|address :| house| current location:| cottage|House N0 | nivas| crossing| st floor|\s[a-z|A-Z|]{0,2}\s\d{5}";
                Regex rgxAddress = new Regex(@"\b" + tAddressSearch + @"\b", RegexOptions.IgnoreCase);
                string[] sSDesignation = { ":](", ")[," };
                string[] sSDesignation1 = FCommon.rgxDesignations.ToString().Split(sSDesignation, StringSplitOptions.RemoveEmptyEntries);
                Regex rgxDesignation = new Regex(@"(" + FCommon.rgxDesignations.ToString().Split(sSDesignation, StringSplitOptions.RemoveEmptyEntries)[1] + @")[\s]*at", RegexOptions.IgnoreCase);
                Regex rgxNotEmp1 = new Regex(@"\b(working in teams|working in team)\b", RegexOptions.IgnoreCase);
                string tPresentEmployerTop = @"currently working as a (\w{3,25}\s){1,4}with" +
                   @"|currently working as (\w{3,25}\s){1,4}in" +
                   @"|currently working as an\s(\w{3,25}\s){1,4}for" +
                   @"|currently working at" +
                   @"|Currently working as" +
                    @"|presently working as|presently working in|Currently associated with" +

                   @"|working as\s(\w{2,25}\s){1,4}at|working as a\s(\w{2,25}\s){1,4}at|working as an\s(\w{2,25}\s){1,4}at" +
                    //@"|worked as\s(\w{2,25}\s){1,4}at|worked as a\s(\w{2,25}\s){1,4}at|worked as an\s(\w{2,25}\s){1,4}at" +
                   @"|working as\s(\w{2,25}\s){1,5}at|working as a\s(\w{2,25}\s){1,5}at|working as an\s(\w{2,25}\s){1,5}at" +
                   @"|workes as\s(\w{2,25}\s){1,5}at|workes as a\s(\w{2,25}\s){1,5}at|workes as an\s(\w{2,25}\s){1,5}at" +
                   @"|working as an\s(\w{2,25}\s){1,4}for" +
                   @"|working as a\s(\w{2,25}\s){1,4}in|working as  a\s(\w{2,25}\s){1,4}in" +
                   @"|Last Position from" +
                   @"|working as\s(\w{2,25}\s){1,4}in" +
                   @"|working as\s(\w{2,25}\s){1,4}[\s]?with" +

                   "|Working with|working in" +
                   @"|working as a\s(\w{2,25}\s){1,4}[\s]?with";
                Regex exPresentEmp1 = new Regex(@"[\s,\{“‘\(\.](" + tPresentEmployerTop + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);

                //Regex exPresentEmp1 = new Regex(@"[\s,\{“‘\(\.](" + tPresentEmployerTop + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase); Currently working as AST @ TATA Consultancy Services
                string tPreviousEmployerTop = @"worked as a (\w{3,25}\s){1,4}with" +
                     @"|worked as (\w{3,25}\s){1,4}in" +
                     @"|worked as an\s(\w{3,25}\s){1,4}for" +
                     "|worked at" +
                     "|previously worked as" +
                     "|previously worked with" +
                     "|worked with|I worked in|Worked in" +
                    "|years of experience in" +
                     @"|worked with\s(\w{2,25}\s){1,4}at|worked as a\s(\w{2,25}\s){1,4}at|worked as an\s(\w{2,25}\s){1,4}at" +

                     @"|worked as\s(\w{2,25}\s){1,4}at|worked as a\s(\w{2,25}\s){1,4}at|worked as an\s(\w{2,25}\s){1,4}at" +

                     @"|worked with\s(\w{2,25}\s){1,5}at|worked as a\s(\w{2,25}\s){1,5}at|worked as an\s(\w{2,25}\s){1,5}at" +
                     @"|worked as\s(\w{2,25}\s){1,5}at|worked as a\s(\w{2,25}\s){1,5}at|worked as an\s(\w{2,25}\s){1,5}at" +

                     @"|worked with an\s(\w{2,25}\s){1,4}for" +
                     @"|worked with a\s(\w{2,25}\s){1,4}in" +
                     @"|worked with a\s(\w{2,25}\s){1,4}in" +
                     @"|worked as\s(\w{2,25}\s){1,4}in|worked as a\s(\w{2,25}\s){1,4}in" +
                     @"|worked as\s(\w{2,25}\s){1,4}[\s]?with" +
                     @"|year of experience in\s(\w{2,25}\s){1,16}as a|work experience in|year’s experience in" +
                     @"|worked as a\s(\w{1,25}\s){1,4}[\s]?for|Worked for" +
                     @"|worked as a\s(\w{2,25}\s){1,4}[\s]?with";

                Regex exPreviousEmp1 = new Regex(@"[\s,\{“‘\(\.](" + tPreviousEmployerTop + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                Regex rgxSentence = new Regex(@"\b(with|in|of|to|at|for|and|the|etc)\b", RegexOptions.IgnoreCase);
                string strNotEMpDet = "MAJOR PROJECTS|Activities and Leadership:|Honors/Activities:|COURSES/WORKSHOPS ATTENDED|ADDITIONAL  SKILLS|Academic Project|Academic Project:|Process Metric Performance|Personality Traits|PUBLICATIONS|Publication|Professional Memberships / Certifications|Activities & Leadership|PROJECT PROFILE|patents|patent|Completed SAP Functional class";
                Regex RegExNoEMpDet = new Regex(@"[\s,\[\{“‘\(\:](" + strNotEMpDet.ToString() + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.IgnoreCase | RegexOptions.Multiline);

                int _EdcnStart1 = 0, _EdcnStart2 = 0;
                int _EdcnEnd1 = 0, _EdcnEnd2 = 0;
                #endregion

                #region Index Of Educations

                try
                {
                    Regex rgxEnd = new Regex(@"\b(Working|Worked|Experience|E X P E R I E N C E|Employer|Project|Company|Experience|Role\s*:)[s]?\b", RegexOptions.IgnoreCase); //Client
                    Regex rgxStart1 = new Regex(@"\b(ADDITIONAL INFORMATION|EXTRACURRICULAR ACTIVITIES|INTERNSHIP EXPERIENCE|final project|Project Analyst\s*:)[s]?\b", RegexOptions.IgnoreCase);
                    for (int cnt = 0; cnt < DataEmployer.Length && _EdcnEnd2 == 0; cnt++)
                    {
                        if (rgxEducnEnd.IsMatch(DataEmployer[cnt].Trim()) == false && rgxStart1.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                        if (_EdcnStart1 != 0 && _EdcnStart2 == 0)
                            _EdcnStart2 = cnt;
                        if (_EdcnStart1 == 0)
                            _EdcnStart1 = cnt;
                        int count = 0;
                        int ct = 0;
                        for (ct = cnt + 1; ct < DataEmployer.Length && count < 20; ct++)
                        {
                            if (count > 9 && DataEmployer[ct].Replace(" ", "").Trim().Length < 2)
                                break;
                            if (DataEmployer[ct].Trim().Length < 2) continue;
                            if (DataEmployer[ct].Replace(" ", "").Trim().Length > 10)
                                count++;
                            if (count == 9 && ct - cnt == 9)
                                count--;
                            if (rgxEducnEnd.IsMatch(DataEmployer[ct])) continue;
                            if ((rgxEnd.IsMatch(DataEmployer[ct].Trim()) || rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxEmp2.IsMatch(DataEmployer[ct].Trim()) || rgxWorkingTillNow.IsMatch(DataEmployer[ct].Trim()) || rgxWorkedAs.IsMatch(DataEmployer[ct].Trim()) || rgxNowWorking.IsMatch(DataEmployer[ct].Trim())) && rgxStart1.IsMatch(DataEmployer[ct].Trim()) == false)
                                break;
                        }
                        if (_EdcnEnd1 != 0 && _EdcnEnd2 == 0)
                            _EdcnEnd2 = ct;
                        if (_EdcnEnd1 == 0)
                            _EdcnEnd1 = ct;
                        cnt = ct;
                    }
                    if (_EdcnStart1 > 0)
                        _EdcnStart1 = _EdcnStart1;
                    if (_EdcnStart2 > 0)
                        _EdcnStart2 = _EdcnStart2;
                }
                catch { }

                #endregion

                #region

                try
                {
                    Regex rgxSpace = new Regex(@"\s{7,}?|\t{2,}?|\t\s*\t");
                    for (int cnt = 0; cnt < tblEmplrData.Count; cnt++)
                        if (rgxSpace.IsMatch(tblEmplrData[cnt].ToString()))
                            tblEmplrData[cnt] = tblEmplrData[cnt].ToString().Replace(rgxSpace.Match(tblEmplrData[cnt].ToString()).ToString(), Convert.ToChar(9).ToString());
                    for (int cnt = 0; cnt < tblEmplrData.Count; cnt++)
                        if (rgxSpace.IsMatch(tblEmplrData[cnt].ToString()))
                            tblEmplrData[cnt] = tblEmplrData[cnt].ToString().Replace(rgxSpace.Match(tblEmplrData[cnt].ToString()).ToString(), Convert.ToChar(9).ToString());

                }
                catch { }

                #endregion

                //New code for Present employer.......
                string strPresentEmpDate = "";
                StringBuilder strbPresentEmplyr = null;
                StringBuilder strbEmplrTillDate = null;
                strbPresentEmplyr = new StringBuilder();
                strbEmplrTillDate = new StringBuilder();
                int ColumnIndex = -1;

                #region Format for Table Date
                try
                {
                    if (tblEmplrData.Count > 0)
                    {
                        for (int cnt = 0; cnt < tblEmplrData.Count && ColumnIndex == -1; cnt++)
                        {
                            if (rgxLTD.IsMatch(tblEmplrData[cnt].ToString()) == false) continue;
                            if (rgxExpDate.IsMatch(tblEmplrData[cnt].ToString()) == false && rgxExpTabDate.IsMatch(tblEmplrData[cnt].ToString()) == false) continue;
                            string[] TableArray = tblEmplrData[cnt].ToString().Split(Convert.ToChar(9));
                            for (int ct = 0; ct < TableArray.Length; ct++)
                            {
                                if (rgxLTD.IsMatch(TableArray[ct]))
                                {
                                    ColumnIndex = ct; break;
                                }
                            }
                        }
                    }
                }
                catch { }
                #endregion

                bool tYearInfyFormat1 = false;
                string tinfyKey = "0", tinfyKey1 = "0", tinfyKey2 = "0", tinfyKey3 = "0";
                for (int ct = 0; ct < tblEmplrData.Count; ct++)
                {
                    //LAST 3 FULL TIME EMPLOYMENT DETAILS (begin with latest)
                    Regex rKey = new Regex("(A)(d)(d)(r)(e)(s)(s)(\\s+)(L)(i)(n)(e)(\\s+)(1)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    Regex rKey1 = new Regex("(L)(A)(S)(T)(\\s+)(3)(\\s+)(F)(U)(L)(L)(\\s+)(T)(I)(M)(E)(\\s+)(E)(M)(P)(L)(O)(Y)(M)(E)(N)(T)(\\s+)(D)(E)(T)(A)(I)(L)(S)(\\s+)(\\()(b)(e)(g)(i)(n)(\\s+)(w)(i)(t)(h)(\\s+)(l)(a)(t)(e)(s)(t)(\\))", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    Regex rKey2 = new Regex("(A)(d)(d)(r)(e)(s)(s)(\\s+)(L)(i)(n)(e)(\\s+)(2)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    Regex rKey3 = new Regex("(A)(d)(d)(r)(e)(s)(s)(\\s+)(L)(i)(n)(e)(\\s+)(3)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    Match mtchKey = rKey.Match(tblEmplrData[ct].ToString());
                    Match mtchKey1 = rKey1.Match(tblEmplrData[ct].ToString());
                    Match mtchKey2 = rKey2.Match(tblEmplrData[ct].ToString());
                    Match mtchKey3 = rKey3.Match(tblEmplrData[ct].ToString());
                    if (mtchKey.Success == true)
                        tinfyKey = "1";
                    if (mtchKey1.Success == true)
                        tinfyKey1 = "1";
                    if (mtchKey2.Success == true)
                        tinfyKey2 = "1";
                    if (mtchKey3.Success == true)
                        tinfyKey3 = "1";
                    if (tinfyKey == "1" && tinfyKey1 == "1" && tinfyKey2 == "1" && tinfyKey3 == "1")
                    {
                        tYearInfyFormat1 = true;
                        break;
                    }
                }
                StringBuilder strbPreviousDesignation = new StringBuilder();
            #endregion


                if (HireCraft.FCommon.SC_DisableParsingofPresentEmployer == false)
                {
                    #region  Present Employer Label -------0
                    try
                    {
                        int _Rowindex = -1;
                        int _count = -1;
                        bool flagTab = false;
                        int RowIndex = 0;
                        for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                        {
                            RowIndex = 0;
                            flagTab = false;

                            if (DataEmployer[cnt].ToString().Trim().Length < 1)
                            { _Rowindex = cnt; continue; }

                            if (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString().Trim()) == false || rgxExpDate.IsMatch(DataEmployer[cnt].ToString().Trim()) || exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim()) == true) continue;
                            //if (DataEmployer[cnt].ToString().IndexOf(Convert.ToChar(9)) < 0) continue;
                            string[] strArryOrgn = null;
                            if (ColumnIndex > -1)
                            {
                                strArryOrgn = DataEmployer[cnt].ToString().Trim().Split(Convert.ToChar(9));
                                if (ColumnIndex < strArryOrgn.Length)
                                {
                                    strbPresentEmplyr.Append(strArryOrgn[ColumnIndex].Trim());
                                    RowIndex = cnt;
                                }
                                flagTab = true;
                            }
                            if (strbPresentEmplyr.Length > 2)
                                ReplaceAll(ref strbPresentEmplyr);
                            if (strbPresentEmplyr.Length < 2)
                            {
                                flagTab = false;
                                if (((cnt - 1 > 0 && rgxExpDate.IsMatch(DataEmployer[cnt - 1].ToString().Trim())) || (cnt + 1 < DataEmployer.Length - 1 && rgxExpDate.IsMatch(DataEmployer[cnt + 1].ToString().Trim()))) == false && ((rgxExpTillDate.IsMatch(DataEmployer[cnt + 1].ToString().Trim())) && (rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].ToString().Trim()))) != false) continue;
                                if (_Rowindex + 1 < DataEmployer.Length - 1 && rgxTblOrgn.IsMatch(DataEmployer[_Rowindex + 1].ToString().Trim()) && rgxTblDurn.IsMatch(DataEmployer[_Rowindex + 1].ToString().Trim()))
                                {
                                    strArryOrgn = DataEmployer[_Rowindex + 1].ToString().Trim().Split(Convert.ToChar(9));
                                    for (int ct = 0; ct < strArryOrgn.Length; ct++)
                                    {
                                        _count++;
                                        if (rgxTblOrgn.IsMatch(Convert.ToChar(9) + strArryOrgn[ct] + Convert.ToChar(9)))
                                            break;
                                    }
                                    for (int ct = 0; ct < strArryOrgn.Length; ct++)
                                    {
                                        if (strArryOrgn[ct].Trim().Length > 20)
                                        { _count = -1; break; }
                                    }
                                }
                                if (_count > -1)
                                {
                                    strArryOrgn = DataEmployer[cnt].ToString().Trim().Split(Convert.ToChar(9));
                                    if (_count < strArryOrgn.Length)
                                    {
                                        strbPresentEmplyr.Append(strArryOrgn[_count].Trim());
                                        RowIndex = cnt;
                                    }
                                }
                                else if (cnt + 1 < DataEmployer.Length - 1 && rgxLTD.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) && DataEmployer[cnt + 1].Trim().Length < 100)
                                {
                                    //checked just above one line Ltd word is there or not
                                    strbPresentEmplyr.Append(DataEmployer[cnt + 1].ToString().Trim());
                                    RowIndex = cnt + 1;
                                }

                                else
                                {
                                    strbPresentEmplyr.Append(DataEmployer[cnt].ToString().Trim());
                                    RowIndex = cnt;
                                }
                            }
                            if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString()) == true) continue;
                            strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt].ToString().Trim()).ToString());

                            strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                            if (strbPresentEmplyr.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPresentEmplyr.ToString().Trim()))
                                strbPresentEmplyr.Replace(strbPresentEmplyr.ToString(), "");
                            if (strbPresentEmplyr.Length > 2 && flagTab == false)
                                ReplaceAll(ref strbPresentEmplyr);
                            if (strbPresentEmplyr.ToString().Trim().Length > 1)
                            {
                                PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                PresentEmployer = FCommon.rgxDesignations.Replace(" " + PresentEmployer.ToString(), "");
                                try
                                {
                                    if ((rgxLTD.IsMatch(PresentEmployer.ToString()) == true) && (rgxLTD.Match(PresentEmployer.ToString()).Index + rgxLTD.Match(PresentEmployer.ToString()).ToString().Length) < PresentEmployer.ToString().Length && rgxLTD.Match(PresentEmployer.ToString()).Index > 3)
                                        PresentEmployer = PresentEmployer.ToString().Trim().Substring(0, rgxLTD.Match(PresentEmployer.ToString()).Index + rgxLTD.Match(PresentEmployer.ToString()).ToString().Length);
                                    else
                                        PresentEmployer = PresentEmployer.ToString();

                                    if (rgxLTD.IsMatch(PresentEmployer.ToString()) == false && (rgxEmployerSplit.IsMatch(PresentEmployer.ToString()) == true) && (rgxEmployerSplit.Match(PresentEmployer.ToString()).Index + rgxEmployerSplit.Match(PresentEmployer.ToString()).ToString().Length) < PresentEmployer.ToString().Length && rgxEmployerSplit.Match(PresentEmployer.ToString()).Index > 3)
                                        PresentEmployer = PresentEmployer.ToString().Trim().Substring(0, rgxEmployerSplit.Match(PresentEmployer.ToString()).Index + rgxEmployerSplit.Match(PresentEmployer.ToString()).ToString().Length);
                                    else if (PresentEmployer.Length > 120 && (rgxEmployerSplit.IsMatch(PresentEmployer.ToString()) == true) && (rgxEmployerSplit.Match(PresentEmployer.ToString()).Index + rgxEmployerSplit.Match(PresentEmployer.ToString()).ToString().Length) < PresentEmployer.ToString().Length && rgxEmployerSplit.Match(PresentEmployer.ToString()).Index > 3)
                                        PresentEmployer = PresentEmployer.ToString().Trim().Substring(0, rgxEmployerSplit.Match(PresentEmployer.ToString()).Index + rgxEmployerSplit.Match(PresentEmployer.ToString()).ToString().Length);

                                }
                                catch
                                {
                                    PresentEmployer = PresentEmployer.ToString();
                                }
                                strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                            }
                            else
                            {
                                if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                    strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                if (strbEmplrTillDate.Length > 0)
                                    strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                            }
                        }
                    }
                    catch { }
                    #endregion

                    #region   Present Employer Label -------1
                    try
                    {
                        if (strPresentEmpDate.Length < 2 && bEmployerYearInLast == false)
                        {
                            bool flagTill = false, flagEnd = true;
                            for (int cnt = 0; cnt < DataEmployer.Length - 1 && strPresentEmpDate.Length < 2; cnt++)
                            {
                                if (DataEmployer[cnt].ToString().Trim().Length == 0)
                                {
                                    flagTill = false;
                                    flagEnd = true;
                                }
                                if (flagEnd == true && (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString())))
                                    flagTill = true;
                                if (rgxEmplrNow.IsMatch(DataEmployer[cnt].ToString()))
                                {
                                    flagEnd = false;
                                    int ct = 0;
                                    if (flagTill == true && bEmployerYearInLast == false && bEmpOrderFlg == false)
                                        for (ct = cnt; ct > 0; ct--)
                                        {
                                            if (DataEmployer[ct].ToString().Length == 0) break;
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].ToString().Trim())) break;
                                            if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString()) && rgxExpDate.IsMatch(DataEmployer[ct].ToString().Trim()) == false)
                                            {
                                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].ToString()).ToString());
                                                break;
                                            }
                                        }
                                    if (flagTill == false)
                                        for (ct = cnt + 1; ct < DataEmployer.Length - 1; ct++)
                                        {

                                            if (DataEmployer[ct].ToString().Length == 0) break;
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].ToString().Trim())) break;
                                            if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString()) && rgxExpDate.IsMatch(DataEmployer[ct].ToString().Trim()) == false)
                                            {
                                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].ToString()).ToString());
                                                break;
                                            }
                                        }
                                    if (strbEmplrTillDate.Length > 0)
                                    {
                                        strbPresentEmplyr.Append(DataEmployer[cnt].ToString().Trim());
                                        strbPresentEmplyr.Remove(0, rgxEmplrNow.Match(DataEmployer[cnt].ToString().Trim()).Length);
                                        if (ct == cnt && strbPresentEmplyr.Length > 0)
                                            strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                    }
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length < 2)
                                {
                                    if (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString().Trim()) == false || rgxExpDate.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;
                                    if (rgxLTD.IsMatch(DataEmployer[cnt].ToString().Trim()) == false) continue;
                                    strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt].ToString().Trim()).ToString());
                                    strbPresentEmplyr.Append(DataEmployer[cnt].ToString().Trim().Replace(strbEmplrTillDate.ToString(), " "));
                                }
                                //strbPresentEmplyr.Replace(Convert.ToChar(9).ToString(), " ");
                                if (strbPresentEmplyr.Length > 2)
                                    opGetEmployerInTab(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (cnt > 2 && cnt < DataEmployer.Length - 1 && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[cnt]))
                                    {
                                        DataEmployer[cnt] = "";
                                        PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                        strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                    }
                                    else
                                    {
                                        PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                        strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                    }
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region   Present Employer Label -------2
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            bool flagTill = false, flagEnd = true;
                            for (int cnt = 0; bEmpOrderFlg == false && cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = 0;
                                if (DataEmployer[cnt].Trim().Length == 0)
                                {
                                    flagTill = false;
                                    flagEnd = true;
                                }
                                if (flagEnd == true && (rgxExpTillDate.IsMatch(DataEmployer[cnt]) || rgxExpDate.IsMatch(DataEmployer[cnt].ToString())) && (cnt - 2 >= 1 && DataEmployer[cnt - 2].ToString().ToLower().Replace(":", "") != "education" && DataEmployer[cnt - 1].ToString().ToLower().IndexOf("certificate") < 0))
                                    flagTill = true;
                                if (DataEmployer[cnt].Trim().Length < 2 || rgxExpDate.IsMatch(DataEmployer[cnt].Trim())) continue;
                                if (rgxEmplrNow.IsMatch(DataEmployer[cnt].Trim()))
                                {
                                    flagEnd = false;
                                    int ct = 0;
                                    if (flagTill == true)
                                        for (ct = cnt; ct > 0; ct--)
                                        {
                                            if (DataEmployer[ct].Replace(" ", "").Length > 50 && DataEmployer[ct].Trim().ToString().ToLower().Contains("present employer") == false) continue;
                                            if (DataEmployer[ct].ToString().Length == 0) break;
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].Trim())) break;
                                            if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString()) && rgxNotLTD2.IsMatch(" " + DataEmployer[ct].ToString()) == false)
                                            {
                                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].ToString()).ToString());
                                                break;
                                            }
                                        }
                                    if (flagTill == false)
                                        for (ct = cnt + 1; ct < DataEmployer.Length; ct++)
                                        {
                                            if (DataEmployer[ct].Replace(" ", "").Length > 50) continue;
                                            if (DataEmployer[ct].ToString().Length == 0) break;
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].Trim())) break;
                                            if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString()) && rgxNotLTD2.IsMatch(" " + DataEmployer[ct].ToString()) == false)
                                            {
                                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].ToString()).ToString());
                                                break;
                                            }
                                        }
                                    if (strbEmplrTillDate.Length > 0)
                                    {
                                        strbPresentEmplyr.Append(DataEmployer[cnt].ToString().Trim());
                                        RowIndex = cnt;
                                        strbPresentEmplyr.Remove(0, rgxEmplrNow.Match(DataEmployer[cnt].ToString().Trim()).Length);
                                        if (ct == cnt && strbPresentEmplyr.Length > 0)
                                            strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                    }
                                }
                                else
                                {
                                    bool abovelinecheckDesignationAt = false;
                                    if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) == true) break;
                                    if (rgxLTD.IsMatch(DataEmployer[cnt].Trim()) == false || DataEmployer[cnt].ToLower().IndexOf("worked ") > -1)
                                    {
                                        if (rgxExpTillDate.IsMatch(DataEmployer[cnt].Trim()) && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false && (cnt - 1) > 0 && rgxDesignation.IsMatch(DataEmployer[cnt - 1].Trim()))
                                        {
                                            strbEmplrTillDate.Append(DataEmployer[cnt].Trim());
                                            strbPresentEmplyr.Append(DataEmployer[cnt - 1].Trim().Replace(strbEmplrTillDate.ToString(), " "));
                                            abovelinecheckDesignationAt = true;
                                        }
                                        else
                                            continue;
                                    }
                                    if (rgxExpTillDate.IsMatch(DataEmployer[cnt].Trim()) && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false && (cnt - 1) > 0 && rgxDesignation.IsMatch(DataEmployer[cnt - 1].Trim()) && !abovelinecheckDesignationAt)
                                    {
                                        strbEmplrTillDate.Append(DataEmployer[cnt].Trim());
                                        strbPresentEmplyr.Append(DataEmployer[cnt - 1].Trim().Replace(strbEmplrTillDate.ToString(), " "));
                                    }
                                    else if (rgxExpTillDate.IsMatch(DataEmployer[cnt].Trim()) && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false && !abovelinecheckDesignationAt)
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt].Trim()).ToString());
                                    else if (cnt + 1 < DataEmployer.Length && rgxExpTillDate.IsMatch(DataEmployer[cnt + 1].Trim()) && rgxExpDate.IsMatch(DataEmployer[cnt + 1].Trim()) == false && !abovelinecheckDesignationAt)
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt + 1].Trim()).ToString());
                                    else if (cnt - 1 > 0 && rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].Trim()) && rgxExpDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && !abovelinecheckDesignationAt)
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt - 1].Trim()).ToString());

                                    if (strbEmplrTillDate.Length > 2 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim().ToString()) == false && !abovelinecheckDesignationAt)
                                    {
                                        strbPresentEmplyr.Append(DataEmployer[cnt].Trim().Replace(strbEmplrTillDate.ToString(), " "));
                                        RowIndex = cnt;
                                        strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                    }
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPresentEmplyr.ToString().Trim()))
                                    strbPresentEmplyr.Replace(strbPresentEmplyr.ToString(), "");
                                if (strbPresentEmplyr.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPresentEmplyr.ToString().Trim()))
                                    strbPresentEmplyr.Replace(strbPresentEmplyr.ToString(), "");
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    //Method Changed to Execute First For "Working as"  Present Employer Label -------5 
                    #region   Present Employer Label -------5
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            System.Text.RegularExpressions.Regex regtillDate = new System.Text.RegularExpressions.Regex(@"[\s,\{“‘\(\.](till date|till date\)|Present |Till Dated)[,\:’\}”\s\)]?[\s]?\b", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = 0;
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                if (rgxTillWorking.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                if (rgxExpTillDate.IsMatch(DataEmployer[cnt].Trim()) == false || (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) && regtillDate.IsMatch(DataEmployer[cnt].Trim()) == false)) continue;
                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt]).ToString().Trim());
                                strbPresentEmplyr.Append(DataEmployer[cnt].Trim());
                                RowIndex = cnt;
                                if (rgxTillWorking.Match(strbPresentEmplyr.ToString()).Index + rgxTillWorking.Match(strbPresentEmplyr.ToString()).Length < rgxExpTillDate.Match(strbPresentEmplyr.ToString()).Index)
                                    strbPresentEmplyr.Remove(rgxExpTillDate.Match(strbPresentEmplyr.ToString()).Index, strbPresentEmplyr.Length - rgxExpTillDate.Match(strbPresentEmplyr.ToString()).Index);
                                if (rgxTillWorking.IsMatch(strbPresentEmplyr.ToString()))
                                    strbPresentEmplyr.Remove(0, rgxTillWorking.Match(strbPresentEmplyr.ToString()).Index + rgxTillWorking.Match(strbPresentEmplyr.ToString()).Length);
                                if (rgxExpTillDate.IsMatch(strbPresentEmplyr.ToString()))
                                    strbPresentEmplyr.Replace(rgxExpTillDate.Match(strbPresentEmplyr.ToString()).ToString(), " ");
                                if (strbPresentEmplyr.ToString().IndexOf(" as ") > 5)
                                    strbPresentEmplyr.Remove(strbPresentEmplyr.ToString().IndexOf(" as "), strbPresentEmplyr.Length - strbPresentEmplyr.ToString().IndexOf(" as "));
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion


                    #region  Present Employer Label -------3
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            bool flag1 = false, flag2 = false;
                            int _count = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = 0;
                                flag1 = false;
                                flag2 = false;
                                if (rgxExperienceLTD.IsMatch(DataEmployer[cnt].Trim().Replace("from recent", "").Replace("(", "").Replace(")", "")) == false) continue;
                                _count = 0;
                                for (int ct = cnt; ct < cnt + 10 && ct < DataEmployer.Length; ct++)
                                {
                                    if (DataEmployer[ct].Replace(" ", "").Length < 2) continue;
                                    if ((rgxLTD.IsMatch(DataEmployer[ct].Trim()) && DataEmployer[ct].Trim().Contains(".com") == false) && DataEmployer[ct].Replace(" ", "").Replace("Manager", "").Replace("Sales", "").Replace("product", "").Replace("Sales", "").Replace("Regional", "").Replace("Chloroform", "").Replace("Chlorinated", "").Length < 120 || DataEmployer[ct].Trim().Contains("valley partner"))
                                        flag1 = true;
                                    if (rgxEmplrNow.IsMatch(DataEmployer[ct].Trim()) && DataEmployer[ct].Replace(" ", "").Length < 100)
                                        flag2 = true;
                                    if (ct != cnt && DataEmployer[ct].Replace(" ", "").Length < 20) _count++;
                                    if (ct == cnt && flag1 == false && flag2 == false) continue;
                                    if (_count == 1 && flag1 == false && flag2 == false) continue;
                                    if (flag1 == false && flag2 == false) break;
                                    int count = 0;
                                    for (int _ct = cnt; _ct < ct + count + 5 && _ct < DataEmployer.Length; _ct++)
                                    {
                                        if (DataEmployer[_ct].Replace(" ", "").Length < 2)
                                        {
                                            count++;
                                            continue;
                                        }
                                        if (rgxExpTillDate.IsMatch(DataEmployer[_ct].Trim()) == false) continue;
                                        if (rgxReponsibility.IsMatch(DataEmployer[_ct].Trim()) && rgxReponsibility.Match(DataEmployer[_ct].Trim()).Index < 5) break;
                                        if (rgxExpDate.IsMatch(DataEmployer[_ct].Trim()) || rgxEmplrNow.IsMatch(DataEmployer[_ct].Trim()))
                                            break;
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[_ct].Trim()).ToString().Trim());
                                        if (ct > 2 && ct < DataEmployer.Length && ((rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim().ToLower()) == true) && rgxLTD.IsMatch(DataEmployer[ct - 1].Trim()) == true) && rgxLTD.IsMatch(DataEmployer[ct - 1].Trim()) == true)
                                            strbPresentEmplyr.Append(DataEmployer[ct - 1].Trim());
                                        else
                                            strbPresentEmplyr.Append(DataEmployer[ct].Trim());
                                        RowIndex = ct;
                                        break;
                                    }
                                    break;
                                }
                                if (strbPresentEmplyr.Length < 2) continue;
                                if (flag2 == true && rgxEmplrNow.IsMatch(strbPresentEmplyr.ToString()))
                                {
                                    strbPresentEmplyr.Remove(0, rgxEmplrNow.Match(strbPresentEmplyr.ToString()).Index + rgxEmplrNow.Match(strbPresentEmplyr.ToString()).Length);
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPresentEmplyr.ToString().Trim()))
                                    strbPresentEmplyr.Replace(strbPresentEmplyr.ToString(), "");
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region Present Employer Label -------2-1

                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                if (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString()) == false || rgxExpDate.IsMatch(DataEmployer[cnt].ToString())) continue;
                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt].ToString()).ToString().Trim());
                                for (int ct = cnt; ct >= 0 && ct > cnt - 10 && strbPresentEmplyr.ToString().Trim().Length < 2; ct--)
                                {
                                    if (DataEmployer[ct].ToString().Trim().Length < 2 || rgxExpDate.IsMatch(DataEmployer[ct].ToString())) break;
                                    if (rgxLTD.IsMatch(DataEmployer[ct].ToString()) == false || rgxNotLTD2.IsMatch(DataEmployer[ct].ToString()) == true || DataEmployer[ct].ToString().Length > 500 || rgxNotLTD3.IsMatch(" " + DataEmployer[ct].ToString().Trim())) continue;
                                    strbPresentEmplyr.Append(DataEmployer[ct].ToString().Trim());
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                                for (int ct = cnt + 1; bEmpOrderFlg == false && ct < DataEmployer.Length && ct < cnt + 10 && strbPresentEmplyr.ToString().Trim().Length < 2; ct++)
                                {
                                    if (DataEmployer[ct].ToString().Trim().Length < 2 || rgxExpDate.IsMatch(DataEmployer[ct].ToString())) break;
                                    if (rgxLTD.IsMatch(DataEmployer[ct].ToString()) == false || rgxNotLTD2.IsMatch(DataEmployer[ct].ToString()) == true || DataEmployer[ct].ToString().Length > 500 || rgxNotLTD3.IsMatch(" " + DataEmployer[ct].ToString().Trim())) continue;
                                    strbPresentEmplyr.Append(DataEmployer[ct].ToString().Trim());
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                            }
                            if (strbPresentEmplyr.ToString().Trim().Length > 1)
                            {
                                PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                            }
                            else
                            {
                                if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                    strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                if (strbEmplrTillDate.Length > 0)
                                    strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                            }
                        }
                    }
                    catch { }

                    #endregion

                    #region  Present Employer Label -------4
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = cnt;
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                if (rgxExpTabTillDate.IsMatch(DataEmployer[cnt].Trim()) == false || rgxExpDate.IsMatch(DataEmployer[cnt].Trim())) continue; // 1/2008 – Present

                                strbEmplrTillDate.Append(rgxExpTabTillDate.Match(DataEmployer[cnt].Trim()).ToString());
                                strbPresentEmplyr.Append(DataEmployer[cnt].Trim());
                                RowIndex = cnt;
                                strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                if (strbPresentEmplyr.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPresentEmplyr.ToString().Trim()))
                                    strbPresentEmplyr.Replace(strbPresentEmplyr.ToString(), "");
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length < 2)
                                {
                                    if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt + 1].Trim().Length < 2)
                                    {
                                        strbPresentEmplyr.Append(DataEmployer[cnt - 1].Trim());
                                        RowIndex = cnt - 1;
                                    }
                                    else if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt - 1].Trim().Length < 2)
                                    {
                                        strbPresentEmplyr.Append(DataEmployer[cnt + 1].Trim());
                                        RowIndex = cnt + 1;
                                    }

                                    if (strbPresentEmplyr.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPresentEmplyr.ToString().Trim()))
                                        strbPresentEmplyr.Replace(strbPresentEmplyr.ToString(), "");
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                                if (rgxEmpbreak.IsMatch(strbPresentEmplyr.ToString().Trim())) break;
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex])) //June-2011-Till Date
                                    {
                                        DataEmployer[RowIndex] = "";
                                        PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                        strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                    }
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region  Present Employer Label -------6
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = 0;
                                if (rgxEmplrNow.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                for (int ct = cnt + 1; ct < cnt + 10 && ct < DataEmployer.Length && strbEmplrTillDate.Length < 2; ct++)
                                {
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    if (rgxEmplrNow.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct].Trim()))
                                        break;
                                    if (rgxPeriod.IsMatch(DataEmployer[ct].Trim()))
                                    {
                                        if (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()))
                                            strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].Trim()).ToString());
                                        else break;
                                    }
                                    if (ct < ct + 3 && rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) && rgxExpTillDate.Match(DataEmployer[ct].Trim()).Index + rgxExpTillDate.Match(DataEmployer[ct].Trim()).Length + 10 > DataEmployer[ct].Replace(" ", "").Length)
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].Trim()));
                                }
                                for (int ct = cnt - 1; ct > cnt - 10 && ct > 0 && strbEmplrTillDate.Length < 2; ct--)
                                {
                                    if (rgxEmplrNow.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct].Trim()))
                                        break;
                                    if (rgxPeriod.IsMatch(DataEmployer[ct].Trim()))
                                    {
                                        if (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()))
                                            strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].Trim()));
                                        else break;
                                    }
                                    if (ct > cnt - 3 && rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) && rgxExpTillDate.Match(DataEmployer[ct].Trim()).Length + 10 > DataEmployer[ct].Replace(" ", "").Length)
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct].Trim()));
                                }
                                if (strbEmplrTillDate.Length < 2) continue;
                                strbPresentEmplyr.Append(DataEmployer[cnt].Trim());
                                RowIndex = cnt;
                                strbPresentEmplyr.Remove(0, rgxEmplrNow.Match(DataEmployer[cnt].Trim()).Length);
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();

                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region  Present Employer Label -------7
                    try
                    {
                        if (strPresentEmpDate.Length < 2) // Logic Changed for Employer Table format to Employer Array
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < tblEmplrData.Count && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = 0;
                                if (tblEmplrData[cnt].ToString().Trim().Length < 2) continue;
                                if (rgxExpTillDate.IsMatch(tblEmplrData[cnt].ToString().Trim()) == false || rgxExpDate.IsMatch(tblEmplrData[cnt].ToString().Trim())) continue;

                                //if (rgxDuration.IsMatch(tblEmplrData[cnt].ToString().Trim())) continue;
                                strbEmplrTillDate.Append(rgxExpTillDate.Match(tblEmplrData[cnt].ToString().Trim()).ToString());
                                strbPresentEmplyr.Append(tblEmplrData[cnt].ToString().Trim());
                                RowIndex = cnt;
                                strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int count = 0;
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                if (DataEmployer[cnt].Replace(" ", "").Length < 2 || DataEmployer[cnt].Replace(" ", "").Length > 150) continue;
                                if (rgxExpTillDate.IsMatch(DataEmployer[cnt].Trim()) == false || rgxExpDate.IsMatch(DataEmployer[cnt])) continue;
                                if (rgxExpTillDate.Match(DataEmployer[cnt].Trim()).Index > 15) continue;
                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt]).ToString().Trim());
                                for (int ct = cnt - 1; ct > 0 && strbPresentEmplyr.ToString().Trim().Length < 2; ct--) //&& DataEmployer.Length  < 10
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    count++;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct]) || rgxExpDate.IsMatch(DataEmployer[ct]) || rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || (rgxEducnEnd.IsMatch(DataEmployer[ct].Trim()) && (rgxEducnEnd.Match(DataEmployer[ct].Trim()).Index == 0 || rgxEducnEnd.Match(DataEmployer[ct].Trim()).Index == 1))) break;
                                    if (DataEmployer[ct].Replace(" ", "").Length > 110 || rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim())) continue;
                                    if (rgxLTD.IsMatch(DataEmployer[ct]) == false) continue;
                                    strbPresentEmplyr.Append(DataEmployer[ct].Trim());
                                    RowIndex = ct;
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                                count = 0;
                                for (int ct = cnt + 1; ct < DataEmployer.Length && count < 10 && strbPresentEmplyr.ToString().Trim().Length < 2; ct++)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    count++;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct]) || rgxExpDate.IsMatch(DataEmployer[ct]) || rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || (rgxEducnEnd.IsMatch(DataEmployer[ct].Trim()) && (rgxEducnEnd.Match(DataEmployer[ct].Trim()).Index == 0 || rgxEducnEnd.Match(DataEmployer[ct].Trim()).Index == 1)) || rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim())) break;
                                    if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                    if ((rgxLTD.IsMatch(DataEmployer[ct]) == false)) continue;
                                    strbPresentEmplyr.Append(DataEmployer[ct].Trim());
                                    RowIndex = ct;
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                            }
                            if (strbPresentEmplyr.ToString().Trim().Length > 1)
                            {
                                if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    DataEmployer[RowIndex] = "";
                                PresentEmployer = strbPresentEmplyr.ToString().Trim();

                                strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                            }
                            else
                            {
                                if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                    strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                if (strbEmplrTillDate.Length > 0)
                                    strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                            }
                        }
                    }
                    catch { }
                    #endregion

                    #region  Present Employer Label -------8
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = 0;

                                if (DataEmployer[cnt].Trim().Length < 2 || DataEmployer[cnt].ToLower().IndexOf("worked ") == 0 || DataEmployer[cnt].ToLower().IndexOf(" worked ") >= 0 || (cnt > 2 && DataEmployer[cnt - 1].ToLower().IndexOf("education") == 0)) continue;
                                if (rgxStartEndTillDate.IsMatch(DataEmployer[cnt].Trim()) == false || rgxExpDate.IsMatch(DataEmployer[cnt].Trim())) continue;
                                //if (rgxDuration.IsMatch(DataEmployer[cnt].Trim())) continue;
                                strbEmplrTillDate.Append(rgxStartEndTillDate.Match(DataEmployer[cnt].Trim()).ToString());
                                if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim()) == false)
                                    strbPresentEmplyr.Append(DataEmployer[cnt].Trim());
                                RowIndex = cnt;
                                strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length < 2)
                                {
                                    if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt - 1].Replace(" ", "").Replace("\t", "").Length < 60)
                                    {
                                        if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == false)
                                        {
                                            strbPresentEmplyr.Append(DataEmployer[cnt - 1].Trim());
                                            RowIndex = cnt - 1;
                                        }
                                        else
                                        {
                                            continue;
                                        }

                                    }
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length < 2)
                                {
                                    if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt + 1].Replace(" ", "").Replace("\t", "").Length < 60 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim()) == false)
                                    {
                                        strbPresentEmplyr.Append(DataEmployer[cnt + 1].Trim());
                                        RowIndex = cnt + 1;
                                    }
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length < 2)
                                {
                                    for (int ct = cnt; ct > 0 && ct > cnt - 5; ct--)
                                    {
                                        if (rgxExpTillDate.IsMatch(DataEmployer[ct]) || rgxExpDate.IsMatch(DataEmployer[ct]) || rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct].Trim())) break;
                                        if (DataEmployer[ct].Trim().Length > 0 || DataEmployer[ct].Replace(" ", "").Length > 60) continue;
                                        strbPresentEmplyr.Append(DataEmployer[ct].Trim());
                                        RowIndex = ct;
                                        if (strbPresentEmplyr.Length > 2)
                                            ReplaceAll(ref strbPresentEmplyr);
                                        break;
                                    }
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length < 2)
                                {
                                    for (int ct = cnt + 1; ct < cnt + 5 && ct < DataEmployer.Length; ct++)
                                    {
                                        if (rgxExpTillDate.IsMatch(DataEmployer[ct]) || rgxExpDate.IsMatch(DataEmployer[ct]) || rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct].Trim())) break;
                                        if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                        if (DataEmployer[ct].Trim().Length > 0 || DataEmployer[ct].Replace(" ", "").Length > 60) continue;
                                        strbPresentEmplyr.Append(DataEmployer[ct].Trim());
                                        RowIndex = ct;
                                        if (strbPresentEmplyr.Length > 2)
                                            ReplaceAll(ref strbPresentEmplyr);
                                        break;
                                    }
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    {
                                        DataEmployer[RowIndex] = "";
                                        PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    }

                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }

                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                if (rgxLTD.IsMatch(DataEmployer[cnt]) == false || rgxExpTillDate.IsMatch(DataEmployer[cnt]) == false) continue;
                                if (rgxExpDate.IsMatch(DataEmployer[cnt])) continue;
                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt]).ToString());
                                strbPresentEmplyr.Append(DataEmployer[cnt]);
                                RowIndex = cnt;
                                if (strbPresentEmplyr.ToString().Trim().Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();

                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region  Present Employer Label -------9
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            int count = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && strPresentEmpDate.Length < 2; cnt++)
                            {
                                RowIndex = 0;
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                if (rgxExperienceLTD.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                count = 0;
                                int ct1 = 0;
                                for (ct1 = cnt + 1; ct1 < DataEmployer.Length && ct1 < cnt + 5 + count; ct1++)
                                {

                                    if (rgxReponsibility.IsMatch(DataEmployer[ct1].Trim()) && rgxReponsibility.Match(DataEmployer[ct1].Trim()).Index < 5) break;
                                    if (DataEmployer[ct1].Trim().Length < 2)
                                    { count++; continue; }
                                    if (rgxExpDate.IsMatch(DataEmployer[ct1].Trim())) break;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct1].Trim()))
                                    {
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[ct1].Trim()).ToString());
                                        //flagExp = true;
                                        break;
                                    }
                                }
                                if (strbEmplrTillDate.Length < 3) continue;
                                int ct2 = 0;
                                if (strbEmplrTillDate.Length > 2)
                                    for (ct2 = cnt + 1; ct2 < DataEmployer.Length && strbPresentEmplyr.ToString().Trim().Length < 2; ct2++)
                                    {
                                        if (DataEmployer[ct2].Trim().Length < 2) continue;
                                        if (rgxExpTillDate.IsMatch(DataEmployer[ct2]) || rgxExpDate.IsMatch(DataEmployer[ct2]) || rgxExperienceLTD.IsMatch(DataEmployer[ct2].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct2].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct2].Trim())) break;
                                        if (rgxReponsibility.IsMatch(DataEmployer[ct2].Trim()) && rgxReponsibility.Match(DataEmployer[ct2].Trim()).Index < 5) break;
                                        //if (rgxDuration.IsMatch(DataEmployer[ct2])) break;
                                        if (DataEmployer[ct2].Replace(" ", "").Trim().Length > 100 || (ct1 != ct2 && rgxSentence.IsMatch(DataEmployer[ct2].Trim()))) break;
                                        strbPresentEmplyr.Append(DataEmployer[ct2].Trim());
                                        RowIndex = ct2;
                                        strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                        if (strbPresentEmplyr.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPresentEmplyr.ToString().Trim()))
                                            strbPresentEmplyr.Replace(strbPresentEmplyr.ToString(), "");
                                        if (strbPresentEmplyr.ToString().Trim().Length > 2)
                                            ReplaceAll(ref strbPresentEmplyr);
                                        else continue;
                                        if (strbPresentEmplyr.ToString().Trim().Length > 2) break;
                                    }
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPresentEmplyr.ToString(), "");
                                    PresentEmployer = strEmployer.ToString().Trim();

                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region  Present Employer Label -------10
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length && PresentEmployer.ToString().Trim().Length < 2; cnt++)
                            {
                                RowIndex = 0;
                                if (rgxNowWorking.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                {
                                    strbPresentEmplyr.Append(DataEmployer[cnt].Trim().Remove(0, rgxNowWorking.Match(DataEmployer[cnt].Trim()).Index + rgxNowWorking.Match(DataEmployer[cnt].Trim()).Length));
                                    RowIndex = cnt;
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    try
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    }
                                    catch { }
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region  Present Employer Label -------11
                    //try
                    //{
                    //    if (strPresentEmpDate.Length < 2)
                    //    {
                    //        int RowIndex = 0;
                    //        for (int cnt = 0; cnt < tblEmplrData.Count && strPresentEmpDate.Length < 2; cnt++)
                    //        {
                    //            RowIndex = 0;
                    //            if (tblEmplrData[cnt].ToString().Trim().Length < 2) continue;
                    //            if (rgxExpTillDate.IsMatch(tblEmplrData[cnt].ToString().Trim()) == false || rgxExpDate.IsMatch(tblEmplrData[cnt].ToString().Trim())) continue;
                    //            //if (rgxDuration.IsMatch(tblEmplrData[cnt].ToString().Trim())) continue;
                    //            strbEmplrTillDate.Append(rgxExpTillDate.Match(tblEmplrData[cnt].ToString().Trim()).ToString());
                    //            strbPresentEmplyr.Append(tblEmplrData[cnt].ToString().Trim());
                    //            RowIndex = cnt;
                    //            strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                    //            if (strbPresentEmplyr.Length > 2)
                    //                ReplaceAll(ref strbPresentEmplyr);
                    //            if (strbPresentEmplyr.ToString().Trim().Length > 1)
                    //            {
                    //                if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                    //                    DataEmployer[RowIndex] = "";
                    //                PresentEmployer = strbPresentEmplyr.ToString().Trim();
                    //                strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                    //            }
                    //            else
                    //            {
                    //                if (strbPresentEmplyr.ToString().Trim().Length > 0)
                    //                    strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                    //                if (strbEmplrTillDate.Length > 0)
                    //                    strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    //            }
                    //        }
                    //    }
                    //}
                    //catch { }
                    //finally
                    //{
                    //    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                    //        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                    //    if (strbEmplrTillDate.Length > 0)
                    //        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    //}
                    #endregion

                    #region
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            string strLtd = @"\b(Limited|LIMITED|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Financial Analysts|Consumer Care|GLOBAL SERVICES|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc)\b";
                            string strWorkingLtd = @"\b(WORKING|SERVING|ASSOCIATED|ASSOCIATE|CURRENTLY)\b[\s]*(WITH|IN|FOR|AT|To)\b.{1,70}?\b" + strLtd +
                                             @"|(ASSOCIATED|ASSOCIATE|WORKING|SERVING)\b\s{1,4}AS\s.{1,70}?" + strLtd + @"\b(IN|FOR|WITH|AT)\b";
                            Regex rgxWorkingLtd = new Regex(strWorkingLtd, RegexOptions.IgnoreCase); ;
                            for (int cnt = 0; cnt < DataEmployer.Length && strbPresentEmplyr.Length < 2; cnt++)
                            {
                                if (DataEmployer[cnt].Replace("  ", " ").ToLower().IndexOf(" was working") > 0) continue;
                                if (rgxWorkingLtd.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                if (DataEmployer[cnt].Length < 450)
                                    strbPresentEmplyr.Append(rgxWorkingLtd.Match(DataEmployer[cnt].Trim()).ToString());
                                RowIndex = cnt;
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]) && strbEmplrTillDate.Length > 2)
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }

                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion New Label

                    #region
                    try
                    {
                        if (strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            Regex rgxNotPrettEmp1 = new Regex(@"\b(Job Responsibilities includes|Job Responsibilities|Training Program|Assignment and Activities)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            for (int cnt = 0; cnt < DataEmployer.Length && strbPresentEmplyr.Length < 2; cnt++)
                            {
                                if (rgxStartEndTillDate.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                for (int icnt = cnt + 1; icnt < DataEmployer.Length; icnt++)
                                {
                                    if (rgxNotPrettEmp1.IsMatch(DataEmployer[icnt].Trim()) == false) break;
                                    if (rgxStartEndDate.IsMatch(DataEmployer[icnt].Trim()) || rgxNotLTD2.IsMatch(" " + DataEmployer[icnt].Trim()) || rgxLTD.IsMatch(DataEmployer[icnt].Trim()) == false) continue;
                                    if (rgxExpDate.IsMatch(DataEmployer[icnt].Trim()) == false && DataEmployer[icnt].Trim().Length < 100)
                                        strbPresentEmplyr.Append(DataEmployer[icnt].Trim());
                                    break;
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    strPresentEmpDate = DataEmployer[cnt].Trim().ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }
                    #endregion

                    #region  Present Employer Label -------12 checking  With Date and Without Limited --Saravana
                    try
                    {
                        if (strPresentEmpDate.Length > 2 && PresentEmployer == "")
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length - 1 && strPresentEmpDate.Length > 2 && strbPresentEmplyr.Length < 2; cnt++)
                            {
                                if (((_EdcnStart1 < cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                RowIndex = 0;
                                if (DataEmployer[cnt].ToString().Trim().Length < 2) continue;
                                if (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString().Trim()) == false || rgxExpDate.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;

                                if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString().ToLower()) || (cnt > 2 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].ToString().ToLower()))) continue;
                                strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt].ToString().Trim()).ToString());
                                strbPresentEmplyr.Append(DataEmployer[cnt].ToString().Trim().Replace("‘", "").Replace("’", ""));
                                RowIndex = cnt;
                                strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                                //string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPresentEmplyr.ToString(), "");
                                //PresentEmployer = strEmployer.ToString().Trim();
                                if (strbPresentEmplyr.Length > 2)
                                    if (FCommon.rgxDesignations.IsMatch(" " + strbPresentEmplyr.ToString()) == true)
                                        strbPresentEmplyr.Replace(FCommon.rgxDesignations.Match(" " + strbPresentEmplyr.ToString()).ToString().Trim(), "");

                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.Length < 2)
                                {
                                    if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt - 1].Replace(" ", "").Replace("\t", "").Length < 60)
                                    {
                                        if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == false)
                                            if (((cnt - 2 > 1) && DataEmployer[cnt - 1].ToString().StartsWith("Role:") || DataEmployer[cnt - 1].ToString().StartsWith("Designation:")))
                                                strbPresentEmplyr.Append(DataEmployer[cnt - 2].ToString().Trim());
                                            else
                                                strbPresentEmplyr.Append(DataEmployer[cnt - 1].ToString().Trim());
                                        RowIndex = cnt - 1;
                                    }
                                }
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length < 2)
                                {
                                    if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt + 1].Replace(" ", "").Replace("\t", "").Length < 60)
                                    {
                                        strbPresentEmplyr.Append(DataEmployer[cnt + 1].Trim());
                                        RowIndex = cnt + 1;
                                    }
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                }
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    PresentEmployer = strbPresentEmplyr.ToString().Trim();
                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }

                    #endregion

                    #region  Present Employer Label ------- With Out Checking Date --Saravana
                    try
                    {
                        //Regex rgxNotEmp1 = new Regex(@"\b(working in teams|working in team|working in the field)\b", RegexOptions.IgnoreCase);
                        if (PresentEmployer == "" || strPresentEmpDate.Length < 2)
                        {
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length - 1 && (PresentEmployer.Length < 1 || strPresentEmpDate.Length < 2); cnt++)
                            {
                                if (((_EdcnStart1 < cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                RowIndex = 0;
                                if (DataEmployer[cnt].ToString().Trim().Length < 2) continue;
                                if (rgxNotEmp1.IsMatch(DataEmployer[cnt].Trim()) == true) continue;
                                if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 1)) break;
                                if (exPresentEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim().Replace("‘", "").Replace("’", "")) == false) continue;
                                try
                                {
                                    if (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString()))
                                        strbEmplrTillDate.Append(rgxExpTillDate.Match(DataEmployer[cnt].ToString())).ToString();
                                    else
                                        strbEmplrTillDate.Append(DateTime.Now.Year + " - till now").ToString();
                                    //strbEmplrTillDate.Append("#  X" + cnt).ToString();
                                }
                                catch { }

                                strbPresentEmplyr.Append(DataEmployer[cnt].ToString().Trim());

                                strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");

                                if (exPresentEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim()) == true)
                                    strbPresentEmplyr.Replace(exPresentEmp1.Match(" " + DataEmployer[cnt].ToString()).ToString().Trim(), "");
                                if (strbPresentEmplyr.Length < 2 && (cnt + 1) < DataEmployer.Length - 1)
                                    strbPresentEmplyr.Append(DataEmployer[cnt + 1].ToString().Trim());
                                RowIndex = cnt;
                                if (strbPresentEmplyr.Length > 2)
                                    ReplaceAll(ref strbPresentEmplyr);
                                if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        DataEmployer[RowIndex] = "";
                                    string strEmployer = "";

                                    try
                                    {
                                        strEmployer = FCommon.rgxDesignations.Replace(" " + strbPresentEmplyr.ToString(), "");
                                        if ((rgxLTD.IsMatch(strbPresentEmplyr.ToString()) == true) && (rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length) < strEmployer.ToString().Length && rgxLTD.Match(strEmployer.ToString()).Index > 3)
                                            strEmployer = strEmployer.ToString().Trim().Substring(0, rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length);
                                        else
                                            strEmployer = FCommon.rgxDesignations.Replace(" " + strbPresentEmplyr.ToString(), "");
                                    }
                                    catch
                                    {
                                        strEmployer = strbPresentEmplyr.ToString();
                                    }

                                    PresentEmployer = strEmployer.ToString().Trim();
                                    strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                }
                                else
                                {
                                    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                    if (strbEmplrTillDate.Length > 0)
                                        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                }
                            }
                        }
                    }
                    catch { }
                    finally
                    {
                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                        if (strbEmplrTillDate.Length > 0)
                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    }

                    if (strPresentEmpDate.Length > 2 && PresentEmployer == "")
                        strPresentEmpDate = "";
                    #endregion

                    #region  Present Employer Label ------- With Out Checking Date  and Without checking Working as -- Saravana
                    //try
                    //{
                    //    if (PresentEmployer == "")
                    //    {
                    //        int RowIndex = 0;
                    //        for (int cnt = 0; cnt < DataEmployer.Length - 1 && PresentEmployer.Length < 1; cnt++)
                    //        {
                    //            if (((_EdcnStart1 < cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                    //                continue;
                    //            RowIndex = 0;
                    //            if (DataEmployer[cnt].ToString().Trim().Length < 2) continue;
                    //            if (exPresentEmp2.IsMatch(" " + DataEmployer[cnt].ToString().Trim()) == false) continue;
                    //            if (exPresentEmp2.Match(" " + DataEmployer[cnt].ToString().Trim()).Index > 1) continue;
                    //            //if (rgxDuration.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;
                    //            strbEmplrTillDate.Append(DateTime.Now.Year + " - till now").ToString();
                    //            strbPresentEmplyr.Append(DataEmployer[cnt].ToString().Trim());
                    //            if (exPresentEmp2.IsMatch(" " + DataEmployer[cnt].ToString().Trim()) == true)
                    //                strbPresentEmplyr.Replace(exPresentEmp2.Match(" " + DataEmployer[cnt].ToString()).ToString().Trim(), "");
                    //            if (strbPresentEmplyr.Length < 2 && (cnt + 1) < DataEmployer.Length - 1)
                    //                strbPresentEmplyr.Append(DataEmployer[cnt + 1].ToString().Trim());
                    //            RowIndex = cnt;

                    //            strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");
                    //            if (strbPresentEmplyr.Length > 2)
                    //                ReplaceAll(ref strbPresentEmplyr);
                    //            if (strbPresentEmplyr.ToString().Trim().Length > 1)
                    //            {
                    //                if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                    //                    DataEmployer[RowIndex] = "";
                    //                PresentEmployer = strbPresentEmplyr.ToString().Trim();
                    //                strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                    //            }
                    //            else
                    //            {
                    //                if (strbPresentEmplyr.ToString().Trim().Length > 0)
                    //                    strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                    //                if (strbEmplrTillDate.Length > 0)
                    //                    strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    //            }
                    //        }
                    //    }
                    //}
                    //catch { }
                    //finally
                    //{
                    //    if (strbPresentEmplyr.ToString().Trim().Length > 0)
                    //        strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                    //    if (strbEmplrTillDate.Length > 0)
                    //        strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                    //}

                    //if (strPresentEmpDate.Length > 2 && PresentEmployer == "")
                    //    strPresentEmpDate = "";
                    #endregion

                }
                // Code for Previous Employer---------
                if (bParseEmployementHistory == true)
                {
                    StringBuilder strbPreviousEmplr = new StringBuilder();
                    StringBuilder strbPastEmp = null;
                    StringBuilder strbWorkTime = null;
                    StringBuilder strbWorkingPD = new StringBuilder();
                    ///string strPresentEmp = "";
                    // StringBuilder strbPreviousDesignation = new StringBuilder();
                    int flagOrgn = 0;
                    if (PresentEmployer.ToString().Trim().Length > 1)
                    {
                        if (JobTitle.Trim() != "")
                            PresentEmployer = FCommon.rgxDesignations.Replace(" " + PresentEmployer, "");
                        strbPreviousEmplr.Append("#" + PresentEmployer.ToString().Trim());
                        if (strPresentEmpDate.Length > 2)
                            strbWorkingPD.Append("#" + strPresentEmpDate.ToString().Trim());
                        else
                            strbWorkingPD.Append("#");
                        strbPreviousDesignation.Append("#" + JobTitle + "+:+" + JobTitleID);

                    }
                    #region "pre-bank work experience"
                    try
                    {
                        Regex rgxDateworkexperience1 = new Regex(@"(\d{1,2}[\.][\s]?(Language Information))", RegexOptions.IgnoreCase);
                        for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                        {
                            if (DataEmployer[cnt].Trim().Length < 2) continue;
                            if (((_EdcnStart1 < cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                continue;
                            bool bLanguageFound = false;
                            if (DataEmployer[cnt].ToLower().IndexOf("pre-bank work experience") >= 0)
                            {
                                for (int cnt1 = cnt; cnt1 < DataEmployer.Length && bLanguageFound == false; cnt1++)
                                {
                                    strbPastEmp = new StringBuilder();
                                    strbWorkTime = new StringBuilder();
                                    if (DataEmployer[cnt1].Trim() == "" || DataEmployer[cnt1].ToLower().IndexOf("job title") >= 0 || DataEmployer[cnt1].ToLower().IndexOf("myjobworld application package  strictly confidential") >= 0 || DataEmployer[cnt1].ToLower().IndexOf("pre-bank work experience") >= 0 || DataEmployer[cnt1].Trim() == "N/A" || DataEmployer[cnt1].Trim().Length == 1) continue;
                                    if (DataEmployer[cnt1].ToLower().IndexOf("language information") >= 0)
                                        bLanguageFound = true;
                                    strbWorkTime.Append(DataEmployer[cnt1].Trim());
                                    if (rgxDateworkexperience1.IsMatch(DataEmployer[cnt1].Trim()))
                                        strbWorkTime.Replace(rgxDateworkexperience1.Match(DataEmployer[cnt1].Trim()).ToString(), "");
                                    strbPastEmp.Append(DataEmployer[cnt1].Trim());
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    strbWorkTime.Replace(strbPastEmp.ToString().Replace(".", ""), " ");
                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        strbPreviousEmplr.Append("#" + strbPastEmp.ToString());
                                        string[] tExpAfterColon = strbWorkTime.ToString().Split(':');
                                        if (tExpAfterColon.Length > 1)
                                            strbWorkingPD.Append("#" + tExpAfterColon[1].Trim());
                                        else
                                            strbWorkingPD.Append("#" + tExpAfterColon[0].Trim());
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    }
                                }
                            }
                        }
                    }
                    catch { }
                    #endregion

                    #region Previous Employer Label --------0
                    try
                    {   //Logic Changed For Employer Table Format to Employer Array
                        if (DataEmployer.Length > 1)
                        {
                            int length = 0;
                            int _Rowindex = -1;
                            int _count = -1;
                            bool flagTab = false;

                            //Newly added for New Date format
                            Regex rgxdtnewFormat = new Regex("((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])(\\s+).*?((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                            Regex regformat5 = new Regex("((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d])(\\/)(\\d+).*?((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d])(\\/)(\\d+)", RegexOptions.IgnoreCase | RegexOptions.Singleline); // //10/05 30/16

                            for (int cnt = 0; cnt < DataEmployer.Length - 1; cnt++)
                            {
                                flagTab = false;
                                if (DataEmployer[cnt].ToString().Trim().Length < 1)
                                { _Rowindex = cnt; continue; }

                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;

                                Match mtchs = regformat5.Match(DataEmployer[cnt].ToString());
                                bool tYearFormat = false;
                                Match mtch = rgxdtnewFormat.Match(DataEmployer[cnt].ToString());

                                if ((rgxdtnewFormat.IsMatch(DataEmployer[cnt].ToString()) == true && mtch.Length == 9) || (regformat5.IsMatch(DataEmployer[cnt].ToString()) == true && mtchs.Length == 11))
                                    tYearFormat = true;
                                if (tYearFormat == false)
                                {
                                    if (rgxExpDate.IsMatch(DataEmployer[cnt].ToString()) == false) continue;
                                    //Saravana
                                    if (rgxTabDateTab.IsMatch(DataEmployer[cnt].ToString().Trim()) == false && ColumnIndex == -1 && rgxdtnewFormat.IsMatch(DataEmployer[cnt].ToString()) == false) continue;
                                    if (rgxTabDateTab.IsMatch(DataEmployer[cnt].ToString().Trim()) == false && ColumnIndex == -1) continue;
                                    //Saravana
                                }
                                if (rgxDuration.IsMatch(DataEmployer[cnt].ToString()) == true || DataEmployer[cnt].ToString().Trim().Contains("Duration") == true || (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString().Trim()) || rgxLTD.IsMatch(DataEmployer[cnt].ToString().Trim()) == false)) continue;

                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                string[] strArryOrgn = null;
                                if (ColumnIndex > -1)
                                {
                                    strArryOrgn = DataEmployer[cnt].ToString().Trim().Split(Convert.ToChar(9));
                                    if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString().ToLower().Trim()) == true && rgxLTD.IsMatch(DataEmployer[cnt].ToString().Trim()) == false) continue;
                                    if (ColumnIndex < strArryOrgn.Length)
                                        strbPastEmp.Append(strArryOrgn[ColumnIndex].Trim());
                                    flagTab = true;
                                }
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.Length < 2)
                                {
                                    flagTab = false;
                                    if (DataEmployer[cnt].ToString().Trim().ToLower().IndexOf("training") >= 0 || (cnt > 2 && DataEmployer[cnt - 1].ToString().Trim().ToLower().IndexOf("passport") > 0)) continue;
                                    if (_count == -1 && _Rowindex + 1 < DataEmployer.Length - 1 && rgxTblOrgn.IsMatch(DataEmployer[_Rowindex + 1].ToString().Trim()) && rgxTblDurn.IsMatch(DataEmployer[_Rowindex + 1].ToString().Trim()))
                                    {
                                        strArryOrgn = DataEmployer[_Rowindex + 1].ToString().Trim().Split(Convert.ToChar(9));
                                        length = strArryOrgn.Length;
                                        for (int ct = 0; ct < strArryOrgn.Length; ct++)
                                        {
                                            _count++;
                                            if (rgxTblOrgn.IsMatch(Convert.ToChar(9) + strArryOrgn[ct] + Convert.ToChar(9)))
                                                break;
                                        }
                                        for (int ct = 0; ct < strArryOrgn.Length; ct++)
                                        {
                                            if (strArryOrgn[ct].Trim().Length > 20)
                                            { _count = -1; break; }
                                        }
                                    }
                                    if (_count > -1)
                                    {
                                        strArryOrgn = DataEmployer[cnt].ToString().Trim().Split(Convert.ToChar(9));
                                        if (_count < strArryOrgn.Length && length == strArryOrgn.Length)
                                            strbPastEmp.Append(strArryOrgn[_count].Trim());
                                    }
                                    else
                                        strbPastEmp.Append(DataEmployer[cnt].ToString().Trim());
                                }

                                strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].ToString().Trim()).ToString());
                                strbPastEmp.Replace(strbWorkTime.ToString(), " ");
                                //strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                //if (strbPastEmp.Length > 2)
                                //    opGetEmployerInTab(ref strbPastEmp);
                                if (strbPastEmp.Length > 2 && flagTab == false)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Replace("(", "").Replace(")", "").Replace(".", "").Trim().Length < 2 && strbPastEmp.Length > 0)
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                }
                            }
                            rgxdtnewFormat = null;
                            regformat5 = null;
                        }
                    }
                    catch { }
                    finally
                    {

                    }
                    #endregion

                    if (tYearInfyFormat1 == false)
                    {

                        //#region Previous Employer Label --------table format
                        //try
                        //{
                        //    if (tblEmplrData != null && tblEmplrData.Count > 0)
                        //    {
                        //        for (int cnt = 0; cnt < tblEmplrData.Count; cnt++)
                        //        {
                        //            if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                        //                continue;
                        //            if (rgxExpDate.IsMatch(tblEmplrData[cnt].ToString().Trim()) == false) continue;
                        //            if (tblEmplrData[cnt].ToString().Trim().ToLower().IndexOf("training") >= 0 || (cnt > 2 && tblEmplrData[cnt - 1].ToString().Trim().ToLower().IndexOf("passport") > 0)) continue;
                        //            if (rgxNotLTD2.IsMatch(" " + tblEmplrData[cnt].ToString().ToLower().Trim()) == true || cnt == 0) continue;
                        //            strbPastEmp = new StringBuilder();
                        //            strbWorkTime = new StringBuilder();
                        //            if (rgxDuration.IsMatch(tblEmplrData[cnt].ToString().Trim())) continue;
                        //            strbWorkTime.Append(rgxExpDate.Match(tblEmplrData[cnt].ToString().Trim()).ToString());
                        //            strbPastEmp.Append(tblEmplrData[cnt].ToString().Trim());
                        //            strbPastEmp.Replace(strbWorkTime.ToString(), " ");
                        //            //strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");
                        //            if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                        //                strbPastEmp.Replace(strbPastEmp.ToString(), "");
                        //            if (strbPastEmp.Length > 2)
                        //                ReplaceAll(ref strbPastEmp);
                        //            if (strbPastEmp.Length < 5)
                        //                ReplaceAll(ref strbPastEmp);
                        //            if (strbPastEmp.ToString().Replace("(", "").Replace(")", "").Replace(".", "").Trim().Length < 2 && strbPastEmp.Length > 0)
                        //                strbPastEmp.Replace(strbPastEmp.ToString(), "");
                        //            if (strbPastEmp.ToString().Trim().Length > 1)
                        //            {
                        //                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                        //                if (rgxLTD.IsMatch(strbPastEmp.ToString()))
                        //                    tblEmplrData[cnt] = "";
                        //                string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                        //                strbPreviousEmplr.Append("#" + strEmployer.ToString());
                        //                strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                        //            }
                        //        }
                        //    }
                        //}
                        //catch { }
                        //#endregion



                        #region Previous Employer Label---------1
                        try
                        {
                            Regex rgxWorked = new Regex(@"^.{0,2}\b(Worked|Working|years of experience in)\b", RegexOptions.IgnoreCase);
                            Regex rgxNotCorporate = new Regex(@"^.{0,3}\b(consulting assignments|consultant Employee|consultant Employment|I was on assignmen)\b", RegexOptions.IgnoreCase);
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 1))
                                    break;
                                if ((rgxWorked.IsMatch(DataEmployer[cnt].Trim()) == false || DataEmployer[cnt].Replace(" ", "").Length > 65) && rgxLTD.IsMatch(DataEmployer[cnt]) == false) continue;
                                if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false || rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim()) == true || rgxNotCorporate.IsMatch(DataEmployer[cnt]) == true) continue;

                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                if (cnt > 2 && (DataEmployer[cnt - 1].ToString().ToLower().Contains("projects/thesis") || DataEmployer[cnt - 1].ToString().ToLower().Contains("extra curricular"))) continue;
                                strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString().Trim());
                                try
                                {
                                    if (exPresentEmp1.IsMatch(DataEmployer[cnt].Trim()) == false)
                                        strbPastEmp.Append(DataEmployer[cnt].Trim());
                                }
                                catch
                                {
                                    strbPastEmp.Append(DataEmployer[cnt].Trim().Substring(0, rgxExpDate.Match(DataEmployer[cnt].Trim().Replace("prvious employer", "")).Index));
                                }
                                //strbPastEmp.Append(DataEmployer[cnt].Trim().Substring(0, rgxLTD.Match(DataEmployer[cnt].Trim().Replace("prvious employer", "")).Index));
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.Length > 2)
                                {
                                    try
                                    {
                                        if (exPreviousEmp1.IsMatch(" " + strbPastEmp.ToString()) == true)
                                            strbPastEmp.Replace(exPreviousEmp1.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                        if (FCommon.rgxDesignations.IsMatch(" " + strbPastEmp.ToString()) && FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim() != "")
                                            strbPastEmp.Replace(FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                    }
                                    catch { }
                                    ReplaceAll(ref strbPastEmp);
                                    if (cnt > 2 && strbPastEmp.Length < 1 && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) && exPreviousEmp1.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == true)
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                        ReplaceAll(ref strbPastEmp);
                                    }
                                }
                                if (strbWorkTime.Length > 0 && strbPastEmp.ToString().Trim().Length > 1 && strbWorkTime.Length < 200)
                                {
                                    strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    if (rgxLTD.IsMatch(strbPastEmp.ToString()))
                                        DataEmployer[cnt] = "";

                                    string strEmployer = "";
                                    strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    try
                                    {
                                        if ((rgxLTD.IsMatch(strbPastEmp.ToString()) == true) && (rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length) < strEmployer.ToString().Length && rgxLTD.Match(strEmployer.ToString()).Index > 3)
                                            strEmployer = strEmployer.ToString().Trim().Substring(0, rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length - 1);
                                        else
                                            strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    }
                                    catch
                                    {
                                        strEmployer = strbPastEmp.ToString();
                                    }
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                }
                            }
                            rgxWorked = null;
                            rgxNotCorporate = null;
                        }
                        catch { }

                        #endregion

                        #region Previous Employer Label --------3
                        try
                        {
                            bool flagEmp = true;
                            int CountOrgn = 0;
                            int RowIndex = 0;
                            string strLtd = @"\b(Limited|LIMITED|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Financial Analysts|Consumer Care|GLOBAL SERVICES|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc)\b";
                            string strWorkingLtd = @"\b(WORKED|ASSOCIATED|PREVIOSLY)\b[\s]*(WITH|IN|FOR|AT|To)\b.{1,70}?\b" + strLtd +
                                             @"|(ASSOCIATED|WORKED)\b\s{1,4}AS\s.{1,70}?" + strLtd + @"\b(IN|FOR|WITH|AT)\b";
                            Regex rgxWorkedLtd = new Regex(strWorkingLtd, RegexOptions.IgnoreCase); ;

                            Regex rgxNotCorporate = new Regex(@"\b(Job consulting|Java consulting|consultant Employment|Use of Technology)\b", RegexOptions.IgnoreCase);
                            for (int cnt = 0; cnt < DataEmployer.Length && bEmployerYearInLast == false; cnt++)
                            {
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 1))
                                    break;
                                if (DataEmployer[cnt].Replace(" ", "").Length > 200 && rgxLTD.IsMatch(DataEmployer[cnt]) == false && rgxPrevEmp.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                if (rgxExpTabDate.IsMatch(DataEmployer[cnt].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                //if (DataEmployer[cnt].ToString().ToLower().Contains("duration") == true) continue;
                                if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false && rgxWorkedExp.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim()) == true && rgxLTD.IsMatch(DataEmployer[cnt].Trim()) == false) continue;

                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();

                                strbWorkTime.Append(rgxExpTabDate.Match(DataEmployer[cnt].Trim()).ToString());

                                if (strbWorkTime.Length == 0)
                                    strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());

                                if (rgxLTD.IsMatch(DataEmployer[cnt].Trim()) == false)
                                {
                                    // go 5 steup back and check company Name: is there or not
                                    // Company Name		: ecenta (Malaysia) Sdn Bhd
                                    //Position Title		: SAP Consultant
                                    //Position Level		: Junior Executive
                                    //Specialization		: IT/Computer - Software
                                    //Industry			: Consulting (IT, Science, Engineering & Technical)
                                    //Duration			: 2007 - 2009

                                    if (DataEmployer[cnt].Trim().StartsWith("Duration") && cnt - 5 > 0 && DataEmployer[cnt - 5].Trim().StartsWith("Company Name") && rgxLTD.IsMatch(DataEmployer[cnt - 5].Trim()))
                                    {
                                        ////Company	  : Schneider Electric Philippines, Inc.
                                        ////Designation : Supply Chain Administrator / SAP Functional Analyst
                                        ////Duration	   : February 2003 – February 2004
                                        strbPastEmp.Append(DataEmployer[cnt - 5].Trim());
                                        RowIndex = cnt - 5;
                                    }

                                    else if (DataEmployer[cnt].Trim().StartsWith("Duration") && cnt - 2 > 0 && rgxIdentifyStartWithcompanyName.IsMatch(DataEmployer[cnt - 2].Trim()) && rgxLTD.IsMatch(DataEmployer[cnt - 2].Trim()))
                                    {

                                        strbPastEmp.Append(DataEmployer[cnt - 2].Trim());
                                        RowIndex = cnt - 2;
                                    }
                                    else if (DataEmployer[cnt].Trim().StartsWith("Duration") && cnt - 1 > 0 && DataEmployer[cnt - 1].Trim().StartsWith("Company Name") && rgxLTD.IsMatch(DataEmployer[cnt - 1].Trim()))
                                    {
                                        //Company Name	: Shell Business Service Centre
                                        //Duration			: October 2008 until Now 
                                        //Designation			: BW Senior Consultant 
                                        strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                        RowIndex = cnt - 1;
                                    }
                                    else if (DataEmployer[cnt].Trim().StartsWith("Duration") && cnt - 4 > 0 && DataEmployer[cnt - 4].Trim().StartsWith("Company Name") && rgxLTD.IsMatch(DataEmployer[cnt - 4].Trim()))
                                    {
                                        //Company Name	: Shell Business Service Centre
                                        //Duration			: October 2008 until Now 
                                        //Designation			: BW Senior Consultant 
                                        strbPastEmp.Append(DataEmployer[cnt - 4].Trim());
                                        RowIndex = cnt - 4;
                                    }
                                    else if (cnt - 2 > 0 && DataEmployer[cnt - 2].Trim().Length > 2 && (rgxLTD.IsMatch(DataEmployer[cnt - 1].Trim()) && rgxClient.IsMatch(DataEmployer[cnt - 1].Trim()) == false) && DataEmployer[cnt - 1].Replace(" ", "").Length < 100 && rgxNotCorporate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && (rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false) && rgxNotLTD3.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == false && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == false)
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                        RowIndex = cnt - 1;
                                    }
                                    else if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) && (cnt - 1) > 0 && rgxDesignation.IsMatch(DataEmployer[cnt - 1].Trim()))
                                    {

                                        strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                        RowIndex = cnt - 1;
                                    }
                                    else if (cnt + 2 < DataEmployer.Length && rgxLTD.IsMatch(DataEmployer[cnt + 1].Trim()) && rgxNotCorporate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim()) == false && (rgxExpTillDate.IsMatch(DataEmployer[cnt + 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt + 1].Trim()) == false) && rgxNotLTD3.IsMatch(" " + DataEmployer[cnt + 1].Trim()) == false)
                                    {
                                        if (rgxWorkedLtd.IsMatch(DataEmployer[cnt + 1].Trim()) == true)
                                            strbPastEmp.Append(DataEmployer[cnt + 1].Trim());
                                        else if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim()) == false && DataEmployer[cnt + 1].Trim().Length < 200)
                                            strbPastEmp.Append(DataEmployer[cnt + 1].Trim());
                                        RowIndex = cnt + 1;
                                    }
                                    else if (cnt - 2 > 0 && (DataEmployer[cnt - 2].Trim().Length < 2 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == false && rgxLTD.IsMatch(DataEmployer[cnt - 1].Trim()) == true) && rgxLTD.IsMatch(DataEmployer[cnt - 1].Trim()) && rgxLTD.IsMatch(DataEmployer[cnt].Trim()) == false && DataEmployer[cnt - 1].Replace(" ", "").Length < 100 && rgxNotCorporate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && (rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false))
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                        RowIndex = cnt - 1;
                                    }
                                }
                                if (strbPastEmp.Length < 2)
                                {//checked just above one line Ltd word is there or not
                                    if (cnt + 1 < DataEmployer.Length - 1 && rgxLTD.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) && DataEmployer[cnt + 1].Trim().Length < 100)
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt + 1].Trim());
                                        RowIndex = cnt + 1;
                                    }
                                    else if (CountOrgn == 0 && exPresentEmp1.IsMatch(" " + DataEmployer[cnt].Trim()) == false && DataEmployer[cnt].Trim().Length < 500)
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt].Trim());
                                        RowIndex = cnt;
                                    }
                                    if (cnt > 1 && (CountOrgn == -1 || DataEmployer[cnt - 1].ToString().ToLower().StartsWith("previous")) && cnt - 1 > 0 && (rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false))
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                        RowIndex = cnt - 1;
                                    }
                                    if (CountOrgn == 1 && cnt + 1 < DataEmployer.Length)
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt + 1].Trim());
                                        RowIndex = cnt + 1;
                                    }
                                }
                                opGetEmployerInTab(ref  strbPastEmp);
                                if (strbWorkTime.Length > 2)
                                    strbPastEmp.Replace(strbWorkTime.ToString(), " ").Replace(" .", "");

                                //strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");
                                //commented  
                                //if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                //    strbPastEmp.Replace(strbPastEmp.ToString(), "");

                                if (strbPastEmp.Length > 2)
                                {
                                    try
                                    {
                                        if (exPreviousEmp1.IsMatch(" " + strbPastEmp.ToString()) == true)
                                            strbPastEmp.Replace(exPreviousEmp1.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                        if (FCommon.rgxDesignations.IsMatch(" " + strbPastEmp.ToString()) && FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim() != "")
                                            strbPastEmp.Replace(FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                    }
                                    catch { }
                                    ReplaceAll(ref strbPastEmp);
                                }
                                if (flagEmp == true && strbPastEmp.ToString().Trim().Length < 2 && CountOrgn == 0)
                                    if (cnt + 1 < DataEmployer.Length && DataEmployer[cnt + 1].Trim().Length < 2 && cnt - 1 > 0 && DataEmployer[cnt - 1].Trim().Length > 1 && (rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false))
                                    {
                                        CountOrgn = -1;
                                        strbPastEmp.Append(DataEmployer[cnt - 1]);
                                        RowIndex = cnt - 1;
                                    }
                                if (flagEmp == true && strbPastEmp.ToString().Trim().Length < 2 && CountOrgn == 0)
                                    if (cnt + 1 < DataEmployer.Length && cnt - 1 > 0 && DataEmployer[cnt - 1].Trim().Length < 2 && DataEmployer[cnt + 1].Trim().Length > 1 && (rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false))
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt + 1]);
                                        CountOrgn = 1;
                                        RowIndex = cnt + 1;
                                    }
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                try
                                {
                                    if (exPreviousEmp1.IsMatch(" " + strbPastEmp.ToString()) == true)
                                        strbPastEmp.Replace(exPreviousEmp1.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                    if (FCommon.rgxDesignations.IsMatch(" " + strbPastEmp.ToString()) && FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim() != "")
                                        strbPastEmp.Replace(FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                }
                                catch { }
                                if (strbPastEmp.Length > 1)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Replace("(", "").Replace(")", "").Replace(".", "").Trim().Length < 2 && strbPastEmp.Length > 0)
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.ToString().Trim().Length < 2)
                                {
                                    if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt - 1].Replace(" ", "").Replace("\t", "").Length < 60)
                                    {
                                        string[] strArryOrg = null;
                                        strArryOrg = DataEmployer[cnt].ToString().Trim().Replace(strbWorkTime.ToString().Trim(), "").Split(Convert.ToChar(9));

                                        if (0 < strArryOrg.Length && strArryOrg[0].Trim() != "")
                                        {
                                            strbPastEmp.Append(strArryOrg[0].Trim());
                                            RowIndex = cnt - 1;
                                        }
                                        else if ((rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt - 1].Trim()) == false) && rgxNotLTD3.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == false && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == false)
                                        {
                                            strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                            RowIndex = cnt - 1;
                                        }
                                    }
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    strbPastEmp.Replace(strbWorkTime.ToString(), "");
                                    try
                                    {
                                        if (FCommon.rgxDesignations.IsMatch(" " + strbPastEmp.ToString()) && FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim() != "")
                                            strbPastEmp.Replace(FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                    }
                                    catch { }
                                    if (strbPastEmp.Length > 1)
                                        ReplaceAll(ref strbPastEmp);
                                }
                                if (strbPastEmp.ToString().Trim().Length < 2)
                                {
                                    if (cnt - 1 > 0 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt + 1].Replace(" ", "").Replace("\t", "").Length < 60 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim()) == false && (rgxExpTillDate.IsMatch(DataEmployer[cnt + 1].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt + 1].Trim()) == false))
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt + 1].Trim());
                                        RowIndex = cnt + 1;
                                    }
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    try
                                    {
                                        if (exPreviousEmp1.IsMatch(" " + strbPastEmp.ToString()) == true)
                                            strbPastEmp.Replace(exPreviousEmp1.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                        if (FCommon.rgxDesignations.IsMatch(" " + strbPastEmp.ToString()) && FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim() != "")
                                            strbPastEmp.Replace(FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                    }
                                    catch { }
                                    if (strbPastEmp.Length > 1)
                                    {
                                        ReplaceAll(ref strbPastEmp);
                                        strbPastEmp = strbPastEmp.Replace("ï‚", "");
                                    }
                                }
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    flagEmp = false;
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                        DataEmployer[RowIndex] = "";
                                        DataEmployer[cnt] = "";
                                    }
                                    else
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                }
                            }
                        }
                        catch { }
                        #endregion
                        //need to move on place 2
                        #region Previous Employer Label --------4
                        try
                        {   // Logic Changed For Employer Table Format to Employer Array
                            strbPastEmp = new StringBuilder();
                            strbWorkTime = new StringBuilder();
                            bool flagTill = false, flagEnd = true;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                if (DataEmployer[cnt].ToString().Trim().Length == 0)
                                {
                                    flagTill = false;
                                    flagEnd = true;
                                }
                                if (flagEnd == true && (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString()) || rgxExpDate.IsMatch(DataEmployer[cnt].ToString())))
                                    flagTill = true;
                                if (rgxPrevEmp.IsMatch(DataEmployer[cnt].ToString().Trim()) == false) continue;
                                flagEnd = false;
                                int ct = 0;
                                if (flagTill == true)
                                    for (ct = cnt; ct > 0; ct++)
                                    {
                                        if (DataEmployer[ct].ToString().Length == 0) break;
                                        if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString())) break;

                                        if (rgxExpDate.IsMatch(DataEmployer[ct].ToString()))
                                        {
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].ToString()).ToString());
                                            break;
                                        }
                                    }
                                if (flagTill == false)
                                    for (ct = cnt + 1; ct < DataEmployer.Length; ct++)
                                    {
                                        if (DataEmployer[ct].ToString().Length == 0) break;
                                        if (rgxExpTillDate.IsMatch(DataEmployer[ct].ToString())) break;
                                        if (rgxExpDate.IsMatch(DataEmployer[ct].ToString()))
                                        {
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].ToString()).ToString());
                                            break;
                                        }
                                    }
                                if (strbWorkTime.Length < 1) continue;
                                strbPastEmp.Append(DataEmployer[cnt].ToString().Trim());
                                strbPastEmp.Remove(0, rgxPrevEmp.Match(DataEmployer[cnt].ToString().Trim()).Length);
                                if (ct == cnt && strbPastEmp.Length > 0)
                                    strbPastEmp.Replace(strbWorkTime.ToString(), " ");
                                if (strbPastEmp.Length > 2)
                                {
                                    //strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    ReplaceAll(ref strbPastEmp);
                                }
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    strbPreviousEmplr.Append("#" + strbPastEmp.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    DataEmployer[cnt] = "";
                                }
                                if (strbPastEmp.ToString().Trim().Length > 0)
                                    strbPastEmp.Remove(0, strbPastEmp.Length);
                                if (strbWorkTime.Length > 0)
                                    strbWorkTime.Remove(0, strbWorkTime.Length);
                            }
                        }
                        catch { }
                        finally
                        {
                            if (strbPastEmp.ToString().Trim().Length > 0)
                                strbPastEmp.Remove(0, strbPastEmp.Length);
                            if (strbWorkTime.Length > 0)
                                strbWorkTime.Remove(0, strbWorkTime.Length);
                        }
                        #endregion


                        //need to move
                        #region Previous Employer Label --------2
                        try  //Based on Employer ,Organization ,Firm,Company
                        {
                            bool FlagNext = false;
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (DataEmployer[cnt].Replace(" ", "").Length > 200 && rgxLTD.IsMatch(DataEmployer[cnt]) == false && rgxPrevEmp.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                FlagNext = false;
                                //Added rgxExpTillDate for not present employer -- Saravana
                                if ((rgxPrevEmp.IsMatch(DataEmployer[cnt].Trim()) == false || rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString()) == true) || (cnt > 0 && cnt < DataEmployer.Length - 1 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].ToString())) == true) continue;
                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                if (rgxPrevEmp.Match(DataEmployer[cnt].Trim()).ToString() != "")
                                    strbPastEmp.Append(DataEmployer[cnt].Trim().Replace(rgxPrevEmp.Match(DataEmployer[cnt].Trim()).ToString(), " "));
                                // strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Trim().Length > 2 && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()))
                                {
                                    RowIndex = cnt;
                                    strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());
                                }
                                if (strbPastEmp.ToString().Trim().Length > 2 && strbWorkTime.Length < 4)// continue;
                                {

                                    for (int ct = cnt - 1; ct > 0 && ct > cnt - 6 && strbWorkTime.Length < 1; ct--)
                                    {
                                        if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                        if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                        { break; }
                                        if (DataEmployer[ct].Trim() == "") break;
                                        if (rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString());
                                        RowIndex = ct;
                                    }
                                    for (int ct = cnt + 1; ct < cnt + 6 && ct < DataEmployer.Length && strbWorkTime.Length < 1; ct++)
                                    {
                                        if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                        if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                        { FlagNext = true; break; }
                                        if (DataEmployer[ct].Trim() == "") break;
                                        if (rgxExpDate.IsMatch(DataEmployer[ct].Trim().Replace("  ", " ")) == false) continue;
                                        //Feb 2006 To Dec. 22nd 2006

                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString()); RowIndex = ct;
                                    }
                                    if (strbWorkTime.Length < 2)
                                        for (int ct = cnt + 1; ct < cnt + 11 && ct < DataEmployer.Length && strbWorkTime.Length < 1; ct++)
                                        {
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { FlagNext = true; break; }
                                            if (DataEmployer[ct].Replace(" ", "").Length > 80) break;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString()); RowIndex = ct;
                                        }
                                    if (strbWorkTime.Length < 2 && flagOrgn == -1)
                                        for (int ct = cnt - 1; ct > 0 && ct > cnt - 11 && strbWorkTime.Length < 1; ct--)
                                        {
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { break; }
                                            if (DataEmployer[ct].Replace(" ", "").Length > 80) break;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString()); RowIndex = ct;
                                        }
                                    if (strbWorkTime.Length < 2 && flagOrgn == 1)
                                        for (int ct = cnt + 1; ct < cnt + 10 && ct < DataEmployer.Length && strbWorkTime.Length < 1; ct++)
                                        {
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { FlagNext = true; break; }
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString()); RowIndex = ct;
                                        }
                                    if (strbWorkTime.Length < 2 && flagOrgn == -1)
                                        for (int ct = cnt - 1; ct > 0 && ct > cnt - 10 && strbWorkTime.Length < 1; ct--)
                                        {
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { break; }
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString()); RowIndex = ct;
                                        }
                                }
                                if (FlagNext == true)
                                    cnt++;
                                if (strbWorkTime.Length > 0 && strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    DataEmployer[cnt] = "";
                                    DataEmployer[RowIndex] = "";
                                }
                            }
                        }
                        catch { }
                        #endregion

                        #region Previous Employer Label---------5
                        try
                        {
                            bool FlagNext = false;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (DataEmployer[cnt].Replace(" ", "").Length > 200 && rgxLTD.IsMatch(DataEmployer[cnt]) == false && rgxPrevEmp.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                if (DataEmployer[cnt].Trim().ToLower().IndexOf("training") >= 0 || (cnt > 2 && DataEmployer[cnt - 1].ToString().Trim().ToLower().IndexOf("passport") > 0)) continue;
                                FlagNext = false;
                                //if (cnt > cntStart1 && cnt < cntEnd1 || cnt > cntStart2 && cnt < cntEnd2 || cnt > cntStart2 && cnt < cntEnd3) 
                                //    continue;
                                if (rgxPrevEmp.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                strbPastEmp = new StringBuilder();
                                strbPastEmp.Append(DataEmployer[cnt].Trim().Replace(rgxPrevEmp.Match(DataEmployer[cnt].Trim()).ToString(), " "));
                                //strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                strbWorkTime = new StringBuilder();
                                if (strbPastEmp.ToString().Trim().Length > 2 && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()))
                                    strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());
                                if (strbPastEmp.ToString().Trim().Length < 2 && strbWorkTime.Length < 4) //continue;
                                {
                                    strbWorkTime = new StringBuilder();
                                    for (int ct = cnt + 1; ct < cnt + 6 && ct < DataEmployer.Length && strbWorkTime.Length < 1; ct++)
                                    {
                                        if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                        if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                        if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                        if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                        { FlagNext = true; break; }
                                        if (DataEmployer[ct].Trim() == "") break;
                                        if (rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString());
                                    }
                                    for (int ct = cnt - 1; ct > 0 && ct > cnt - 6 && strbWorkTime.Length < 1; ct--)
                                    {
                                        if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                        if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                        if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                        { break; }
                                        if (DataEmployer[ct].Trim() == "") break;
                                        if (rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString());
                                    }
                                    if (strbWorkTime.Length < 2)
                                        for (int ct = cnt + 1; ct < cnt + 11 && ct < DataEmployer.Length && strbWorkTime.Length < 1; ct++)
                                        {
                                            if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                            if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { FlagNext = true; break; }
                                            if (DataEmployer[ct].Replace(" ", "").Length > 80) break;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString());
                                        }
                                    if (strbWorkTime.Length < 2 && flagOrgn == -1)
                                        for (int ct = cnt - 1; ct > 0 && ct > cnt - 11 && strbWorkTime.Length < 1; ct--)
                                        {
                                            if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { break; }
                                            if (DataEmployer[ct].Replace(" ", "").Length > 80) break;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString());
                                        }
                                    if (strbWorkTime.Length < 2 && flagOrgn == 1)
                                        for (int ct = cnt + 1; ct < cnt + 10 && ct < DataEmployer.Length && strbWorkTime.Length < 1; ct++)
                                        {
                                            if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                            if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { FlagNext = true; break; }
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString());
                                        }
                                    if (strbWorkTime.Length < 2 && flagOrgn == -1)
                                        for (int ct = cnt - 1; ct > 0 && ct > cnt - 10 && strbWorkTime.Length < 1; ct--)
                                        {
                                            if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                            if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                            if (rgxPrevEmp.IsMatch(DataEmployer[ct].Trim()))
                                            { break; }
                                            if (rgxExpDate.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                            strbWorkTime.Append(rgxExpDate.Match(DataEmployer[ct].Trim()).ToString());
                                        }
                                }
                                if (FlagNext == true)
                                    cnt++;
                                if (strbWorkTime.Length > 0 && strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                }
                            }
                        }
                        catch { }
                        #endregion

                        #region Previous Employer Label --------6
                        try
                        {
                            if (tblEmplrData.Count > 0)
                            {
                                for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                                {
                                    if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (rgxExpDate.IsMatch(DataEmployer[cnt].ToString().Trim()) == false) continue;
                                    if (DataEmployer[cnt].ToString().Trim().ToLower().IndexOf("training") >= 0 || (cnt > 2 && DataEmployer[cnt - 1].ToString().Trim().ToLower().IndexOf("passport") > 0)) continue;
                                    if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString().ToLower().Trim()) == true || cnt == 0) continue;
                                    strbPastEmp = new StringBuilder();
                                    strbWorkTime = new StringBuilder();
                                    if (rgxDuration.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;
                                    strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].ToString().Trim()).ToString());
                                    strbPastEmp.Append(DataEmployer[cnt].ToString().Trim());
                                    strbPastEmp.Replace(strbWorkTime.ToString(), " ");
                                    //strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    if (strbPastEmp.Length < 5)
                                        ReplaceAll(ref strbPastEmp);
                                    if (strbPastEmp.ToString().Replace("(", "").Replace(")", "").Replace(".", "").Trim().Length < 2 && strbPastEmp.Length > 0)
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                        if (rgxLTD.IsMatch(strbPastEmp.ToString()))
                                            DataEmployer[cnt] = "";
                                        string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                        strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                        strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    }
                                }
                            }
                        }
                        catch { }
                        #endregion

                        #region Previous Employer Label---------7
                        try
                        {
                            //Regex for Notworking Employee Duration -- Duration Match With Employee Award and Presentation -- Need to Improve these keywordds

                            //string strENotWorked = @"\b(Have been awarded|Awarded for|Awarded and Presentation|reporting it to)\b";
                            //Regex rgxENotWorked = new Regex(strENotWorked, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                RowIndex = 0;
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (rgxExpDateOnly.IsMatch(DataEmployer[cnt].Trim()) == false && rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false) continue;

                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();

                                strbWorkTime.Append(rgxExpDateOnly.Match(DataEmployer[cnt].Trim()).ToString());
                                if (strbWorkTime.Length < 2) continue;
                                //if (strbWorkTime.Length < 2)
                                //    strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());
                                int count = 0;
                                //checked just above one line Ltd word is there or not
                                if (cnt + 1 < DataEmployer.Length - 1 && rgxLTD.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) && strbPastEmp.Length < 2 && DataEmployer[cnt + 1].Trim().Length < 100)
                                {
                                    strbPastEmp.Append(DataEmployer[cnt + 1].Trim());
                                    RowIndex = cnt + 1;
                                }
                                int goback4setip = cnt - 4;
                                for (int ct = cnt - 1; ct >= 0 && strbPastEmp.Length < 2 && ct < goback4setip; ct--)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (((rgxEducnEnd.IsMatch(DataEmployer[ct]) && rgxLTD.IsMatch(DataEmployer[ct].Trim()) == false)) && exPreviousEmp1.IsMatch(DataEmployer[ct].Trim()) == false) break; ////rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim())
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 9) break;
                                    count++;
                                    if (DataEmployer[ct].Length > 180) continue;
                                    //if (rgxENotWorked.IsMatch(DataEmployer[ct].Trim())) break;
                                    if (rgxLTD.IsMatch(DataEmployer[ct].Trim()) == false || rgxAddress.IsMatch(DataEmployer[ct].Trim()) == true || rgxNotLTD3.IsMatch(DataEmployer[ct].Trim()) == true) continue;
                                    {
                                        if (ct >= 0 && ct < DataEmployer.Length - 1 && rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim().ToLower()) == false && rgxNotLTD3.IsMatch(" " + DataEmployer[ct].Trim()) == false)
                                            strbPastEmp.Append(DataEmployer[ct].Trim());
                                        else if (ct >= 0 && rgxNotLTD2.IsMatch(" " + DataEmployer[ct - 1].Trim().ToLower()) == false && rgxNotLTD3.IsMatch(" " + DataEmployer[ct - 1].Trim()) == false)
                                            strbPastEmp.Append(DataEmployer[ct - 1].Trim());
                                        if (strbPastEmp.ToString().Trim().Length > 1)
                                            RowIndex = ct;
                                    }
                                }
                                count = 0;
                                int goforward4setip = cnt + 4;
                                for (int ct = cnt + 1; ct < DataEmployer.Length && strbPastEmp.Length < 2 && ct <= goforward4setip; ct++)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (RegExNoEMpDet.IsMatch(" " + DataEmployer[ct].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[ct].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[ct].Trim()).Index == 1))
                                        break;
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct]) || DataEmployer[ct].Trim().ToLower().Contains("trading")) break;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 4) break;
                                    count++;
                                    if (DataEmployer[ct].Replace(" ", "").Length > 100) continue;
                                    if (rgxLTD.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                    {
                                        if (DataEmployer[ct].Trim().StartsWith("Technologies:") == false)
                                            if (ct > 2 && ct < DataEmployer.Length && rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim().ToLower()) == false && rgxNotLTD2.IsMatch(" " + DataEmployer[ct - 1].Trim().ToLower()) == false && rgxNotLTD3.IsMatch(" " + DataEmployer[ct].Trim()) == false)  //
                                                strbPastEmp.Append(DataEmployer[ct].Trim());
                                            else if (rgxNotLTD3.IsMatch(" " + DataEmployer[ct - 1].Trim()) == false)
                                                strbPastEmp.Append(DataEmployer[ct - 1].Trim());
                                        RowIndex = ct;
                                    }
                                }
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");

                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                        DataEmployer[RowIndex] = "";
                                        if (cnt < RowIndex)
                                            DataEmployer[cnt] = "";
                                    }
                                    else
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    try
                                    {
                                        if ((rgxLTD.IsMatch(strbPastEmp.ToString()) == true) && (rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length) < strEmployer.ToString().Length && rgxLTD.Match(strEmployer.ToString()).Index > 3)
                                            strEmployer = strEmployer.ToString().Trim().Substring(0, rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length);
                                        else if ((rgxEmployerSplit.IsMatch(strbPastEmp.ToString()) == true) && (rgxEmployerSplit.Match(strEmployer.ToString()).Index + rgxEmployerSplit.Match(strEmployer.ToString()).ToString().Length) < strEmployer.ToString().Length && rgxEmployerSplit.Match(strEmployer.ToString()).Index > 3)
                                            strEmployer = strEmployer.ToString().Trim().Substring(0, rgxEmployerSplit.Match(strEmployer.ToString()).Index + rgxEmployerSplit.Match(strEmployer.ToString()).ToString().Length);
                                        else
                                            strEmployer = strbPastEmp.ToString();
                                    }
                                    catch
                                    {
                                        strEmployer = strbPastEmp.ToString();
                                    }
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                }
                            }
                        }
                        catch { }
                        #endregion
                        //rgxEmployerSplit
                        #region Previous Employer Label---------10---Company then Date
                        try
                        {
                            // Table Format Resumes Do not parse Employer as these fields...
                            string PreLocation = "Location|Position held|Designation|Prefered Position|Designation:|Designation";
                            Regex rgxNotEmpIn = new Regex(@"^\b(" + PreLocation + ")$", RegexOptions.IgnoreCase);

                            Regex rgxNoCompny = new Regex(@"^.{0,2}\b[a-zA-Z\s]{2,20}:");
                            Regex rgxWorkedIn = new Regex(@"\b(WORKING|SERVING|ASSOCIATED|ASSOCIATE|EMPLOYED|WORKED|CURRENTLY)\b[\s]*(WITH|IN|FOR|AT)\b", RegexOptions.IgnoreCase);
                            Regex rgxWorkedAsWith = new Regex(@"(ASSOCIATED|ASSOCIATE|WORKING|EMPLOYED|SERVING|WORKED)\b\s{1,4}AS\s.{1,50}?\s(IN|FOR|WITH|AT)\b", RegexOptions.IgnoreCase);
                            Regex rgx60Space = new Regex(@"^.{60}\s");
                            Regex rgxSmall = new Regex(@"\b[a-z]{3,20}\b");
                            Regex rgxWordCount = new Regex(@"\b[a-z]{2,20}\b", RegexOptions.IgnoreCase);
                            Regex rgxCapital = new Regex(@"[A-Z]");
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                RowIndex = 0;
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (rgxExpDateOnly.IsMatch(DataEmployer[cnt].Trim()) == false) continue;
                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                //if (rgxDuration.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;
                                if (DataEmployer[cnt - 1].ToString().ToLower().Trim() == "duration" || DataEmployer[cnt - 1].ToString().ToLower().Trim().Contains("client") == true || (DataEmployer[cnt - 1].ToString().ToLower().Contains("projects/thesis") || DataEmployer[cnt - 1].ToString().ToLower().Contains("extra curricular")) || DataEmployer[cnt - 1].ToString().Trim() == "") continue;
                                //Duration
                                strbWorkTime.Append(rgxExpDateOnly.Match(DataEmployer[cnt].Trim()).ToString());
                                int count = 0;
                                for (int ct = cnt - 1; ct > 0 && strbPastEmp.Length < 2; ct--)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 4 || ((rgxLTD.IsMatch(DataEmployer[ct]) && DataEmployer[ct].ToString().Contains("Associate (Corporate)") == false) && DataEmployer[ct].ToString().ToLower().Contains("law firm") == false && DataEmployer[ct].ToString().ToLower().Contains("corporate lawyer") == false)) break;
                                    count++; // Company date checking for - 1 count 
                                    if (rgxWorkedExp.IsMatch(DataEmployer[ct].Trim()) == false && rgxWorkedExp.IsMatch(DataEmployer[ct - 1].Trim()) != false) continue;
                                    if (rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim()) == true || ((ct - 1 > 1) && rgxNotEmpIn.IsMatch(DataEmployer[ct - 1].Trim()) == true) || rgxNotEmpIn.IsMatch(DataEmployer[ct].Trim()) || DataEmployer[ct].Trim().StartsWith("Designation:")) continue;  //
                                    strbPastEmp.Append(DataEmployer[ct].Trim());

                                    if (rgxWorkedIn.IsMatch(strbPastEmp.ToString().Trim()))
                                    {
                                        strbPastEmp.Remove(0, rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Length);
                                        if (rgx60Space.IsMatch(strbPastEmp.ToString().Trim()))
                                            strbPastEmp.Replace(strbPastEmp.ToString(), rgx60Space.Match(strbPastEmp.ToString().Trim()).ToString());
                                    }
                                    if (rgxWorkedAsWith.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Remove(0, rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Length);
                                    if (strbPastEmp.Length > 2)
                                        if (FCommon.rgxDesignations.IsMatch(" " + strbPastEmp.ToString()) == true)
                                            strbPastEmp.Replace(FCommon.rgxDesignations.Match(" " + strbPastEmp.ToString()).ToString().Trim(), "");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                }
                                for (int ct = cnt + 1; ct < DataEmployer.Length && strbPastEmp.Length < 2; ct++)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 5 || rgxLTD.IsMatch(DataEmployer[ct])) break;
                                    count++;
                                    if (rgxWorkedExp.IsMatch(DataEmployer[ct].Trim()) == false) continue;
                                    strbPastEmp.Append(DataEmployer[ct].Trim());
                                    if (rgxWorkedIn.IsMatch(strbPastEmp.ToString().Trim()))
                                    {
                                        strbPastEmp.Remove(0, rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Length);
                                        if (rgx60Space.IsMatch(strbPastEmp.ToString().Trim()))
                                            strbPastEmp.Replace(strbPastEmp.ToString(), rgx60Space.Match(strbPastEmp.ToString().Trim()).ToString());
                                    }
                                    if (rgxWorkedAsWith.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Remove(0, rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Length);
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                }
                                count = 0;
                                for (int ct = cnt + 1; ct < DataEmployer.Length && strbPastEmp.Length < 2; ct++)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 2 || rgxLTD.IsMatch(DataEmployer[ct])) break;
                                    count++;
                                    if (DataEmployer[ct].Replace(" ", "").Length > 60 || rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim().ToLower())) continue;
                                    if (rgxWordCount.Matches(DataEmployer[ct].Trim()).Count > 10 || rgxSmall.Matches(DataEmployer[ct].Trim()).Count > 4) continue;
                                    strbPastEmp.Append(DataEmployer[ct].Trim());
                                    RowIndex = ct;
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    int WordsCount = rgxWordCount.Matches(strbPastEmp.ToString()).Count;
                                    if (strbPastEmp.ToString().Trim().Length > 1 && (rgxClient.IsMatch(strbPastEmp.ToString().Trim()) | rgxNoCompny.IsMatch(strbPastEmp.ToString().Trim())))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    if (strbPastEmp.Length > 0 && WordsCount - rgxWordCount.Matches(strbPastEmp.ToString()).Count > 3)
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                }
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                        DataEmployer[RowIndex] = "";
                                    }
                                    else
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    //string strbpastempName = strbPastEmp.ToString().ToLower().Replace("site support", "").Replace("on", "").Replace("of", "");    
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString().Replace(" on ", "").Replace(" of ", "").ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                }
                            }
                            rgxNoCompny = null;
                            rgxWorkedIn = null;
                            rgxWorkedAsWith = null;
                            rgx60Space = null;
                            rgxSmall = null;
                            rgxWordCount = null;
                            rgxCapital = null;
                        }
                        catch { }
                        #endregion

                        #region Previous Employer Label---------8
                        try
                        {
                            Regex rgxWorked = new Regex(@"\b(Worked as a|worked at|worked with|worked for)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                RowIndex = 0;
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                // Breaking the Loop For found the Additional skills and Leadership activities 

                                if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 1)) break;
                                if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false || ((cnt + 1 < DataEmployer.Length) && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString().ToLower().Trim()) == true && (rgxLTD.IsMatch(DataEmployer[cnt + 1]) == false || DataEmployer[cnt + 1].Contains("Diploma in")))) continue;//Diploma in
                                if (rgxExpDate.Match(DataEmployer[cnt].Trim()).Index > 20 && rgxLTD.IsMatch(DataEmployer[cnt]) == false && DataEmployer[cnt].Replace(" ", "").Length > 100) continue;
                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                if (cnt > 2 && (DataEmployer[cnt - 1].ToString().ToLower().Contains("projects/thesis") || DataEmployer[cnt - 1].ToString().ToLower().Contains("extra curricular") || DataEmployer[cnt - 1].ToString().ToLower().Contains("special training") || DataEmployer[cnt - 1].ToString().ToLower().Contains("responsibilities"))) continue; //RESPONSIBILITIES
                                if (rgxDuration.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;

                                strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim().Replace(" up ", "")).ToString());
                                int count = 0;
                                for (int ct = cnt; ct > 0 && strbPastEmp.Length < 2; ct--)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (ct - 2 > 1 && DataEmployer[ct - 1].Trim().Length < 2 && DataEmployer[ct - 2].Trim().Length < 2) break;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                    if (ct != cnt && (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 4)) break;
                                    count++;
                                    if (DataEmployer[ct].Replace(" ", "").Length > 30 && rgxLTD.IsMatch(DataEmployer[ct]) == false) continue;
                                    if (rgxLTD.IsMatch(DataEmployer[ct].Trim()) == false || rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim()) == true) continue;
                                    strbPastEmp.Append(DataEmployer[ct].Trim());
                                    RowIndex = ct;
                                }
                                count = 0;
                                for (int ct = cnt + 1; ct < DataEmployer.Length && strbPastEmp.Length < 2; ct++)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                    if (ct != cnt && (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 4) || rgxWorked.IsMatch(DataEmployer[ct].Trim())) break;
                                    count++;
                                    if (DataEmployer[ct].Replace(" ", "").Length > 100 && rgxLTD.IsMatch(DataEmployer[ct]) == false) continue;
                                    if (rgxLTD.IsMatch(DataEmployer[ct].Trim()) == false || rgxNotLTD2.IsMatch(" " + DataEmployer[ct].Trim()) == true || rgxNotLTD3.IsMatch(" " + DataEmployer[ct].Trim()) == true || rgxExpDate.IsMatch(DataEmployer[ct + 1].Trim()) == true || DataEmployer[ct - 1].ToString().ToLower().Contains("responsibilities")) continue; //

                                    strbPastEmp.Append(DataEmployer[ct].Trim());
                                    RowIndex = ct;
                                }
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                        DataEmployer[RowIndex] = "";
                                    }
                                    else
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    string strEmployer = "";
                                    strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    try
                                    {
                                        if ((rgxLTD.IsMatch(strbPastEmp.ToString()) == true) && (rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length) < strEmployer.ToString().Length && rgxLTD.Match(strEmployer.ToString()).Index > 3)
                                            strEmployer = strEmployer.ToString().Trim().Substring(0, rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length);
                                        else
                                            strEmployer = strbPastEmp.ToString();
                                    }
                                    catch
                                    {
                                        strEmployer = strbPastEmp.ToString();
                                    }

                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                }

                            }
                        }
                        catch { }
                        #endregion

                        #region Previous Employer Label---------9--- Worked As
                        try
                        {
                            Regex rgxWorkedIn = new Regex(@"\b(WORKING|SERVING|ASSOCIATED|ASSOCIATE|EMPLOYED|WORKED)\b[\s]*(WITH|IN|FOR|AT)\b", RegexOptions.IgnoreCase);
                            Regex rgxWorkedAsWith = new Regex(@"(ASSOCIATED|ASSOCIATE|WORKING|EMPLOYED|SERVING|WORKED)\s{1,4}AS\s.{1,50}?\s(IN|FOR|WITH|AT)\b", RegexOptions.IgnoreCase);
                            Regex rgx60Space = new Regex(@"^.{5,60}?\b(with|With|WITH|for|FOR|For|By|As|in|In|IN|at|AT|At|on|ON|On|Also|also|Agent|agent)\b|^.{40,60}?\s", RegexOptions.IgnoreCase);
                            Regex rgxCompanyasDesfromDate = new Regex(@"\b(([A-Za-z\.\&-]){1,25}\s){1,4}(as)\s(([A-Za-z\.\&-]){1,25}\s){1,4}(from)\s(\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((" + strMonth + @")\.?)\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\d(9\d{2}|0\d{2}|\d)?\b|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\d(9\d{2}|0\d{2}|\d)?\b|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl)\.?)\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b)", RegexOptions.IgnoreCase);
                            //Regex rgxNotCorporate = new Regex(@"^.{0,17}\b(consulting assignments|consultant Employee|consultant Employment)\b", RegexOptions.IgnoreCase);
                            Regex rgxNotCorporate = new Regex(@"\b(consulting assignments|consultant Employee|consultant Employment|Academea|Activities & Leadership)\b", RegexOptions.IgnoreCase);
                            Regex rgxPersonal = new Regex(@"[\|\s,\(\:](Personal Information|personal detail|Personal Dossier|personal details|personal particulars|personal data|personal facts|Personal Profile|Activities  Leadership)[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                RowIndex = 0;
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (rgxPersonal.IsMatch(" " + DataEmployer[cnt].Replace("&", "")) == true) break;

                                if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 1)) break;
                                if (rgxNotCorporate.IsMatch(DataEmployer[cnt].Trim()) == true || (cnt > 1 && rgxNotCorporate.IsMatch(DataEmployer[cnt - 1].Trim())) == true) continue;

                                if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false && rgxWorkedExp.IsMatch(DataEmployer[cnt].Trim()) == false && REgexsDatateFrm.IsMatch(DataEmployer[cnt].Trim()) == false) continue;

                                if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString().Trim().ToLower()) == true || (cnt < DataEmployer.Length - 1 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim().ToLower()) == true && rgxExpDate.IsMatch(DataEmployer[cnt + 1].Trim()) == false && DataEmployer[cnt + 1].Trim().Length < 120) || ((cnt < DataEmployer.Length && cnt > 2) && DataEmployer[cnt - 1].Trim() == "")) continue;
                                if (((cnt > 2) && (DataEmployer[cnt - 1].ToString().Trim().Contains("Duration") == true || (DataEmployer[cnt - 1].ToString().ToLower().Contains("projects/thesis") || DataEmployer[cnt - 1].ToString().ToLower().Contains("extra curricular"))))) continue;

                                if (rgxDuration.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;

                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();

                                strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());
                                try
                                {
                                    strbPastEmp.Append(rgxCompanyasDesfromDate.Match(DataEmployer[cnt].Trim()).ToString());
                                    if (strbPastEmp.Length == 0 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim().ToLower()) == false)
                                        strbPastEmp.Append(DataEmployer[cnt].Trim());
                                    else
                                        continue;
                                }
                                catch
                                {
                                    strbPastEmp.Append(DataEmployer[cnt].Trim());
                                }
                                try
                                {
                                    strbPastEmp.Replace(strbWorkTime.ToString(), " ");

                                    if (strbPastEmp.ToString().Trim().Length <= 2 && (strbPastEmp.ToString().Trim().StartsWith("V") == true || strbPastEmp.ToString().Trim().StartsWith("I") == true))
                                        strbPastEmp.Replace(strbPastEmp.ToString().Trim(), "");
                                    if (strbPastEmp.ToString().Trim().Length <= 3 && (strbPastEmp.ToString().Trim().StartsWith("III") == true))
                                        strbPastEmp.Replace(strbPastEmp.ToString().Trim(), "");

                                }
                                catch
                                {
                                    strbPastEmp = new StringBuilder();
                                }
                                if (rgxWorkedIn.IsMatch(strbPastEmp.ToString().Trim()))
                                {
                                    strbPastEmp.Remove(0, rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Length);
                                    if (rgx60Space.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), rgx60Space.Match(strbPastEmp.ToString().Trim()).ToString());
                                }
                                if (rgxWorkedAsWith.IsMatch(strbPastEmp.ToString().Trim()))
                                {
                                    strbPastEmp.Remove(0, rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Length);
                                    if (rgx60Space.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), rgx60Space.Match(strbPastEmp.ToString().Trim()).ToString());
                                }
                                //if (rgxWorkedAsWith.IsMatch(strbPastEmp.ToString().Trim()))
                                //    strbPastEmp.Replace(strbPastEmp.ToString(), rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).ToString().Trim());
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);

                                RowIndex = cnt;
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                        DataEmployer[RowIndex] = "";
                                    }
                                    else
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                }

                            }
                            rgxWorkedIn = null;
                            rgxWorkedAsWith = null;
                            rgx60Space = null;
                            rgxCompanyasDesfromDate = null;
                            rgxNotCorporate = null;
                        }
                        catch { }
                        #endregion

                        #region
                        try
                        {   //Logic Changed For Employer Table Format to Employer Array
                            Regex rgxWithCompny = new Regex(@"\b(WITH|With|with)\s\s?(((([A-Za-z\.\&]){1,25}\s){1,3}as)|([A-Z][\.\s]|[A-Z][A-Za-z]{2,15})\s?[&\.\s]\s?([A-Z][\.\s]|[A-Z][A-Za-z]{2,15})\s?([&\.\s]\s?([A-Z][\.\s]|[A-Z][A-Za-z]{2,15}))?\s?([&\.\s]\s?([A-Z][\.\s]|[A-Z][A-Za-z]{2,15}))?)");
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (rgxExpDate.IsMatch(DataEmployer[cnt]) == false || DataEmployer[cnt].Replace(" ", "").Length > 150 || rgxWithCompny.IsMatch(DataEmployer[cnt]) == false || rgxLTD.IsMatch(DataEmployer[cnt])) continue;
                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt]).ToString());
                                strbPastEmp.Append(rgxWithCompny.Match(DataEmployer[cnt]).ToString());
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                    strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                    strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                }
                            }
                            rgxWithCompny = null;
                        }
                        catch { }
                        #endregion

                        #region Previous Employer Label---------8
                        try
                        {
                            Regex rgxCompny = new Regex(@"^([A-Z]|[A-Z][A-Za-z]{2,15})\s?[&\.\s]\s?([A-Z]|[A-Z][A-Za-z]{2,15})\s?([&\.\s]\s?([A-Z]|[A-Z][A-Za-z]{2,15}))?\s?([&\.\s]\s?([A-Z]|[A-Z][A-Za-z]{2,15}))?\s?([&\.\s]\s?([A-Z]|[A-Z][A-Za-z]{2,15}))?\b", RegexOptions.RightToLeft);
                            int RowIndex = 0;
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                RowIndex = 0;
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false || rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim()) == true || rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].Trim()) == true || DataEmployer[cnt].Replace(" ", "").Length > 150) continue;
                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                if (cnt + 1 < DataEmployer.Length && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim()) == true) continue; //rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim()) == true
                                //09-06-09 
                                //strbWorkTime.Append(rgxExpDateOnly.Match(DataEmployer[cnt].Trim()).ToString());
                                if (((cnt < DataEmployer.Length && cnt > 2) && DataEmployer[cnt - 1].ToString().Trim().Contains("Duration") == true)) continue;
                                if (rgxDuration.IsMatch(DataEmployer[cnt].ToString().Trim()) || DataEmployer[cnt].ToString().Trim().Contains("Duration") == true) continue;
                                strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());
                                int count = 0;

                                for (int ct = cnt; ct > 0 && strbPastEmp.Length < 2 && ct <= (cnt + 2); ct--)
                                {
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    //added education line checking
                                    if (((_EdcnStart1 <= ct && ct <= _EdcnEnd1) || (_EdcnStart2 < ct && ct < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                    //if ((DataEmployer[ct].Replace(" ", "").Length > 100 && ct != cnt) || DataEmployer[ct].Replace(" ", "").Length > 150) break;
                                    if ((ct != cnt && (rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 2 || DataEmployer[ct].Replace(" ", "").Length > 100)) && rgxLTD.IsMatch(DataEmployer[ct]) == false) break;
                                    count++;
                                    if (((rgxCompny.IsMatch(DataEmployer[ct].Trim()) == false || DataEmployer[ct].Replace(" ", "").Length > 60 || rgxNotLTD2.IsMatch(" " + DataEmployer[ct]) == true) && (rgxLTD.IsMatch(DataEmployer[cnt]) == false))) continue;
                                    if (DataEmployer[ct].Trim().IndexOf(" at ") < 0 || rgxNotLTD2.IsMatch(" " + DataEmployer[ct].ToString().Trim()) == false)
                                    {
                                        strbPastEmp.Append(rgxCompny.Match(DataEmployer[ct].Trim().ToString()));
                                    }
                                    else
                                    {
                                        string[] tS = { " at " };
                                        strbPastEmp.Append(DataEmployer[ct].Trim().ToString().Split(tS, StringSplitOptions.RemoveEmptyEntries)[1]);
                                    }
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    RowIndex = ct;
                                }
                                count = 0;
                                for (int ct = cnt; ct < DataEmployer.Length && strbPastEmp.Length < 2 && ct <= (cnt + 2); ct++)
                                {
                                    //if ((DataEmployer[ct].Replace(" ", "").Length > 100 && ct != cnt) || DataEmployer[ct].Replace(" ", "").Length > 150) break;
                                    if (((_EdcnStart1 <= ct && ct <= _EdcnEnd1) || (_EdcnStart2 < ct && ct < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (DataEmployer[ct].Trim().Length < 2) continue;
                                    if (rgxReponsibility.IsMatch(DataEmployer[ct].Trim()) && rgxReponsibility.Match(DataEmployer[ct].Trim()).Index < 5) break;
                                    if (rgxExperienceLTD.IsMatch(DataEmployer[ct].Trim()) || rgxPastExperience.IsMatch(DataEmployer[ct].Trim()) || rgxEducnEnd.IsMatch(DataEmployer[ct])) break;
                                    if ((ct != cnt && rgxExpTillDate.IsMatch(DataEmployer[ct].Trim()) || rgxExpDate.IsMatch(DataEmployer[ct].Trim()) || count > 2 || DataEmployer[ct].Replace(" ", "").Length > 100)) break; //&& rgxLTD.IsMatch(DataEmployer[ct]) == false
                                    count++;
                                    if ((rgxCompny.IsMatch(DataEmployer[ct].Trim()) == false || DataEmployer[ct].Replace(" ", "").Length > 60) && rgxLTD.IsMatch(DataEmployer[cnt]) == false || rgxNotLTD2.IsMatch(" " + DataEmployer[cnt])) continue;
                                    if (DataEmployer[ct].Trim().IndexOf(" at ") < 0)
                                        strbPastEmp.Append(rgxCompny.Match(DataEmployer[ct].Trim().ToString()));
                                    else
                                    {
                                        string[] tS = { " at " };
                                        strbPastEmp.Append(DataEmployer[ct].Trim().ToString().Split(tS, StringSplitOptions.RemoveEmptyEntries)[1]);
                                    }
                                    RowIndex = ct;
                                }
                                if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                    strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                if (strbPastEmp.Length > 2)
                                    ReplaceAll(ref strbPastEmp);
                                if (strbPastEmp.ToString().Trim().Length > 1)
                                {
                                    if (strbPastEmp.ToString().Trim().Length <= 3 && strbPastEmp.ToString().Trim().StartsWith("III") == true)
                                        strbPastEmp.Replace(strbPastEmp.ToString().Trim(), "");
                                    if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                        DataEmployer[RowIndex] = "";
                                    }
                                    else
                                    {
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                        string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                        strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                        strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    }
                                }
                            }
                            rgxCompny = null;
                        }
                        catch { }
                        #endregion

                        #region
                        try
                        {
                            for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                            {
                                if (DataEmployer[cnt].Trim().Length < 2) continue;
                                if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 <= cnt && cnt <= _EdcnEnd2)) && bEmpFilteredData == false)
                                    continue;
                                if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false || DataEmployer[cnt].Replace(" ", "").Length > 100 || rgxLTD.IsMatch(DataEmployer[cnt])) continue;
                                strbPastEmp = new StringBuilder();
                                strbWorkTime = new StringBuilder();
                                if (cnt - 1 > 0 && DataEmployer[cnt - 1].Replace(" ", "").Length < 2 && cnt + 1 < DataEmployer.Length && DataEmployer[cnt + 1].Replace(" ", "").Length < 2)
                                {
                                    strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());
                                    strbPastEmp.Append(DataEmployer[cnt].Trim());
                                    strbPastEmp.Replace(strbWorkTime.ToString(), " ");
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                        strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                        strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                        strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                    }
                                }
                            }

                        }
                        catch { }
                        #endregion

                        #region Previous Employer Label---------9--- Worked As -- NOt Limited Taking as Employer
                        try
                        {
                            //if (strbPreviousEmplr.Length < 1 || strbPreviousEmplr.ToString().IndexOf("#", 1) < 1)  
                            if (true)
                            {
                                Regex rgxWorkedIn = new Regex(@"\b(WORKING|SERVING|ASSOCIATED|ASSOCIATE|EMPLOYED|WORKED)\b[\s]*(WITH|IN|FOR|AT)\b", RegexOptions.IgnoreCase);
                                Regex rgxWorkedAsWith = new Regex(@"(ASSOCIATED|ASSOCIATE|WORKING|EMPLOYED|SERVING|WORKED)\s{1,4}AS\s.{1,50}?\s(IN|FOR|WITH|AT)\b", RegexOptions.IgnoreCase);
                                Regex rgx60Space = new Regex(@"^.{5,60}?\b(with|With|WITH|for|FOR|For|By|As|in|In|IN|at|AT|At|on|ON|On|Also|also|Agent|agent)\b|^.{40,60}?\s", RegexOptions.IgnoreCase);
                                Regex rgxCompanyasDesfromDate = new Regex(@"\b(([A-Za-z\.\&-]){1,25}\s){1,4}(as)\s(([A-Za-z\.\&-]){1,25}\s){1,4}(from)\s(\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((" + strMonth + @")\.?)\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\d(9\d{2}|0\d{2}|\d)?\b|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\d(9\d{2}|0\d{2}|\d)?\b|\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?((January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl)\.?)\d(9\d{2}|0\d{2}|\d)?\s?.{0,2}(\b(till|to|to Till)\b)?.{0,2}\s?\b\d{1,2}(st|nd|rd|th)?\s?.{0,1}\s?\b((" + strMonth + @")\.?)\b\s?.{0,2}(19\d{2}|20\d{2}|\d{2}|\d)\b)", RegexOptions.IgnoreCase);
                                //Regex rgxNotCorporate = new Regex(@"^.{0,17}\b(consulting assignments|consultant Employee|consultant Employment)\b", RegexOptions.IgnoreCase);
                                Regex rgxNotCorporate = new Regex(@"\b(consulting assignments|consultant Employee|consultant Employment|Academea|Activities & Leadership)\b", RegexOptions.IgnoreCase);
                                Regex rgxPersonal = new Regex(@"[\|\s,\(\:](Personal Information|personal detail|Personal Dossier|personal details|personal particulars|personal data|personal facts|Personal Profile|Activities  Leadership)[:\s]?[:\-\s]?\b", RegexOptions.IgnoreCase);
                                int RowIndex = 0;
                                for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                                {

                                    RowIndex = 0;
                                    if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (rgxPersonal.IsMatch(" " + DataEmployer[cnt].Replace("&", "")) == true) break;
                                    if (rgxNotCorporate.IsMatch(DataEmployer[cnt].Trim()) == true || (cnt > 1 && rgxNotCorporate.IsMatch(DataEmployer[cnt - 1].Trim())) == true) continue;

                                    if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()) == false && rgxWorkedExp.IsMatch(DataEmployer[cnt].Trim()) == false && REgexsDatateFrm.IsMatch(DataEmployer[cnt].Trim()) == false) continue;

                                    if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].ToString().Trim().ToLower()) == true || (cnt < DataEmployer.Length - 1 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt + 1].Trim().ToLower()) == true && rgxExpDate.IsMatch(DataEmployer[cnt + 1].Trim()) == false && DataEmployer[cnt + 1].Trim().Length < 120) || ((cnt < DataEmployer.Length - 1 && cnt > 2) && DataEmployer[cnt - 1].Trim() == "")) continue;
                                    if (((cnt < DataEmployer.Length - 1 && cnt > 2) && DataEmployer[cnt - 1].ToString().Trim().Contains("Duration") == true || (DataEmployer[cnt - 1].ToString().ToLower().Contains("projects/thesis") || DataEmployer[cnt - 1].ToString().ToLower().Contains("extra curricular")))) continue;

                                    if (rgxDuration.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;
                                    strbPastEmp = new StringBuilder();
                                    strbWorkTime = new StringBuilder();

                                    strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()).ToString());
                                    try
                                    {
                                        strbPastEmp.Append(rgxCompanyasDesfromDate.Match(DataEmployer[cnt - 1].Trim()).ToString());
                                        if (strbPastEmp.Length == 0 && rgxNotLTD2.IsMatch(" " + DataEmployer[cnt - 1].Trim().ToLower()) == false && (cnt - 2 > 1 && DataEmployer[cnt - 2].Trim() != ""))
                                            strbPastEmp.Append(DataEmployer[cnt - 1].Trim());
                                        else
                                            continue;
                                    }
                                    catch
                                    {
                                        strbPastEmp.Append(DataEmployer[cnt].Trim());
                                    }
                                    try
                                    {
                                        strbPastEmp.Replace(strbWorkTime.ToString(), " ");

                                    }
                                    catch
                                    {
                                        strbPastEmp = new StringBuilder();
                                    }
                                    if (rgxWorkedIn.IsMatch(strbPastEmp.ToString().Trim()))
                                    {
                                        strbPastEmp.Remove(0, rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedIn.Match(strbPastEmp.ToString().Trim()).Length);
                                        if (rgx60Space.IsMatch(strbPastEmp.ToString().Trim()))
                                            strbPastEmp.Replace(strbPastEmp.ToString(), rgx60Space.Match(strbPastEmp.ToString().Trim()).ToString());
                                    }
                                    if (rgxWorkedAsWith.IsMatch(strbPastEmp.ToString().Trim()))
                                    {
                                        strbPastEmp.Remove(0, rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Index + rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).Length);
                                        if (rgx60Space.IsMatch(strbPastEmp.ToString().Trim()))
                                            strbPastEmp.Replace(strbPastEmp.ToString(), rgx60Space.Match(strbPastEmp.ToString().Trim()).ToString());
                                    }
                                    //if (rgxWorkedAsWith.IsMatch(strbPastEmp.ToString().Trim()))
                                    //    strbPastEmp.Replace(strbPastEmp.ToString(), rgxWorkedAsWith.Match(strbPastEmp.ToString().Trim()).ToString().Trim());
                                    if (strbPastEmp.ToString().Trim().Length > 1 && rgxClient.IsMatch(strbPastEmp.ToString().Trim()))
                                        strbPastEmp.Replace(strbPastEmp.ToString(), "");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);

                                    RowIndex = cnt;
                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        if (RowIndex > 2 && RowIndex < DataEmployer.Length - 1 && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                        {
                                            strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                            DataEmployer[RowIndex] = "";
                                        }
                                        else
                                            strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                        string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                        strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                        strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                    }

                                }
                                rgxWorkedIn = null;
                                rgxWorkedAsWith = null;
                                rgx60Space = null;
                                rgxCompanyasDesfromDate = null;
                                rgxNotCorporate = null;
                            }
                        }
                        catch { }
                        #endregion

                        //Without Date Prsing  Employer Details Based on Worked as ,worked with
                        #region   Previous Employer Label -------11
                        try
                        {
                            int k = 1;
                            string[] strPastEmp = null;
                            bool bCheckEmpWithoutDate = false;
                            strPastEmp = strbPreviousEmplr.ToString().Trim().Split('#');
                            if (strbPreviousEmplr.Length < 2)
                                bCheckEmpWithoutDate = true;
                            for (int cnt = 0; cnt < strPastEmp.Length && bCheckEmpWithoutDate == false; cnt++)
                            {
                                if (strPastEmp[cnt] != "")
                                    if (strPastEmp[cnt].Trim() == PresentEmployer.Trim() && bCheckEmpWithoutDate == false)
                                        bCheckEmpWithoutDate = true;
                                    else
                                    {
                                        bCheckEmpWithoutDate = false;
                                        break;
                                    }
                            }
                            if (bCheckEmpWithoutDate == true || strbPreviousEmplr.Length < 2)
                            {
                                int RowIndex = 0;
                                for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                                {
                                    RowIndex = 0;
                                    if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (DataEmployer[cnt].Trim().Length < 2) continue;

                                    if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 1)) break;
                                    if (exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].Trim().Replace(":-", "")) == false) continue;

                                    //Worked with paging spaces

                                    strbPastEmp = new StringBuilder();
                                    strbWorkTime = new StringBuilder();
                                    if (rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim()) == true) continue;
                                    strbPastEmp.Append(DataEmployer[cnt].Trim());
                                    if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()))
                                        strbWorkTime.Append(DataEmployer[cnt].Trim());
                                    if (rgxExpDate.IsMatch(DataEmployer[cnt + 1].Trim()))
                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt + 1].Trim()));

                                    if (strbWorkTime.Length < 2)
                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()));

                                    if (strbWorkTime.Length < 2) continue;
                                    RowIndex = cnt;

                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                        ReplaceAll(ref strbPastEmp);

                                    if (strbPastEmp.ToString().IndexOf(" as ") > 5)
                                        strbPastEmp.Remove(strbPastEmp.ToString().IndexOf(" as "), strbPastEmp.Length - strbPastEmp.ToString().IndexOf(" as "));

                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        if (strbPastEmp.ToString().Trim().Length > 1)
                                        {
                                            if (RowIndex > 2 && RowIndex < DataEmployer.Length - 1 && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                            {
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                                DataEmployer[RowIndex] = "";
                                            }
                                            else
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                            string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                            strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                            strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim().Replace(":", ""));
                                        }
                                    }
                                }
                            }
                        }
                        catch { }

                        #endregion

                        //  Employer Date   -- to parse the employer details
                        #region   Previous Employer Label -------12
                        try
                        {
                            string[] strPastEmp = null;
                            bool bCheckEmpWithoutDate = false;
                            strPastEmp = strbPreviousEmplr.ToString().Trim().Split('#');
                            if (strbPreviousEmplr.Length < 2)
                                bCheckEmpWithoutDate = true;
                            for (int cnt = 0; cnt < strPastEmp.Length && bCheckEmpWithoutDate == false; cnt++)
                            {
                                if (strPastEmp[cnt] != "")
                                    if (strPastEmp[cnt].Trim() == PresentEmployer.Trim() && bCheckEmpWithoutDate == false)
                                        bCheckEmpWithoutDate = true;
                                    else
                                    {
                                        bCheckEmpWithoutDate = false;
                                        break;
                                    }
                            }
                            System.Text.RegularExpressions.Regex regtillDate = new System.Text.RegularExpressions.Regex(@"[\s,\{“‘\(\.](till date|till date\)|Present |Till Dated|Today|present|Presently|till date|to till date|to current date|current date|to current date|current date|till now|till present|onwards|onward|ongoing|to present|to till now|now|till|Due|Continuing|Till the Date|Till Date|Till Now|Present|Current Date|TillDate|Current|To Date|to-date|To Now|Now|onward|ongoing|Till|Date|Currently|Current|Actual|continuing|(continuing)|Till the Date)[,\:’\}”\s\)]?[\s]?\b", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                            if (bCheckEmpWithoutDate == true || strbPreviousEmplr.Length < 2 || (strPastEmp.Length <= 2 && bCheckEmpWithoutDate == true))
                            {
                                int RowIndex = 0;
                                bool bFlgEMp = false;
                                for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                                {
                                    RowIndex = 0;
                                    if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (DataEmployer[cnt].Trim().Length < 2) continue;
                                    if (rgxEmpDets.IsMatch(DataEmployer[cnt].Trim()) == false)
                                        bFlgEMp = true;
                                    if (bFlgEMp == false)
                                        continue;

                                    if (RegExNoEMpDet.IsMatch(" " + DataEmployer[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataEmployer[cnt].Trim()).Index == 1)) break;
                                    if ((rgxLTD.IsMatch(DataEmployer[cnt].Trim()) == false && (exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].Trim()) == false && (cnt + 1 < DataEmployer.Length - 1 && rgxLTD.IsMatch(DataEmployer[cnt + 1].Trim()) == false))) || DataEmployer[cnt].Trim().Length > 250) continue;
                                    if ((rgxNotLTD2.IsMatch(" " + DataEmployer[cnt].Trim()) == true || exPresentEmp1.IsMatch(" " + DataEmployer[cnt].Trim()) == true || (rgxLTD.IsMatch(DataEmployer[cnt].Trim()) == false && DataEmployer[cnt].Trim().Contains("Banking")))) continue;
                                    if (exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].Trim()) == false) continue;
                                    if (rgxDuration.IsMatch(DataEmployer[cnt].Trim()) == true) continue;
                                    if (regtillDate.IsMatch(DataEmployer[cnt].Trim())) continue;
                                    strbPastEmp = new StringBuilder();
                                    strbWorkTime = new StringBuilder();
                                    strbPastEmp.Append(DataEmployer[cnt].Trim());
                                    if (rgxExpDate.IsMatch(DataEmployer[cnt].Trim()))
                                        strbWorkTime.Append(DataEmployer[cnt].Trim());
                                    if (rgxExpDate.IsMatch(DataEmployer[cnt + 1].Trim()))
                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt + 1].Trim()));

                                    if (strbWorkTime.Length < 2)
                                        strbWorkTime.Append(rgxExpDate.Match(DataEmployer[cnt].Trim()));


                                    RowIndex = cnt;

                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                        ReplaceAll(ref strbPastEmp);
                                    //
                                    if (strbWorkTime.Length < 2) continue;
                                    if (strbPastEmp.Length < 2)
                                        if (exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].Trim()) == true && (cnt + 1 < DataEmployer.Length - 1 && rgxLTD.IsMatch(DataEmployer[cnt + 1].Trim()) == true))
                                            strbPastEmp.Append(DataEmployer[cnt + 1].Trim());
                                    //
                                    if (strbPastEmp.ToString().IndexOf(" as ") > 5)
                                        strbPastEmp.Remove(strbPastEmp.ToString().IndexOf(" as "), strbPastEmp.Length - strbPastEmp.ToString().IndexOf(" as "));

                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        if (strbPastEmp.ToString().Trim().Length > 1)
                                        {
                                            if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                            {
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                                DataEmployer[RowIndex] = "";
                                            }
                                            else
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                            string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                            strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                            strbWorkingPD.Append("#" + strbWorkTime.ToString().Trim());
                                        }
                                    }
                                }
                            }
                        }
                        catch { }

                        #endregion

                        #region  Previous Employer Label ------- With Out Checking Date  and Without checking Working as -- Saravana
                        try
                        {
                            string[] strPastEmp = null;
                            bool bCheckEmpWithoutDate = false;
                            strPastEmp = strbPreviousEmplr.ToString().Trim().Split('#');
                            for (int cnt = 0; cnt < strPastEmp.Length; cnt++)
                            {
                                if (strPastEmp[cnt] != "")
                                    if (strPastEmp[cnt].ToString().Trim() == PresentEmployer.Trim() && bCheckEmpWithoutDate == false)
                                        bCheckEmpWithoutDate = true;
                                    else
                                    {
                                        bCheckEmpWithoutDate = false;
                                        break;
                                    }
                            }
                            //Regex rgxNotEmp1 = new Regex(@"\b(working in teams|working in team)\b", RegexOptions.IgnoreCase);
                            if (strbPreviousEmplr.Length < 2 || bCheckEmpWithoutDate == true)
                            {
                                int RowIndex = 0;
                                for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                                {
                                    RowIndex = 0;
                                    if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (DataEmployer[cnt].ToString().Trim().Length < 2) continue;
                                    if (rgxNotEmp1.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;
                                    if (exPresentEmp2.IsMatch(" " + DataEmployer[cnt].ToString().Trim().Replace(":-", "")) == false && exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim().Replace(":-", "")) == false) continue;
                                    if (exPresentEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim().Replace(":-", "")) == true || exPresentEmp2.Match(" " + DataEmployer[cnt].ToString().Trim().Replace(":-", "")).Index > 3) continue;
                                    if (rgxExpTillDate.IsMatch(DataEmployer[cnt].ToString().Trim()) == true) continue;
                                    if (cnt + 1 < DataEmployer.Length - 1 && rgxPeriod.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) == true && rgxExpTillDate.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) == true) continue;
                                    if (cnt - 1 >= 1 && (exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim().Replace(":-", "")) == false && rgxExpTillDate.IsMatch(DataEmployer[cnt - 1].ToString().Trim()) == true)) continue;
                                    strbPastEmp = new StringBuilder();
                                    strbWorkTime = new StringBuilder();
                                    strbWorkTime.Append(DateTime.Now.Year + "").ToString();
                                    strbPastEmp.Append(DataEmployer[cnt].ToString().Trim());
                                    RowIndex = cnt;
                                    strbPastEmp.Replace(strbWorkTime.ToString(), " ");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    //(rgxEmployerSplit) -- Regular Expresion added for finding the employer name in different limited keywords
                                    if (strbPastEmp.Length < 2 && (cnt + 1) < DataEmployer.Length && (rgxLTD.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) || rgxEmployerSplit.IsMatch(DataEmployer[cnt + 1].ToString().Trim())))
                                        strbPastEmp.Append(DataEmployer[cnt + 1].ToString().Trim());

                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        if (strbPastEmp.ToString().Trim().Length > 1)
                                        {
                                            if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                            {
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                                DataEmployer[RowIndex] = "";
                                            }
                                            else
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                            string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                            strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                            try
                                            {
                                                strbWorkingPD.Append("#  X" + cnt);
                                            }
                                            catch { }
                                        }
                                    }
                                }
                            }
                        }
                        catch { }
                        #endregion

                        //End with Previous Employer

                        //If present employer not found -- Search with Whole Resume Based on keyword (eg: currently working as ,presently working)
                        #region  Present Employer Label ------- Present Employer Finding From All Section in Resume
                        try
                        {
                            // Regex rgxNotEmp1 = new Regex(@"\b(working in teams|working in team)\b", RegexOptions.IgnoreCase);
                            if (PresentEmployer == "" && strbPreviousEmplr.Length < 2)
                            {
                                int RowIndex = 0;
                                for (int cnt = 0; cnt < DataLines.Length - 1 && (PresentEmployer.Length < 1); cnt++)
                                {
                                    if (((_EdcnStart1 < cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)))
                                        continue;
                                    RowIndex = 0;
                                    if (DataLines[cnt].ToString().Trim().Length < 2) continue;
                                    if (rgxNotEmp1.IsMatch(DataLines[cnt].Trim()) == true) continue;
                                    if (RegExNoEMpDet.IsMatch(" " + DataLines[cnt].Trim()) && (RegExNoEMpDet.Match(" " + DataLines[cnt].Trim()).Index == 0 || RegExNoEMpDet.Match(" " + DataLines[cnt].Trim()).Index == 1)) break;
                                    if (exPresentEmp1.IsMatch(" " + DataLines[cnt].ToString().Trim().Replace("‘", "").Replace("’", "")) == false) continue;
                                    try
                                    {
                                        if (rgxExpTillDate.IsMatch(DataLines[cnt].ToString()))
                                            strbEmplrTillDate.Append(rgxExpTillDate.Match(DataLines[cnt].ToString())).ToString();
                                        else
                                            strbEmplrTillDate.Append(DateTime.Now.Year + " - till now").ToString();
                                    }
                                    catch { }

                                    strbPresentEmplyr.Append(DataLines[cnt].ToString().Trim());

                                    strbPresentEmplyr.Replace(strbEmplrTillDate.ToString(), " ");

                                    if (exPresentEmp1.IsMatch(" " + DataLines[cnt].ToString().Trim()) == true)
                                        strbPresentEmplyr.Replace(exPresentEmp1.Match(" " + DataLines[cnt].ToString()).ToString().Trim(), "");
                                    if (strbPresentEmplyr.Length < 2 && (cnt + 1) < DataLines.Length - 1)
                                        strbPresentEmplyr.Append(DataLines[cnt + 1].ToString().Trim());
                                    RowIndex = cnt;
                                    if (strbPresentEmplyr.Length > 2)
                                        ReplaceAll(ref strbPresentEmplyr);
                                    if (strbPresentEmplyr.ToString().Trim().Length > 1)
                                    {
                                        if (RowIndex > 2 && RowIndex < DataLines.Length && rgxLTD.IsMatch(strbPresentEmplyr.ToString()) && rgxLTD.IsMatch(DataLines[RowIndex]))
                                            DataLines[RowIndex] = "";
                                        string strEmployer = "";

                                        try
                                        {
                                            strEmployer = FCommon.rgxDesignations.Replace(" " + strbPresentEmplyr.ToString(), "");
                                            if ((rgxLTD.IsMatch(strbPresentEmplyr.ToString()) == true) && (rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length) < strEmployer.ToString().Length && rgxLTD.Match(strEmployer.ToString()).Index > 3)
                                                strEmployer = strEmployer.ToString().Trim().Substring(0, rgxLTD.Match(strEmployer.ToString()).Index + rgxLTD.Match(strEmployer.ToString()).ToString().Length);
                                            else
                                                strEmployer = FCommon.rgxDesignations.Replace(" " + strbPresentEmplyr.ToString(), "");
                                        }
                                        catch
                                        {
                                            strEmployer = strbPresentEmplyr.ToString();
                                        }

                                        PresentEmployer = strEmployer.ToString().Trim();
                                        strPresentEmpDate = strbEmplrTillDate.ToString().Trim();
                                    }
                                    else
                                    {
                                        if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                            strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                                        if (strbEmplrTillDate.Length > 0)
                                            strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                                    }
                                }
                            }
                        }
                        catch { }
                        finally
                        {
                            if (strbPresentEmplyr.ToString().Trim().Length > 0)
                                strbPresentEmplyr.Remove(0, strbPresentEmplyr.Length);
                            if (strbEmplrTillDate.Length > 0)
                                strbEmplrTillDate.Remove(0, strbEmplrTillDate.Length);
                        }

                        if (strPresentEmpDate.Length > 2 && PresentEmployer == "")
                            strPresentEmpDate = "";
                        #endregion


                        #region  Previous Employer Label ------- Checking Previous Employer IN US Format Resume (eg: Summer 2009, Spring 2010)

                        try
                        {
                            string[] strPastEmp = null;
                            bool bCheckEmpWithoutDate = false;
                            strPastEmp = strbPreviousEmplr.ToString().Trim().Split('#');
                            for (int cnt = 0; cnt < strPastEmp.Length; cnt++)
                            {
                                if (strPastEmp[cnt] != "")
                                    if (strPastEmp[cnt].ToString().Trim() == PresentEmployer.Trim() && bCheckEmpWithoutDate == false)
                                        bCheckEmpWithoutDate = true;
                                    else
                                    {
                                        bCheckEmpWithoutDate = false;
                                        break;
                                    }
                            }

                            string _StrMonthInUS = @"(Summer|Winter|Spring)\.?";
                            string _StrExpDate1 = @"\b(" + _StrMonthInUS + @")\s?.{0,2}\d{4}\b";
                            Regex rgxExpStrExpDate = new Regex(_StrExpDate1, RegexOptions.IgnoreCase);


                            if (strbPreviousEmplr.Length < 2 || bCheckEmpWithoutDate == true)
                            {
                                int RowIndex = 0;
                                for (int cnt = 0; cnt < DataEmployer.Length; cnt++)
                                {
                                    RowIndex = 0;
                                    if (((_EdcnStart1 <= cnt && cnt <= _EdcnEnd1) || (_EdcnStart2 < cnt && cnt < _EdcnEnd2)) && bEmpFilteredData == false)
                                        continue;
                                    if (DataEmployer[cnt].ToString().Trim().Length < 2) continue;
                                    if (rgxNotEmp1.IsMatch(DataEmployer[cnt].ToString().Trim())) continue;

                                    if (rgxExpStrExpDate.IsMatch(DataEmployer[cnt].ToString().Trim()) == false) continue;
                                    if (exPresentEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim().Replace(":-", "")) == true) continue;

                                    if (cnt + 1 < DataEmployer.Length - 1 && rgxPeriod.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) == true && rgxExpStrExpDate.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) == true) continue;
                                    if (cnt - 1 >= 1 && (exPreviousEmp1.IsMatch(" " + DataEmployer[cnt].ToString().Trim().Replace(":-", "")) == false && rgxExpStrExpDate.IsMatch(DataEmployer[cnt - 1].ToString().Trim()) == true)) continue;

                                    strbPastEmp = new StringBuilder();
                                    strbWorkTime = new StringBuilder();

                                    //Appending Employer and Duration Based on US Date Format
                                    if (rgxExpStrExpDate.IsMatch(DataEmployer[cnt].ToString().Trim()) == false)
                                        strbWorkTime.Append(DateTime.Now.Year + "").ToString();
                                    else
                                        strbWorkTime.Append(rgxExpStrExpDate.Match(DataEmployer[cnt].ToString().Trim())).ToString();

                                    strbPastEmp.Append(DataEmployer[cnt].ToString().Trim());

                                    if (strbPastEmp.Length > 2)
                                        strbPastEmp.Replace(Convert.ToChar(9).ToString(), " ");

                                    RowIndex = cnt;
                                    strbPastEmp.Replace(strbWorkTime.ToString(), " ");
                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);

                                    //(rgxEmployerSplit) -- Regular Expresion added for finding the employer name in different limited keywords
                                    if (strbPastEmp.Length < 2 && (cnt + 1) < DataEmployer.Length && (rgxLTD.IsMatch(DataEmployer[cnt + 1].ToString().Trim()) || rgxEmployerSplit.IsMatch(DataEmployer[cnt + 1].ToString().Trim())))
                                        strbPastEmp.Append(DataEmployer[cnt + 1].ToString().Trim());

                                    if (strbPastEmp.Length > 2)
                                        ReplaceAll(ref strbPastEmp);
                                    if (strbPastEmp.ToString().Trim().Length > 1)
                                    {
                                        if (strbPastEmp.ToString().Trim().Length > 1)
                                        {
                                            if (RowIndex > 2 && RowIndex < DataEmployer.Length && rgxLTD.IsMatch(strbPastEmp.ToString()) && rgxLTD.IsMatch(DataEmployer[RowIndex]))
                                            {
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(RowIndex, 0));
                                                DataEmployer[RowIndex] = "";
                                            }
                                            else
                                                strbPreviousDesignation.Append("#" + opGetPrevEmployerDesignation(cnt, 0));
                                            string strEmployer = FCommon.rgxDesignations.Replace(" " + strbPastEmp.ToString(), "");
                                            strbPreviousEmplr.Append("#" + strEmployer.ToString());
                                            try
                                            {
                                                strbWorkingPD.Append("#  X" + cnt);
                                            }
                                            catch { }
                                        }
                                    }
                                }
                            }
                        }
                        catch { }

                        #endregion

                    }

                    #region Convert into String Array
                    try
                    {
                        if (strbWorkingPD.ToString().Trim().Length > 0)
                        {
                            for (int i = 0; i < 127; i++)
                            {
                                if (i >= 48 && i <= 57 || i >= 65 && i <= 90 || i >= 97 && i <= 122 || i == 32 || i == 35)
                                    continue;
                                strbWorkingPD.Replace(Convert.ToChar(i).ToString(), " ");
                            } // #01 09 2007 to till date#June 2004 to May2005#2005 to 01 09 2007#June 2004 to May2005
                            strbWorkingPD.Replace(strbWorkingPD.ToString(), strbWorkingPD.ToString().ToLower());
                            strbWorkingPD.Replace("’", " ").Replace("–", " ").Replace("#", " # ").Replace(" to ", " ").Replace(" To ", " ").Replace(" TO ", " ");
                            strbWorkingPD.Replace(" febs ", " feb ").Replace(" aprl ", " apr ").Replace(" sept ", " sep ").Replace(" octb ", " oct ");
                            strbWorkingPD.Replace("    ", " ").Replace("   ", " ").Replace("  ", " ").Replace("  ", " ");
                            strPastOrgn = strbPreviousEmplr.Remove(0, 1).ToString().Trim().Split('#');
                            strDateOrgn = strbWorkingPD.ToString().Trim().Remove(0, 1).ToString().Trim().Split('#');
                            strPastDesignation = strbPreviousDesignation.Remove(0, 1).ToString().Trim().Split('#');
                            GetExperienceDate(ref strPastOrgn, ref strDateOrgn);
                            try
                            {
                                for (int cnt = 0; cnt < strDateOrgn.Length; cnt++)
                                {
                                    for (int ct = 0; ct < strDateOrgn.Length; ct++)
                                    {
                                        if (cnt == ct)
                                            continue;
                                        if (string.Compare(strDateOrgn[ct], strDateOrgn[cnt], true) == 0)
                                        {
                                            strPastOrgn[ct] = "";
                                            strDateOrgn[ct] = "";
                                            strPastDesignation[ct] = "";
                                        }
                                    }
                                }
                            }
                            catch { }
                            try
                            {
                                for (int cn = 0; cn < strPastOrgn.Length; cn++)
                                {
                                    if (strPastOrgn[cn].Trim().StartsWith(")") || strPastOrgn[cn].Trim().StartsWith("."))
                                        strPastOrgn[cn] = strPastOrgn[cn].Trim().Remove(0, 1);
                                    strPastOrgn[cn] = strPastOrgn[cn].Replace("  ", " ");
                                    strPastOrgn[cn] = strPastOrgn[cn].Replace("( )", " ").Replace(" .", ".").Replace(", .", ",").Replace(",.", ",").Replace(" ,", ",");
                                    if (strPastOrgn[cn].Trim().EndsWith(",") || strPastOrgn[cn].Trim().EndsWith("("))
                                        strPastOrgn[cn] = strPastOrgn[cn].Trim().Remove(strPastOrgn[cn].Trim().Length - 1, 1).Trim();
                                    if (strPastOrgn[cn].Trim().EndsWith(",") || strPastOrgn[cn].Trim().EndsWith("("))
                                        strPastOrgn[cn] = strPastOrgn[cn].Trim().Remove(strPastOrgn[cn].Trim().Length - 1, 1).Trim();
                                    if (strPastOrgn[cn].Trim().StartsWith("(") && strPastOrgn[cn].Trim().EndsWith(")"))
                                    {
                                        strPastOrgn[cn] = strPastOrgn[cn].Trim().Remove(0, 1);
                                        strPastOrgn[cn] = strPastOrgn[cn].Trim().Remove(strPastOrgn[cn].Trim().Length - 1, 1).Trim();
                                    }
                                    strPastOrgn[cn] = strPastOrgn[cn].Replace("( ", "(").Replace(" )", ")");
                                }
                            }
                            catch { }
                            try
                            {
                                Regex rgx4DigitRt = new Regex(@"\b\d{4}\b", RegexOptions.RightToLeft);
                                Regex rgx2DigitRt = new Regex(@"/\d{1,2}/", RegexOptions.RightToLeft);
                                //Regex rgxWords = new Regex(@"\b[a-z]{2,20}\b", RegexOptions.IgnoreCase);
                                //Regex rgxsmall = new Regex(@"\b[a-z]{2,20}\b");
                                if (strDateOrgn.Length > 0 && strDateOrgn[0].ToLower().IndexOf("till now") > 0 && rgx4DigitRt.IsMatch(strDateOrgn[0].Trim()))
                                {
                                    int TillYear = Convert.ToInt16(rgx4DigitRt.Match(strDateOrgn[0].Trim()).ToString());
                                    int TillMonth = Convert.ToInt16(rgx2DigitRt.Match(strDateOrgn[0].Trim()).ToString().Replace("/", ""));
                                    int YearNext = 0;
                                    int MonthNext = 0;
                                    for (int cn = 1; cn < strDateOrgn.Length; cn++)
                                    {
                                        if (rgx4DigitRt.IsMatch(strDateOrgn[cn].Trim()) == false) continue;
                                        YearNext = Convert.ToInt16(rgx4DigitRt.Match(strDateOrgn[cn].Trim()).ToString());
                                        MonthNext = Convert.ToInt16(rgx2DigitRt.Match(strDateOrgn[cn].Trim()).ToString().Replace("/", ""));
                                        //if (YearNext < TillYear || (YearNext == TillYear && MonthNext < TillMonth + 2)) continue;
                                        if (YearNext < TillYear || (MonthNext < TillMonth + 2)) continue;
                                        if (tYearInfyFormat1 == false)
                                        {
                                            strPastOrgn[cn] = "";
                                            strDateOrgn[cn] = "";
                                            strPastDesignation[cn] = "";
                                        }

                                    }
                                }
                                if (strDateOrgn.Length > 1)
                                {
                                    int YearModfd1 = 0;
                                    int YearModfd2 = 0;
                                    int MonthModfd1 = 0;
                                    int MonthModfd2 = 0;
                                    int YearLtd1 = 0;
                                    int YearLtd2 = 0;
                                    int MonthLtd1 = 0;
                                    int MonthLtd2 = 0;
                                    for (int cn = 0; cn < strDateOrgn.Length; cn++)
                                    {
                                        //if (strDateOrgn[cn].Trim().Length < 2 || strDateOrgn[cn].ToLower().IndexOf("till") > 0 || rgxLTD.IsMatch(strPastOrgn[cn].Trim())) continue;
                                        if (strDateOrgn[cn].Trim().Length < 2 || strDateOrgn[cn].ToLower().IndexOf("till") > 0) continue;
                                        string[] StrModified = strDateOrgn[cn].Replace("-", "/").Split('/');
                                        YearModfd1 = Convert.ToInt16(StrModified[2].Trim());
                                        YearModfd2 = Convert.ToInt16(StrModified[5].Trim());
                                        MonthModfd1 = Convert.ToInt16(StrModified[1].Trim());
                                        MonthModfd2 = Convert.ToInt16(StrModified[4].Trim());
                                        for (int ct = 0; ct < strDateOrgn.Length; ct++)
                                        {
                                            if (ct == cn || strDateOrgn[ct].Trim().Length < 2 || strDateOrgn[ct].ToLower().IndexOf("till") > 0 || rgxLTD.IsMatch(strPastOrgn[ct].Trim()) == false) continue;
                                            string[] StrLtd = strDateOrgn[ct].Replace("-", "/").Split('/');
                                            YearLtd1 = Convert.ToInt16(StrLtd[2].Trim());
                                            YearLtd2 = Convert.ToInt16(StrLtd[5].Trim());
                                            MonthLtd1 = Convert.ToInt16(StrLtd[1].Trim());
                                            MonthLtd2 = Convert.ToInt16(StrLtd[4].Trim());
                                            if ((YearLtd1 < YearModfd1 && YearModfd2 < YearLtd2) || (YearLtd1 == YearModfd1 && MonthLtd1 <= MonthModfd1 && YearModfd2 < YearLtd2) || (YearLtd1 < YearModfd1 && YearLtd2 == YearModfd2 && MonthModfd2 <= MonthLtd2) || (YearLtd1 == YearModfd1 && YearLtd2 == YearModfd2 && MonthLtd1 <= MonthModfd1 && MonthModfd2 <= MonthLtd2))
                                            {
                                                if (tYearInfyFormat1 == false)
                                                {
                                                    strPastOrgn[cn] = "";
                                                    strDateOrgn[cn] = "";
                                                    strPastDesignation[cn] = "";
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                            catch { }



                            //Arrange Companies in order of working year
                            try
                            {
                                //int index = 0;
                                Regex rgxYear = new Regex(@"\b\d{4}\b", RegexOptions.RightToLeft);
                                //string[] CompanyArry = new string[strPastOrgn.Length];
                                int[] WorkPeriod = new int[strDateOrgn.Length];
                                for (int cnt = 0; cnt < strDateOrgn.Length; cnt++)
                                {
                                    if (strDateOrgn[cnt].ToLower().IndexOf("till") > 0 || strDateOrgn[cnt].Trim() == "") continue;
                                    if (rgxYear.IsMatch(strDateOrgn[cnt]))
                                        WorkPeriod[cnt] = Convert.ToInt16(rgxYear.Match(strDateOrgn[cnt]).ToString().ToString());
                                    //else
                                    //    WorkPeriod[cnt] = 1000;
                                }
                                int RowIndex = 0;
                                string strCmpny = "";
                                //string strDate = "";
                                for (int ct1 = 0; ct1 < strDateOrgn.Length - 1; ct1++)
                                {
                                    if (strDateOrgn[ct1].ToLower().IndexOf("till") > 0 || WorkPeriod[ct1] == 0) continue;
                                    for (int ct2 = ct1 + 1; ct2 < strDateOrgn.Length; ct2++)
                                    {
                                        if (WorkPeriod[ct1] >= WorkPeriod[ct2]) continue;
                                        strCmpny = strPastOrgn[ct1];
                                        strPastOrgn[ct1] = strPastOrgn[ct2];
                                        strPastOrgn[ct2] = strCmpny;

                                        strCmpny = strDateOrgn[ct1];
                                        strDateOrgn[ct1] = strDateOrgn[ct2];
                                        strDateOrgn[ct2] = strCmpny;

                                        strCmpny = strPastDesignation[ct1];
                                        strPastDesignation[ct1] = strPastDesignation[ct2];
                                        strPastDesignation[ct2] = strCmpny;

                                        RowIndex = WorkPeriod[ct1];
                                        WorkPeriod[ct1] = WorkPeriod[ct2];
                                        WorkPeriod[ct2] = RowIndex;
                                    }
                                }
                            }
                            catch { }


                            //Skiping the Employer Having WithIn Date Range Having Two More Companies ...Saravana
                            DateTime dateTime1, dateTime2, dateTime4, dateTime5;
                            try
                            {
                                string[] tsplt = null;

                                for (int cnt = 0; cnt < strDateOrgn.Length; cnt++)
                                {
                                    try
                                    {
                                        tsplt = strDateOrgn[cnt].ToString().Split('-');
                                        dateTime4 = DateTime.ParseExact(tsplt[0].Trim(), "d/M/yyyy", new System.Globalization.CultureInfo("en-US"), System.Globalization.DateTimeStyles.None);
                                        if ((Convert.ToDateTime(dateTime4).Year < 1900 || DateTime.Now.Year < dateTime4.Year))
                                        {
                                            strPastOrgn[cnt] = "";
                                            strDateOrgn[cnt] = "";
                                            strPastDesignation[cnt] = "";
                                            continue;
                                        }
                                        dateTime5 = DateTime.ParseExact(tsplt[1].Trim(), "d/M/yyyy", new System.Globalization.CultureInfo("en-US"), System.Globalization.DateTimeStyles.None);

                                        if ((Convert.ToDateTime(dateTime4).Year < 1900 || DateTime.Now.Year < dateTime4.Year) || (Convert.ToDateTime(dateTime5).Year < 1900 || DateTime.Now.Year < dateTime5.Year))
                                        {
                                            strPastOrgn[cnt] = "";
                                            strDateOrgn[cnt] = "";
                                            strPastDesignation[cnt] = "";
                                            continue;
                                        }
                                    }
                                    catch
                                    {

                                        continue;
                                    }
                                    for (int ct = 0; ct < strDateOrgn.Length; ct++)
                                    {
                                        if (cnt == ct)
                                            continue;
                                        if (strDateOrgn[ct].ToString().Trim() == "") continue;
                                        try
                                        {
                                            tsplt = strDateOrgn[ct].ToString().Split('-');
                                            string[] formats = { "dd/MM/yyyy" };
                                            dateTime1 = DateTime.ParseExact(tsplt[0].Trim(), "d/M/yyyy", new System.Globalization.CultureInfo("en-US"), System.Globalization.DateTimeStyles.None);
                                            dateTime2 = DateTime.ParseExact(tsplt[1].Trim(), "d/M/yyyy", new System.Globalization.CultureInfo("en-US"), System.Globalization.DateTimeStyles.None);


                                        }
                                        catch
                                        {
                                            continue;
                                        }
                                        //if (string.Compare(strDateOrgn[ct], strDateOrgn[cnt], true) == 0)
                                        if ((dateTime4 < dateTime1 && dateTime5 > dateTime1) || (dateTime4 < dateTime2 && dateTime5 > dateTime2))
                                        {
                                            strPastOrgn[ct] = "";
                                            strDateOrgn[ct] = "";
                                            strPastDesignation[ct] = "";
                                        }
                                    }
                                }
                            }
                            catch { }

                        }
                    }
                    catch { }
                    #endregion

                }//end if reparser enabled for previous

                for (int kcnt = 0; kcnt <= strPastOrgn.GetUpperBound(0); kcnt++)
                {
                    if (strPastOrgn[kcnt] == null) continue;
                    if (strPastOrgn[kcnt].Trim() == "") continue;
                    //commented for Golden Opportunity System client
                    string EmpID = FCommon.opGetUIDfromXmlAlias(FCommon.objfXMLEmployer, strPastOrgn[kcnt], "Title", "KeyWords");
                    if (EmpID != "0" && EmpID != "")
                        strPastOrgn[kcnt] = FCommon.opGetTitlefromXml(ref FCommon.objfXMLEmployer, EmpID, "Title");
                }
                if (PresentEmployer.Trim() != "")
                {
                    if (PresentEmployer.Trim().StartsWith(",") || PresentEmployer.Trim().StartsWith("(") || PresentEmployer.Trim().StartsWith(")") || PresentEmployer.Trim().StartsWith(".") || PresentEmployer.Trim().StartsWith(")"))
                        PresentEmployer = PresentEmployer.Trim().Remove(0, 1).Trim();
                    PresentEmployer = PresentEmployer.Replace("  ", " ").Trim();
                    PresentEmployer = PresentEmployer.Replace("( )", " ").Replace(" .", ".").Replace(", .", ",").Replace(",.", ",").Replace(" ,", ",").Trim();
                    if (PresentEmployer.Trim().EndsWith(",") || PresentEmployer.Trim().EndsWith("("))
                        PresentEmployer = PresentEmployer.Trim().Remove(PresentEmployer.Trim().Length - 1, 1).Trim();
                    if (PresentEmployer.Trim().EndsWith(",") || PresentEmployer.Trim().EndsWith("("))
                        PresentEmployer = PresentEmployer.Trim().Remove(PresentEmployer.Trim().Length - 1, 1).Trim();
                    //commented for Golden Opportunity System client
                    string EmpID = FCommon.opGetUIDfromXmlAlias(FCommon.objfXMLEmployer, PresentEmployer, "Title", "KeyWords");
                    if (EmpID != "0" && EmpID != "")
                        PresentEmployer = FCommon.opGetTitlefromXml(ref FCommon.objfXMLEmployer, EmpID, "Title");
                }
            }
            catch { }
            try
            {

                rgxIdentifyStartWithcompanyName = null;
            }
            catch { }
        }


        private void GetExperienceDate(ref string[] strPastOrgn, ref string[] strDateOrgn)
        {
            Regex rgxTill = new Regex(@"\b( |TillNow|Present|Current|Now|Date|Onward|ongoing|Continuing|TillDate|From|Since)[s]?\b", RegexOptions.IgnoreCase);
            Regex rgx1Year = new Regex(@"(\b|[a-z])\d{1,}?(\b|[a-z])");
            Regex rgx4Mnth = new Regex(@"(\b|[a-z])\d{1,2}(\b|[a-z])", RegexOptions.IgnoreCase);
            Regex rgx2Mon = new Regex(@"(\b|[a-z])(\d{1,2}|\d{4})(\b|[a-z])", RegexOptions.IgnoreCase);
            Regex rgxMnth = new Regex(@"(\d|\b)(" + month + "|" + mon + @")(\d|\b)", RegexOptions.IgnoreCase);
            Regex rgxYear = new Regex(@"([a-z]|\b)(19\d{2}|20\d{2}|[456789]\d)([a-z]|\b)", RegexOptions.IgnoreCase);
            Regex rgx4Year = new Regex(@"(\b|[a-z])\d{4}?(\b|[a-z])");

            //string re4Year11 = "(\\d+)(\\s+)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])(\\s+)((?:(?:[0-2]?\\d{1})|(?:[3][01]{1})))(?![\\d])(\\s+)(\\d+)(\\s+)((?:(?:[1]{1}\\d{1}\\d{1}\\d{1})|(?:[2]{1}\\d{3})))(?![\\d])";  //10 2009 30 11 2011
            //Regex regx4Year11 = new Regex(re4Year11, RegexOptions.IgnoreCase);

            string[] strMon = mon.Replace("(", "").Replace("|sept", "").Replace(")", "").Split('|');
            string[] strMnth = month.Replace("(", "").Replace(")", "").Split('|');
            MatchCollection mtchColln = null;
            MatchCollection mtchColln2 = null;

            bool FlagYr = true;
            for (int cnt = 0; cnt < strDateOrgn.Length; cnt++)
            {
                FlagYr = true;
                if (strDateOrgn[cnt].Trim().Length < 6) continue;
                int month1 = 0, month2 = 0;
                int year1 = 0, year2 = 0;
                int day1 = 00, day2 = 00;
                //mtchColln3 = regx4Year11.Matches(strDateOrgn[cnt]);

                mtchColln = rgxMnth.Matches(strDateOrgn[cnt]);
                //Date Format 00/00/0000-00/00/0000
                if (mtchColln.Count == 0)
                {
                    try
                    {
                        mtchColln = rgx2Mon.Matches(strDateOrgn[cnt].Trim());
                        //0000-0000 or Invalid Format (2005 - 01 09 2007)
                        if (mtchColln.Count == 2 && rgx4Year.Matches(strDateOrgn[cnt].Trim()).Count == 2)
                        {
                            mtchColln2 = rgx4Year.Matches(strDateOrgn[cnt].Trim());
                            foreach (Match m in mtchColln2)
                            {
                                string strM = m.ToString();
                                for (int j = 97; j < 123; j++)
                                    strM = strM.Replace(Convert.ToChar(j).ToString(), "").Trim();
                                if (year1 == 0)
                                    year1 = Convert.ToInt16(strM);
                                else
                                    year2 = Convert.ToInt16(strM);
                            }
                        }
                        #region Till Date
                        if (year1 == 0 && cnt == 0 && mtchColln.Count <= 3 && rgxTill.IsMatch(strDateOrgn[cnt].Trim()) && rgx4Year.Matches(strDateOrgn[cnt].Trim()).Count < 2)
                        {
                            int count = 0;
                            foreach (Match m in mtchColln)
                            {
                                count++;
                                string strM = m.ToString();
                                for (int j = 97; j < 123; j++)
                                    strM = strM.Replace(Convert.ToChar(j).ToString(), "").Trim();
                                if (mtchColln.Count == 1)
                                {
                                    if (strM.Length == 4)
                                        year1 = Convert.ToInt16(strM);
                                    else if (Convert.ToInt16(strM) < 31)
                                        year1 = 2000 + Convert.ToInt16(strM);
                                    else
                                        year1 = 1900 + Convert.ToInt16(strM);
                                }
                                if (mtchColln.Count == 2)
                                {
                                    if (strM.Length == 4 && year1 == 0)
                                        year1 = Convert.ToInt16(strM);
                                    if (count == 1 && Convert.ToInt16(strM) < 13)
                                        month1 = Convert.ToInt16(strM);
                                    if (count == 2 && year1 == 0 && Convert.ToInt16(strM) < 31)
                                        year1 = 2000 + Convert.ToInt16(strM);
                                    if (count == 2 && year1 == 0 && Convert.ToInt16(strM) > 30)
                                        year1 = 1900 + Convert.ToInt16(strM);
                                }
                                if (mtchColln.Count == 3)
                                {
                                    if (strM.Length == 4 && year1 == 0)
                                        year1 = Convert.ToInt16(strM);
                                    if (count == 1) continue;
                                    if (count == 2 && Convert.ToInt16(strM) < 13)
                                        month1 = Convert.ToInt16(strM);
                                    if (count == 3 && year1 == 0 && Convert.ToInt16(strM) < 31)
                                        year1 = 2000 + Convert.ToInt16(strM);
                                    if (count == 3 && year1 == 0 && Convert.ToInt16(strM) > 30)
                                        year1 = 1900 + Convert.ToInt16(strM);
                                }
                            }
                            if (month1 == 0)
                                month1 = 01;
                            if (month2 == 0)
                                month2 = 01;
                            strDateOrgn[cnt] = "1" + "/" + month1.ToString() + "/" + year1.ToString() + " - Till Now";
                            continue;
                        }
                        #endregion
                        #region 00/0000-00/0000
                        if (year1 == 0 && mtchColln.Count == 4)
                        {
                            int count = 0;
                            foreach (Match m in mtchColln)
                            {
                                count++;
                                string strM = m.ToString();
                                for (int j = 97; j < 123; j++)
                                    strM = strM.Replace(Convert.ToChar(j).ToString(), "").Trim();
                                switch (count)
                                {
                                    case 1:
                                        if (Convert.ToInt16(strM) < 13)
                                            month1 = Convert.ToInt16(strM); break;
                                    case 2:
                                        if (strM.Length == 4)
                                            year1 = Convert.ToInt16(strM);
                                        else if (Convert.ToInt16(strM) < 31)
                                            year1 = 2000 + Convert.ToInt16(strM);
                                        else
                                            year1 = 1900 + Convert.ToInt16(strM);
                                        break;
                                    case 3:
                                        if (Convert.ToInt16(strM) < 13)
                                            month2 = Convert.ToInt16(strM); break;
                                    case 4:
                                        if (strM.Length == 4)
                                            year2 = Convert.ToInt16(strM);
                                        else if (Convert.ToInt16(strM) < 31)
                                            year2 = 2000 + Convert.ToInt16(strM);
                                        else
                                            year2 = 1900 + Convert.ToInt16(strM);
                                        break;
                                }
                            }
                        }
                        #endregion
                        #region 00/00/0000-00/00/0000
                        //01 11 2009 30 06 2010
                        if (year1 == 0 && mtchColln.Count == 6)
                        {
                            int _count = 0;
                            int count = 0;
                            foreach (Match m in mtchColln)
                            {
                                _count++;
                                if (_count == 1 || _count == 4) continue;
                                count++;
                                string strM = m.ToString();
                                for (int j = 97; j < 123; j++)
                                    strM = strM.Replace(Convert.ToChar(j).ToString(), "").Trim();
                                switch (count)
                                {
                                    case 1:
                                        if (Convert.ToInt16(strM) < 13)
                                            month1 = Convert.ToInt16(strM); break;
                                    case 2:
                                        if (strM.Length == 4)
                                            year1 = Convert.ToInt16(strM);
                                        else if (Convert.ToInt16(strM) < 31)
                                            year1 = 2000 + Convert.ToInt16(strM);
                                        else
                                            year1 = 1900 + Convert.ToInt16(strM);
                                        break;
                                    case 3:
                                        if (Convert.ToInt16(strM) < 13)
                                            month2 = Convert.ToInt16(strM); break;
                                    case 4:
                                        if (strM.Length == 4)
                                            year2 = Convert.ToInt16(strM);
                                        else if (Convert.ToInt16(strM) < 31)
                                            year2 = 2000 + Convert.ToInt16(strM);
                                        else
                                            year2 = 1900 + Convert.ToInt16(strM);
                                        break;
                                }

                            }
                        }
                        #endregion
                        if (month1 == 0)
                            month1 = 01;
                        if (month2 == 0)
                            month2 = 01;
                        strDateOrgn[cnt] = "1" + "/" + month1.ToString() + "/" + year1.ToString() + "-" + "1" + "/" + month2.ToString() + "/" + year2.ToString();
                        continue;
                    }
                    catch { }
                }
                else
                {

                    if (mtchColln.Count == 1 && cnt == 0)
                    {
                        foreach (Match m in mtchColln)
                        {
                            string strM = m.ToString();
                            for (int j = 48; j < 58; j++)
                                strM = strM.Replace(Convert.ToChar(j).ToString(), "");

                            for (int i = 0; i < 12 && month1 == 0; i++)
                            {
                                if (strMnth[i].ToLower() == strM || strMon[i] == strM)
                                {
                                    month1 = i + 1;
                                    break;
                                }
                            }
                        }
                        mtchColln = rgx2Mon.Matches(strDateOrgn[cnt]);
                        foreach (Match m in mtchColln)
                        {
                            string strM = m.ToString();
                            for (int j = 97; j < 123; j++)
                                strM = strM.Replace(Convert.ToChar(j).ToString(), "");

                            if (mtchColln.Count == 1)
                            {
                                if (strM.Length == 4)
                                    year1 = Convert.ToInt16(strM);
                                if (strM.Length < 3 && Convert.ToInt16(strM) < 20 && Convert.ToInt16(strM) >= 0)
                                {
                                    year1 = 2000 + Convert.ToInt16(strM);
                                    if (DateTime.Now.Year < year1)
                                        year1 = 0;
                                }
                                else if (strM.Length < 3)
                                    year1 = 1900 + Convert.ToInt16(strM);
                            }
                            if (mtchColln.Count == 2)
                            {
                                if (strM.Length == 4)
                                    year1 = Convert.ToInt16(strM);
                                if (strM.Length < 3 && Convert.ToInt16(strM) > 0 && Convert.ToInt16(strM) < 32 && day1 == 00)
                                    day1 = Convert.ToInt16(strM);
                                else if (strM.Length < 3 && Convert.ToInt16(strM) < 20 && Convert.ToInt16(strM) >= 0 && year1 == 0)
                                {
                                    year1 = 2000 + Convert.ToInt16(strM);
                                    if (DateTime.Now.Year < year1)
                                        year1 = 0;
                                }
                                else if (strM.Length < 3 && year1 == 0)
                                    year1 = 1900 + Convert.ToInt16(strM);
                            }
                            if (mtchColln.Count > 2)
                            {
                                if (strM.Length == 4)
                                    year1 = Convert.ToInt16(strM);
                                if (strM.Length < 3 && Convert.ToInt16(strM) < 20 && Convert.ToInt16(strM) >= 0)
                                {
                                    year1 = 2000 + Convert.ToInt16(strM);
                                    if (DateTime.Now.Year < year1)
                                        year1 = 0;
                                }
                                else if (strM.Length < 3)
                                    year1 = 1900 + Convert.ToInt16(strM);
                                break;
                            }
                        }
                        if (day1 == 0)
                            day1 = 1;
                        if (day2 == 0)
                            day2 = 1;
                        strDateOrgn[cnt] = "1" + "/" + month1.ToString() + "/" + year1.ToString() + " - Till Now";
                        continue;

                    }
                    //End
                    if (mtchColln.Count == 2)
                    {
                        foreach (Match m in mtchColln)
                        {
                            string strM = m.ToString();
                            for (int j = 48; j < 58; j++)
                                strM = strM.Replace(Convert.ToChar(j).ToString(), "");

                            for (int i = 0; i < 12 && month2 == 0; i++)
                            {
                                if (strMnth[i].ToLower() == strM || strMon[i] == strM)
                                {
                                    if (month1 == 0)
                                        month1 = i + 1;
                                    else
                                        month2 = i + 1;
                                    break;
                                }
                            }
                        }
                    }
                    mtchColln = rgx1Year.Matches(strDateOrgn[cnt]);
                    if (mtchColln.Count == 1)
                    {
                        string str = rgx1Year.Match(strDateOrgn[cnt]).ToString().Trim();
                        if (str.Length == 4)
                        {
                            year1 = year2 = Convert.ToInt16(str);
                        }
                        if (str.Length == 2)
                        {
                            if (Convert.ToInt16(str) > 30)
                                year1 = year2 = 1900 + Convert.ToInt16(str);
                            else
                                year1 = year2 = 2000 + Convert.ToInt16(str);
                        }
                    }
                    if (mtchColln.Count == 2 && year1 == 0)
                    {
                        foreach (Match m in mtchColln)
                        {
                            string strM = m.ToString();
                            for (int j = 97; j < 123; j++)
                                strM = strM.Replace(Convert.ToChar(j).ToString(), "").Trim();
                            if (strM.Length == 4 && year1 == 0)
                                year1 = Convert.ToInt16(strM);
                            else if (strM.Length == 4)
                                year2 = Convert.ToInt16(strM);
                            if (strM.Length == 1 || strM.Length == 2)
                            {
                                if (year1 == 0)
                                {
                                    if (Convert.ToInt16(strM) < 32)
                                        year1 = 2000 + Convert.ToInt16(strM);
                                    else
                                        year1 = 1900 + Convert.ToInt16(strM);
                                }
                                else
                                {
                                    if (Convert.ToInt16(strM) < 32)
                                        year2 = 2000 + Convert.ToInt16(strM);
                                    else
                                        year2 = 1900 + Convert.ToInt16(strM);
                                }
                            }
                        }
                        // continue;
                    }


                    mtchColln = rgx4Mnth.Matches(strDateOrgn[cnt]);
                    if (year1 == 0 && mtchColln.Count == 4 && FlagYr == true)
                    {
                        int count = 0;
                        foreach (Match m in mtchColln)
                        {
                            string strM = m.ToString();
                            for (int j = 97; j < 123; j++)
                                strM = strM.Replace(Convert.ToChar(j).ToString(), "");
                            count++;
                            switch (count)
                            {
                                case 1: day1 = Convert.ToInt16(strM); break;
                                case 2: if (Convert.ToInt16(strM) < 20)
                                        year1 = 2000 + Convert.ToInt16(strM);
                                    else year1 = 1900 + Convert.ToInt16(strM);
                                    break;
                                case 3: day2 = Convert.ToInt16(strM); break;
                                case 4: if (Convert.ToInt16(strM) < 20)
                                        year2 = 2000 + Convert.ToInt16(strM);
                                    else year2 = 1900 + Convert.ToInt16(strM);
                                    break;
                            }
                        }
                        FlagYr = false;
                    }
                    mtchColln = rgxYear.Matches(strDateOrgn[cnt]);
                    if (year1 == 0 && mtchColln.Count == 2 && FlagYr == true)
                    {
                        foreach (Match m in mtchColln)
                        {
                            string strM = m.ToString();
                            for (int j = 97; j < 123; j++)
                                strM = strM.Replace(Convert.ToChar(j).ToString(), "");
                            if (m.Length == 4 && year1 == 0)
                                year1 = Convert.ToInt16(strM);
                            else if (strM.Length == 4 && year2 == 0)
                                year2 = Convert.ToInt16(strM);
                            if (strM.Length == 2 && year1 == 0)
                                year1 = 1900 + Convert.ToInt16(strM);
                            else if (strM.Length == 2 && year2 == 0)
                                year2 = 1900 + Convert.ToInt16(strM);
                        }
                        FlagYr = false;
                    }
                    mtchColln = rgx4Mnth.Matches(strDateOrgn[cnt]);
                    if (mtchColln.Count == 2 && year1 == 0 && FlagYr == true)
                    {
                        foreach (Match m in mtchColln)
                        {
                            string strM = m.ToString();
                            for (int j = 97; j < 123; j++)
                                strM = strM.Replace(Convert.ToChar(j).ToString(), "");
                            if (year1 == 0)
                            {
                                if (Convert.ToInt16(strM) < 20)
                                    year1 = 2000 + Convert.ToInt16(strM);
                                else
                                    year1 = 1900 + Convert.ToInt16(strM);
                            }
                            else
                            {
                                if (Convert.ToInt16(strM) < 20)
                                    year2 = 2000 + Convert.ToInt16(strM);
                                else
                                    year2 = 1900 + Convert.ToInt16(strM);
                            }
                        }
                        FlagYr = false;
                    }

                    //if (day1 == 0)
                    //    day1 = 1;
                    //if (day2 == 0)
                    //    day2 = 1;

                    strDateOrgn[cnt] = "1" + "/" + month1.ToString() + "/" + year1.ToString() + "-" + "1" + "/" + month2.ToString() + "/" + year2.ToString();
                }


            }
        }

        private void RemoveAfterLimited(ref StringBuilder sbMatchString)
        {
            bool flag = true;
            Regex rgxSubStrings = new Regex(@"\b(LIMITED|LTD)\s{0,2}[\.]?\s{0,4}(\b|\))", RegexOptions.IgnoreCase | RegexOptions.RightToLeft);
            Regex rgxSubStrings1 = new Regex(@"(\s|\b)((Co|CO|co)\s{0,3}\.|&\s{0,3}(CO|Co|co)|INC|Inc)([\.]?\s|\b)");
            Regex rgx = new Regex(@"[\s]+");
            Match mtchSustrings;
            //MatchCollection _match;
            Regex rgxs = new Regex(@"\bLike\b.{2,50}\bLtd\b", RegexOptions.IgnoreCase);
            Regex rgxEmployerMS = new Regex(@"(M/S\s.{2,60}?(\s(With|For|In|At|On|Under)|[,:;\“]))", RegexOptions.IgnoreCase);
            //Regex rgxEmployerLTD = new Regex(@"(\s(with|With|Like|WITH|for|FOR|For|in|In|IN|at|AT|At|on|ON|On|Also|also|Agent|agent)|[,:;“])\s.{0,25}?([a-zA-Z]{2}|[a-zA-Z]\s?&\s?[a-zA-Z]).{0,25}?\s(Limited|LIMITED|limited|LTD|Ltd|ltd|(Co|CO|co)\.|&\s{0,3}(CO|Co|co|Corp)|Inc\.)\s?\.?\,?\s", RegexOptions.RightToLeft);
            //Regex rgxEmployerLTD = new Regex(@"(\b(with|With|Like|WITH|for|FOR|For|By|by|BY|in|In|IN|at|AT|At|on|ON|On|Also|also|Agent|agent)\b|[,:\“]).{0,25}?([a-zA-Z]{2}|[a-zA-Z]\s?&\s?[a-zA-Z]).{0,25}?\s(Limited|LIMITED|limited|LTD|Ltd|ltd|(Co|CO|co)\.|&\s{0,3}(CO|Co|co|Corp)|Inc\.)\s?\.?\,?\s", RegexOptions.RightToLeft|RegexOptions.RightToLeft);

            Regex rgxEmployerLTD = new Regex(@"(\b(with|With|Like|Them|WITH|for|FOR|For|By|by|BY|As|in|In|IN|at|AT|At|on|ON|On|Also|also|Agent|agent)\b|[,:\“]|[\(\)].{15}).{0,25}?([a-zA-Z]{2}|[a-zA-Z]\s?&\s?[a-zA-Z]).{0,25}?\s(Limited|LIMITED|limited|LTD|Ltd|ltd|(Co|CO|co)\.|&\s{0,3}(CO|Co|co|Corp)|Inc\.)\s?\.?\,?\s[\)]?", RegexOptions.IgnoreCase | RegexOptions.RightToLeft);

            Regex rgxEmployerNoLTD = new Regex(@"^(\b(with|With|WITH|Them|for|FOR|For|By|As|in|In|IN|at|AT|At|on|ON|On|Also|also|Agent|agent)|[,:;\“\)\(]|[\(].{0,10}[\)])\s*(\b|\s)(PVT|Pvt|pvt)(\b|\s)\s*\.?\s*(Limited|LIMITED|limited|LTD|Ltd|ltd|(Co|CO|co)\.|&\s{0,3}(CO|Co|co|Corp)|Inc\.)\b", RegexOptions.RightToLeft);


            sbMatchString.Replace("   ", " ").Replace("  ", " ").Replace("  ", " ");
            if (sbMatchString.ToString().ToUpper().IndexOf("M/S") >= 0)
                sbMatchString.Remove(0, sbMatchString.ToString().ToUpper().IndexOf("M/S"));
            sbMatchString.Replace(sbMatchString.ToString(), " " + sbMatchString.ToString() + " ");
            mtchSustrings = rgxSubStrings.Match(sbMatchString.ToString());
            if (mtchSustrings.Length < 2)
                mtchSustrings = rgxSubStrings1.Match(sbMatchString.ToString());
            if (mtchSustrings.ToString().Length > 0)
            {
                flag = false;
                sbMatchString.Remove(mtchSustrings.Index + mtchSustrings.Length, sbMatchString.Length - mtchSustrings.Index - mtchSustrings.Length);
                if (sbMatchString.ToString().Trim().Length > 60 && sbMatchString.ToString().Trim().ToUpper().StartsWith("M/S") == false && sbMatchString.ToString().Trim().Contains("am looking") == false)
                {
                    Regex rgx60Ltd = new Regex(@"\b[A-Z].{60,80}?$");
                    if (rgx60Ltd.IsMatch(sbMatchString.ToString().Trim()))
                        sbMatchString.Replace(sbMatchString.ToString(), rgx60Ltd.Match(sbMatchString.ToString().Trim()).ToString().Trim());
                    //_match = rgx.Matches(sbMatchString.ToString());
                    //foreach (Match m in _match)
                    //{
                    //    if (sbMatchString.ToString().Length - m.Index > 60) continue;
                    //    sbMatchString.Remove(0, m.Index);
                    //    break;
                    //}
                }
            }
            if (rgxEmployerMS.IsMatch(" " + sbMatchString.ToString() + " ") && flag == true)
                sbMatchString.Replace(sbMatchString.ToString(), rgxEmployerMS.Match(" " + sbMatchString.ToString() + " ").ToString());
            if (rgxEmployerLTD.IsMatch(" " + sbMatchString.ToString() + " ") && sbMatchString.ToString().ToUpper().IndexOf("M/S") < 0)
                if (rgxEmployerNoLTD.IsMatch(rgxEmployerLTD.Match(" " + sbMatchString.ToString() + " ").ToString().Trim()) == true)
                    sbMatchString.Replace(sbMatchString.ToString(), (rgxEmployerLTD.Match(" " + sbMatchString.ToString() + " ")).ToString());
        }

        private void ReplaceAll(ref StringBuilder sbMatchString)
        {
            Regex rgxLTD = new Regex(@"\b(Pte Ltd|Pte|Pte\.|Limited|LIMITED|limited|LLC|Firm|llc|L\.L\.C|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltdvalley partner||(M|m)/(S|s))\b|\b((Co|CO|co)\s{0,3}\.|&\s{0,3}(CO|Co|co|Corp)\b|(Inc|INC|Sdn\. Bhd\.|Sdn Bhd|Bhd\.|Pte|Pte\.|Sendirian Berhad|Berhad)\b)");
            Regex rgxSmall = new Regex(@"\b[a-z]{2,20}\b");

            Regex rgxWordCount = new Regex(@"\b[a-z]{2,20}\b", RegexOptions.IgnoreCase);
            Regex rgxCapital = new Regex(@"[A-Z]");
            sbMatchString.Replace("(", "  (  ").Replace(")", "  )  ").Replace(".", "  .  ").Replace(",", "  ,  ");
            sbMatchString.Replace(Convert.ToChar(9).ToString(), " ");
            Regex rgxSchool = new Regex(@"\b(Degree|Bachelor|Passing|Studied)\b", RegexOptions.IgnoreCase); //|College|School
            if (rgxSchool.IsMatch(sbMatchString.ToString()) && rgxWordCount.Matches(sbMatchString.ToString()).Count > 3 && sbMatchString.Length > 0 && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                sbMatchString.Replace(sbMatchString.ToString(), "");
            try  // Finding tab after Limited to replace String(Eg: city name,Designation...)
            {
                if (sbMatchString.ToString().Trim().Length > 1)
                    opGetEmployerInTab(ref sbMatchString);
            }
            catch { }

            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                if (rgxLTD.IsMatch(sbMatchString.ToString()) && sbMatchString.ToString().Trim().Length > 1)
                    RemoveAfterLimited(ref sbMatchString);
            }
            catch { }
            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                if (sbMatchString.ToString().Trim().Length > 1)
                    opReplaceDesignationFromPEmployer(ref sbMatchString);
            }
            catch { }
            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                //code commended by saravana -- employer name replacing with location master
                if (sbMatchString.ToString().Trim().Length > 1)
                    opReplaceLocationFromPEmployer(ref sbMatchString);
            }
            catch { }
            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                if (sbMatchString.ToString().Trim().Length > 1)
                    ReplaceSpecialCharacters(ref sbMatchString);
            }
            catch { }

            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                if (sbMatchString.ToString().Trim().Length > 1)
                    opReplaceString(ref sbMatchString);
            }
            catch { }
            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                sbMatchString.Replace("   ", " ").Replace("  ", " ").Replace("  ", " ");
                sbMatchString.Replace("( )", " ").Replace(" .", ".").Replace(", .", ",").Replace(",.", ",").Replace(" ,", ",");
                if (sbMatchString.Length > 0)
                    sbMatchString.Replace(sbMatchString.ToString(), sbMatchString.ToString().Trim());
                if (sbMatchString.ToString().StartsWith(",") || sbMatchString.ToString().StartsWith(")") || sbMatchString.ToString().StartsWith(".") || (sbMatchString.ToString().StartsWith("(") && sbMatchString.ToString().IndexOf(")") < 0))
                    sbMatchString.Remove(0, 1);
                if (sbMatchString.Length > 0)
                    sbMatchString.Replace(sbMatchString.ToString(), sbMatchString.ToString().Trim());
                if (sbMatchString.ToString().StartsWith(",") || sbMatchString.ToString().StartsWith(")") || sbMatchString.ToString().StartsWith(".") || (sbMatchString.ToString().StartsWith("(") && sbMatchString.ToString().IndexOf(")") < 0))
                    sbMatchString.Remove(0, 1);
                if (sbMatchString.Length > 0)
                    sbMatchString.Replace(sbMatchString.ToString(), sbMatchString.ToString().Trim());
                if (sbMatchString.ToString().EndsWith(",") || sbMatchString.ToString().EndsWith("(") || (sbMatchString.ToString().EndsWith(")") && sbMatchString.ToString().IndexOf("(") < 0))
                    sbMatchString.Remove(sbMatchString.Length - 1, 1);
                if (sbMatchString.Length > 0)
                    sbMatchString.Replace(sbMatchString.ToString(), sbMatchString.ToString().Trim());
                if (sbMatchString.ToString().EndsWith(",") || sbMatchString.ToString().EndsWith("(") || (sbMatchString.ToString().EndsWith(")") && sbMatchString.ToString().IndexOf("(") < 0))
                    sbMatchString.Remove(sbMatchString.Length - 1, 1);
                if (sbMatchString.ToString().Replace("(", "").Replace(")", "").Replace(",", "").Replace(".", "").Replace(" ", "").Trim().Length < 2 && sbMatchString.Length > 0)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
            }
            catch { }
            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                if (sbMatchString.ToString().IndexOf("(") > sbMatchString.ToString().IndexOf(")") && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Remove(sbMatchString.ToString().IndexOf("("), sbMatchString.Length - sbMatchString.ToString().IndexOf("("));

            }
            catch { }
            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 4 && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
            }
            catch { }
            try
            {
                if (rgxSmall.Matches(sbMatchString.ToString()).Count > 3 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                Regex rgxNoWords = new Regex(@"^\s?[a-z]{3,15}\s([a-z]{2,15}\s){0,}");
                Regex rgxMatch = new Regex(@"^\s?[a-z]{3,15}\s([a-z]{2,15}\s){0,}[A-Z].{2,}");
                if (rgxMatch.IsMatch(sbMatchString.ToString()) && rgxNoWords.IsMatch(sbMatchString.ToString()) && rgxLTD.IsMatch(sbMatchString.ToString()) == false)
                    sbMatchString.Remove(0, rgxNoWords.Match(sbMatchString.ToString()).Length);
            }
            catch { }
        }

        public void opReplaceYearFromEmployer(ref StringBuilder Employer, string StrRemoveDateFormat)
        {
            try
            {
                Regex _regxRemoveDate = new Regex(@"[\s,\{“‘\(\.](" + StrRemoveDateFormat + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex _regxRemoveDate2 = new Regex(@"[\s,\{“‘\(\.](" + StrRemoveDateFormat + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);

                MatchCollection mMatch = _regxRemoveDate.Matches(" " + Employer.ToString().Trim());
                int iHitCount = mMatch.Count;
                if (iHitCount == 0)
                    mMatch = _regxRemoveDate2.Matches(" " + Employer.ToString().Trim());
                if (iHitCount > 0)
                {
                    foreach (Match m in mMatch)
                    {
                        Employer.Replace(m.Value, " ").Replace(":", " ");
                    }
                }
            }
            catch { }
        }

        private void ReplaceSpecialCharacters(ref StringBuilder _sbMatchString)
        {
            for (int _cnt = 0; _cnt < 127; _cnt++)
            {
                if (_cnt == 40 || _cnt == 41 || _cnt == 44 || _cnt == 46) continue;
                if ((_cnt >= 0 && _cnt < 38 && _cnt != 9 && _cnt != 32) || (_cnt > 38 && _cnt < 47) || (_cnt > 57 && _cnt < 65) || (_cnt > 90 && _cnt < 97) || (_cnt > 122 && _cnt < 127))
                    _sbMatchString.Replace(Convert.ToChar(_cnt).ToString(), " ");
            }
            _sbMatchString.Replace("–", " ").Replace("‘", " ").Replace("’", " ").Replace("[", " ").Replace("“", " ").Replace("”", " ").Replace("•", " ").Replace("·", " ").Replace("…", " ");
            if (_sbMatchString.ToString().ToUpper().IndexOf("M/S") < 0)
                _sbMatchString.Replace("/", " ");

        }

        private void opReplaceStringAuxilary(ref StringBuilder sbMatchString)
        {
            try
            {
                if (sbMatchString.ToString().Trim().ToLower().IndexOf("ltd") > 0 || sbMatchString.ToString().Trim().ToLower().IndexOf("limited") > 0)
                {
                    string[] split = { ".ltd ", " ltd", " Ltd", " LTD", " ltd,", " Ltd,", " LTD,", " ltd.", " Ltd.", " LTD.", " ltd ", " Ltd ", " LTD ", " Limited ", " limited ", " LIMITED ", " Limited,", " limited,", " LIMITED,", " Limited)", " limited)", " LIMITED)" };
                    string tEmp = sbMatchString.ToString().Split(split, StringSplitOptions.RemoveEmptyEntries)[0].Trim() + " Limited ";
                    sbMatchString = new StringBuilder();
                    sbMatchString.Append(tEmp);
                }

                if (sbMatchString.ToString().Trim().ToLower().IndexOf("based in") > 0 || sbMatchString.ToString().Trim().ToLower().IndexOf("center in") > 0)
                {
                    string[] split = { "based in", "Based In", "BASED IN", "center in", "Center In", "CENTER IN" };
                    string tEmp = sbMatchString.ToString().Split(split, StringSplitOptions.RemoveEmptyEntries)[0];
                    sbMatchString = new StringBuilder();
                    sbMatchString.Append(tEmp);
                }

                if (sbMatchString.ToString().Trim().ToLower().IndexOf("since") > 0)
                {
                    string[] split = { "Since", "since", "SINCE" };
                    string tEmp = sbMatchString.ToString().Split(split, StringSplitOptions.RemoveEmptyEntries)[0];
                    sbMatchString = new StringBuilder();
                    sbMatchString.Append(tEmp);
                }

                if (sbMatchString.ToString().Trim().ToLower().IndexOf("located") > 0)
                {
                    string[] split = { "located", "Located", "LOCATED" };
                    string tEmp = sbMatchString.ToString().Split(split, StringSplitOptions.RemoveEmptyEntries)[0];
                    sbMatchString = new StringBuilder();
                    sbMatchString.Append(tEmp);
                }
            }
            catch { }
        }

        private void ReplaceCommonWords(ref StringBuilder strbName, string _ReplaceStrName)
        {
            try
            {
                Regex mtchxStr = new Regex(_ReplaceStrName, RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                MatchCollection mtInteger;
                int _mtCount;
                mtInteger = mtchxStr.Matches(strbName.ToString().Replace("( )", ""));
                if (mtInteger.Count == 0)
                    mtInteger = mtchxStr.Matches("" + strbName.ToString().Replace("( )", ""));
                _mtCount = mtInteger.Count;
                if (_mtCount > 0)
                    foreach (Match m in mtInteger)
                    {
                        strbName.Replace(m.ToString(), " ");
                    }



            }
            catch { }
        }

        private void ReplaceCommonWordsInAddress(ref StringBuilder strbName, string _ReplaceStrName)
        {
            try
            {
                Regex mtchxStr = new Regex(_ReplaceStrName, RegexOptions.IgnoreCase);
                MatchCollection mtInteger;
                int _mtCount;
                mtInteger = mtchxStr.Matches(strbName.ToString());
                _mtCount = mtInteger.Count;
                if (_mtCount > 0)
                    foreach (Match m in mtInteger)
                    {
                        strbName.Replace(m.ToString(), " ");
                    }
            }
            catch { }
        }

        private void opReplaceString(ref StringBuilder sbMatchString)
        {
            try
            {
                string tPresentEmployerTop = @"currently working as a (\w{3,25}\s){1,3}with" + //For Replacing Employer
                 @"|currently working as (\w{3,25}\s){1,4}in" +
                  @"|currently working as a\s(\w{2,25}\s){1,5}in" +
                 @"|worked as (\w{3,25}\s){1,4}in" +
                 @"|currently working as an\s(\w{3,25}\s){1,4}for" +
                 "|currently working at" +
                 @"|currently working as\s(\w{2,25}\s){1,3}at|working as\s(\w{2,25}\s){1,3}at|working as a\s(\w{2,25}\s){1,3}at|working as an\s(\w{2,25}\s){1,3}at" +
                 @"|currently working as\s(\w{2,25}\s){1,4}at|working as\s(\w{2,25}\s){1,4}at|working as a\s(\w{2,25}\s){1,4}at|working as an\s(\w{2,25}\s){1,4}at" +

                 @"|worked as\s(\w{2,25}\s){1,4}at|worked as a\s(\w{2,25}\s){1,4}at|worked as an\s(\w{2,25}\s){1,4}at" +
                 @"|currently working as\s(\w{2,25}\s){1,5}at|working as\s(\w{2,25}\s){1,5}at|currently working as a\s(\w{2,25}\s){1,5}at|working as a\s(\w{2,25}\s){1,5}at|working as an\s(\w{2,25}\s){1,5}at" +
                 @"|currently workes as\s(\w{2,25}\s){1,5}at|workes as\s(\w{2,25}\s){1,5}at|workes as a\s(\w{2,25}\s){1,5}at|workes as an\s(\w{2,25}\s){1,5}at" +
                 @"|working as an\s(\w{2,25}\s){1,4}for" +
                 @"|working as a\s(\w{2,25}\s){1,4}in" +
                 @"|Worked as a\s(\w{2,25}\s){1,4}in|Worked as a\s(\w{2,25}\s){1,5}in" +

                // @"|worked as a\s(\w{2,25}\s){1,8}in" +

                 @"|working as\s(\w{2,25}\s){1,4}in" +
                 @"|working as\s(\w{2,25}\s){1,4}[\s]?with" +
                 @"|working as in" +
                 @"|Worked as in|Worked in" + //Worked as a
                 @"|with \d{1} plus years of experience in" +
                 @"|with \d{1} years of experience in" +
                 @"|years of experience in|at work" +
                 @"|I have been associated with|I was working for about (\w{2,25}\s){1,4} yrs with|years with|Serving as a" + //I was working for about 3 . 6 yrs with
                 @"|working as a\s(\w{2,25}\s){1,4}[\s]?with|year of experience in";


                string tPreviousEmployerTop = @"|worked as a (\w{3,25}\s){1,4}with" +
                  @"|worked as (\w{3,25}\s){1,4}in" +
                  @"|worked as an\s(\w{3,25}\s){1,4}for" +
                  "|worked at" +
                  "|previously worked as" +
                  "|previously worked with" +
                  "|worked with|Worked in" +
                 "|years of experience in" +
                  @"|worked with\s(\w{2,25}\s){1,4}at|worked as a\s(\w{2,25}\s){1,4}at|worked as an\s(\w{2,25}\s){1,4}at" +
                  @"|worked as\s(\w{2,25}\s){1,4}at|worked as a\s(\w{2,25}\s){1,4}at|worked as an\s(\w{2,25}\s){1,4}at" +
                  @"|worked with\s(\w{2,25}\s){1,5}at|worked as a\s(\w{2,25}\s){1,5}at|worked as an\s(\w{2,25}\s){1,5}at" +
                  @"|worked as\s(\w{2,25}\s){1,5}at|worked as a\s(\w{2,25}\s){1,5}at|worked as an\s(\w{2,25}\s){1,5}at" +
                  @"|worked with an\s(\w{2,25}\s){1,4}for" +
                  @"|worked with a\s(\w{2,25}\s){1,4}in" +
                  @"|worked with a\s(\w{2,25}\s){1,4}in" +
                  @"|worked as\s(\w{2,25}\s){1,4}in" +
                  @"|worked as\s(\w{2,25}\s){1,4}[\s]?with" +
                  @"|year of experience in\s(\w{2,25}\s){1,16}as a|years of experience|year s experience in|work experience in| I HAVE WORKED AS A|I HAVE" +
                  @"|worked as a\s(\w{2,25}\s){1,4}[\s]?with";

                Regex exPresentEmp1 = new Regex(@"[\s,\{“‘\(\.](" + tPresentEmployerTop + tPreviousEmployerTop + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex exPresentEmp2 = new Regex(@"[\s,\{“‘\(\.](which is a|was a)[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                sbMatchString = sbMatchString.Replace("   ", " ");
                Regex rgxNumberMail = new Regex(@"\d{5,}|\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*|www\.[a-z]+\.", RegexOptions.IgnoreCase);
                if (rgxNumberMail.IsMatch(" " + sbMatchString.ToString()))
                    sbMatchString.Replace(rgxNumberMail.Match(sbMatchString.ToString()).ToString(), "");

                Regex rgxNumberMail1 = new Regex(@"\d{1}[\s](year|years|yrs|yr)[\s]\d{1}\s(month|months|mths) ", RegexOptions.IgnoreCase);
                if (rgxNumberMail1.IsMatch(" " + sbMatchString.ToString()))
                    sbMatchString.Replace(rgxNumberMail1.Match(sbMatchString.ToString()).ToString(), "");
                rgxNumberMail1 = null;
                //Replacing String Based on Working as Pattern -- Saravana
                if (sbMatchString.ToString().ToLower().Contains("worked"))
                    sbMatchString.Replace("(", "").Replace(")", "").Replace("  ", " ");
                if (exPresentEmp1.IsMatch(" " + sbMatchString.ToString()) == true)
                {
                    try
                    {
                        sbMatchString.Remove(0, exPresentEmp1.Match(" " + sbMatchString.ToString().Trim()).Index);

                        sbMatchString.Replace(exPresentEmp1.Match(" " + sbMatchString.ToString()).ToString().Trim(), "");
                    }
                    catch { }
                }
                try
                {
                    if (exPresentEmp2.IsMatch(" " + sbMatchString.ToString()) == true)
                        sbMatchString.Remove(exPresentEmp2.Match(" " + sbMatchString.ToString().Trim()).Index, sbMatchString.ToString().Trim().Length - exPresentEmp2.Match(" " + sbMatchString.ToString().Trim()).Index);
                }
                catch { }
                string _strReplaceWords = @"(Computer Officer|Management Trainee|production engineer|Unit Manager |Latest First|Planning & Management|Recent Work History|Last Position Held|Equity Research Analyst|Reason for Leaving|PROFESSIONAL EXPERIENCE" +
                   @"|data quality project lead|Unilever outsource|HR services|Template Light Program|dedicated European affiliates|purchasing business.|," +
                                         @"|Support process|Technical Faculty|Client Relationship Manager|Product Assurance|Member technical|VoIP|Tech Lead|Duration|Employment Details|PROFESSIONAL HISTORY|Professional Summary|as sap basis administrator" +
                                         @"|Job Responsibility|ERP Implementations|No of Years|Career Profile|Total Experience|WORK SUMMARY|Post Held|Company Profile|Name of the Company|Project Management & Consultants|Experience Summary|Work Location|ORGANISATIONAL DETAILS" +
                                         @"|Quantitative Research|Total work Exp|Organizational Details|State Training Manager|PRESENT STATUS|Accounts processing assistant|Company Address|Career Synopsis|Organizations Details|Experience Details|Has a Total Experience" +
                                         @"|Fund Accounting Analyst|Process Associate|Sales Team|Systems Network Engineer|BUSINESS EXPERIENCE|Financial Analyst|Data Analyst|Business Type|Company Name|RELATED EXPERIENCE|Job Title|Relevant Experience" +
                                         @"|Network Analyst|Corporate Planning|Vice President|BUSINESS HISTORY|Special Officer|Dept|TO TILL|Junior Research Associate|Annual Turnover|WORK EXPERIENCE|Presentation Graphics|Electronics & Communication|Security and Vigilance|till date" +
                                         @"|Territory Manager|Plant Finance Manager|Center Manager|Employment Graph|Information Security|finance executives|CURRENT ASSIGNMENT|Key Role|reverse chronological order|My Credit|Branch Head" +
                                         @"|proffessional experience|PROFFESSIONAL  EXPERIENCE|Career Path|relationship officer|Growth Path|Career Graph|proffesional experience|Present Employment|SAP ABAP Consultant|SAP ABAP|Present Assignment|PRESENT ASSIGNMNET|THMS" +
                                         @"|heading application engineering|JD Consultant|IT Consultant|Cumulative work experience|PERFORMANCE HIGHLIGHTS|Graph with Noteworthy Milestones|Reporting Authority|PRESENTLY WORKIG IN|Securitized Products|Presently workig in" +
                                         @"|Work History|Post Paid|Pre Paid|MBA Full Time Student|POST QUALIFICATION|Special tasks|India and Abroad|PRESENT ASSIGNMNET|Workedeplace|Organisations worked|Organizations Worked|Organizational experience|ORGANISATIONAL EXPERIENCE" +
                                         @"|worked in|worked|REVERSE CHRONOLOGICAL ORDER|Software Development|Software Development and Integration|PROJECT DETAILS|ABAP|PROJECT DETAIL|CURRENT EXPERIENCE" +
                                         @"|Employment history|Audit Senior|IT Service|Employement history|My Work History|Present employer|PRESENT|Worked as a|Present Working At|Career history|Current Organization|Name of the|team member" +
                                         @"|Currently Working In|Current Employer|Current Organisation|Employee history|Present Working At|Presently Working With|WORKING EXPERIENCE|and Integration|Work Exposures|till date at|Present Job|Quarter of" +
                                         @"|Current Job|Customer Care|Human Resource|Software division|Recruitment Lead|Position Held|fast growing|TOTAL FUNCTIONAL|Reason Leaving|Hardware Used|to till date|a unit of|Current Job Data|Business Development" +

                                         @"|Retrospective|EmployerClient|RESPONSIBILITY|worked in|WORKED|RECORD|Executive|Administrator|Achievements|Trainer|Peiod|months|name|Currently|career" +
                                         @"|PERIOD|Details|Detail|Organisations|Permanent|Place|associated|been|Have|Lead|Include|Tilldate|Employed|Experience|Occupation|Karnataka|Domain" + //PROFESSIONAL
                                         @"|WORKING|Presently|Present|Employer Name|EMPLOYER|Employment|Employee|history|years|FOR|as a|AS|in|at |With|designation|which is|career progression|Professional" +//professional
                                         @"|PROGRESSION|Compensation|Deliverables|career|Highlights|SUMMARY|Summary|and Achievements|Designers|Designer|Job Functions|Job|leading|Entrepreneurship|Loan|Against|Property|Performance|Accountant" +
                                         @"|Role|End|recruitment|DD MM YYYY|Teams|This|Analyst|pursuing|MBA|graduated|There|Here|WORK EXPOSURE|concern|Curently|an renowned|RENOWNED|EXPERIENCE|simultaneously|division" +
                                         @"|E x p e r i e n c e|Experience|Experinece|Exeperience|Exeprience|Experiences|Exp|Exps|Experince|Around|till date|Date Joined| Left|Date|Current|Onwards|onwad|assistant|Accounts|processing|Graduation" +
                                         @"|Now|SQL|DBA|Testing|date|Sl No|starting|the most|recently|executed|Responsibility|Project Title|Till|current|Gurgaon|Status|I am|Experience|Co op Work Terms|EMPLOYMENT|WORK" +//Professional
                                         @"|Dates|CURRENT|From|reputed|To |NAME|name of the company|DETAILS|Detail|Statistical|Between|Senoir|direct|Specialist|Across|Responsible|Planning|Functions|Monthly|Issues" +
                                         @"|Work|maintenance|including|Approx|Title|Sr|Operations|Job|Designation|Month|month|year|No of|No  of|Total and" + //Ops
                                         @"|Last|Year|STARTING|LATEST|Unix|which|includes|strong|Nature|Test Lead|Previous|Overview|SECTOR|Active|Exposure|PROFESSIONNAL" +
                                         @"|\d{0,8}(January|Janvary|February|March|April|May|June|July|August|September|October|November|December)\d{0,4}" +
                                         @"|\d{0,8}(jan|feb|febs|mar|apr|may|jun|jul|aug|sep|sept|oct|nov|dec)\d{0,4}|\d{1,10}Lacs|\d{1,4}Years|\d{1,4}Year|\d{1,4}Yrs|\d{1,4}Yr|\d{0,2}(mnths|months|month)" +
                                         @"|Location|EXPIERENCE|INTERNSHIPS| INTERNSHIP |Career|Held|Relevant|Position|Leader|Areas|Responsibilities|Description|migration|Database|Industry|ONSITE|Onsite|yrs|any|if" +

                                         @"|Instructor|Accountancy|administrative|academic|Department|Bachelor|Acountancy|Treasurer|Received|Promoted|EARLIER|Above|Sourcing|Annually|ASSCOCIATE |Payment|Resources|SNR|Based|Admin|Sale|Head" +//Commercial //PROFESSIONAL
                                         @"|Active|Emp|He |has |in |is |ph|following|Processing|an |involved|through|Java|J2ee|Subject|Since|Officer|included" +
                                         @"|Organizational|Result|Chief|Quantitative|Synopsis|internal|successfully|succesfully|Proffession|profession|Skills|Skill|exeperience|Annual|Salary|Lac|Functional" +
                                         @"|member|reverse|order|past| startup |Contour|objective|Derivatives|I am|Presentation|Last|Held|Position|Exposure|charge|approx|Presenting|Clients|employeed|clerk" + //education
                                         @"|ACCOMPLISHMENTS|Appellation|Assignment|to|feruary|Over all|Over|follows|Particulars|Completed|weeks|week| internship |Prepration|Preparation|Platform" + //Representative
                                         @"|No|Are|Served|Team|Type|Exposure|Engagement|Given|Below|played|complete|position|PROJECT HANDLED|Handled|Background|Gender|The|Ability|Have|Create|implement|Relations|Field|Analytics" +
                                         @"|W o r k|E x p e r i e n c e|Intranet|Objective|Articleship|Associate |Presale|Plant|Size|Initiated|approximately|\d{0,2}(Lakhs|Lacs)|\d{0,2}(Lakh|Lac)" +
                                         @"|Org|than|PRE|Mgr|Extra|most|Closely|Pay|curriculum|activities|Deputy|covered|Supervisor|Version|Relative|Staff|Benefits|Plus|Payments|EXPERIENCES" +
                                         @"|Tenure|almost|Detailed|Rejoined|Prominent|Assignments|SUMMERY|Appreciation|started|Notice|Noticed|Director and Business|Director|Documenting" +
                                         @"|gained|significant|efficiency|highest|close|approved|Apprentice|knowledge|overall|Post|Qualification|Queries|Addressed|BRIEF|Area|joined|joining|after|was|given" +
                                         @"|Outcome|Trainee|returned|Periods|Contribution|Valuation|Regional|topics|Days|Day|tenure|assistant|handling|Authorization|Operational|Excellence|articles" +
                                         @"|Account|INR|thorough|My role|My|Flash|Basis|During|Where|By|Other|Asst|Key|leaving|release|OBJECTIVES|using|efficiency|highest|had|PERSONAL|QUALITIES|Roles" +
                                         @"|All|Male|Female|Effective|Can|Non|More|Proficiency|Gain|Prior|Others|DOB|Occupation|Occupations|Offering|Growth|Stability|Benefit" +
                                         @"|Contact|RECENT|Detailed|Billion|Selection|Departments|Scheme|excluding|articleship|Having|Organisational|Programmer|Reproting|Affiliations|Advised|Advise|Litigation|claiming|amount|million|TRANSACTION" +
                                         @"|www\s*\.\s*[a-z0-9\s]*?\.\s*(com|in|co)(\.[a-z]{0,4})?|R\s*&\s*D|(one|Two|three|four|five|six|seven|eight|nine)[\s]*(Years|Year|Yrs|Yr)" +
                                         @"|Tel|formerly|known|Commanding|Semester|Score|CGPA|SGPA|PostPaid|Prepaid|Paid|Audit|Institutional|Vice|Certified|Store|Payroll Management| from" +
                                         @"|http|url|about|Test|going|phone|Consistently|number|branches|functioning|partners|Group Turnover|crores|Rs  \.|Rs\.|district|Store Ops|(|)|Retail Operations|Timeline|Mobile Sales|Chartered Semiconductors|SPMA|L3|Data Associate|OPERATIONAL|EXCELLENCE|MANAGEROPERATIONALEXCELLENCE|PROJECTENGINEER|SALESMANAGER|MASTERBLACKBELT|Fumed" +
                                         @"|student|only|Curricular|ADDITIONAL|Publicity| offshore|of ten |Software |I was on assignment|Operating Systems|Compilers Advanced Computing|Compiler|within|Dy|Prvious|EN|Appointed as|Timeline:|Head|Director|Asset Development|Banking and eCommerce|High|Contributing|Authorized|dealer|A division of|a wholly|owned|Appointed|Contract|page|Reed|Regional|Highlights| Data Centre)[s]?";


                //string _sbMtchMonth = "";
                //_sbMtchMonth = @"(Jan |January|February|March|April|May|June|July|August|September|October|November|December|Dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Febs|Aprl)[s]?";
                Regex rgxLTD1 = new Regex(@"\b(Pte Ltd|Pte|Pte\.|Limited|LIMITED|limited|LTD|Firm|LLC|llc|L\.L\.C|Ltd|LTd|Ltd|Ldt|LDT|ltd|(M|m)/(S|s))\b|\b((Co|CO|co)\s{0,3}\.|&\s{0,3}(CO|Co|co|Corp)\b|Inc\s{0,3}[\.\(]|INC\s{0,3}[\.\(])");
                Regex rgxLTD = new Regex(@"\b(([A-Za-z\.\&-]){1,25}\s){1,3}(at)\s(([A-Za-z\.\&-]){1,25}\s){0,3}|(\w{2,25}\s){1,3}at\s(\w{2,25}\s){1,3}(Company|Technologies|Fasteners|Technology)|(Corporation|Limited|LIMITED|LLC|llc|L\.L\.C|Firm|limited|LTD|Ltd|LTd|Ltd|Ldt|LDT|ltd|group|Group|GROUP|Corp|(M|m)/(S|s))\b|\b(Co|CO|co)\s{0,3}\.?[\s\(]|&\s{0,3}(CO|Co|co|Corp|INC|Inc)\b|\b(INC|Inc|ASSOCIATES|company|Group|Bank|Services| Computers|TECHNOLOGIES|Technology|TECH|Corporate|Healthcare|Sdn\. Bhd\.|Sdn Bhd|Bhd\.|Pte|Pte\.|Sendirian Berhad|Berhad)\b", RegexOptions.IgnoreCase);//company
                Regex rgxSmallOnly = new Regex("[a-z]{2,10}");
                Regex rgxCapital = new Regex("[A-Z]{1,}");
                MatchCollection mtchSmallOnly;
                mtchSmallOnly = rgxSmallOnly.Matches(sbMatchString.ToString());
                if (mtchSmallOnly.Count >= 4 && rgxCapital.IsMatch(sbMatchString.ToString()) == false && rgxLTD1.IsMatch(sbMatchString.ToString()) == false)
                {
                    sbMatchString.Remove(0, sbMatchString.Length);
                    return;
                }
                //try
                //{
                //    if (sbMatchString.ToString().Replace("(", "").Replace(")", "").Trim().ToLower().Contains(" at "))
                //        sbMatchString.Remove(0, sbMatchString.ToString().ToLower().IndexOf(" at "));
                //}
                //catch { }
                if (sbMatchString.ToString().Trim().Length > 10 && (sbMatchString.ToString().ToLower().Contains("databases") == true || sbMatchString.ToString().ToLower().Contains("theory") == true || sbMatchString.ToString().ToLower().Contains("star of month") == true || sbMatchString.ToString().ToLower().Contains("star performer") == true || sbMatchString.ToString().ToLower().Contains("outstanding performer") == true || sbMatchString.ToString().ToLower().Contains("best team award") == true || sbMatchString.ToString().ToLower().Contains("gold award") == true))  //
                    sbMatchString.Replace(sbMatchString.ToString(), "");

                if (sbMatchString.ToString().ToLower().Contains("self employed") == false)
                    ReplaceFromName(ref sbMatchString, _strReplaceWords);

                Regex rgx = new Regex(@"[\s]+");
                if (sbMatchString.ToString().Trim().Length <= 4 && sbMatchString.ToString().ToLower().Contains("lab") == true)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                if (sbMatchString.ToString().Trim().Length <= 9 && sbMatchString.ToString().ToLower().Contains("solutions ") == true)
                    sbMatchString.Replace(sbMatchString.ToString(), "");
                //Contractual Employment through i.e.
                string _strRepCmnWord = @"[\s,\[\{“‘\(\:](experience on|equivalent Team|Present|Receivable|consolidation|Year|Turnover|Joint venture|Join us|Branch|Directly|training at|continue|Contractual through|DESIGNATION|DURATION|PROJECT HANDLED|PROFILE|Company Name|Duration|Institutes like|Some|role equivalent to|commenced career|playing role of|Primary|Specialist|Individual|up to|Position|different industries|Heading|Administration of|about a|Environment|Standard & Poor|Currently|presently|Payables|III|Payable|Process Associate|accounts payables|hands|team|Process|for|Site|Portfolio|Web and|with|Size|from|Recon Expert|Co-op Work Terms|Regional|recent|Successfully|Highlights|invoices|processed|service line of|worked i|till date|till|Volumes|a of and|quality assurance|contributed|direct tax|a in|leading|Systems Desktop Support|Sales| products |Sales|Chloroform|Chlorinated|Since|handled|range|of Silica|Poly Vinyl Chloride|Resins|Solvents|( MDC  and )|roles|Data Centre|Employer|that|Founder of|founded|during|Description|:|subsidiary| a |wholly|Policies|ngpay|Developing|merchant|strategy|Underground|Appointed as|Size|Leader|Computer Science|Assistant|Officer|Territory|Under Taken|hours|THMS|Pursuing|As a Software|CMMi Level|CMM Level|Level|CMMi|Member|&amp|CREW|Period|operating system|worked|working|under|special training|web development| for |System software|Linux|Part time|years|Undergraduate|Designed|implemented| and |Debuggers|Built software components|real time Industrial|Exploration|Single Board|Windows NT|Desktop Support Support|windows NT|City|Avenue|April|January|Janvary|February|March|April|May|June|July|August|Aug|SepAug|September|October|November|December|Dec.|structure testing|graded|kept AVID|Tech Ed|Accountant|General Desktop support|(24X7)||Professional|Band|Outlet|Experince|date|Join|Contract)[,\}’\]”\s]?[\s]?\b";
                if (sbMatchString.ToString().Length > 1)
                    ReplaceCommonWords(ref sbMatchString, _strRepCmnWord);
                else
                    return;

                //Replace Matching String
                if (sbMatchString.ToString().Length > 1)
                    ReplaceFromName(ref sbMatchString, _strRepCmnWord);
                else
                    return;

                if (sbMatchString.ToString().Replace(",", "").Replace("(", "").Replace(")", "").Replace(".", "").Replace(" ", "").Trim().Length < 2)
                {
                    if (sbMatchString.Length > 0)
                        sbMatchString.Remove(0, sbMatchString.Length);
                    return;
                }

                #region "Comment 26-05-09"
                if (sbMatchString.ToString().Trim().Length > 1)
                {
                    //MatchCollection mtInteger; a at 
                    //int mtCount = 0;
                    sbMatchString.Replace("    ", " ").Replace("   ", " ").Replace("  ", " ").Replace("  ", " ").Replace("( )", "").Replace("(  )", "").Replace(")", "").Replace("(", "");
                    sbMatchString.Replace(sbMatchString.ToString(), sbMatchString.ToString().Trim());
                    string strEndStart = @"Workes as a|a at |as a|a |at |EX|For|Sr|An|Of|In|To|Is|Me|On|As|QA|&" +
                                         @"|(With|Managing|Customer|And|Credit|South|Legal|DESIGN|CTC|Start|nil|subsidiary|of)[s]?"; //|Financial |Summer |Net

                    string strStarts = "(Divisional|Trade|Finance|CONSULTANT|Organistion|Organization|Organisation|Institution|Firm|COMPANY|Sale|Synopsis|SERVICE|Application|Development|HOUSE|Manufacturing|Finance|Consulting" +
                                        "|Production|Image|Circle|Communication|Corporate|Service|Zonal|Servicing|Operator|Customer|Product|Branch|Internet|Technologie|Field|System|Divison)[s]?"; //|Technology
                    string strEnds = "(Public|Sap|IT|Yes|All|HR|new)[s]?";
                    //string strSingle = "Technical|group|Software|Telecom|Research|electrical|India|Business|Time|Hotel|TOTAL|Management|computer|Training|Unit|One|BPO|Span|Taday|Insurance|Country|Countries|SME|U A E";
                    string strSingle = @"(\s?Technical[s]?){1,4}|(\s?group[s]?){1,4}|(\s?Software[s]?){1,4}|(\s?Telecom[s]?){1,4}|(\s?Research[s]?){1,4}|(\s?electrical[s]?){1,4}|(\s?India[s]?){1,4}|(\s?Business[s]?){1,4}|(\s?Time[s]?){1,4}|(\s?Hotel[s]?){1,4}" +
                                       @"|(\s?TOTAL[s]?){1,4}|(\s?Management[s]?){1,4}|(\s?computer[s]?){1,4}|(\s?Training[s]?){1,4}|(\s?Unit[s]?){1,4}|(\s?One[s]?){1,4}|(\s?BPO[s]?){1,4}|(\s?Span[s]?){1,4}|(\s?Taday[s]?){1,4}|(\s?Insurance[s]?){1,4}|(\s?Country[s]?){1,4}|(\s?Countries[s]?){1,4}|(\s?SME[s]?){1,4}|(\s?U A E[s]?){1,4}" +
                                       @"|Us|CITY|Usa|Global|National|Joint|CO|Limited|Ltd|Inc|Pvt Ltd|Pvt\. Ltd";
                    Regex rgxEndStarts = new Regex(@"^([&,\(\)\.\s]{0,4}\s{0,4}(" + strEndStart + @")(\b|\s))|(\b|\s)(" + strEndStart + @")\s{0,4}[&,\(\)\.\s]{0,4}$", RegexOptions.IgnoreCase);

                    Regex rgxStarts = new Regex(@"^[&,\(\)\.\s]{0,4}\s{0,4}(" + strStarts + "|" + strEndStart + @")(\b|\s)", RegexOptions.IgnoreCase);
                    Regex rgxEnds = new Regex(@"(\b|\s)(" + strEnds + "|" + strEndStart + @")\s{0,4}[&,\(\)\.\s]{0,4}$", RegexOptions.IgnoreCase);
                    Regex rgxSingle = new Regex(@"^[&,\(\)\.\s]{0,4}\s{0,4}(" + strSingle + "|" + strEndStart + "|" + strStarts + "|" + strEnds + @")\s{0,4}[&,\(\)\.\s]{0,4}$", RegexOptions.IgnoreCase);
                    Regex rgxSmallChar = new Regex(@"^[&,\.\s]{0,4}[a-z](\b|\s)$");
                    if (sbMatchString.ToString().Trim().Length > 0)
                        sbMatchString.Replace(sbMatchString.ToString(), " " + sbMatchString.ToString() + " ");
                    // Small Char
                    for (int cnt = 0; cnt < 10 && sbMatchString.ToString().Trim().Length > 1; cnt++)
                    {
                        if (rgxSmallChar.IsMatch(sbMatchString.ToString()) == false) break;
                        if (rgxSmallChar.Match(sbMatchString.ToString()).Index == 0)
                            sbMatchString.Remove(0, rgxSmallChar.Match(sbMatchString.ToString()).Length);
                        if (sbMatchString.ToString().Trim().Length > 0)
                            sbMatchString.Replace(sbMatchString.ToString(), " " + sbMatchString.ToString() + " ");
                    }
                    //End Starts
                    for (int cnt = 0; cnt < 10 && sbMatchString.ToString().Trim().Length > 1; cnt++)
                    {
                        if (rgxEndStarts.IsMatch(sbMatchString.ToString()) == false) break;
                        if (rgxEndStarts.Match(sbMatchString.ToString()).Index == 0)
                            sbMatchString.Remove(0, rgxEndStarts.Match(sbMatchString.ToString()).Length);
                        else
                            sbMatchString.Remove(rgxEndStarts.Match(sbMatchString.ToString()).Index, rgxEndStarts.Match(sbMatchString.ToString()).Length);
                        if (sbMatchString.ToString().Trim().Length > 0)
                            sbMatchString.Replace(sbMatchString.ToString(), " " + sbMatchString.ToString() + " ");
                    }
                    //Starts
                    for (int cnt = 0; cnt < 10 && sbMatchString.ToString().Trim().Length > 1; cnt++)
                    {
                        if (rgxStarts.IsMatch(sbMatchString.ToString()) == false) break;
                        if (rgxEndStarts.Match(sbMatchString.ToString()).Index == 0)
                            sbMatchString.Remove(0, rgxStarts.Match(sbMatchString.ToString()).Length);
                        if (sbMatchString.ToString().Trim().Length > 0)
                            sbMatchString.Replace(sbMatchString.ToString(), " " + sbMatchString.ToString() + " ");
                    }
                    //Ends
                    for (int cnt = 0; cnt < 10 && sbMatchString.ToString().Trim().Length > 1; cnt++)
                    {
                        if (rgxEnds.IsMatch(sbMatchString.ToString()) == false) break;
                        if (rgxEnds.IsMatch(sbMatchString.ToString()))
                            sbMatchString.Remove(rgxEnds.Match(sbMatchString.ToString()).Index, rgxEnds.Match(sbMatchString.ToString()).Length);
                        if (sbMatchString.ToString().Trim().Length > 0)
                            sbMatchString.Replace(sbMatchString.ToString(), " " + sbMatchString.ToString() + " ");
                    }
                    //Single 
                    if (rgxSingle.IsMatch(sbMatchString.ToString()))
                        sbMatchString.Remove(0, sbMatchString.Length);
                }
                if (sbMatchString.ToString().Trim().Length < 2 && sbMatchString.Length > 0)
                    sbMatchString.Remove(0, sbMatchString.Length);
                try
                {   // If Keyword is not match with Employer -- And Length > 100 -- Removing the Employer Details
                    if (((rgxLTD1.IsMatch(sbMatchString.ToString()) == false && rgxLTD.IsMatch(sbMatchString.ToString()) == false) && sbMatchString.ToString().Replace(" ", "").Length > 100))
                        sbMatchString.Replace(sbMatchString.ToString(), "");
                }
                catch { }

                //Found Start with "(" and end of ")" with length > 30 only fetching from Inside Bracket Data
                try
                {
                    if (sbMatchString.ToString().Trim().StartsWith("(") && sbMatchString.ToString().Contains(")") && sbMatchString.ToString().Length > 20 && sbMatchString.ToString().IndexOf(")") > 30)
                    {
                        sbMatchString.Remove(sbMatchString.ToString().IndexOf(")"), sbMatchString.ToString().Length - sbMatchString.ToString().IndexOf(")"));
                        sbMatchString.Replace("(", "");
                    }
                    sbMatchString.Replace("( , )", "").Replace("()", "").Replace(" ( Support )", "").Replace("Process", "").Replace("HCS MJE", "");

                    string strMonth = "January|February|March|April|May|June|July|August|September|October|November|December|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|febs|aprl|Sept|Octb";
                    Regex RgsMnth = new Regex(@"\b(" + strMonth + @")(\b|\s)", RegexOptions.IgnoreCase);
                    string mnth = RgsMnth.Match(sbMatchString.ToString()).ToString();
                    if (mnth.Trim() != "")
                        sbMatchString.Replace(mnth, "");
                    if (sbMatchString.ToString().Trim() == "Associate ( Corporate )" || sbMatchString.ToString().Trim() == "months" || sbMatchString.ToString().Trim() == "Senior" || sbMatchString.ToString().Replace("(", "").Replace(")", "").Trim() == "Developer" || sbMatchString.ToString().Replace("(", "").Replace(")", "").Trim() == "Bank" || sbMatchString.ToString().Replace("(", "").Replace(")", "").Trim() == "Profile" || sbMatchString.ToString().Replace("(", "").Replace(")", "").Trim() == "up" || sbMatchString.ToString().Replace("(", "").Replace(")", "").Trim() == "Support" || sbMatchString.ToString().Trim() == "Jr ." || sbMatchString.ToString().Trim() == "M/S" || sbMatchString.ToString().Trim() == "H . O" || sbMatchString.ToString().Trim() == "R . O" || sbMatchString.ToString().Trim() == "General" || sbMatchString.ToString().Trim().StartsWith("i . e . "))  //General i.e.
                        sbMatchString.Replace(sbMatchString.ToString(), "");  //Developer Senior
                    if (sbMatchString.ToString().Replace("(", "").Replace(")", "").Trim() == "Developer")
                        sbMatchString.Replace(sbMatchString.ToString(), "");
                }
                catch { }
                #endregion

            }
            catch { }
        }


        private void ReplaceFromName(ref StringBuilder strbName, string _strName)
        {
            string _strInteger = @"(\d{1,2}[\s]*(st|St|ST|nd|ND|rd|Rd|RD|th|Th|TH)" +
                                 @"|\d{1,})";
            //new
            strbName.Replace(" ", "     ");
            strbName.Replace(strbName.ToString(), " " + strbName.ToString().Trim() + " ");
            MatchCollection mtInteger;
            int _mtCount;
            Regex mtchxInteger0 = new Regex(" " + _strInteger + " ", RegexOptions.IgnoreCase);
            mtInteger = mtchxInteger0.Matches(strbName.ToString());
            _mtCount = mtInteger.Count;
            if (_mtCount > 0)
                foreach (Match m in mtInteger)
                {
                    strbName.Replace(m.ToString(), " ");
                }
            string str = " " + _strName.Replace(" ", "     ") + " ";
            Regex rgxName0 = new Regex(str, RegexOptions.IgnoreCase);
            mtInteger = rgxName0.Matches(strbName.ToString());
            _mtCount = mtInteger.Count;
            if (_mtCount > 0)
                foreach (Match m in mtInteger)
                {
                    strbName.Replace(m.ToString(), " ");
                }

            strbName.Replace("    ", " ").Replace("   ", "  ").Replace("  ", " ");
        }

        public void opReplaceDesignationFromPEmployer1(ref StringBuilder sbReturnEmployer)
        {
            try
            {
                sbReturnEmployer.Replace(sbReturnEmployer.ToString(), " " + sbReturnEmployer.ToString().Trim() + " ");
                Regex rgxDesignation;
                Match mtchDesignation;
                //#region "Select Top HitCount FA (HitCount should more then ONE)"
                for (int cnt = FCommon.JobTitleList.GetLowerBound(0); cnt <= FCommon.JobTitleList.GetUpperBound(0); cnt++)
                {
                    rgxDesignation = new Regex(FCommon.JobTitleList[cnt, 0].Trim().ToString() + " ");
                    mtchDesignation = rgxDesignation.Match(sbReturnEmployer.ToString());
                    if (mtchDesignation.ToString().Length < 2) continue;
                    sbReturnEmployer.Replace(mtchDesignation.ToString(), " ");

                }
            }
            catch { }

        }

        public void opReplaceDesignationFromPEmployer(ref StringBuilder sbReturnEmployer)
        {
            try
            {
                sbReturnEmployer.Replace(sbReturnEmployer.ToString(), " " + sbReturnEmployer.ToString().Trim() + " ");
                MatchCollection mtchColl = FCommon.rgxDesignations.Matches(" " + sbReturnEmployer.ToString().Trim());
                foreach (Match m in mtchColl)
                {
                    sbReturnEmployer.Replace(m.Value.ToString(), " ");
                    //break;
                }
            }
            catch { }

        }

        public void opReplaceLocationFromPEmployer(ref StringBuilder sbReturnEmployer)
        {
            try
            {
                sbReturnEmployer.Replace(sbReturnEmployer.ToString(), " " + sbReturnEmployer.ToString().Trim() + " ");
                if (regLocationText != null)
                {
                    MatchCollection mtchColl = regLocationText.Matches(sbReturnEmployer.ToString().Trim());
                    foreach (Match m in mtchColl)
                    {
                        sbReturnEmployer.Replace(m.Value.ToString(), " ");
                        break;
                    }
                }
                else
                {
                    sbReturnEmployer.Replace(sbReturnEmployer.ToString(), " " + sbReturnEmployer.ToString().Trim() + " ");
                    Regex rgxDesignation;
                    Match mtchDesignation;
                    //#region "Select Top HitCount FA (HitCount should more then ONE)"
                    for (int cnt = FCommon.PrefLocation.GetLowerBound(0); cnt <= FCommon.PrefLocation.GetUpperBound(0); cnt++)
                    {
                        rgxDesignation = new Regex(FCommon.PrefLocation[cnt, 0].Trim().ToString() + " ");
                        mtchDesignation = rgxDesignation.Match(sbReturnEmployer.ToString());
                        if (mtchDesignation.ToString().Length < 2) continue;
                        sbReturnEmployer.Replace(mtchDesignation.ToString(), " ");

                    }
                }
            }
            catch { }

        }


        #endregion "END PRESENT EMPLOYER"

        #region "Nationality"
        public void opGetNationality()
        {
            try
            {
                tNationality = "0";
                string patternNationality = "Nationality|Citizenship|Citizen";

                Regex exNationality = new Regex(@"[\s,\{“‘\(\.](" + patternNationality + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex exNationality1 = new Regex(@"[\s,\{“‘\(\.](" + patternNationality + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);
                int nFoundCount = -1;
                for (int n = 0; n < this.DataLines.Length; n++)
                {
                    int iMatchCnt = 0;//Citizen Services
                    if (((this.DataLines[n].Trim().ToLower().IndexOf("citizen services") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFERENCES") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("EFERENCES") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFERALS OF") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFRENCES") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFERENCE") == 0) || (this.DataLines[n].Trim().ToUpper().IndexOf(":¢REFERANCE:") >= 0) || (this.DataLines[n].Trim().ToLower().IndexOf("reference:") >= 0) || ((this.DataLines[n].Trim().ToLower().IndexOf("reference :") >= 0)) || (this.DataLines[n].Trim().ToLower().IndexOf("references :") >= 0) || (this.DataLines[n].Trim().ToLower().IndexOf("references:") >= 0) || (this.DataLines[n].Trim().ToLower().IndexOf("character and work references") >= 0)) && ((this.DataLines[n].Trim().ToLower().IndexOf("location preference:") < 0) && (this.DataLines[n].Trim().ToLower().IndexOf("preference") < 0) && (this.DataLines[n].Trim().ToLower().IndexOf("preferences") < 0) && (this.DataLines[n].Trim().ToLower().IndexOf("location preference") < 0)))
                    {
                        if (n >= (DataLines.Length / 2))
                            break;
                        else
                            continue;
                    }

                    if (this.DataLines[n] == null || this.DataLines[n].Length == 0) continue;
                    MatchCollection mtch = exNationality.Matches(" " + this.DataLines[n].Trim());

                    iMatchCnt = mtch.Count;
                    if (mtch.Count == 0)
                        mtch = exNationality1.Matches(" " + this.DataLines[n].Trim());
                    iMatchCnt = mtch.Count;

                    if (iMatchCnt == 0) continue;
                    nFoundCount = n;
                    break;
                }
                if (nFoundCount > -1)
                {
                    for (int n = nFoundCount; n < this.DataLines.Length && (n <= nFoundCount + 6) && tNationality.Trim() == "0"; n++)
                    {
                        if (this.DataLines[n].Trim().Length == 0) continue;
                        StringBuilder matchResult;
                        bool flagBreakMatch = true;
                        try
                        {
                            matchResult = new StringBuilder();
                            for (int cnt = FCommon.Nationality.GetLowerBound(0); cnt <= FCommon.Nationality.GetUpperBound(0) && flagBreakMatch == true; cnt++)
                            {
                                StringBuilder Eduforsplit1 = new StringBuilder();
                                StringBuilder sbExcludeList = new StringBuilder();

                                #region "collecting"
                                try
                                {

                                    if (FCommon.Nationality[cnt, 0] != null)
                                    {
                                        if (FCommon.Nationality[cnt, 1] != null)
                                            if (FCommon.Nationality[cnt, 1].Trim().Length != 0)
                                                Eduforsplit1.Append(FCommon.Nationality[cnt, 1] + "," + FCommon.Nationality[cnt, 0]);
                                            else
                                                if (FCommon.Nationality[cnt, 0].Trim().Length != 0)
                                                    Eduforsplit1.Append(FCommon.Nationality[cnt, 0]);
                                                else
                                                    continue;
                                        else
                                            if (FCommon.Nationality[cnt, 0].Trim().Length != 0)
                                                Eduforsplit1.Append(FCommon.Nationality[cnt, 0]);
                                            else
                                                continue;
                                    }
                                    else
                                        continue;
                                    try
                                    {
                                        if (FCommon.Nationality[cnt, 3].Trim().Length != 0)
                                            sbExcludeList.Append(FCommon.Nationality[cnt, 3]);
                                    }
                                    catch { }

                                }
                                catch
                                {

                                }
                                #endregion

                                Regex exEducation = null; Regex exEducation1 = null;
                                Regex exExclude = null; Regex exExclude1 = null;

                                #region "creating regular expression"
                                try
                                {
                                    if (Eduforsplit1.Length < 3)
                                    {
                                        Eduforsplit1.Replace(@"\", @"\\");
                                        Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                        Eduforsplit1.Replace("||", "|");
                                        exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
                                        exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant);

                                    }
                                    else
                                    {
                                        Eduforsplit1.Replace(@"\", @"\\");
                                        Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                        Eduforsplit1.Replace("||", "|");
                                        exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                        exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                                    }
                                    if (sbExcludeList.Length > 0)
                                    {
                                        sbExcludeList.Replace(@"\", @"\\");
                                        sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                        sbExcludeList.Replace("||", "|");
                                        exExclude = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                        exExclude1 = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                    }
                                }
                                catch
                                {

                                }
                                finally
                                {
                                    sbExcludeList = null; Eduforsplit1 = null;
                                }
                                #endregion

                                #region "finding"
                                try
                                {
                                    int iHitExcludeCount = 0;
                                    flagBreakMatch = true;
                                    MatchCollection mMatch = exEducation.Matches(@" " + this.DataLines[n].ToString().Trim());
                                    if (mMatch.Count == 0)
                                        mMatch = exEducation1.Matches(@" " + this.DataLines[n].ToString().Trim());
                                    if (mMatch.Count == 0) continue;
                                    if (FCommon.Nationality[cnt, 4] != null && opCheckMatchCount(mMatch, Convert.ToInt32(FCommon.Nationality[cnt, 4])) < Convert.ToInt32(FCommon.Nationality[cnt, 4])) continue;
                                    if (exExclude != null)
                                    {
                                        mMatch = exExclude.Matches(@" " + this.DataLines[n].ToString().Trim());
                                        iHitExcludeCount = mMatch.Count;
                                        mMatch = exExclude1.Matches(@" " + this.DataLines[n].ToString().Trim());
                                        iHitExcludeCount += mMatch.Count;
                                        if (iHitExcludeCount > 0) continue;
                                    }
                                    tNationality = FCommon.Nationality[cnt, 2];
                                    flagBreakMatch = false;

                                }
                                catch { }
                                finally
                                {
                                    exEducation = null; exEducation1 = null;
                                }
                                #endregion
                            } //end for
                        }
                        catch { }
                    }
                }
            }
            catch { }
        }
        #endregion

        #region "Get Address"
        public string tPresentAddress = "", tParmenentAddress = "";

        private void opGetCandidateAddress()
        {
            tPresentAddress = ""; tParmenentAddress = "";
            Regex regNotAddress = null;
            regNotAddress = new Regex(@"[\s,\[\{“‘\(\:](members|functions|responsibility|target|next generation|team member|responsibility|platform|till date|banking|ecommerce|gradudate|institute|management|name of examination|name of organization|name of wife|name of children|fathers name|mothers name|father :|mother|name of the company|name of course|name of inst|name of degree|sex|gender|location|male|female|core competency|expertize|with product|operating|officer|same as above|language|eloraigne|linguistic abilities|preferred industry|gender|confidential|specialization|project|class|professional profile|academic|academia|ba from govt|current organisation|designation|current  organisation|country head|Date:|prizes|quizzes|participant|full time|experience|errors|complaints|problems|strength|microsoft certified|sql server|process|ensuring|situation|queries|received|timeline|date    :|supporting|post execution|analysis|engineering|declaration|i here by|developer|Computer Applications|Googlevoice|Http|Candidate|Consultancy|SOFTWARE ENGINEER|D e c l a r a t i o n|Declare|Current CTC|Expected CTC|Notice Period|Relevant Exp|Full First|First/Middle/Last|Career Objective|Updated As|Joining Time|E.CTC|C.CTC|Database|Technician|CoWorkers|travel and relocation|Professional Experience|Experience|Group|Address Verification|Technical Executive)[,\}’\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
            string tNotAddress = "same as above|language|linguistic abilities|preferred industry|linguistic skills|annexure|objective|passport no|passport number|dob|date of birth|birth day|d.o.b|please|i have|preferred industry|passport |visa status|Working|With Prestigious|hobbies|gender|marital status|pan card|pan no|passport date of issue|Passport date of expiry|declaration|i hereby|operating|officer|candidate dossier|store|professional experience|Zero Defect|Address the team| full time";
            Regex rgxNotAddress = null;
            rgxNotAddress = new Regex(@"[\|\s,\{\(\:](" + tNotAddress + @")[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);

            string _StrMobilePattern = "(\\d+)(\\s+)(\\d+)(\\s+)(\\()(\\d+)(\\))(\\d+)|(\\d{3})(\\s+)(–)(\\s+)(\\d{3})(\\s+)(–)(\\s+)(\\d{4})|(\\d{3})(-|–)(\\d{3})(-|–)(\\d{4})" +
                                       "|(\\()(\\d{3})(\\))(\\s+)(\\d{3})(\\s+)(-|–)(\\s+)(\\d{4})|(\\()(\\d{3})(\\))(\\d{3})(-|–)(\\d{4})|(\\()(\\d{3})(\\))(-|–)(\\d{3})(-|–)(\\d{4})|(\\d{3})(-|–)(\\d{3})(\\s+)(\\d{4})|(\\()(\\d{3})(\\))(\\s+)(\\d{3})(-|–)(\\d{4})"; //(585)754-0713 //(646)-823-6302 //973-444 6222 //(816) 676-8070

            Regex RGxReplaceMobile = new Regex(_StrMobilePattern, RegexOptions.IgnoreCase);  //973 – 714 – 5752  //585-469-6458
            //(607) 624 - 3627
            string tPatter4Location = "summary|Career Objective|Objectives|E x p e r i e n c e|work profile|project done|career history|job responsibilities|role" +
             "|responsibilities|details of experience|current organisation|current organization" +
             "|managerial experiences|job profile|key areas of exposure|domain expertise|relevant work experience" +
             "|previous work experience|areas Of expertise|presently working at|experience|functional expertise" +
             "|employment history|significant projects|project handled|professional growth|experience summary" +
             "|professional summary|selected experience|assignments|project description" +
             "|professional experience|summary of skills and experience|lists of projects" +
             "|project experience|professional work experience|work experience|project details|project" +
             "|projects|career summary|institute / university / board|academics:|scholastic" +
             "|scholastic credentials|scholastic records|scholastic information|graduation|scholastic record" +
             "|education|e d u c a t i o n|a c a d e m i c   q u a l i f i c a t i o n s" +
             "|q u a l i f i c a t i o n s|a c a d e m i c|qualification summary|academic|academia|acadamic" +
             "|acadamic details|academic background|educational|professional qualification" +
             "|academic qualification|qualification|qualifications|summary of qualifications|academics" +
             "|academic profile|academic chronicle|highest degree held|gender|sex|Date Of Birth|Date of|Nationality|Marital Status|Languages|contact";
            Regex exRemove = new Regex(@"[\s,\(\:](" + tPatter4Location + @")[:\s]?[:\-\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

            //Regex For Finding Address Based on PIN Code
            string _strRegPinPattern = @"\s[a-z|A-Z]{0,2}?.\s\d{5}\b|\s[a-z|A-Z]{0,20}?.\s\d{5}?$|\s[a-z|A-Z]{0,20}\s\s\d{5}?\s\s\b" + // NJ 08514
                                       @"|\s[a-z|A-Z]{0,25}?.\d{5}?\s\s\b|\s[a-z|A-Z]{0,25}?.\d{5}?\b" + // Chicago-60607
                                       @"|(\s|[,\'’])[a-z|A-Z]{0,25}?.\d{5}?\b" +   //BROOKLYN,NY 11214
                                       @"|\s[a-z|A-Z]{0,25}?.\d{3}\s\d{3}?\s\s\b|\s[a-z|A-Z]{0,25}?.\s\d{3}\s\d{3}?\b"; // maharastra, 400 098

            Regex rgxAddInPIN = new Regex(_strRegPinPattern, RegexOptions.IgnoreCase);

            //Regex For Replacing Contact Keywords
            Regex rePhone = new Regex(@"[\s,\[\{“‘\(\:](H:|Phone:|TEL.|Tel.:|Telephone number:|residential phone numbers|Landline:|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|Ph:|ph :|ph  :|residence -|Home-|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\))[,\}’\]”\s]?[\s]?\b", RegexOptions.IgnoreCase);
            Regex reMobile = new Regex(@"[\s,\[\{“‘\(\:](Contact:|M:|MOBILE:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular)[,\}’\]”\s]?[\s]?\b", RegexOptions.IgnoreCase);
            Regex reEmail = new Regex(@"[\w]+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", RegexOptions.CultureInvariant);
            Regex reMobile1 = new Regex(@"(\+6?01\d{8}|\+6?01\d{1}[\s]?[-]?\d{4}[\s]?[-]?\d{3})\b", RegexOptions.IgnoreCase);

            string rgxBrkAddress = "same as above|language|linguistic abilities:|career objective|Preferred Industry|linguistic skills" +
                       "|client sales|client|curriculum vitae|executive|NSR no|PAN Card|page  of|objective|to work|i have|experience|human resources|profile" +
                       "|requirements|respect|year|respect|annexure|summary|skill|education|objective|passport details|vice president";
            // Regex For Breaking the Address Based on this keyword...
            Regex reBrkNotAddress = new Regex(@"[\s,\[\{“‘\(\:](" + rgxBrkAddress + @")[,\}’\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

            try
            {
                StringBuilder strAddress = null; int prelBrFlag = 0, FlagPresent = 0;
                strAddress = new StringBuilder();
                #region "Search for Current Address or Present Address"
                Regex regAddress = null, regAddress1 = null;
                try
                {
                    regAddress = new Regex(@"[\|\s,\{\(\:](address|current address|present address|present add:|local address|address for communication|communication address|contact address|contact address:|mailing address|correspondence address|corresspondence address|corresspondence address:|postal address|temporary address)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    regAddress1 = new Regex(@"[\|\s,\{\(\:](current address|present address|present add:|local address|address for communication|communication address|contact address|contact address:|mailing address|correspondence address|corresspondence address|corresspondence address:|postal address|temporary address)[:\s]?[:\-\)\}\s]?$", RegexOptions.IgnoreCase);
                    for (int outText = 0; outText < this.DataLines.Length && strAddress.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regAddress, regAddress1);
                        if (FlagPresent == 1)
                        {
                            for (int innText = outText; innText <= (outText + 7) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if ((opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1) == 1) ||
                                    regNotAddress.IsMatch(" " + this.DataLines[innText].Trim().ToLower()) ||
                                    rmSpace.Trim().IndexOf("permanent address") == 0 ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.Trim().IndexOf("language") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 || rmSpace.Trim().IndexOf("provincial address") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Linguistic Abilities") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("linguistic skills") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0 ||
                                    rmSpace.Trim().IndexOf("objective") == 0 || rmSpace.Trim().IndexOf("summary") >= 0 || rmSpace.Trim().IndexOf("skill") >= 0 || rmSpace.Trim().IndexOf("year") >= 0 ||
                                    rmSpace.Trim().IndexOf("contact number") == 0 || rmSpace.Trim().IndexOf("nsr no") == 0 || rmSpace.Trim().IndexOf("passport details") == 0 || rmSpace.Trim().IndexOf("page  of") >= 0 || rmSpace.Trim().IndexOf("page of") >= 0)
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;

                                if (prelBrFlag != 1)
                                    if (rgxNotAddress.IsMatch(" " + this.DataLines[innText].ToLower().Trim() + " "))
                                        prelBrFlag = 1;
                                if (prelBrFlag == 1) break;

                                strAddress.Append(" " + this.DataLines[innText].ToString());

                                if (RGxReplaceMobile.IsMatch(" " + strAddress.ToString()))
                                    strAddress.Replace(RGxReplaceMobile.Match(strAddress.ToString()).ToString(), "");

                                if (rePhone.IsMatch(strAddress.ToString()))
                                    strAddress.Replace(rePhone.Match(strAddress.ToString()).ToString(), "");

                                if (reMobile1.IsMatch(strAddress.ToString()))
                                    strAddress.Replace(reMobile1.Match(strAddress.ToString()).ToString(), "");
                                if (reEmail.IsMatch(strAddress.ToString()))
                                    strAddress.Replace(reEmail.Match(strAddress.ToString()).ToString(), "");

                                string tReplaceStr = @"(local address|address for communication|current|mailing|present|address|currentaddress|temporary|communication|:|permanent|contact no|contact|details|dob-|dob|adress|correspondence| for|dob-|dob|adress|state|current address|please|verify|your|in usa|–|cell no|cell|home|place of birth|e mail|e mail|e-mai|email id|e mail id|alternate email id|e-mail|e mail Id|cell number|mob |contact no|contact|personal data|program director|to correspond|mobile|tele|phone|\+|,,|Provincial|, ,  -|Ph.No|- .|D e c l a r a t i o n|CORRESPONDANCE)[s]?"; //D e c l a r a i o n
                                opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                #region "Replacing Not Address 11"

                                if (email != "")
                                {
                                    try
                                    {
                                        if (email.IndexOf(",") >= 0)
                                        {
                                            string[] Chr = null;
                                            Chr = email.Split(',');
                                            for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                strAddress.Replace(Chr[i], "");
                                        }
                                        else
                                        {
                                            tReplaceStr = @"(" + email + ")[s]?";
                                            opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                            strAddress.Replace(email, "");
                                            if (strAddress.ToString().ToLower().Contains(email) == true)
                                            {
                                                string str = Regex.Replace(strAddress.ToString(), email, "", RegexOptions.IgnoreCase);
                                                if (str.Trim() == "")
                                                    strAddress.Replace(strAddress.ToString(), "");

                                            }
                                        }
                                    }
                                    catch { }
                                }

                                //Phone No Replace
                                opReplacingnotAddressOne(ref strAddress);
                                //Mobile No Replace
                                opReplacingnotAddress(ref strAddress);

                                if (fname != "")
                                {
                                    tReplaceStr = @"(" + fname + ")[s]?";
                                    opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                    if (this.DataLines[outText].Replace("   ", " ").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                        strAddress.Replace("   ", " ").Replace(fname.ToLower(), "");
                                    if (FlagPresent != 1)
                                        if (this.DataLines[outText].Replace("   ", " ").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                            strAddress.Replace("   ", " ").Replace(fname.ToLower(), "");
                                    if (this.DataLines[outText].Replace("   ", "").Replace("(", "").Replace(")", "").Replace("page", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                        strAddress.Replace("   ", "").Replace("(", "").Replace(")", "").Replace("page", "").ToString().ToLower().Replace(fname.ToLower(), "");

                                    strAddress.Replace(fname.ToLower().Replace("    ", " "), "").Replace("                              ", "").Replace("    , ", "");
                                }
                                if (DOB != "")
                                    strAddress.Replace(DOB, "");
                                #endregion

                                // Breaking the loop based on Resume Top Keywords .. (Eg: summary , objective etc...)
                                if (exRemove.IsMatch(this.DataLines[innText].Trim())) break;

                            }
                        }
                    }
                }
                catch
                { }
                finally
                {
                    regAddress = null; regAddress1 = null;
                }
                if (strAddress.Length == 0)
                {
                    Regex rgxAddress = null;

                    try
                    {
                        string tAddressSearch = @"plot no|street| nagar|flat no|block|door no|street no|d.no | road |p.o. box|place of birth:|st cross| colony|city-1| ave |avenue|address:|address-|address :| lane| post| house| road|current location:| cottage|puram| h.no: | h.no. |House N0 | nivas|crossing| flats|st floor|H NO #| opposite to| complex"; //\s[a-z|A-Z|]{0,2}\s\d{5}
                        rgxAddress = new Regex(@"[\s,\[\{“‘\(\:](" + tAddressSearch + @")[,’\}\]”\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase | RegexOptions.Multiline);
                        //rgxAddress = new Regex(@"\b" + tAddressSearch + @"\b", RegexOptions.IgnoreCase);

                        for (int outText = 0; outText < 15 && strAddress.ToString().Trim().Length <= 1; outText++)
                        {
                            FlagPresent = 0;

                            if (iExpStart > 0 && iExpEnd > 0)
                                if ((iExpStart <= outText && outText <= iExpEnd))
                                    continue;

                            if (rgxAddress.IsMatch(" " + this.DataLines[outText].ToLower().Trim() + " ") || this.DataLines[outText].ToLower().Trim().StartsWith("h.no."))
                                FlagPresent = 1;
                            else if (rgxAddress.IsMatch(this.DataLines[outText].ToLower().Trim())) //Crossing  crossing
                                FlagPresent = 1;
                            if (FlagPresent == 1)
                            {
                                for (int innText = outText; innText <= (outText + 5) && innText < this.DataLines.Length; innText++)
                                {
                                    prelBrFlag = 0;
                                    if (iExpStart > 0 && iExpEnd > 0)
                                        if ((iExpStart <= innText && innText <= iExpEnd))
                                            continue;

                                    string rmSpace = this.DataLines[innText].ToLower().Trim();
                                    if ((opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1) == 1) ||
                                        regNotAddress.IsMatch(" " + this.DataLines[innText].Trim().Replace("Current Location:", "").ToLower()) ||
                                        rmSpace.Trim().IndexOf("permanent address") == 0 ||
                                        rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                        rmSpace.Trim().IndexOf("language") >= 0 ||
                                        rmSpace.Trim().IndexOf("phone") == 0 ||
                                        rmSpace.Trim().IndexOf("mobile") == 0 ||
                                        rmSpace.Trim().IndexOf("Linguistic Abilities") == 0 ||
                                        rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                        rmSpace.Trim().IndexOf("linguistic skills") == 0 ||
                                        rmSpace.Trim().IndexOf("annexure") == 0 || rmSpace.Trim().IndexOf("year") >= 0 ||
                                        this.DataLines[innText].Length > 220 ||
                                        rmSpace.Trim().IndexOf("objective") == 0 || rmSpace.Trim().IndexOf("summary") >= 0 || rmSpace.Trim().IndexOf("skill") >= 0 ||
                                        rmSpace.Trim().IndexOf("Mob. No") >= 0 || rmSpace.Trim().IndexOf("graduate") >= 0 || rmSpace.Trim().IndexOf("institute") >= 0 ||
                                        rmSpace.Trim().IndexOf("experience") >= 0 || rmSpace.Trim().IndexOf("nsr no") == 0 || rmSpace.Trim().IndexOf("passport details") == 0 || rmSpace.Trim().IndexOf("page  of") >= 0 || rmSpace.Trim().IndexOf("page of") >= 0 || rmSpace.Trim().IndexOf("objective") >= 0 || rmSpace.Trim().IndexOf("to work") >= 0 || rmSpace.Trim().IndexOf("i have") >= 0 || rmSpace.Trim().IndexOf("experience") >= 0 || rmSpace.Trim().IndexOf(" hiring function") >= 0)
                                    {
                                        if (rgxAddress.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) != true && rgxAddress.IsMatch(this.DataLines[innText + 2].ToLower().Trim()) != true)
                                            prelBrFlag = 1;
                                    }
                                    if ((innText > 1 && this.DataLines[innText - 1].ToLower().Trim().Contains("professional experience") == true))
                                        prelBrFlag = 1;
                                    if (prelBrFlag == 1) break;

                                    if (prelBrFlag != 1)
                                        if (rgxNotAddress.IsMatch(" " + this.DataLines[innText].ToLower().Trim() + " ") && rgxAddress.IsMatch(" " + this.DataLines[innText].ToLower().Trim() + " "))
                                            prelBrFlag = 1;
                                    if (prelBrFlag == 1) break;


                                    strAddress.Append(" " + this.DataLines[innText].ToString());

                                    if (RGxReplaceMobile.IsMatch(" " + strAddress.ToString()))
                                        strAddress.Replace(RGxReplaceMobile.Match(strAddress.ToString()).ToString(), "");

                                    if (rePhone.IsMatch(strAddress.ToString()))
                                        strAddress.Replace(rePhone.Match(strAddress.ToString()).ToString(), "");
                                    if (reMobile.IsMatch(strAddress.ToString()))
                                        strAddress.Replace(reMobile.Match(strAddress.ToString()).ToString(), "");
                                    if (reMobile1.IsMatch(strAddress.ToString()))
                                        strAddress.Replace(reMobile1.Match(strAddress.ToString()).ToString(), "");
                                    if (reEmail.IsMatch(strAddress.ToString()))
                                        strAddress.Replace(reEmail.Match(strAddress.ToString()).ToString(), "");
                                    string tReplaceStr = @"(local address|current|mailing|present|address|currentaddress|temporary|communication|:|permanent|e mail id|tele|phone|\+|dob-|dob|adress|state|current address|please|verify|your|in usa|–|cell no|cell|home|place of birth|e mail|e mail|e-mail|email id|e mail id|alternate email id|e-mail|e mail Id|email|cel| number|mob |CONTACT NO.-|contact no|contact|personal|to correspond|address|program|director|(resi)|(res)|envelopeback|program director|to correspond|mobile|tele|phone|location|,,|\+|Ph.No|- . ||D e c l a r a t i o n|CORRESPONDANCE)[s]?";
                                    opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                    #region "Replacing Not Address 1"

                                    //EduSpeFinal Replace
                                    if (EduSpeFinal != "")
                                    {
                                        try
                                        {
                                            if (EduSpeFinal.IndexOf(",") >= 0)
                                            {
                                                string[] Chr = null;
                                                Chr = EduSpeFinal.Split(',');
                                                for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                    strAddress.Replace(Chr[i].ToLower(), "");
                                            }
                                            else
                                            {
                                                strAddress.Replace(EduSpeFinal.ToLower(), "");
                                            }
                                        }
                                        catch { }
                                    }

                                    //Email Replace
                                    if (email != "")
                                    {
                                        try
                                        {
                                            if (email.IndexOf(",") >= 0)
                                            {
                                                string[] Chr = null;
                                                Chr = email.Split(',');
                                                for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                    strAddress.Replace(Chr[i], "");
                                            }
                                            else
                                            {
                                                tReplaceStr = @"(" + email + ")[s]?";
                                                opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                                strAddress.Replace(email, "");
                                                if (strAddress.ToString().ToLower().Contains(email) == true)
                                                {
                                                    string str = Regex.Replace(strAddress.ToString(), email, "", RegexOptions.IgnoreCase);
                                                    if (str.Trim() == "")
                                                        strAddress.Replace(strAddress.ToString(), "");
                                                    else
                                                    {
                                                        strAddress.Replace(strAddress.ToString(), "");
                                                        strAddress.Append(str);
                                                    }
                                                }
                                            }
                                        }
                                        catch { }
                                    }
                                    //Phone No Replace
                                    opReplacingnotAddressOne(ref strAddress);
                                    //Mobile No Replace
                                    opReplacingnotAddress(ref strAddress);

                                    if (fname != "")
                                    {
                                        tReplaceStr = @"(" + fname + ")[s]?";
                                        opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);
                                        if (this.DataLines[outText].Replace("   ", " ").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                            strAddress.Replace("   ", " ").Replace(fname.ToLower(), "");
                                        if (FlagPresent != 1)
                                            if (this.DataLines[outText].Replace("   ", " ").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                                strAddress.Replace("   ", " ").Replace(fname.ToLower(), "");
                                        if (this.DataLines[outText].Replace("   ", "").Replace("(", "").Replace(")", "").Replace("page", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                            strAddress.Replace("   ", "").Replace("(", "").Replace(")", "").Replace("page", "").ToString().ToLower().Replace(fname.ToLower(), "");

                                        strAddress.Replace(fname.ToLower().Replace("    ", " "), "");
                                    }
                                    if (DOB != "")
                                        strAddress.Replace(DOB.ToLower().Replace(" st", "st ").Replace("   ", " ").Trim(), "");

                                    strAddress.Replace("|  |", "").Replace("·", "").Replace("—", "").Replace("         ", "").Replace(", ,  -", "").Replace("       l   ", "").Replace("                                                   l ", "").ToString().Trim();
                                    #endregion

                                    // If Address Continue Based on PIN Number --Loop Extended  + 1
                                    if (innText + 2 < this.DataLines.Length - 1 && innText < 15 && (rgxAddInPIN.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) || rgxAddInPIN.IsMatch(this.DataLines[innText + 2].ToLower().Trim()))) continue;

                                    #region "Not Address Break the Loop ..."

                                    //Not Address
                                    if (email != "")
                                        if (this.DataLines[innText].ToLower().ToString().IndexOf(email.ToLower()) >= 0)
                                            break;
                                    if (email.IndexOf(",") >= 0)
                                    {
                                        int Emailflg = 0;
                                        string[] Chr = null;
                                        Chr = email.Split(',');
                                        for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                            if (this.DataLines[innText].ToString().IndexOf(Chr[i].ToString()) >= 0)
                                                Emailflg = 1;
                                        if (Emailflg == 1)
                                            break;
                                    }

                                    if (rgxAddress.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) != true && rgxAddress.IsMatch(this.DataLines[innText + 2].ToLower().Trim()) != true)
                                        if (mobile != "")
                                            if (this.DataLines[innText].ToString().IndexOf(mobile) >= 0)
                                                break;
                                            else if (this.DataLines[innText].ToString().Replace(" ", "").IndexOf(mobile) >= 0)
                                                break;

                                    if (rgxAddress.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) != true && rgxAddress.IsMatch(this.DataLines[innText + 2].ToLower().Trim()) != true)
                                        if (mobile != "" && mobile.StartsWith("0"))
                                            if (this.DataLines[innText].ToString().IndexOf(mobile.Remove(0, 1)) >= 0)
                                                break;
                                    if (rgxAddress.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) != true && rgxAddress.IsMatch(this.DataLines[innText + 2].ToLower().Trim()) != true)
                                        if (phone != "")
                                            if (this.DataLines[innText].ToString().IndexOf(phone) >= 0)
                                                break;
                                    if (rgxAddress.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) != true && rgxAddress.IsMatch(this.DataLines[innText + 2].ToLower().Trim()) != true)
                                        if (DOB != "")
                                            if (this.DataLines[innText].ToString().IndexOf(DOB) >= 0)
                                                break;

                                    if (rgxAddress.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) != true && rgxAddress.IsMatch(this.DataLines[innText + 2].ToLower().Trim()) != true)
                                        if (mobile.IndexOf(",") >= 0)
                                        {
                                            int MobileFlg = 0;
                                            string[] Chr = null;
                                            Chr = mobile.Split(',');
                                            for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                if (this.DataLines[innText].ToString().IndexOf(Chr[i].ToString()) >= 0)
                                                    MobileFlg = 1;

                                            if (MobileFlg == 1)
                                                break;
                                        }
                                    // Breaking the loop based on Resume Top Keywords .. (Eg: summary , objective etc...)
                                    if (exRemove.IsMatch(this.DataLines[innText].Trim())) break;
                                    #endregion
                                }
                            }
                        }
                    }
                    catch
                    {
                    }
                    finally
                    {
                        rgxAddress = null;
                    }
                }
                if (strAddress.Length > 11)
                {
                    tPresentAddress = strAddress.ToString().Replace("<", "").Replace(">", "");
                    if (sbPinCode == null || sbPinCode.Length < 2)
                    {
                        sbPinCode = new StringBuilder();
                        sbPinCode.Append(strAddress.ToString().Replace("<", "").Replace(">", ""));
                    }
                    if (tPresentAddress.Trim().Length > 250)
                        tPresentAddress = tPresentAddress.Trim().Substring(0, 249);
                    if (tPresentAddress.Trim().Length > 0)
                        tPresentAddress = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tPresentAddress);
                }
                #endregion

                strAddress = new StringBuilder();

                #region "getting address from perment address, etc..."
                //saravana
                if (strAddress.Length == 0)
                {
                    for (int outText = 0; outText < this.DataLines.Length && strAddress.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regParmenant, regParmenant);

                        if (FlagPresent == 1)
                        {
                            int floop = 7;
                            regAddress1 = new Regex(@"[\|\s,\{\(\:](current address|present address|present add:|local address|address for communication|communication address|contact address|contact address:|mailing address|correspondence address|corresspondence address|corresspondence address:|postal address|temporary address)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                            int Flag1 = 0;
                            int Flag2 = 0;
                            if (outText > 0)
                            {
                                Flag1 = opFindMatch0(this.DataLines[outText - 1].Trim(), regAddress1, regAddress1);
                                Flag2 = opFindMatch0(this.DataLines[outText].Trim(), regParmenant, regParmenant);
                            }
                            if (Flag1 == 1 && Flag2 == 1)
                                floop = 7;

                            for (int innText = outText; innText <= (outText + floop) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if ((opFindMatch0(this.DataLines[innText].Trim(), regLocationBr, regLocationBr1) == 1) ||
                                    regNotAddress.IsMatch(" " + this.DataLines[innText].Trim().ToLower()) ||
                                    rmSpace.Trim().IndexOf("Current address") == 0 || rmSpace.Trim().IndexOf("present address") >= 0 ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 || rmSpace.Trim().IndexOf("contact address") >= 0 ||
                                    rmSpace.Trim().IndexOf("language") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("linguistic abilities:") == 0 ||
                                    rmSpace.Trim().IndexOf("career objective") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("linguistic skills") == 0 ||
                                    rmSpace.Trim().IndexOf("requirements") == 0 || rmSpace.Trim().IndexOf("year") >= 0 ||
                                    rmSpace.Trim().IndexOf("respect") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0 || rmSpace.Trim().IndexOf("summary") >= 0 || rmSpace.Trim().IndexOf("skill") >= 0 ||
                                    rmSpace.Trim().IndexOf("objective") == 0 ||
                                    rmSpace.Trim().IndexOf("tel:") == 0 || rmSpace.Trim().IndexOf("nsr no") == 0 || rmSpace.Trim().IndexOf("passport details") == 0 || rmSpace.Trim().IndexOf("page  of") >= 0 || rmSpace.Trim().IndexOf("page of") >= 0)
                                {
                                    prelBrFlag = 1;
                                }
                                if (prelBrFlag == 1) break;

                                if (prelBrFlag != 1)
                                    if (rgxNotAddress.IsMatch(this.DataLines[innText].ToLower().Trim()))
                                        prelBrFlag = 1;

                                if (prelBrFlag == 1) break;
                                strAddress.Append(" " + this.DataLines[innText].ToString());

                                if (RGxReplaceMobile.IsMatch(" " + strAddress.ToString()))
                                    strAddress.Replace(RGxReplaceMobile.Match(strAddress.ToString()).ToString(), "");

                                if (rePhone.IsMatch(strAddress.ToString()))
                                    strAddress.Replace(rePhone.Match(strAddress.ToString()).ToString(), "");
                                if (reMobile.IsMatch(strAddress.ToString()))
                                    strAddress.Replace(reMobile.Match(strAddress.ToString()).ToString(), "");
                                if (reMobile1.IsMatch(strAddress.ToString()))
                                    strAddress.Replace(reMobile1.Match(strAddress.ToString()).ToString(), "");
                                if (reEmail.IsMatch(strAddress.ToString()))
                                    strAddress.Replace(reEmail.Match(strAddress.ToString()).ToString(), "");

                                string tReplaceStr = @"(home|ADDRESS &amp; NO\.|cell no|cell|address for communication|mailing|present|permanent address|address|temporary|communication|permanent|:-|:|e mail id|tele|phone|contact no|contact info|home|page|•|tel |mobile| for|correspondence|mail_id|permanent|adress|addres|residential|resi address|resi :|email|e mail| × |email id|dob-|dob|adress|state|current address|please|verify|your|in usa|–|cell no|cell|home|place of birth|e mail|e mail|e-mai|email id|e mail id|alternate email id|e-mail|e mail Id|name| id|cell number|mob |contact no|contact|curent location|personal|program director|to correspond|mobile|tele|phone|,,|, ,  -| Place|Ph.No|- .||D e c l a r a t i o n|Date|CORRESPONDANCE)[s]?";
                                opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                #region "Replacing Not Address"
                                //EduSpeFinal Replace
                                if (EduSpeFinal != "")
                                {
                                    try
                                    {
                                        if (EduSpeFinal.IndexOf(",") >= 0)
                                        {
                                            string[] Chr = null;
                                            Chr = EduSpeFinal.Split(',');
                                            for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                strAddress.Replace(Chr[i], "");
                                        }
                                        else
                                        {
                                            strAddress.Replace(EduSpeFinal, "");
                                        }
                                    }
                                    catch { }
                                }

                                //Email Replace
                                if (email != "")
                                {
                                    try
                                    {
                                        if (email.IndexOf(",") >= 0)
                                        {
                                            string[] Chr = null;
                                            Chr = email.Split(',');
                                            for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                strAddress.Replace(Chr[i], "");
                                        }
                                        else
                                        {
                                            tReplaceStr = @"(" + email + ")[s]?";
                                            opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);
                                            strAddress.Replace(email, "");
                                            if (strAddress.ToString().ToLower().Contains(email) == true)
                                            {
                                                string str = Regex.Replace(strAddress.ToString(), email, "", RegexOptions.IgnoreCase);
                                                if (str.Trim() == "")
                                                    strAddress.Replace(strAddress.ToString(), "");

                                            }
                                        }
                                    }
                                    catch { }
                                }

                                //Phone No Replace
                                opReplacingnotAddressOne(ref strAddress);

                                //Mobile No Replace
                                opReplacingnotAddress(ref strAddress);

                                //Name Replace
                                if (fname != "")
                                {
                                    tReplaceStr = @"(" + fname + ")[s]?";
                                    opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                    if (this.DataLines[outText].Replace("   ", " ").Replace(".", "").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                        strAddress.Replace(".", "").Replace("   ", " ").Replace(fname.ToLower(), "");
                                    if (FlagPresent != 1)
                                        if (this.DataLines[outText].Replace("   ", " ").Replace(".", " ").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                            strAddress.Replace(".", " ").Replace("   ", " ").Replace(fname.ToLower(), "");
                                    if (this.DataLines[outText].Replace("   ", "").Replace(".", " ").Replace("(", "").Replace(")", "").Replace("page", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                        strAddress.Replace("   ", "").Replace(".", " ").Replace("(", "").Replace(")", "").Replace("page", "").ToString().ToLower().Replace(fname.ToLower(), "");

                                    strAddress.Replace(fname.ToLower().Replace("    ", " "), "");
                                }

                                if (DOB != "")
                                    strAddress.Replace(DOB, "");

                                strAddress.Replace("|  |", "").Replace("·", "").Replace("—", "").Replace("         ", "").Replace("    ,    ", "").ToString().Trim();

                                //Not Address
                                if (email != "")
                                    if (this.DataLines[innText].ToLower().ToString().IndexOf(email.ToLower()) >= 0)
                                        break;

                                if (email.IndexOf(",") >= 0)
                                {
                                    int EmailFlag = 0;
                                    string[] Chr = null;
                                    Chr = email.Split(',');
                                    for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                        if (this.DataLines[innText].ToString().IndexOf(Chr[i].ToString()) >= 0)
                                            EmailFlag = 1;
                                    if (EmailFlag == 1)
                                        break;
                                }
                                if (mobile != "")
                                    if (this.DataLines[innText].ToString().IndexOf(mobile) >= 0)
                                        break;
                                if (mobile != "" && mobile.StartsWith("0"))
                                    if (this.DataLines[innText].ToString().IndexOf(mobile.Remove(0, 1)) >= 0)
                                        break;
                                if (phone != "")
                                    if (this.DataLines[innText].ToString().IndexOf(phone) >= 0)
                                        break;
                                if (DOB != "")
                                    if (this.DataLines[innText].ToString().IndexOf(DOB) >= 0)
                                        break;

                                if (mobile.IndexOf(",") >= 0)
                                {
                                    int MobileFlag = 0;
                                    string[] Chr = null;
                                    Chr = mobile.Split(',');
                                    for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                        if (this.DataLines[innText].ToString().IndexOf(Chr[i].ToString()) >= 0)
                                            MobileFlag = 1;
                                    if (MobileFlag == 1)
                                        break;
                                }


                                if (Flag1 == 1 && Flag2 == 1 && strAddress.Length > 2)
                                    innText = innText + 1;
                                #endregion
                                // Breaking the loop based on Resume Top Keywords .. (Eg: summary , objective etc...)
                                if (exRemove.IsMatch(this.DataLines[innText].Trim())) break;

                                if (Flag1 == 1 && Flag2 == 1)
                                    innText = innText + 1;
                            }
                        }
                    }

                    tParmenentAddress = strAddress.ToString().Replace("<", "").Replace(">", "");
                    if (tParmenentAddress.Trim().Length > 250)
                        tParmenentAddress = tParmenentAddress.Trim().Substring(0, 249);
                    if (tParmenentAddress.Trim().Length > 0)
                        tParmenentAddress = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tParmenentAddress);
                }
                #endregion

                #region "Current Address Second"
                // Present Address In First 
                strAddress = new StringBuilder();


                try
                {
                    if (strAddress.Length == 0 && tPresentAddress == "")
                    {
                        if (this.DataLines.Length > 5)
                        {
                            regAddress1 = new Regex(@"[\|\s,\{\(\:](current address|present address|present add:|local address|address for communication|communication address|contact address|contact address:|mailing address|correspondence address|corresspondence address|corresspondence address:|postal address|temporary address|flat no|puram)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                            for (int outText = 0; outText <= 6 && strAddress.ToString().Trim().Length <= 1; outText++)
                            {
                                FlagPresent = 0;
                                if (this.DataLines[outText].Replace("   ", " ").Replace(".", "").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                    FlagPresent = 1;
                                if (FlagPresent != 1)
                                    if (this.DataLines[outText].Replace("   ", " ").Replace(".", " ").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                        FlagPresent = 1;
                                if (this.DataLines[outText].Replace("   ", "").Replace(".", " ").Replace("(", "").Replace(")", "").Replace("page", "").Replace("-", " ").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                    FlagPresent = 1;

                                if (FlagPresent == 0 && outText < 15)
                                    if (rgxAddInPIN.IsMatch(this.DataLines[outText].Trim()))
                                        FlagPresent = 1;

                                int floop = 5;

                                int Flag1 = 0;
                                int Flag2 = 0;
                                if (outText > 0)
                                {
                                    Flag1 = opFindMatch0(this.DataLines[outText - 1].Trim(), regAddress1, regAddress1);
                                    Flag2 = opFindMatch0(this.DataLines[outText].Trim(), regParmenant, regParmenant);
                                    if (Flag1 == 1 && Flag2 == 1)
                                    {
                                        floop = 5;
                                        FlagPresent = 1;
                                        outText = outText + 2;
                                    }
                                }

                                if (FlagPresent == 1)
                                {
                                    for (int innText = outText; innText <= (outText + floop) && innText < this.DataLines.Length; innText++)
                                    {
                                        prelBrFlag = 0;
                                        string rmSpace = this.DataLines[innText].ToLower().Trim();
                                        if ((opFindMatch0(this.DataLines[innText].Trim(), regLocNot1, regLocNot1) == 1) ||
                                           regNotAddress.IsMatch(" " + this.DataLines[innText].Trim().ToLower()) ||
                                           rmSpace.Trim().IndexOf("same as above") >= 0 ||          // |same as above|language|phone|mobile|linguistic abilities:|career objective|Preferred Industry
                                           rmSpace.Trim().IndexOf("language") >= 0 ||              //  |linguistic skills|requirements|respect|year|respect|annexure|summary|skill|education|objective|passport details|vice president
                                            //   |tel:|client sales|client|curriculum vitae|executive|nsr no|page  of|objective|to work|i have|experience|human resources|profile
                                           rmSpace.Trim().IndexOf("linguistic abilities:") == 0 ||
                                           rmSpace.Trim().IndexOf("career objective") == 0 ||
                                           rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                           rmSpace.Trim().IndexOf("linguistic skills") == 0 ||
                                           rmSpace.Trim().IndexOf("requirements") == 0 || rmSpace.Trim().IndexOf("year") >= 0 ||
                                           rmSpace.Trim().IndexOf("respect") == 0 ||
                                           rmSpace.Trim().IndexOf("annexure") == 0 || rmSpace.Trim().IndexOf("summary") >= 0 || rmSpace.Trim().IndexOf("skill") >= 0 || rmSpace.Trim().IndexOf("curriculum vitae") >= 0 ||  //Curriculum Vitae
                                           this.DataLines[innText].Replace("            ", "").Length > 180 ||
                                           rmSpace.Trim().IndexOf("objective") == 0 || rmSpace.Trim().IndexOf("education") == 0 ||
                                           rmSpace.Trim().IndexOf("tel:") == 0 || rmSpace.Trim().IndexOf("client sales") == 0 || rmSpace.Trim().IndexOf("client") == 0 || rmSpace.Trim().IndexOf("executive") == 0 || rmSpace.Trim().IndexOf("nsr no") == 0 || rmSpace.Trim().IndexOf("passport details") == 0 || rmSpace.Trim().IndexOf("page  of") >= 0 || rmSpace.Trim().IndexOf("page of") >= 0 || rmSpace.Trim().IndexOf("objective") >= 0 || rmSpace.Trim().IndexOf("to work") >= 0 || rmSpace.Trim().IndexOf("i have") >= 0 || rmSpace.Trim().IndexOf("experience") >= 0 || rmSpace.Trim().IndexOf("human resources") >= 0 || rmSpace.Trim().IndexOf("vice president") >= 0 || rmSpace.Trim().IndexOf("profile") >= 0) // Profile
                                        {
                                            prelBrFlag = 1;
                                        }
                                        if (prelBrFlag == 1) break;

                                        if (prelBrFlag != 1)
                                            if (rgxNotAddress.IsMatch(" " + this.DataLines[innText].ToLower().Trim() + " "))
                                                prelBrFlag = 1;
                                        if (prelBrFlag == 1) break;

                                        strAddress.Append(" " + this.DataLines[innText].ToString().Trim());

                                        if (RGxReplaceMobile.IsMatch(" " + strAddress.ToString()))
                                            strAddress.Replace(RGxReplaceMobile.Match(strAddress.ToString()).ToString(), "");
                                        if (rePhone.IsMatch(strAddress.ToString()))
                                            strAddress.Replace(rePhone.Match(strAddress.ToString()).ToString(), "");
                                        if (reMobile.IsMatch(strAddress.ToString()))
                                            strAddress.Replace(reMobile.Match(strAddress.ToString()).ToString(), "");
                                        if (reMobile1.IsMatch(strAddress.ToString()))
                                            strAddress.Replace(reMobile1.Match(strAddress.ToString()).ToString(), "");
                                        if (reEmail.IsMatch(strAddress.ToString()))
                                            strAddress.Replace(reEmail.Match(strAddress.ToString()).ToString(), "");

                                        //Replace Not Address//
                                        string tReplaceStr = @"(Ph:|home|cell no|mobile no|cell|address for communication|mailing|present|permanent address|address|temporary|communication|permanent|e mail id|phone|\+1|\+|contact no|contact info|home|page|•|mobile| for|correspondence|mail_id|permanent|adress|addres|residential|resi address|resi :|email|e mail| × |email id|dob-|dob|adress|state|current address|please|verify|your|in usa|–|cell no|cell|home|place of birth|e mail|e mail|e-mail|email id|e mail id|alternate email id|e-mail|e mail Id|name| id|cell number|mob |contact no|contact|curent location|personal|program director|to correspond|mobile|tele|phone|●|,,|mail id| mail|\\+91|91 ;|tel. |Ph:|:|Provincial|, ,  -|Ph.No|- .||Ph #:|D e c l a r a t i o n|Software Development|Advisor|CORRESPONDANCE)[s]?";
                                        opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                        #region "Replacing Not Address 3"
                                        //EduSpeFinal Replace
                                        if (EduSpeFinal != "")
                                        {
                                            try
                                            {
                                                if (EduSpeFinal.IndexOf(",") >= 0)
                                                {
                                                    string[] Chr = null;
                                                    Chr = EduSpeFinal.Split(',');
                                                    for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                        strAddress.Replace(Chr[i].ToLower(), "");
                                                }
                                                else
                                                    strAddress.Replace(EduSpeFinal, "");

                                            }
                                            catch { }
                                        }

                                        //Email Replace //
                                        if (email != "")
                                        {
                                            try
                                            {
                                                if (email.IndexOf(",") >= 0)
                                                {
                                                    string[] Chr = null;
                                                    Chr = email.Split(',');
                                                    for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                        strAddress.Replace(Chr[i], "");
                                                }
                                                else
                                                {
                                                    tReplaceStr = @"(" + email + ")[s]?";
                                                    opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                                    strAddress.Replace(email.ToLower(), "");
                                                    if (strAddress.ToString().ToLower().Contains(email) == true)
                                                    {
                                                        string str = Regex.Replace(strAddress.ToString(), email, "", RegexOptions.IgnoreCase);
                                                        if (str.Trim() == "")
                                                            strAddress.Replace(strAddress.ToString(), "");
                                                    }
                                                }
                                            }
                                            catch { }
                                        }

                                        //Phone No Replace
                                        opReplacingnotAddressOne(ref strAddress);

                                        //Mobile No Replace
                                        opReplacingnotAddress(ref strAddress);

                                        try
                                        {
                                            if (strAddress.ToString().IndexOf("_") > 0 && strAddress.ToString().IndexOf("@") > 0 && strAddress.Length < 15)
                                                strAddress.Replace(" " + this.DataLines[innText].ToLower().Replace("address for communication", "").Replace("mailing", "").Replace("present", "").Replace("permanent address", "").Replace("address", "").Replace("temporary", "").Replace("communication", "").Replace("-", "").Replace(":", " ").Replace("permanent", "").Replace("e mail id", "").Replace("tele", "").Replace("phone", "").Replace("         ", "").Replace("+91", "").Replace("(", "").Replace(")", "").Replace("contact no", "").Replace("contact info", "").Replace("|", "").Replace("home", "").Replace("cell no", "").Replace("cell", "").Replace(")", "").Replace("page", "").Replace("•", "").Replace("tele", "").Replace("tel ", "").Replace("mobile", "").Replace("+", "").Replace(" for", "").Replace("correspondence", "").Replace("mail_id", "").Replace("permanent", "").Replace("adress", "").Replace(" for", "").Replace("correspondence", "").Replace("permenant", "").Replace("adress", "").Replace("addres", "").Replace("residential", "").Replace("resi address", "").Replace("resi :", "").Replace("email", "").Replace("e mail", "").Replace("email id", "").Replace(" × ", "").Replace("dob-", "").Replace("dob", "").Replace("adress", "").Replace("state", "").Replace("current address", "").Replace("please", "").Replace("verify", "").Replace("your", "").Replace("in usa", "").Replace("–", "").Replace("cell", "").Replace("home", "").Replace("place of birth", "").Replace("e mail", "").Replace("e mail", "").Replace("e-mai", "").Replace("email id", "").Replace("e mail id", "").Replace("alternate email id", "").Replace("e-mail", "").Replace("e mail Id", "").Replace("name", "").Replace(" id", "").Replace("cell number", "").Replace("mob ", "").Replace("contact", "").Trim(), "");
                                        }
                                        catch { }
                                        //Name Replace
                                        #region "Name Replace"

                                        if (fname != "")
                                        {
                                            //Replace Not Address//
                                            tReplaceStr = @"(" + fname + ")[s]?";
                                            opReplacingnotMailingAddress(ref  strAddress, tReplaceStr);

                                            if (this.DataLines[outText].Replace("   ", " ").Replace(".", "").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                                strAddress.Replace(".", "").Replace("   ", " ").Replace(fname, "");
                                            if (FlagPresent != 1)
                                                if (this.DataLines[outText].Replace("   ", " ").Replace(".", " ").Replace("(", "").Replace(")", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                                    strAddress.Replace(".", " ").Replace("   ", " ").Replace(fname.ToLower(), "");
                                            if (this.DataLines[outText].Replace("   ", "").Replace(".", " ").Replace("(", "").Replace(")", "").Replace("page", "").ToLower().ToString().IndexOf(fname.ToLower()) >= 0)
                                                strAddress.Replace("   ", "").Replace(".", " ").Replace("(", "").Replace(")", "").Replace("page", "").ToString().ToLower().Replace(fname.ToLower(), "");
                                            strAddress.ToString().Replace(fname.ToLower().Replace("    ", " "), "");
                                            strAddress.Replace(fname, "").Replace(" l  Ph", "");
                                        }

                                        #endregion

                                        #region "DOB Replace"
                                        if (DOB != "")
                                            strAddress.Replace(DOB, "");

                                        strAddress.Replace("+91 ", "").Replace("|  |", "").Replace("·", "").Replace("         ", "").Replace("(", "").Replace(")", "").ToString().Trim();
                                        #endregion

                                        #endregion

                                        // If Address Continue Based on PIN Number --Loop Extended  + 1
                                        if (innText + 2 < this.DataLines.Length - 1 && innText < 15 && (rgxAddInPIN.IsMatch(this.DataLines[innText + 1].ToLower().Trim()) || rgxAddInPIN.IsMatch(this.DataLines[innText + 2].ToLower().Trim()))) continue;

                                        //Not Address
                                        #region "Break Address Replace"

                                        if (email != "")
                                        {
                                            if (innText > 1 && this.DataLines[innText].ToString() == email)
                                                if (this.DataLines[innText].ToLower().ToString().IndexOf(email.ToLower()) >= 0)
                                                    break;
                                        }

                                        if (email.IndexOf(",") >= 0)
                                        {
                                            int EmailFlag = 0;
                                            string[] Chr = null;
                                            Chr = email.Split(',');
                                            for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                if (this.DataLines[innText].ToString().IndexOf(Chr[i].ToString()) >= 0)
                                                    EmailFlag = 1;
                                            if (EmailFlag == 1)
                                                break;
                                        }

                                        if (mobile != "")
                                            if (this.DataLines[innText].ToString().IndexOf(mobile) >= 0)
                                                break;

                                        if (mobile != "" && mobile.StartsWith("0"))
                                            if (this.DataLines[innText].ToString().IndexOf(mobile.Remove(0, 1)) >= 0)
                                                break;

                                        if (phone != "")
                                            if (this.DataLines[innText].ToString().IndexOf(phone) >= 0)
                                                break;

                                        if (DOB != "")
                                            if (this.DataLines[innText].ToString().IndexOf(DOB) >= 0)
                                                break;

                                        if (mobile.IndexOf(",") >= 0)
                                        {
                                            int MobileFlag = 0;
                                            string[] Chr = null;
                                            Chr = mobile.Split(',');
                                            for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                                                if (this.DataLines[innText].ToString().IndexOf(Chr[i].ToString()) >= 0)
                                                    MobileFlag = 1;
                                            if (MobileFlag == 1)
                                                break;
                                        }

                                        #endregion

                                        // Breaking the loop based on Resume Top Keywords .. (Eg: summary , objective etc...)
                                        if (exRemove.IsMatch(this.DataLines[innText].Trim())) break;
                                        if (Flag1 == 1 && Flag2 == 1)
                                            innText = innText + 1;
                                    }
                                }
                            }
                        }

                        if (strAddress.ToString().Trim().Length >= 8)
                        {
                            tPresentAddress = strAddress.ToString().Replace("<", "").Replace(">", "");
                            if (sbPinCode == null || sbPinCode.Length < 2)
                            {
                                sbPinCode = new StringBuilder();
                                sbPinCode.Append(strAddress.ToString().Replace("<", "").Replace(">", ""));
                            }
                            if (tPresentAddress.Trim().Length > 250)
                                tPresentAddress = tPresentAddress.Trim().Substring(0, 249);
                            if (tPresentAddress.Trim().Length > 0)
                                tPresentAddress = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tPresentAddress);
                        }
                    }
                }
                catch { }

                #endregion

            }
            catch { }
        }

        #endregion

        #region "Replace Not Address1"

        private void opReplacingnotAddress(ref StringBuilder _sbMatchString)
        {
            //Mobile No Replace
            String Mob = "";
            String Mob1 = "";
            String Mob2 = "";
            if (mobile != "" && mobile.Length > 7)
            {
                try
                {
                    if (mobile.IndexOf(",") >= 0)
                    {
                        string[] Chr = null;
                        Chr = mobile.Split(',');
                        for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                        {
                            _sbMatchString.Replace(Chr[i], "");
                            //123 45678910
                            Mob = Chr[i].Substring(0, 3).ToString();
                            Mob1 = Chr[i].Substring(3).ToString();
                            _sbMatchString.Replace(Mob + " " + Mob1, "");
                            //12345 12345
                            Mob = Chr[i].Substring(0, 5).ToString();
                            Mob1 = Chr[i].Substring(5).ToString();
                            _sbMatchString.Replace(Mob + " " + Mob1, "");

                            //123 451 2345
                            Mob = Chr[i].Substring(0, 3).ToString();
                            Mob1 = Chr[i].Substring(3, 3).ToString();
                            Mob2 = Chr[i].Substring(6).ToString();
                            _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");
                        }
                    }
                    else
                    {
                        //91-0
                        _sbMatchString.Replace("91-" + mobile, "");
                        _sbMatchString.Replace("91-0" + mobile, "");
                        _sbMatchString.Replace("+91" + mobile, "");
                        _sbMatchString.Replace("91 " + mobile, "");
                        _sbMatchString.Replace("91" + mobile, "");
                        _sbMatchString.Replace(mobile, "");
                    }
                }
                catch { }

                if (mobile.StartsWith("0"))
                {
                    String MobNo = mobile;
                    _sbMatchString.Replace(mobile.Remove(0, 1), "");
                    //123 45678910
                    Mob = mobile.Substring(1, 3).ToString();
                    Mob1 = mobile.Substring(4).ToString();
                    _sbMatchString.Replace(Mob + " " + Mob1, "");

                    //12345 12345
                    Mob = mobile.Substring(1, 5).ToString();
                    Mob1 = mobile.Substring(6).ToString();
                    _sbMatchString.Replace(Mob + " " + Mob1, "");

                    //123451 2345
                    Mob = mobile.Substring(0, 6).ToString();
                    Mob1 = mobile.Substring(6).ToString();
                    _sbMatchString.Replace("91 " + Mob + " " + Mob1, "");

                    //123 451 2345
                    Mob = mobile.Substring(1, 3).ToString();
                    Mob1 = mobile.Substring(4, 3).ToString();
                    Mob2 = mobile.Substring(7).ToString();
                    _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");



                }

                _sbMatchString.Replace(mobile, "");
                Mob = mobile.Substring(0, 3).ToString();
                Mob1 = mobile.Substring(3).ToString();
                _sbMatchString.Replace(Mob + " " + Mob1, "");

                //12345 12345
                Mob = mobile.Substring(0, 5).ToString();
                Mob1 = mobile.Substring(5).ToString();
                _sbMatchString.Replace("91" + " " + Mob + " " + Mob1, "");
                _sbMatchString.Replace(Mob + " " + Mob1, "");

                //123 451 2345
                Mob = mobile.Replace(" ", "").Substring(0, 3).ToString();
                Mob1 = mobile.Replace(" ", "").Substring(3, 3).ToString();
                Mob2 = mobile.Replace(" ", "").Substring(6).ToString();
                _sbMatchString.Replace("91   " + Mob + " " + Mob1 + " " + Mob2, "");
                _sbMatchString.Replace("91 " + Mob + "" + Mob1 + " " + Mob2, "");//91 932424 6008
                _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");

                if (mobile.Contains(",") == true)
                {
                    string[] Chr = null;
                    Chr = mobile.Split(',');
                    for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                    {
                        Mob = Chr[i].Replace(" ", "").Substring(0, 3).ToString();
                        Mob1 = Chr[i].Replace(" ", "").Substring(3, 3).ToString();
                        Mob2 = Chr[i].Replace(" ", "").Substring(6).ToString();

                        //908 472-2671
                        _sbMatchString.Replace(Mob + " " + Mob1 + "-" + Mob2.Replace("-", ""), "");
                        //(334) 462 9642
                        _sbMatchString.Replace("(" + Mob + ") " + Mob1 + " " + Mob2.Replace("-", ""), "");
                        //(949)981-5913
                        _sbMatchString.Replace("(" + Mob + ")" + Mob1 + "-" + Mob2.Replace("-", ""), "");

                        _sbMatchString.Replace("(" + Mob + ") " + Mob1 + "-" + Mob2.Replace("-", ""), "");
                        _sbMatchString.Replace("(" + Mob + ") " + Mob1 + " - " + Mob2.Replace("-", ""), "");
                    }

                }
                else
                {

                    //908 472-2671
                    _sbMatchString.Replace(Mob + " " + Mob1 + "-" + Mob2, "");
                    //(334) 462 9642
                    _sbMatchString.Replace("(" + Mob + ") " + Mob1 + " " + Mob2.Replace("-", ""), "");
                    //(949)981-5913
                    _sbMatchString.Replace("(" + Mob + ")" + Mob1 + "-" + Mob2.Replace("-", ""), "");

                    _sbMatchString.Replace("(" + Mob + ") " + Mob1 + "-" + Mob2.Replace("-", ""), "").Replace("( )", "");
                    //201-310-0949
                    _sbMatchString.Replace("" + Mob + "-" + Mob1 + "-" + Mob2.Replace("-", ""), "");
                    // (203) 492 - 9625 
                    _sbMatchString.Replace("(" + Mob + ") " + Mob1 + " - " + Mob2.Replace("-", ""), "");
                    _sbMatchString.Replace(mobile, "").Replace(";", "");
                }



            }
        }

        private void opReplacingnotAddressOne(ref StringBuilder _sbMatchString)
        {
            //Mobile No Replace
            String Mob = "";
            String Mob1 = "";
            String Mob2 = "";
            if (phone != "" && phone.Length > 7)
            {
                try
                {
                    if (phone.IndexOf(",") >= 0)
                    {
                        string[] Chr = null;
                        Chr = phone.Split(',');
                        for (int i = 0; i <= Chr.GetUpperBound(0); i++)
                        {
                            _sbMatchString.Replace(Chr[i], "");
                            //123 45678910
                            Mob = Chr[i].Substring(0, 3).ToString();
                            Mob1 = Chr[i].Substring(3).ToString();
                            _sbMatchString.Replace(Mob + " " + Mob1, "");
                            //12345 12345
                            Mob = Chr[i].Substring(0, 5).ToString();
                            Mob1 = Chr[i].Substring(5).ToString();
                            _sbMatchString.Replace(Mob + " " + Mob1, "");

                            //123 451 2345
                            Mob = Chr[i].Substring(0, 3).ToString();
                            Mob1 = Chr[i].Substring(3, 3).ToString();
                            Mob2 = Chr[i].Substring(6).ToString();
                            _sbMatchString.Replace(Mob + "-" + Mob1 + "-" + Mob2, "");
                            _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");


                        }

                    }
                    else
                    {
                        _sbMatchString.Replace(phone, "");

                        _sbMatchString.Replace("91-" + phone, "");
                        _sbMatchString.Replace("91-0" + phone, "");
                        _sbMatchString.Replace("+91" + phone, "");
                        _sbMatchString.Replace("91 " + phone, "");
                        _sbMatchString.Replace("91" + phone, "");
                        //1234 1234 Phone
                        Mob = phone.Substring(0, 4).ToString();
                        Mob1 = phone.Substring(4).ToString();
                        _sbMatchString.Replace(Mob + " " + Mob1, "");

                    }
                }
                catch { }

                if (phone.StartsWith("0"))
                {
                    String MobNo = mobile;
                    _sbMatchString.Replace(phone.Remove(0, 1), "");
                    //123 45678910
                    Mob = phone.Substring(1, 3).ToString();
                    Mob1 = phone.Substring(4).ToString();
                    _sbMatchString.Replace(Mob + " " + Mob1, "");

                    //12345 12345
                    Mob = phone.Substring(1, 5).ToString();
                    Mob1 = phone.Substring(6).ToString();
                    _sbMatchString.Replace(Mob + " " + Mob1, "");

                    //123 451 2345
                    Mob = phone.Substring(1, 3).ToString();
                    Mob1 = phone.Substring(4, 3).ToString();
                    Mob2 = phone.Substring(7).ToString();
                    _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");

                }
                if (phone.StartsWith("91"))
                {
                    String MobNo = mobile;
                    _sbMatchString.Replace("91-" + phone.Remove(0, 2), "");
                    _sbMatchString.Replace(phone.Remove(0, 2), "");
                    //123 45678910
                    Mob = phone.Substring(2, 3).ToString();
                    Mob1 = phone.Substring(5).ToString();
                    _sbMatchString.Replace(Mob + " " + Mob1, "");

                    //12345 12345
                    Mob = phone.Substring(2, 5).ToString();
                    Mob1 = phone.Substring(7).ToString();
                    _sbMatchString.Replace("91" + " " + Mob + " " + Mob1, "");
                    _sbMatchString.Replace(Mob + " " + Mob1, "");
                    try
                    {
                        //123 451 2345
                        Mob = phone.Substring(2, 3).ToString();
                        Mob1 = phone.Substring(5, 3).ToString();
                        Mob2 = phone.Substring(8).ToString();
                        _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");
                    }
                    catch { }

                }

                _sbMatchString.Replace(phone, "");
                Mob = phone.Substring(0, 3).ToString();
                Mob1 = phone.Substring(3).ToString();
                _sbMatchString.Replace(Mob + "-" + Mob1, "");
                _sbMatchString.Replace(Mob + "   " + Mob1, "");
                _sbMatchString.Replace(Mob + " " + Mob1, "");

                //12345 12345
                Mob = phone.Substring(0, 5).ToString();
                Mob1 = phone.Substring(5).ToString();
                _sbMatchString.Replace(Mob + " " + Mob1, "");

                //123 451 2345
                Mob = phone.Substring(0, 3).ToString();
                Mob1 = phone.Substring(3, 3).ToString();
                Mob2 = phone.Substring(6).ToString();
                //201-310-0949
                _sbMatchString.Replace("" + Mob + "-" + Mob1 + "-" + Mob2.Replace("-", ""), "");
                _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");
                //(609) 269-5362
                _sbMatchString.Replace("(" + Mob + ") " + Mob1 + "-" + Mob2, "");
                //631.974.4934
                _sbMatchString.Replace("" + Mob + "." + Mob1 + "." + Mob2, "");
                //(646)415-3911
                _sbMatchString.Replace("(" + Mob + ")" + Mob1 + "-" + Mob2, "");
                //1617 692 0786
                Mob = phone.Substring(0, 4).ToString();
                Mob1 = phone.Substring(4, 3).ToString();
                Mob2 = phone.Substring(7).ToString();
                _sbMatchString.Replace(Mob + " " + Mob1 + " " + Mob2, "");
                _sbMatchString.Replace(phone, ""); //

            }
        }

        private void opReplacingnotMailingAddress(ref StringBuilder _sbMatchString, string tReplaceString)
        {
            if (_sbMatchString.ToString().Length > 1)
                ReplaceCommonWordsInAddress(ref _sbMatchString, tReplaceString);

        }
        #endregion

        #region "Get Language"
        public string tLanguage = "";
        private void opGetLanguage()
        {
            try
            {
                int prelBrFlag = 0, FlagPresent = 0;

                #region "Candidate Linguistic Skills"
                Regex regLanguage = null;
                Regex rgxNotLanguage = null;
                MatchCollection GrdMtch = null;
                try
                {
                    regLanguage = new Regex(@"[\|\s,\{\(\:](Linguistic Capabilities|Linguistic Skills|Language Known|Languages Known|Linguistic Abilities|Languages|Language acquisitions|Fluent in|Knowledge in|fluent in|Language Certifications|Language|conversant with|Linguistic Proficiency|Lingustic Proficiency)[:\s]?[:\)\}\-\s]?", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                    string tNotLanguage = "team player|recruited|qualifications|recruitment| minorities";
                    rgxNotLanguage = new Regex(@"[\|\s,\{\(\:](" + tNotLanguage + @")[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    tLanguage = "";
                    //for (int outText = 0; outText < this.DataLines.Length && tLanguage.ToString().Trim().Length <= 1; outText++)
                    for (int outText = 0; outText < this.DataLines.Length; outText++)
                    {
                        FlagPresent = opFindMatchLanguage(this.DataLines[outText].Trim(), regLanguage, regLanguage);
                        if (FlagPresent == 1)
                        {
                            if (this.DataLines[outText - 1].ToLower().IndexOf("technical skills") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("technical") >= 0 || (this.DataLines[outText - 1].ToLower().IndexOf("skills") >= 0 && this.DataLines[outText].ToLower().IndexOf("fluent in") < 0 && this.DataLines[outText].ToLower().IndexOf("knowledge in") < 0) || this.DataLines[outText - 1].ToLower().IndexOf("computer") >= 0)
                            {
                                continue;
                            }
                            for (int innText = outText; innText <= (outText + 12) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                    rgxNotLanguage.IsMatch(" " + this.DataLines[innText].Trim().ToLower()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0 ||
                                    rmSpace.Trim().IndexOf("teacher") >= 0 ||
                                    rmSpace.Trim().IndexOf("nationality") == 0)
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                GrdMtch = regxLanguage.Matches(this.DataLines[innText].ToString());
                                if (GrdMtch.Count > 0)
                                    opAssignLanguage(GrdMtch);
                            }
                        }
                    }
                }
                catch
                {

                }
                finally
                {
                    regLanguage = null;
                    rgxNotLanguage = null;
                    GrdMtch = null;
                }
                tLanguage = opGetParseUniqueData(tLanguage);
                if (tLanguage.Trim().Length > 250)
                    tLanguage = tLanguage.Trim().Substring(0, 249);
                if (tLanguage.Trim().Length > 0)
                    tLanguage = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tLanguage.ToLower());
                #endregion
            }
            catch { }
        }

        private void opAssignLanguage(MatchCollection mtch)
        {
            try
            {
                string tResLanguage = "";
                foreach (Match m in mtch)
                {
                    string str = m.Value.ToString().Trim().Replace(",", "").Replace("(", "").Replace(")", "").Replace(":", "");

                    DataRow[] Drow;
                    string tReturnString = "Title ='" + str + "'";
                    Drow = objDSLan.Tables[0].Select(tReturnString);
                    int i = 0;
                    if (Drow.Length > 0)
                    {
                        for (i = 0; i <= Drow.Length - 1; i++)
                            tResLanguage += Drow[i]["Title"].ToString() + ",";
                    }
                    ////string XpathString = "HC_FCOMMON_COMMON_DATA//HCM_LANGUAGE[Title[.= '" + str.Replace("(","")   + "']]/Title";
                    ////FCommon.objfXMLSpecialization.FirstChild.LastChild.Name.ToString()
                    ////string XpathString = FCommon.objfXMLLanguages.FirstChild.Name.ToString() + "//" + FCommon.objfXMLLanguages.FirstChild.FirstChild.LocalName.ToString() + "[Title[.= '" + str.Replace("(", "") + "']]/Title";

                    //string XpathString = FCommon.objfXMLLanguages.FirstChild.Name.ToString() + "//" + FCommon.objfXMLLanguages.FirstChild.LastChild.Name.ToString() + "[Title[.= '" + str.Replace("(", "") + "']]/Title";
                    //System.Xml.XmlNodeList _nodelist = FCommon.objfXMLLanguages.SelectNodes(XpathString);
                    //for (int iSourceCnt = 0; iSourceCnt <= _nodelist.Count - 1; iSourceCnt++)
                    //    if (_nodelist.Item(iSourceCnt).InnerText.Trim() != "")
                    //    {
                    //        tResLanguage += _nodelist.Item(iSourceCnt).InnerText.Trim() + ",";
                    //    }
                }
                if (tResLanguage != "")
                    tLanguage += tResLanguage;
            }
            catch
            {
            }
        }
        #endregion

        #region "Get Passport and Pan Details"
        public string tPassportDateOfIssue = "", tPassportDateofExpiry = "", tPanNo = "", tPassportIssuePlace = "", tFatherName = "", tNSRNumber = "", tMaritalStatus = "";
        private void opGetPassPortAndPanDetails()
        {
            try
            {
                StringBuilder strIssuedate = null; int prelBrFlag = 0, FlagPresent = 0;
                strIssuedate = new StringBuilder();
                Regex regExpiryDate = null;
                regExpiryDate = new Regex(@"\b(Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid|Date of Expire|Expiry|Valid Till|VALID UPTO)\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                Regex regIssueDate = null;
                regIssueDate = new Regex(@"[\|\s,\{\(\:](Passport Valid From|Passport Date of Issue|Passport Issue Date|Passport Issued Date|Passport Date|Issue Date|Date of Issue)[:\s]?[:\)\}\-\s]?", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                #region "Pasport Issue Date"
                Regex regNotDate = null;
                string tIssueDate = "";
                try
                {
                    regNotDate = new Regex(@"[\|\s,\{\(\:](Father’s name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    for (int outText = 0; outText < this.DataLines.Length && strIssuedate.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regIssueDate, regIssueDate);
                        if (FlagPresent == 1)
                        {
                            if (this.DataLines[outText - 1].ToLower().IndexOf("Technical Skills") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("Technical") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("skills") >= 0)
                                continue;
                            for (int innText = outText; innText <= (outText + 1) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                     regNotDate.IsMatch(" " + this.DataLines[innText].Trim()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0)
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                try
                                {
                                    tIssueDate = "";
                                    if (regExpiryDate.IsMatch(this.DataLines[innText].Trim()) && regIssueDate.IsMatch(" " + this.DataLines[innText].Trim()))
                                        if (regExpiryDate.Match(this.DataLines[innText].Trim()).Index > regIssueDate.Match(this.DataLines[innText].Trim()).Index)
                                        {
                                            tIssueDate = this.DataLines[innText].Trim();
                                            tIssueDate = tIssueDate.Remove(regExpiryDate.Match(this.DataLines[innText].Trim()).Index, (tIssueDate.Length - regExpiryDate.Match(this.DataLines[innText].Trim()).Index));
                                        }
                                }
                                catch { }
                                if (tIssueDate == "")
                                    strIssuedate.Append(" " + this.DataLines[innText].ToLower().Replace("local address", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace("passport date of expiry", "").Replace("Expiry", "").Replace("date", "").Replace("of", "").Replace("on", "").Replace("valid", "").Replace("from", "").Replace("passport", "").Replace("no", "").Replace("pass", "").Replace("port", "").Replace("issue", "").Replace(":", "").Replace("expiry", "").Replace("-", "/").Trim());
                                else
                                    strIssuedate.Append(" " + tIssueDate.ToLower().Replace("local address", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace("passport date of expiry", "").Replace("Expiry", "").Replace("date", "").Replace("of", "").Replace("on", "").Replace("valid", "").Replace("from", "").Replace("passport", "").Replace("no", "").Replace("pass", "").Replace("port", "").Replace("issue", "").Replace(":", "").Replace("expiry", "").Replace("-", "/").Trim());

                                if (strIssuedate.ToString().Trim() != "")
                                    break;
                            }
                        }
                    }

                }
                catch
                {

                }
                finally
                {
                    regNotDate = null;

                }
                try
                {
                    try
                    {
                        if (strIssuedate.ToString().Contains("upto"))
                            strIssuedate = strIssuedate.Remove(strIssuedate.ToString().IndexOf("upto"), strIssuedate.Length - strIssuedate.ToString().IndexOf("upto"));
                    }
                    catch { }
                    string date1 = strIssuedate.ToString().Replace("<", "").Replace(">", "").Replace("(", "").Replace(")", "").Trim();
                    string[] formats = { "dd/MM/yyyy", "d/MM/yyyy" };
                    DateTime dateTime = DateTime.ParseExact(date1, formats, new System.Globalization.CultureInfo("en-US"), System.Globalization.DateTimeStyles.None);

                    tPassportDateOfIssue = dateTime.ToString();
                }
                catch { }

                //tPassportDateOfIssue = strIssuedate.ToString().Replace("<", "").Replace(">", "");
                if (tPassportDateOfIssue.Trim().Length > 250)
                    tPassportDateOfIssue = tPassportDateOfIssue.Trim().Substring(0, 249);
                if (tPassportDateOfIssue.Trim().Length > 0)
                    tPassportDateOfIssue = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tPassportDateOfIssue.ToLower());

                #endregion

                #region "Pasport Expiry Date"
                StringBuilder strExpiryDate = null;
                strExpiryDate = new StringBuilder();
                Regex regNotExpDate = null;
                string tExpDate = "";
                try
                {
                    regNotExpDate = new Regex(@"[\|\s,\{\(\:](phone|mobile|pin code|pincode|Father’s name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|Passport Valid From|Passport Date of Issue|Passport Issue Date|Passport Issued Date|Passport Date)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    for (int outText = 0; outText < this.DataLines.Length && strExpiryDate.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch2(this.DataLines[outText].Trim().Replace("(", ""), regExpiryDate, regExpiryDate);
                        if (FlagPresent == 1)
                        {
                            if (this.DataLines[outText - 1].ToLower().IndexOf("technical skills") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("technical") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("skills") >= 0)
                                continue;
                            for (int innText = outText; innText <= (outText + 1) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                    regNotExpDate.IsMatch(" " + this.DataLines[innText].Trim()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0)//Annexure
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;

                                try
                                {
                                    tExpDate = "";
                                    if (regExpiryDate.IsMatch(this.DataLines[innText].Trim()) && regIssueDate.IsMatch(" " + this.DataLines[innText].Trim()))
                                        if (regExpiryDate.Match(this.DataLines[innText].Trim()).Index > regIssueDate.Match(this.DataLines[innText].Trim()).Index)
                                        {
                                            tExpDate = this.DataLines[innText].Trim();
                                            tExpDate = tIssueDate.Remove(regIssueDate.Match(this.DataLines[innText].Trim()).Index, (tExpDate.Length - regExpiryDate.Match(this.DataLines[innText].Trim()).Index));
                                        }
                                }
                                catch { }
                                if (tExpDate == "")
                                    strExpiryDate.Append(" " + this.DataLines[innText].ToLower().Trim().Replace("local address", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace("passport date of expiry", "").Replace("Expiry", "").Replace("date", "").Replace("of", "").Replace("on", "").Replace("valid", "").Replace("from", "").Replace("no", "").Replace("passport", "").Replace("on", "").Replace("pass", "").Replace("port", "").Replace(":", "").Replace("expiry", "").Replace("expire", "").Replace("till", "").Replace("objective", "").Replace("-", "/").Trim());
                                else
                                    strExpiryDate.Append(" " + tExpDate.ToLower().Trim().Replace("local address", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace("passport date of expiry", "").Replace("Expiry", "").Replace("date", "").Replace("of", "").Replace("on", "").Replace("valid", "").Replace("from", "").Replace("no", "").Replace("passport", "").Replace("on", "").Replace("pass", "").Replace("port", "").Replace(":", "").Replace("expiry", "").Replace("expire", "").Replace("till", "").Replace("objective", "").Replace("-", "/").Trim());
                                if (strExpiryDate.ToString().Trim() != "")
                                    break;
                            }
                        }
                    }
                }
                catch
                {
                }
                finally
                {
                    regNotExpDate = null;
                    regExpiryDate = null;
                    regIssueDate = null;
                }
                if (passport != "")
                    strExpiryDate.Replace(passport.ToLower(), "");
                try
                {
                    try
                    {
                        if (strExpiryDate.ToString().Contains("upto"))
                            strExpiryDate = strExpiryDate.Remove(0, strExpiryDate.ToString().IndexOf("upto") + 4);
                    }
                    catch { }
                    string date1 = strExpiryDate.ToString().Replace("<", "").Replace(">", "").Replace("(", "").Replace(")", "").Trim();
                    string[] formats = { "dd/MM/yyyy", "d/MM/yyyy" };
                    DateTime dateTime;
                    try
                    {
                        dateTime = DateTime.ParseExact(date1, formats, new System.Globalization.CultureInfo("en-US"), System.Globalization.DateTimeStyles.None);
                        tPassportDateofExpiry = dateTime.ToString();
                    }
                    catch
                    {
                        //tPassportDateofExpiry = dateTime.ToString();
                    }
                }
                catch { }

                if (tPassportDateofExpiry.Trim().Length > 250)
                    tPassportDateofExpiry = tPassportDateofExpiry.Trim().Substring(0, 249);
                if (tPassportDateofExpiry.Trim().Length > 0)
                    tPassportDateofExpiry = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tPassportDateofExpiry.ToLower().Trim());

                #endregion

                #region "Pan No"
                StringBuilder strPanNO = null;
                Regex regPanNo = null;
                strPanNO = new StringBuilder();
                Regex regNotPan = null;
                try
                {
                    regNotPan = new Regex(@"[\|\s,\{\(\:](Father’s name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Passport Valid From|Passport Date of Issue|Passport Issue Date|Passport Issued Date|Passport Date|Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid|Passport No)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    regPanNo = new Regex(@"[\|\s,\{\(\:](Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|TIN No|Tax ID|Tax Identification Number|TIN Number|IC No\.|IC No|IC Number|I\.C\.)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    for (int outText = 0; outText < this.DataLines.Length && strPanNO.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regPanNo, regPanNo);
                        if (FlagPresent == 1)
                        {
                            if (this.DataLines[outText - 1].ToLower().IndexOf("technical skills") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("technical") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("skills") >= 0)
                                continue;
                            for (int innText = outText; innText <= (outText + 1) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                    regNotPan.IsMatch(" " + this.DataLines[innText].Trim()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0)
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                strPanNO.Append(this.DataLines[innText].ToLower().Replace("local address", "").Replace("i.c.", "").Replace("ic number", "").Trim().Replace("ic no", "").Trim().Replace("tin ", "").Replace("tax identification", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace(" card ", "").Replace("on", "").Replace(" Pan ", "").Replace(":", "").Replace("no", "").Replace("pan card", "").Replace("pan", "").Replace("passport", "").Replace(".", "").Replace("tin no", "").Replace("tax Identification number", "").Replace("tax id", "").Replace("tin number", "").Replace("number", ""));
                                if (strPanNO.ToString().Trim() != "")
                                    break;
                            }
                        }
                    }
                }
                catch
                {

                }
                finally
                {
                    regNotPan = null;
                    regPanNo = null;
                }
                tPanNo = strPanNO.ToString().Replace("<", "").Replace(">", "").Trim();
                if (tPanNo.Trim().Length > 250)
                    tPanNo = tPanNo.Trim().Substring(0, 249);
                if (tPanNo.Trim().Length > 0)
                    tPanNo = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tPanNo.ToLower()).Trim();

                #endregion

                #region "Passport Place Of Issue"
                StringBuilder strPassportIssuePlace = null;
                Regex regstrPassportIssuePlace = null;
                strPassportIssuePlace = new StringBuilder();
                Regex regNotPlace = null;
                try
                {

                    regNotPlace = new Regex(@"[\|\s,\{\(\:](Father’s name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    regstrPassportIssuePlace = new Regex(@"[\|\s,\{\(\:](Passport Place of Issue|Passport Issue Place|Passport issued at|Passport Place|Passport Issue City|Passport Issue Location)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);

                    for (int outText = 0; outText < this.DataLines.Length && strPassportIssuePlace.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regstrPassportIssuePlace, regstrPassportIssuePlace);
                        if (FlagPresent == 1)
                        {
                            if (this.DataLines[outText - 1].ToLower().IndexOf("technical skills") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("technical") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("skills") >= 0)
                                continue;
                            for (int innText = outText; innText <= (outText + 1) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                    regNotPlace.IsMatch(" " + this.DataLines[innText].Trim()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0)//Annexure  Passport Place Of Issue
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                strPassportIssuePlace.Append(" " + this.DataLines[innText].ToLower().Replace("local address", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace("-", " ").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace("card", "").Replace("on", "").Replace("number", "").Replace("Pan", "").Replace(":", "").Replace("no", "").Replace("passport", "").Replace("place", "").Replace("of", "").Replace("issue", "").Replace("city", "").Replace("location", "").Replace("at", "").Replace(":", "").Replace(".", "").Replace("Date", ""));
                            }
                        }
                    }
                }
                catch
                {

                }
                finally
                {
                    regNotPlace = null;
                    regstrPassportIssuePlace = null;
                }
                tPassportIssuePlace = strPassportIssuePlace.ToString().Replace("<", "").Replace(">", "").Trim();
                if (tPassportIssuePlace.Trim().Length > 250)
                    tPassportIssuePlace = tPassportIssuePlace.Trim().Substring(0, 249);
                if (tPassportIssuePlace.Trim().Length > 0)
                    tPassportIssuePlace = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tPassportIssuePlace.ToLower());
                #endregion

                #region "Father Name"
                StringBuilder strFatherName = null;
                Regex regFatherName = null;
                strFatherName = new StringBuilder();
                Regex regNotName = null;
                try
                {
                    regNotName = new Regex(@"[\|\s,\{\(\:](Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                    regFatherName = new Regex(@"[\|\s,\{\(\:](Father’s name|Fathers’ name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Father's Name|Father's Nam e)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);

                    for (int outText = 0; outText < this.DataLines.Length && strFatherName.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regFatherName, regFatherName);
                        if (FlagPresent == 1)
                        {
                            if (this.DataLines[outText - 1].ToLower().IndexOf("technical skills") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("technical") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("skills") >= 0)
                                continue;
                            for (int innText = outText; innText <= (outText + 1) && innText < this.DataLines.Length; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                      regNotName.IsMatch(" " + this.DataLines[innText].Trim()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0 || rmSpace.Trim().IndexOf("sex") >= 0 || rmSpace.Trim().IndexOf("marital status") >= 0 ||
                                      rmSpace.Trim().IndexOf("marital") >= 0 || rmSpace.Trim().IndexOf("nationality") >= 0 || rmSpace.Trim().IndexOf("language") >= 0 || rmSpace.Trim().IndexOf("languages") >= 0 ||
                                      rmSpace.Trim().IndexOf("address") >= 0 || rmSpace.Trim().IndexOf("date") >= 0 || rmSpace.Trim().IndexOf("passport") >= 0 || rmSpace.Trim().IndexOf("declaration") >= 0 || rmSpace.Trim().IndexOf("Place") >= 0)//Annexure  Passport Place Of Issue
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                strFatherName.Append(" " + this.DataLines[innText].ToLower().Replace("local address", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace("-", " ").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace("card", "").Replace("number", "").Replace(":", "").Replace("passport", "").Replace("place", "").Replace("of", "").Replace("issue", "").Replace("city", "").Replace("location", "").Replace(":", "").Replace(".", " ").Replace("fathers’", "").Replace("father's", "").Replace("father’s", "").Replace("fathers name", "").Replace("father", "").Replace("name", "").Replace("late", "").Replace("occupation", "").Replace("businessman", "").Replace(":", "").Trim());

                                if (strFatherName.Length > 2)
                                    break;
                            }
                        }
                    }
                }
                catch
                {

                }
                finally
                {
                    regNotName = null;
                    regFatherName = null;
                }
                tFatherName = strFatherName.ToString().Replace("<", "").Replace(">", "").Trim();
                if (tFatherName.Trim().Length > 250)
                    tFatherName = tFatherName.Trim().Substring(0, 249);
                if (tFatherName.Trim().Length > 0)
                    tFatherName = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tFatherName.ToLower());


                #endregion

                #region "NSR Number"
                Regex regNSRNumber = null;
                Regex regNotNSRNumber = null;
                StringBuilder strNSRNumber = null;
                strNSRNumber = new StringBuilder();

                try
                {

                    regNotNSRNumber = new Regex(@"[\|\s,\{\(\:](Father’s name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);

                    regNSRNumber = new Regex(@"[\|\s,\{\(\:](Social Security System Number|SSS Number|SSS #|SSS No|NSR number)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);

                    for (int outText = 0; outText < this.DataLines.Length && strNSRNumber.ToString().Trim().Length <= 1; outText++)
                    {
                        FlagPresent = opFindMatch0(this.DataLines[outText].Trim(), regNSRNumber, regNSRNumber);
                        if (FlagPresent == 1)
                        {
                            if (this.DataLines[outText - 1].ToLower().IndexOf("Technical Skills") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("Technical") >= 0 || this.DataLines[outText - 1].ToLower().IndexOf("skills") >= 0)
                                continue;
                            for (int innText = outText; innText <= (outText + 1) && innText < this.DataLines.Length && strNSRNumber.ToString().Trim().Length <= 1; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.DataLines[innText].ToLower().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                     regNotNSRNumber.IsMatch(" " + this.DataLines[innText].Trim()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0)//Annexure
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) break;
                                strNSRNumber.Append("" + this.DataLines[innText].ToLower().Replace("local address", "").Replace("address for communication", "").Replace("current", "").Replace("mailing", "").Replace("present", "").Replace("address", "").Replace("currentaddress", "").Replace("temporary", "").Replace("communication", "").Replace(":", " ").Replace("linguistic skills", "").Replace("languages known", "").Replace("language", "").Replace("known", "").Replace("abilities", "").Replace("linguistic", "").Replace("passport date of expiry", "").Replace("Expiry", "").Replace("date", "").Replace("of", "").Replace("on", "").Replace("valid", "").Replace("from", "").Replace("passport", "").Replace("no", "").Replace("pass", "").Replace("port", "").Replace("issue", "").Replace(":", "").Replace("number", "").Replace("social security system", "").Replace("sss", "").Replace("#", "").Replace(".", "").Replace("nsr", "").Trim());
                                if (strIssuedate.ToString().Trim() != "")
                                    break;
                            }
                        }
                    }

                }
                catch
                {

                }
                finally
                {
                    regNotNSRNumber = null;
                    regNSRNumber = null;
                }
                tNSRNumber = strNSRNumber.ToString().Replace("<", "").Replace(">", "");
                if (tNSRNumber.Trim().Length > 250)
                    tNSRNumber = tNSRNumber.Trim().Substring(0, 249);
                if (tNSRNumber.Trim().Length > 0)
                    tNSRNumber = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tNSRNumber.ToLower());

                #endregion

            }
            catch { }


        }
        #endregion

        private void getMaritalStatus()
        {
            //PERSONAL INFORMATION -- regPersonal
            int iEdu = 1;
            if (true)
            {
                int pos = -1, pos1 = -1;
                PersonalDet = new ArrayList();
                try
                {
                    //Education data  
                    #region "EDUdata"
                    for (pos = 0; pos < DataLines.Length; pos++)
                    {
                        if (this.DataLines[pos].ToLower().IndexOf("ibm annex") >= 0) break;
                        if ((regPersonal.IsMatch(" " + this.DataLines[pos].Trim()) && regPersonal.Match(" " + this.DataLines[pos].Trim()).Index < 4) || this.DataLines[pos].Trim().ToLower().Contains("marital status") || this.DataLines[pos].Trim().ToLower().Contains("martial status")) //Marital Status
                        {
                            try
                            {
                                for (pos1 = pos; pos1 < DataLines.Length; pos1++)
                                {
                                    if (this.DataLines[pos1].ToLower().IndexOf("ibm annex") >= 0) break;
                                    Match mtch = regPersonalNot.Match(" " + this.DataLines[pos1].Trim());
                                    //if (!mtch.Success)
                                    //    mtch = regEducationNot1.Match(" " + this.DataLines[pos1].Trim());
                                    int eduNFlag = 0;
                                    if (((mtch.Success && (mtch.Index == 0 || mtch.Index == 1))) && (this.DataLines[pos1].ToLower().Trim().IndexOf("summary of qualification") < 0 && this.DataLines[pos1].ToUpper().Trim().IndexOf("EDUCATIONAL EXPERIENCE:-") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of education:") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of academics:") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of academics") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("summary of academic") < 0 && this.DataLines[pos1].ToLower().Trim().IndexOf("personal qualification") < 0))//
                                        eduNFlag = 1;

                                    if (eduNFlag == 0)
                                    {
                                        iEdu += 1;
                                        if (DataLines[pos1].Replace("Education :", "").Replace(Convert.ToChar(167).ToString(), "").Trim().IndexOf("-") == 0)
                                            PersonalDet.Add(DataLines[pos1].Replace("Education :", "").Replace("BACKGROUND", "").Replace("Post Graduation/ Degree", "").Replace(Convert.ToChar(167).ToString(), "").Replace(Convert.ToChar(154).ToString(), "").Replace("-", "").Replace(Convert.ToChar(63).ToString(), "").Replace("?", "").Replace("*", "").Replace("|", "").Replace("?", "").Replace("M.E.S", "").Replace("Degree / Diploma", "Degree").Trim());
                                        else
                                            PersonalDet.Add(DataLines[pos1].Replace("Education :", "").Replace("BACKGROUND", "").Replace("Post Graduation/ Degree", "").Replace(Convert.ToChar(167).ToString(), "").Replace(Convert.ToChar(154).ToString(), "").Replace(Convert.ToChar(63).ToString(), "").Replace("?", "").Replace("*", "").Replace("|", "").Replace("?", "").Replace("M.E.S", "").Replace("Degree / Diploma", "Degree").Trim());
                                        pos = pos1;
                                    }
                                    else
                                    {
                                        pos = pos1;
                                        break;
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                        else
                            continue;
                    }
                    #endregion
                }
                catch
                {

                }
            }

            Match GrdMtch = null;
            DataSet objDS;
            objDS = new DataSet();
            objDS.ReadXml(new StringReader(FCommon.objfXMLMaritalStatus.OuterXml));

            try
            {
                string yourstring = "";
                try
                {
                    DataTable dt = new DataTable("HCM_MARITAL_STATUS");

                    //fill the dt here 
                    if (objDS.Tables.Contains("HCM_MARITAL_STATUS") == true)
                        dt = objDS.Tables["HCM_MARITAL_STATUS"].Copy();
                    else
                        dt = objDS.Tables["HCM_COMMON_MASTER"].Copy();

                    DataTable dt2 = new DataTable();
                    string[] strCols = { "Title" };

                    if (objDS.Tables.Contains("HCM_MARITAL_STATUS") == true)
                        dt2 = dt.DefaultView.ToTable("HCM_MARITAL_STATUS", false, strCols);
                    else
                        dt2 = dt.DefaultView.ToTable("HCM_COMMON_MASTER", false, strCols);

                    System.Xml.XmlDocument objdoc;
                    using (MemoryStream memstream = new MemoryStream())
                    {
                        dt2.WriteXml(memstream);
                        //  tReturnData = System.Text.Encoding.UTF8.GetString(memstream.ToArray());
                        objdoc = new System.Xml.XmlDocument();
                        objdoc.LoadXml(System.Text.Encoding.UTF8.GetString(memstream.ToArray()));
                        memstream.Close(); memstream.Dispose();
                    }
                    if (objDS.Tables.Contains("HCM_MARITAL_STATUS") == true)
                    {
                        yourstring = Regex.Replace(objdoc.OuterXml, "<DocumentElement><HCM_MARITAL_STATUS><Title>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_MARITAL_STATUS><HCM_MARITAL_STATUS><Title>", "|");
                        yourstring = Regex.Replace(yourstring, "<Title /></HCM_MARITAL_STATUS><HCM_MARITAL_STATUS>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_MARITAL_STATUS><HCM_MARITAL_STATUS>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_MARITAL_STATUS></DocumentElement>", "");
                    }
                    if (objDS.Tables.Contains("HCM_COMMON_MASTER") == true)
                    {
                        yourstring = Regex.Replace(objdoc.OuterXml, "<DocumentElement><HCM_COMMON_MASTER><Title>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_COMMON_MASTER><HCM_COMMON_MASTER><Title>", "|");
                        yourstring = Regex.Replace(yourstring, "<Title /></HCM_COMMON_MASTER><HCM_COMMON_MASTER>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_COMMON_MASTER><HCM_COMMON_MASTER>", "");
                        yourstring = Regex.Replace(yourstring, "</Title></HCM_COMMON_MASTER></DocumentElement>", "");
                    }
                }
                catch { }


                Regex regMaritalStatus = null; //Personal Information
                Regex regNotMaritalStatus = null;
                Regex regex = new Regex(@"\b(" + yourstring + @")\b", RegexOptions.IgnoreCase);

                int prelBrFlag = 0, FlagPresent = 0;
                try
                {
                    regNotMaritalStatus = new Regex(@"[\|\s,\{\(\:](Father’s name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase); //To Correspond Program Director
                    regMaritalStatus = new Regex(@"[\|\s,\{\(\:](Tax Status|Marital Status|Civil Status|Martial Status|Marital Status:|Matrial Status)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);

                    for (int outText = 0; outText < this.PersonalDet.Count && tMaritalStatus == ""; outText++)
                    {
                        FlagPresent = opFindMatchTaxStatus0(this.PersonalDet[outText].ToString().Trim(), regMaritalStatus, regMaritalStatus);
                        if (FlagPresent == 1)
                        {
                            if ((outText - 1 > 0) && (this.PersonalDet[outText - 1].ToString().ToLower().IndexOf("Technical Skills") >= 0 || this.PersonalDet[outText - 1].ToString().ToLower().IndexOf("Technical") >= 0 || this.PersonalDet[outText - 1].ToString().ToLower().IndexOf("skills") >= 0))
                                continue;
                            for (int innText = outText; innText <= (outText + 1) && innText < this.PersonalDet.Count; innText++)
                            {
                                prelBrFlag = 0;
                                string rmSpace = this.PersonalDet[innText].ToString().Trim();
                                if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||
                                    //regNotMaritalStatus.IsMatch(" " + this.DataLines[innText].Trim()) ||
                                    rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                    rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                    rmSpace.Trim().IndexOf("phone") == 0 ||
                                    rmSpace.Trim().IndexOf("mobile") == 0 ||
                                    rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                    rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                    rmSpace.Trim().IndexOf("annexure") == 0)
                                    prelBrFlag = 1;
                                if (prelBrFlag == 1) continue;

                                if (regex.IsMatch(PersonalDet[innText].ToString().Trim().Replace(":", "")))
                                {
                                    GrdMtch = regex.Match(PersonalDet[innText].ToString());
                                    tMaritalStatus = FCommon.opGetUIDfromXml(ref FCommon.objfXMLMaritalStatus, GrdMtch.Value.ToString(), "Title");
                                }
                            }
                        }
                    }

                }
                catch
                {
                    tMaritalStatus = "0";
                }
                finally
                {
                    regMaritalStatus = null;
                    regNotMaritalStatus = null;
                }


                try
                {
                    if (tMaritalStatus == "")
                    {
                        regNotMaritalStatus = new Regex(@"[\|\s,\{\(\:](Father’s name|Father Name|FatherName|FATHER’S NAME|FATHER NAME|father name|FATHERNAME|fathername|Fathers Name|fathers name|FATHERS NAME|Pan No|PanCard No|Pan Card|Pan Card Number|Pan Number|PanNo|PanNumber|PanCardNumber|PanCard Number|Passport Date of Expiry|Passport Expiry Date|Passport Expiry On|Passport Valid On|Passport Valid)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase); //To Correspond Program Director
                        regMaritalStatus = new Regex(@"[\|\s,\{\(\:](Tax Status|Marital Status|Civil Status|Martial Status)[:\s]?[:\)\}\-\s]?", RegexOptions.IgnoreCase);
                        //          for (int innText = outText; innText <= (outText + 5) && innText < this.DataLines.Length; innText++)
                        for (int outText = 0; outText < this.DataLines.Length && tMaritalStatus == "" && outText < 5; outText++)
                        {
                            FlagPresent = opFindMatch(this.DataLines[outText].ToString().Trim(), regMaritalStatus, regMaritalStatus);
                            if (FlagPresent == 1)
                            {
                                if (this.DataLines[outText - 1].ToString().ToLower().IndexOf("Technical Skills") >= 0 || this.DataLines[outText - 1].ToString().ToLower().IndexOf("Technical") >= 0 || this.DataLines[outText - 1].ToString().ToLower().IndexOf("skills") >= 0)
                                    continue;
                                for (int innText = outText; innText <= (outText + 1) && innText < this.DataLines.Length; innText++)
                                {
                                    prelBrFlag = 0;
                                    string rmSpace = this.DataLines[innText].ToString().Trim();
                                    if (rmSpace.ToLower().Trim().IndexOf("permanent address") == 0 ||

                                        rmSpace.Trim().IndexOf("same as above") >= 0 ||
                                        rmSpace.ToLower().Trim().IndexOf("hobbies") >= 0 ||
                                        rmSpace.Trim().IndexOf("phone") == 0 ||
                                        rmSpace.Trim().IndexOf("mobile") == 0 ||
                                        rmSpace.Trim().IndexOf("Languages Currently Using") == 0 ||
                                        rmSpace.Trim().IndexOf("Preferred Industry") == 0 ||
                                        rmSpace.Trim().IndexOf("Preferred Industry:") == 0 ||
                                        rmSpace.Trim().IndexOf("annexure") == 0)
                                        prelBrFlag = 1;
                                    if (prelBrFlag == 1) continue;

                                    if (regex.IsMatch(this.DataLines[innText].ToString().Trim().Replace(":", "")))
                                    {
                                        GrdMtch = regex.Match(this.DataLines[innText].ToString());
                                        tMaritalStatus = FCommon.opGetUIDfromXml(ref FCommon.objfXMLMaritalStatus, GrdMtch.Value.ToString(), "Title");
                                    }
                                }
                            }
                        }
                    }

                }
                catch
                {
                    tMaritalStatus = "0";
                }
                finally
                {
                    regMaritalStatus = null;
                    regNotMaritalStatus = null;
                }



                if (tMaritalStatus == "")
                    tMaritalStatus = "0";

            }
            catch
            {
                tMaritalStatus = "0";
            }
        }

        private bool opCheckDontparsefilehavingText()
        {
            try
            {
                if (ResumeConvertedText.ToString().Trim().Trim() == "") return true;
                if (FCommon.SC_Dontparsefilehavingfiletext == false) return true;
                if (FCommon.SC_DontparsefilehavingfiletextData.Trim() == "") return true;
                string tData = FCommon.SC_DontparsefilehavingfiletextData.Replace(";", "|").Replace(",", "|").Replace("||", "|").Trim();
                if (tData.EndsWith("|"))
                    tData = tData.Substring(0, tData.Length - 1);
                if (tData.StartsWith("|"))
                    tData = tData.Remove(0, 1);
                if ((System.Text.RegularExpressions.Regex.IsMatch(ResumeConvertedText.ToString().Trim(), tData, System.Text.RegularExpressions.RegexOptions.IgnoreCase)))
                    return false;
            }
            catch { }
            return true;
        }

        #region "Visa and Vis No"
        public string tVisaTypeID = "0";
        public string tVisaNo = "";
        private void getVisaTypeANDNumber()
        {
            try
            {
                tVisaTypeID = "0";
                tVisaNo = "";
                string patternVisaType = "Visa Type|Visa Status|Issued Visa Type|Visa";
                string patternVisaNo = @"Khulasat Al Qaid Number|KAQ Number|KAQ No\.|Khulasat Al Qaid No\.|Visa Number|Visa No\.|Visa No";

                Regex exVisaType = new Regex(@"[\s,\{“‘\(\.](" + patternVisaType + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex exVisaType1 = new Regex(@"[\s,\{“‘\(\.](" + patternVisaType + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);
                Regex exVisaTypeNo = new Regex(@"[\s,\{“‘\(\.](" + patternVisaNo + @")[,\:’\}”\s\)]?[\s]?\b", RegexOptions.IgnoreCase);
                Regex exVisaTypeNo1 = new Regex(@"[\s,\{“‘\(\.](" + patternVisaNo + @")[\:,\}’”\s\)]?[\s]?$", RegexOptions.IgnoreCase);

                int nFoundCount = -1, nFoundVisaNoCount = -1;
                for (int n = 0; n < this.DataLines.Length; n++)
                {
                    int iMatchCnt = 0;//Citizen Services
                    if (((this.DataLines[n].Trim().ToLower().IndexOf("citizen services") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFERENCES") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("EFERENCES") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFERALS OF") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFRENCES") >= 0) || (this.DataLines[n].Trim().ToUpper().IndexOf("REFERENCE") == 0) || (this.DataLines[n].Trim().ToUpper().IndexOf(":¢REFERANCE:") >= 0) || (this.DataLines[n].Trim().ToLower().IndexOf("reference:") >= 0) || ((this.DataLines[n].Trim().ToLower().IndexOf("reference :") >= 0)) || (this.DataLines[n].Trim().ToLower().IndexOf("references :") >= 0) || (this.DataLines[n].Trim().ToLower().IndexOf("references:") >= 0) || (this.DataLines[n].Trim().ToLower().IndexOf("character and work references") >= 0)) && ((this.DataLines[n].Trim().ToLower().IndexOf("location preference:") < 0) && (this.DataLines[n].Trim().ToLower().IndexOf("preference") < 0) && (this.DataLines[n].Trim().ToLower().IndexOf("preferences") < 0) && (this.DataLines[n].Trim().ToLower().IndexOf("location preference") < 0)))
                    {
                        if (n >= (DataLines.Length / 2))
                            break;
                        else
                            continue;
                    }
                    if (nFoundCount == -1)
                    {
                        if (this.DataLines[n] == null || this.DataLines[n].Length == 0) continue;
                        MatchCollection mtch = exVisaType.Matches(" " + this.DataLines[n].Trim());

                        iMatchCnt = mtch.Count;
                        if (mtch.Count == 0)
                            mtch = exVisaType1.Matches(" " + this.DataLines[n].Trim());
                        iMatchCnt = mtch.Count;

                        if (iMatchCnt == 0) continue;
                        nFoundCount = n;
                    }
                    if (nFoundVisaNoCount == -1)
                    {
                        if (this.DataLines[n] == null || this.DataLines[n].Length == 0) continue;
                        MatchCollection mtch = exVisaTypeNo.Matches(" " + this.DataLines[n].Trim());

                        iMatchCnt = mtch.Count;
                        if (mtch.Count == 0)
                            mtch = exVisaTypeNo.Matches(" " + this.DataLines[n].Trim());
                        iMatchCnt = mtch.Count;

                        if (iMatchCnt == 0) continue;
                        nFoundVisaNoCount = n;
                    }
                    break;
                }
                patternVisaType = null;
                exVisaTypeNo1 = null;
                exVisaTypeNo = null;
                exVisaType = null;
                exVisaType1 = null;
                if (nFoundVisaNoCount > -1)
                {
                    for (int n = nFoundVisaNoCount; n < this.DataLines.Length && (n <= nFoundVisaNoCount + 3) && tVisaNo.Trim() == ""; n++)
                    {
                        if (this.DataLines[n].Trim().Length == 0) continue;
                        string tDAta = Regex.Replace(this.DataLines[n].Trim(), patternVisaNo, "");
                        if (tDAta.Trim().Length == 0) continue;
                        tVisaNo = tDAta.Trim();
                        if (tVisaNo.Length > 50)
                            tVisaNo = tVisaNo.Substring(0, 49);
                        tDAta = null;
                    }
                }

                patternVisaNo = null;
                if (nFoundCount > -1)
                {
                    for (int n = nFoundCount; n < this.DataLines.Length && (n <= nFoundCount + 3) && tVisaTypeID.Trim() == "0"; n++)
                    {
                        if (this.DataLines[n].Trim().Length == 0) continue;
                        StringBuilder matchResult;
                        bool flagBreakMatch = true;
                        try
                        {
                            matchResult = new StringBuilder();
                            for (int cnt = FCommon.ResumeVisaType.GetLowerBound(0); cnt <= FCommon.ResumeVisaType.GetUpperBound(0) && flagBreakMatch == true; cnt++)
                            {
                                StringBuilder Eduforsplit1 = new StringBuilder();
                                StringBuilder sbExcludeList = new StringBuilder();

                                #region "collecting"
                                try
                                {

                                    if (FCommon.ResumeVisaType[cnt, 0] != null)
                                    {
                                        if (FCommon.ResumeVisaType[cnt, 1] != null)
                                            if (FCommon.ResumeVisaType[cnt, 1].Trim().Length != 0)
                                                Eduforsplit1.Append(FCommon.ResumeVisaType[cnt, 1] + "," + FCommon.ResumeVisaType[cnt, 0]);
                                            else
                                                if (FCommon.ResumeVisaType[cnt, 0].Trim().Length != 0)
                                                    Eduforsplit1.Append(FCommon.ResumeVisaType[cnt, 0]);
                                                else
                                                    continue;
                                        else
                                            if (FCommon.ResumeVisaType[cnt, 0].Trim().Length != 0)
                                                Eduforsplit1.Append(FCommon.ResumeVisaType[cnt, 0]);
                                            else
                                                continue;
                                    }
                                    else
                                        continue;
                                    try
                                    {
                                        if (FCommon.ResumeVisaType[cnt, 3].Trim().Length != 0)
                                            sbExcludeList.Append(FCommon.ResumeVisaType[cnt, 3]);
                                    }
                                    catch { }

                                }
                                catch
                                {

                                }
                                #endregion

                                Regex exEducation = null; Regex exEducation1 = null;
                                Regex exExclude = null; Regex exExclude1 = null;

                                #region "creating regular expression"
                                try
                                {
                                    if (Eduforsplit1.Length < 3)
                                    {
                                        Eduforsplit1.Replace(@"\", @"\\");
                                        Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                        Eduforsplit1.Replace("||", "|");
                                        exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant);
                                        exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant);

                                    }
                                    else
                                    {
                                        Eduforsplit1.Replace(@"\", @"\\");
                                        Eduforsplit1.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                        Eduforsplit1.Replace("||", "|");
                                        exEducation = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                        exEducation1 = new Regex(@"[\s,\(\:]?(" + Eduforsplit1.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);

                                    }
                                    if (sbExcludeList.Length > 0)
                                    {
                                        sbExcludeList.Replace(@"\", @"\\");
                                        sbExcludeList.Replace(",", "|").Replace(".", @"\.").Replace("(", @"\(").Replace(")", @"\)").Replace("+", @"\+").Replace("*", @"\*");
                                        sbExcludeList.Replace("||", "|");
                                        exExclude = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?\b", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                        exExclude1 = new Regex(@"[\s,\(\:]?(" + sbExcludeList.ToString() + @")[,\s]?[\s]?$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                                    }
                                }
                                catch
                                {

                                }
                                finally
                                {
                                    sbExcludeList = null; Eduforsplit1 = null;
                                }
                                #endregion

                                #region "finding"
                                try
                                {
                                    int iHitExcludeCount = 0;
                                    flagBreakMatch = true;
                                    MatchCollection mMatch = exEducation.Matches(@" " + this.DataLines[n].ToString().Trim());
                                    if (mMatch.Count == 0)
                                        mMatch = exEducation1.Matches(@" " + this.DataLines[n].ToString().Trim());
                                    if (mMatch.Count == 0) continue;
                                    if (FCommon.ResumeVisaType[cnt, 4] != null && opCheckMatchCount(mMatch, Convert.ToInt32(FCommon.ResumeVisaType[cnt, 4])) < Convert.ToInt32(FCommon.ResumeVisaType[cnt, 4])) continue;
                                    if (exExclude != null)
                                    {
                                        mMatch = exExclude.Matches(@" " + this.DataLines[n].ToString().Trim());
                                        iHitExcludeCount = mMatch.Count;
                                        mMatch = exExclude1.Matches(@" " + this.DataLines[n].ToString().Trim());
                                        iHitExcludeCount += mMatch.Count;
                                        if (iHitExcludeCount > 0) continue;
                                    }
                                    tVisaTypeID = FCommon.ResumeVisaType[cnt, 2];
                                    flagBreakMatch = false;

                                }
                                catch { }
                                finally
                                {
                                    exEducation = null; exEducation1 = null;
                                }
                                #endregion
                            } //end for
                        }
                        catch { }
                    }
                }
            }
            catch { }
        }
        #endregion

        #region "Parse REference Details"
        private void opParseReferenceDetails()
        {
            try
            {
                aListRefernce = new ArrayList();
                int iRefLocationStart = 0;
                for (int cnt = 0; cnt < this.DataLines.Length; cnt++)
                {
                    if (this.DataLines[cnt].Trim().Length > 0)
                    {
                        if (((this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERENCES") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("referee") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("referees") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("referees:") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERALS OF") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFRENCES") >= 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf("REFERENCE") == 0) || (this.DataLines[cnt].Trim().ToUpper().IndexOf(":¢REFERANCE:") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("reference:") >= 0) || ((this.DataLines[cnt].Trim().ToLower().IndexOf("reference :") >= 0)) || (this.DataLines[cnt].Trim().ToLower().IndexOf("references :") >= 0) || this.DataLines[cnt].Trim().ToLower().IndexOf("selected publications:") >= 0 || (this.DataLines[cnt].Trim().ToLower().IndexOf("references:") >= 0) || (this.DataLines[cnt].Trim().ToLower().IndexOf("character and work references") >= 0)) && ((this.DataLines[cnt].Trim().ToLower().IndexOf("location preference:") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("preference") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("preferences") < 0) && (this.DataLines[cnt].Trim().ToLower().IndexOf("location preference") < 0) && (this.DataLines[cnt].Trim().IndexOf("Contact Details") < 0) && (this.DataLines[cnt].Trim().IndexOf("Reference Name") < 0)) || (this.DataLines[cnt].Trim().ToLower().IndexOf("refrees") == 0))
                        {
                            iRefLocationStart = cnt;
                        }
                    }
                }
                Regex rePhone = new Regex(@"H:|Phone:|TEL.|Tel.:|Telephone number:|residential phone numbers|Landline:|Hello #|Fixed Line| res|Contact#|Contact#:|contact –|residence no|ph:|ph :|ph  :|residence -|Home-|home:|Ph#|Tel|Tel\.|Tel#|Res#|Office#|Tel #|Res #|Office #|\(ph\)|phone|phone-|phone number|House no|home |\(r\)|\(res\)|\(h\)|landline|Telephone|ph|\(ph\)|ph-| ph |ph\.|ph no|contact no|contact:-|contact number|tel|tel no|phone no|tel no.|tel|tel-|\(tel\)|tel no|res \#|\(resi\)|\(P\)|\(p\)|\(r\)|\(R\)|\(H\)");
                Regex reMobile = new Regex(@"Contact:|M:|MOBILE:|Mobile Phone:|Cell:|Cel. Number|Cel. Phone:|Cell #|Cell#|cell no|mobile|cell|cell-|\(cell\)|\(m\)|cellular|mob|\(mob\)|mob-|mob |\(mob\)|mob-|mob:|mobile|cell-|\(cell\)|\(m\)|\(c\)|\(C\)|cellular");

                Regex reBreaj = new Regex(@"working history|Availability|Available upon request|Provide upon request|SUPPLEMENTARY|willing to|Promptly furnished upon request|Copyright", RegexOptions.IgnoreCase);
                Regex reTelephone = new Regex(@"(Telephone No|Hp No|Contact No|Contact Number|Phone|Tel No|Tel		:)", RegexOptions.IgnoreCase);
                Regex regRole = new Regex(@"(Position|Title)", RegexOptions.IgnoreCase);
                Regex regCompany = new Regex(@"(Company Name|Company|Organization|Organisation Name|Organisation)", RegexOptions.IgnoreCase);
                Regex regEmail = new Regex(@"(Email Address|Email)", RegexOptions.IgnoreCase);
                Regex regRelationship = new Regex(@"(Relationship)", RegexOptions.IgnoreCase);
                Regex regEmailOnly = new Regex(@"(Email Address|Email)", RegexOptions.IgnoreCase);

                #region "checking name,role,comapny , address ,telephone and mobile pattern"
                if (iRefLocationStart > 0)
                {
                    for (int innercnt = iRefLocationStart + 1; innercnt < this.DataLines.Length; innercnt++)
                    {
                        if (reBreaj.Match(this.DataLines[innercnt].Trim()).Success)
                            break;
                        int iLoopSet = 0;
                        string Name = "", Role = "", EmailID = "", Contact = "", Company = "", Address = "", Relationship = "";
                        if (Regex.Match(this.DataLines[innercnt], @"\d?[\.]?[\s]?(Reference Name\:|Name|Ms |Mr |Mrs |Ms\. |Mr\. |Mrs\. )").Success)
                        {
                            Name = Regex.Replace(this.DataLines[innercnt], @"\d?[\.]?[\s]?(Reference Name\:|Name|Ms |Mr |Mrs |Ms\. |Mr\. |Mrs\. )", "").Replace("\t\t\t", "").Replace(":", "").Trim();
                            iLoopSet = innercnt;
                            this.DataLines[iLoopSet] = "";
                            if (this.DataLines.Length > innercnt + 1 && reTelephone.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 1], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && regCompany.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && regRole.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && regEmail.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "");
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && regRelationship.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            if (this.DataLines.Length > innercnt + 2 && regRelationship.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && reTelephone.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 2], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && regCompany.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && regRole.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && regEmail.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            if (this.DataLines.Length > innercnt + 3 && regRelationship.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && reTelephone.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 3], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && regCompany.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && regRole.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && regEmail.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }

                            if (this.DataLines.Length > innercnt + 4 && regRelationship.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && reTelephone.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 4], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && regCompany.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && regRole.Match(this.DataLines[innercnt + 4]).Success && this.DataLines[innercnt + 3].Trim() == "")
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && regEmail.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }

                            goto AddtoList;

                        }
                        else if (this.DataLines[innercnt].Trim().Contains("("))
                        {
                            Name = this.DataLines[innercnt].Trim().Split('(')[0];
                            Role = this.DataLines[innercnt].Trim().Split('(')[1].Replace(")", "");
                            this.DataLines[innercnt] = "";
                            iLoopSet = innercnt;

                            if (this.DataLines.Length > innercnt + 1)
                            {
                                Company = this.DataLines[innercnt + 1].Trim();
                                this.DataLines[innercnt + 1] = "";
                                iLoopSet = innercnt + 1;
                            }
                        }
                        else
                        {
                            Name = this.DataLines[innercnt].Trim();
                            this.DataLines[innercnt] = "";
                            iLoopSet = innercnt;

                            if (this.DataLines.Length > innercnt + 1 && regRelationship.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && reTelephone.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 1], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && regCompany.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && regRole.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 1 && regEmail.Match(this.DataLines[innercnt + 1]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 1], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 1;
                                this.DataLines[iLoopSet] = "";
                            }


                            else if (this.DataLines.Length > innercnt + 1 && !this.DataLines[innercnt + 1].Trim().Contains("("))
                            {
                                Role = this.DataLines[innercnt + 1].Trim();
                                this.DataLines[innercnt + 1] = "";
                                iLoopSet = innercnt + 1;

                            }
                            if (this.DataLines.Length > innercnt + 2 && regRelationship.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && reTelephone.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 2], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && regCompany.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && regRole.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && regEmail.Match(this.DataLines[innercnt + 2]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 2], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 2;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 2 && !rePhone.Match(this.DataLines[innercnt + 2].Trim()).Success)
                            {
                                Company = this.DataLines[innercnt + 2].Trim();
                                this.DataLines[innercnt + 2] = "";
                                iLoopSet = innercnt + 2;
                            }
                            if (this.DataLines.Length > innercnt + 3 && regRelationship.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && reTelephone.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 3], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && regCompany.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && regRole.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 3 && regEmail.Match(this.DataLines[innercnt + 3]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 3], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 3;
                                this.DataLines[iLoopSet] = "";
                            }

                            if (this.DataLines.Length > innercnt + 4 && regRelationship.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && reTelephone.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 4], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && regCompany.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && regRole.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 4 && regEmail.Match(this.DataLines[innercnt + 4]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 4], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 4;
                                this.DataLines[iLoopSet] = "";
                            }
                            if (this.DataLines.Length > innercnt + 5 && regRelationship.Match(this.DataLines[innercnt + 5]).Success)
                            {
                                Relationship = regRelationship.Replace(this.DataLines[innercnt + 5], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 5;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 5 && reTelephone.Match(this.DataLines[innercnt + 5]).Success)
                            {
                                Contact = reTelephone.Replace(this.DataLines[innercnt + 5], "").Replace(":", "").Replace("\t", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 5;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 5 && regCompany.Match(this.DataLines[innercnt + 5]).Success)
                            {
                                Company = regCompany.Replace(this.DataLines[innercnt + 5], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 5;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 5 && regRole.Match(this.DataLines[innercnt + 5]).Success)
                            {
                                Role = regRole.Replace(this.DataLines[innercnt + 5], "").Replace("\t", "").Replace(":", "").Replace(".", "").Trim();
                                iLoopSet = innercnt + 5;
                                this.DataLines[iLoopSet] = "";
                            }
                            else if (this.DataLines.Length > innercnt + 5 && regEmail.Match(this.DataLines[innercnt + 5]).Success)
                            {
                                EmailID = regEmail.Replace(this.DataLines[innercnt + 5], "").Replace("\t", "").Replace(":", "").Trim();
                                iLoopSet = innercnt + 5;
                                this.DataLines[iLoopSet] = "";
                            }



                        }

                        #region  "Address picking"

                        for (int innerAddress = iLoopSet; innerAddress < this.DataLines.Length && innerAddress < (iLoopSet + 3); innerAddress++)
                        {
                            if (string.IsNullOrEmpty(this.DataLines[innerAddress])) continue;
                            if (rePhone.Match(this.DataLines[innerAddress].Trim()).Success || reMobile.Match(this.DataLines[innerAddress].Trim()).Success || this.DataLines[innercnt].Trim().Contains("Name\t\t\t:") || this.DataLines[innercnt].Trim().Contains("Name\t\t\t:")) break;
                            if (!string.IsNullOrEmpty(Address))
                                Address += "," + this.DataLines[innerAddress].Trim();
                            else
                                Address = this.DataLines[innerAddress].Trim();
                            this.DataLines[innerAddress] = "";
                            iLoopSet = innerAddress;
                        }
                        #endregion


                        if (this.DataLines.Length > iLoopSet + 1 && rePhone.Match(this.DataLines[iLoopSet + 1].Trim()).Success)
                        {

                            StringBuilder sbPhone = new StringBuilder();
                            char[] aComma = { ',', '/' };


                            string[] arrPM = this.DataLines[iLoopSet + 1].Trim().Split(aComma, StringSplitOptions.RemoveEmptyEntries);
                            for (int PM = arrPM.GetLowerBound(0); PM <= arrPM.GetUpperBound(0); PM++)
                            {
                                arrPM[PM] = opGetNumberOnly(arrPM[PM].Trim());
                                if (opIsPhone(arrPM[PM].Trim()))
                                {
                                    if (arrPM[PM].Trim().Length == 6)
                                        if (opValidatePinCode(arrPM[PM].Trim()) == true)
                                            continue;
                                    if (sbPhone.ToString().Trim() == "")
                                        sbPhone.Append(arrPM[PM]);
                                    else
                                        sbPhone.Append("," + arrPM[PM]);
                                }
                            }
                            aComma = null;
                            if ((sbPhone != null && sbPhone.Length > 0))
                            {
                                Contact = sbPhone.ToString();

                                Contact = opGetParseUniqueData(Contact);
                            }
                            this.DataLines[iLoopSet + 1] = "";

                            iLoopSet = iLoopSet + 1;
                        }

                        if (this.DataLines.Length > iLoopSet + 1 && reMobile.Match(this.DataLines[iLoopSet + 1].Trim()).Success)
                        {
                            StringBuilder sbMobile = new StringBuilder();
                            char[] aComma = { ',' };
                            string strphoneNo = opGetNumberOnly(this.DataLines[iLoopSet + 1].Trim());
                            string[] arrPM = strphoneNo.Split(aComma, StringSplitOptions.RemoveEmptyEntries);
                            for (int PM = arrPM.GetLowerBound(0); PM <= arrPM.GetUpperBound(0); PM++)
                                if (arrPM[PM].Trim().Length > 9)// (opIsMobile(arrPM[PM].Trim())  )
                                {
                                    if (arrPM[PM].Trim().Length == 6)
                                        if (opValidatePinCode(arrPM[PM].Trim()) == true)
                                            continue;
                                    arrPM[PM] = opCheckMobileFormat(arrPM[PM].Trim());
                                    if (sbMobile.ToString().Trim() == "")
                                        sbMobile.Append(arrPM[PM]);
                                    else
                                        sbMobile.Append("," + arrPM[PM]);
                                }
                            aComma = null;
                            if ((sbMobile != null && sbMobile.Length > 0))
                            {
                                Contact += "," + sbMobile.ToString();

                            }
                            this.DataLines[iLoopSet + 1] = "";
                            iLoopSet = iLoopSet + 1;
                        }

                        if (this.DataLines.Length > iLoopSet + 1 && IsValidEmail(this.DataLines[iLoopSet + 1].Trim()))
                        {
                            EmailID = regEmail.Replace(this.DataLines[iLoopSet + 1], "").Replace("\t", "").Replace(":", "").Trim();
                            this.DataLines[iLoopSet + 1] = "";
                            iLoopSet = iLoopSet + 1;

                        }
                    AddtoList:
                        Contact = opGetParseUniqueData(Contact);
                        if (!string.IsNullOrEmpty(Name))
                        {
                            aListRefernce.Add(new MyReferenceDetails(Name, Role, EmailID, Contact, Company, Address.Replace(",,", ","), Relationship));


                        }
                        if (iLoopSet > 0)
                            innercnt = iLoopSet;
                    }
                }
                #endregion

                rePhone = null;

                reBreaj = null;
                reTelephone = null;
                regRole = null;
                regCompany = null;
                regEmail = null;
                regRelationship = null;
            }
            catch (Exception ex) { System.Diagnostics.Debug.Assert(false, ex.StackTrace); }


        }


        #endregion

        private string DateParse(string strParseDOB)
        {
            int i = 0;
            string dtParse = null;

            if (strParseDOB.Length > 1)
            {
                try
                {
                    StringToDate objStrToDate = new StringToDate();
                    int iFormat1 = 0, iFormat2 = 0;
                    char[] Cset = { ' ', '/', '-', ',', '.' };

                    string[] dateFormat = null;

                    for (i = 0; i <= Cset.Length - 1; i++)
                    {
                        dateFormat = strParseDOB.Split(Cset);
                        if (dateFormat.Length > 2)
                            break;

                    }
                    if (dateFormat.Length >= 4)
                    {
                        int iJK = 0;
                        for (int iNN = 0; iNN <= dateFormat.Length - 1; iNN++)
                        {
                            if (dateFormat[iNN].Replace("–", "").Replace("/", "").Replace("DAY", "").Replace("OF", "").Replace("TH", "").Replace("ST", "").Replace("ND", "").Replace("RD", "").Replace("-", "").Replace(".", "").Trim() != "")
                            {
                                dateFormat[iJK] = dateFormat[iNN];
                                iJK++;
                            }
                        }
                    }
                    if (char.IsNumber(dateFormat[0].ToCharArray()[0]))
                        iFormat1 = 1;
                    if (dateFormat.Length > 1)
                    {
                        if (char.IsNumber(dateFormat[1].ToCharArray()[0]))
                            iFormat2 = 1;
                    }

                    if (iFormat1 == 0 && iFormat2 == 1)
                        dtParse = objStrToDate.dhCStrdate(strParseDOB, "").ToString();
                    else if (iFormat1 == 1 && iFormat2 == 0)
                        dtParse = objStrToDate.dhCStrdate(strParseDOB, "").ToString();
                    else if (iFormat1 == 1 && iFormat2 == 1)
                        dtParse = objStrToDate.dhCStrdate(strParseDOB, "").ToString();
                   
                }
                catch
                {
                    return "";
                }
                 var dtt= DateTime.Parse(dtParse.ToString(), CultureInfo.InvariantCulture, DateTimeStyles.NoCurrentDateDefault);
                
                return dtt.ToString();
               
            }
            return "";
        }

        public JObject beCheckDBConnection()
        {
            return DBConnection.IsDBConnected();
        }

        #region [Parser Name Search]
        /// <summary>
        /// Get Parser Mapping by name
        /// and returns a List
        /// </summary
        /// <param name=Get specific Location </param>
        /// <param name="sName"></param>Get Parser Mapping  based on Name search by sName</param>
        /// <remarks>Getting Parser Mapping  details by sName </remarks>
        /// <returns>List</returns>
        public JObject beGetParserNameSearch(string MappingType, string keyWord)
        {
            // Note:Id:0: Success , -1 then No Content, -4: DB error with details msg
            JObject beResponse = null;
            JToken Jvalue = null;
            try
            {
                List<HCDBObjects.NameSearch> oReturn = new List<HCDBObjects.NameSearch>();
                using (SqlConnection ocon = DBConnection.GetsqlConnection())
                {
                    using (DataContext odc = new DataContext(ocon))
                    {
                        // 2: Value indicates Name search. based on @Action parameter we are managing on procedure level
                        string tQuery = "usp_GetParserNameSearchForMasters {0},{1},{2}";
                        var results = odc.ExecuteQuery<HCDBObjects.NameSearch>(tQuery,MappingType, keyWord,0);// Need to introduce Language Type
                        oReturn = results.ToList<HCDBObjects.NameSearch>();
                    }
                }
                // Check Whether data found or not. If found any data then return the data else return Id=-1.  which is indicates nocontent
                if (oReturn != null && oReturn.Count > 0)
                {
                    //Return data
                    Jvalue = JToken.FromObject(oReturn);
                    beResponse = new JObject(
                        new JProperty("Id", 0),
                        new JProperty("JValue", Jvalue));

                }
                else
                {
                    // Note: No data found response
                    beResponse = new JObject(
                                new JProperty("Id", -1));
                }

            }

            catch (Exception ex)
            {
                FCommon.opWriteLog(ex);
                beResponse = new JObject(
                        new JProperty("Id", -4));
            }
            return beResponse;

        }

        #endregion
    }

    public class GetExpYear
    {
        private string tDob = "";
        private int iYear = 1;
        private string tEducationCompletedYear = "";
        private string tResumeText = "";
        private string[] wordsArr = { "FRESHER", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN", "TWENTY", "TWENTY ONE", "TWENTY TWO", "TWENTY THREE", "TWENTY FOUR", "TWENTY FIVE", "TWENTY SIX", "TWENTY SEVEN", "TWENTY EIGHT", "TWENTY NINE", "THIRTY", "THIRTY ONE", "THIRTY TWO", "THIRTY THREE", "THIRTY FOUR", "THIRTY FIVE", "THIRTY SIX", "THIRTY SEVEN", "THIRTY EIGHT", "THIRTY NINE", "FORTY", "FORTY ONE", "FORTY TWO", "FORTY THREE", "FORTY FOUR", "FORTY FIVE" };
        private int iStart, iEnd;

        public GetExpYear(string CandidateDOB)
        {
            try
            {
                tDob = CandidateDOB.Replace("ST", "ST ");
                DateTime dt = Convert.ToDateTime(GetDOB(tDob));
                iYear = dt.Year;
            }
            catch
            {
                iYear = 1;
            }
        }
        /// <summary>
        /// Finding the Year from the Candidate DOB
        /// </summary>
        /// <param name="CandidateDOB"></param>
        /// <param name="EducationYear">Education Year with comma separation</param>
        public GetExpYear(string CandidateDOB, string EducationYear)
        {
            try
            {
                tDob = CandidateDOB.Replace("ST", "ST ").Replace("./p", "").Replace("./P", "").Replace("   -", "");
                DateTime dt;
                DateTime.TryParse(GetDOB(tDob), out dt);
                iYear = dt.Year;
            }
            catch { }
            tEducationCompletedYear = EducationYear;
        }
        /// <summary>
        /// Checking the Strings Left Side from the matched postion
        /// </summary>
        /// <param name="pos">position of the matched string</param>
        /// <param name="strResuemtext">resume converted text</param>
        /// <returns>true means matched string is not a correct string for Total Experience</returns>
        private Boolean checkStatus(int pos, string strResuemtext)
        {
            try
            {
                Boolean ageStatus = false;
                string[] strStatus = { "board/university", "age&dob", "-old", "old:", " old ", "aged", "age:", "age", "duration", "certificate", "male/", "male,", " male ", "female", "pursuing", "mark", "reputed", "education", "qualification", "diploma", " personal ", "notice", "growth", "tenure", "firstrank", "certification", "personal:male", "promotedtwice", "firstgenerationentrepreneurs", "aleadingitcompany", "good", "whohadan", "aging" };
                int strPosStart = pos - 50;
                int strPosEnd = 50;
                int i;
                if (strPosStart.ToString().Trim().StartsWith("-"))
                    strPosStart = 0;

                if (strResuemtext.Trim().Length <= strPosEnd)
                    strPosEnd = strResuemtext.Trim().Length - 1;
                string strAge = opTrimString(strResuemtext.Replace("MANAGER", "").Replace("PROJECT MANAGER", "").Replace("PROFESSIONAL GROWTH", "").Trim().Substring(strPosStart, strPosEnd).Replace("MANAGEMENT", "").Replace("AGEMENT", "").Replace("MARKETING", "").Replace("KUMAR", "").Replace("/PURSUING", "").Replace("PERSONAL GROWTH", "").Replace("EDUCATION:", "").Replace("PAGE  OF", ""));
                for (i = 0; i <= strStatus.Length - 1; i++)
                {
                    int agePos = strAge.ToLower().IndexOf(strStatus[i]);
                    if (agePos >= 0)
                    {
                        agePos = (strAge.ToLower().IndexOf("workexperience") < 0) ? strAge.ToLower().IndexOf("experience") : strAge.ToLower().IndexOf("workexperience");
                        //"Work Experience"
                        if (agePos < 0)
                        {
                            ageStatus = true;
                            break;
                        }
                    }
                }
                if (ageStatus == true)
                    return true;
                else
                    return checkStatusRight(pos, strResuemtext);
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// Checking the Strings Right Side from the matched postion
        /// </summary>
        /// <param name="pos">position of the matched string</param>
        /// <param name="strResuemtext">resume converted text</param>
        /// <returns>true means matched string is not a correct string for Total Experience</returns>
        private bool checkStatusRight(int pos, string strResuemtext)
        {
            try
            {
                Boolean ageStatus = false;
                string[] strStatus = { "exceedsusd", "%", "board/university", "person", "-old", "old:", "yearsold", "oldand", " old ", "aged", "age:", "age", "duration", "certificate", " male:", ",male", "male,", " male ", " male", "female", "pursuing", "mark", "personal", "notice", "course", "tenure", "strategic", "article", "firstattempt", "lightyear", "married", "yearold", "b1visa", "yrsyoung" };
                int strPosStart = pos - 1;
                int strPosEnd = 25;
                int i;
                if (strPosStart.ToString().Trim().StartsWith("-"))
                    strPosStart = 0;
                if (strResuemtext.Trim().Length <= (pos + 25))
                    strPosEnd = strResuemtext.Trim().Length - 1;
                String strAge = opTrimString(strResuemtext.Replace("MARKETING", "").Trim().Substring(strPosStart, strPosEnd).Replace("MANAGEMENT", "").Replace("AGEMENT", "").Replace("MANAGE", "").Replace("MARKETING", "").Replace("KUMAR", ""));
                for (i = 0; i <= strStatus.Length - 1; i++)
                {
                    int agePos = strAge.ToLower().IndexOf(strStatus[i]);
                    if (agePos >= 0)
                    {
                        ageStatus = true;
                        break;
                    }
                }
                if (ageStatus == true)
                    return true;
                else
                    return false;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// REmoving the space from string
        /// </summary>
        /// <param name="str1"></param>
        /// <returns></returns>
        private string opTrimString(string str1)
        {
            while (str1.IndexOf(" ") >= 0)
            {
                str1 = str1.Replace(" ", "");
            }
            return str1;
        }
        /// <summary>
        /// Geting the Date from the "strPArseDOB" string
        /// </summary>
        /// <param name="strParseDOB"></param>
        /// <returns></returns>
        private string GetDOB(string strParseDOB)
        {
            int i = 0;
            string dtParse = null;
            if (strParseDOB.Length > 1)
            {
                try
                {
                    StringToDate objStrToDate = new StringToDate();
                    int iFormat1 = 0, iFormat2 = 0;
                    char[] Cset = { ' ', '/', '-', ',', '.' };

                    string[] dateFormat = null;

                    for (i = 0; i < Cset.Length - 1; i++)
                    {
                        dateFormat = strParseDOB.Split(Cset);
                        if (dateFormat.Length > 2)
                            break;

                    }
                    if (dateFormat.Length >= 4)
                    {
                        int iJK = 0;
                        for (int iNN = 0; iNN < dateFormat.Length - 1; iNN++)
                        {
                            if (dateFormat[iNN].Replace("–", "").Replace("/", "").Replace("DAY", "").Replace("OF", "").Replace("TH", "").Replace("ST", "").Replace("ND", "").Replace("RD", "").Replace("-", "").Replace(".", "").Trim() != "")
                            {
                                dateFormat[iJK] = dateFormat[iNN];
                                iJK++;
                            }
                        }
                    }
                    if (char.IsNumber(dateFormat[0].ToCharArray()[0]))
                        iFormat1 = 1;
                    if (dateFormat.Length > 1)
                    {
                        if (char.IsNumber(dateFormat[1].ToCharArray()[0]))
                            iFormat2 = 1;
                    }

                    if (iFormat1 == 0 && iFormat2 == 1)
                        dtParse = objStrToDate.dhCStrdate(strParseDOB, "").ToString();
                    else if (iFormat1 == 1 && iFormat2 == 0)
                        dtParse = objStrToDate.dhCStrdate(strParseDOB, "").ToString();
                    else if (iFormat1 == 1 && iFormat2 == 1)
                        dtParse = objStrToDate.dhCStrdate(strParseDOB, "").ToString();

                }
                catch
                {
                    return "";
                }
                return dtParse.ToString();
            }
            return "";
        }
        /// <summary>
        /// Get the month from the experienced Text where we matched the string
        /// eg: 1 year 8 months experience
        /// here 1 year we already found then we are checking for month exits on this line 
        /// here we'll get 8 on MonthValue
        /// </summary>
        /// <param name="strText"></param>
        /// <param name="position"></param>
        /// <returns></returns>
        private Decimal CalculateMonth(string strText, int position)
        {
            string MonthValue = "0";
            try
            {
                int strPosEnd = 22;
                if (strText.Trim().Length <= (position + 22))
                    strPosEnd = strText.Trim().Length - 1;

                string strAge = opTrimString(strText.Trim().Substring(position + 1, strPosEnd));

                MonthValue = opCheckExperienceAsExperienceMonth(strAge);

                if (Convert.ToInt32(MonthValue) > 11)
                    MonthValue = Convert.ToString(Convert.ToInt32(MonthValue) / 12.0);
                else
                    if (MonthValue.Trim().IndexOf(".") < 0)
                        MonthValue = "." + MonthValue;

            }
            catch { }
            return Convert.ToDecimal(MonthValue);
        }
        /// <summary>
        /// Checking for Month in the strText 
        /// </summary>
        /// <param name="strText"></param>
        /// <returns></returns>
        private string opCheckExperienceAsExperienceMonth(string strText)
        {
            try
            {

                string strResuemtext = strText.ToUpper().Replace("<BR>", System.Environment.NewLine);
                bool flag = false;
                int iMinExp = 0;
                int iMaxExp = 40;
                decimal iExpFoundValue = 0;
                int pos = 0;
                string s1 = "";
                string[] strCheckList = new string[3];
                strCheckList[0] = "MONTH";
                strCheckList[1] = "MONTHS";
                strCheckList[2] = "MTHS";
                int iCount;
                //'1. Take 12 characters after the number match, trim all the spaces adn convert to UCASE
                //'2. Compare with the above list and if match found proceed to Step 3 else goto step 1 for next pattern
                //'3. Take the whole number until the number ends (in next 3 characters only)
                //'4. Take the previous digits and Dot if any upto 4 characters backward 
                //'5. Check the Value if it falls under the teh Experience Range, 
                //'   if YES exit look and consider resume. ELSE goto step 1 for next pattern until end

                int k, p, k1, itmp;
                string strRight, strLeft;//, strMatch;

                // bool ageStatus = false;
                // string[] wordsArr = { "FRESHER", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN", "TWENTY", "TWENTY ONE", "TWENTY TWO", "TWENTY THREE", "TWENTY FOUR", "TWENTY FIVE", "TWENTY SIX", "TWENTY SEVEN", "TWENTY EIGHT", "TWENTY NINE", "THIRTY", "THIRTY ONE", "THIRTY TWO", "THIRTY THREE", "THIRTY FOUR", "THIRTY FIVE", "THIRTY SIX", "THIRTY SEVEN", "THIRTY EIGHT", "THIRTY NINE", "FORTY", "FORTY ONE", "FORTY TWO", "FORTY THREE", "FORTY FOUR", "FORTY FIVE" };

                iStart = iMinExp;
                iEnd = iMaxExp;

                try
                {
                    for (k = iEnd; k >= 0; k--)
                    {
                        //'For k = iStart To iEnd
                        iCount = 0;
                        s1 = Convert.ToString(k);
                        while (iCount < 2)
                        {
                            iCount++;
                            if (iCount == 1)
                                s1 = Convert.ToString(k);
                            else
                                s1 = wordsArr[k];
                            pos = 1;
                            //pos = .IndexOf(pos, strResuemtext, s1, CompareMethod.Text);
                            try
                            {
                                pos = strResuemtext.IndexOf(s1, pos);
                                if (iCount == 1)
                                {
                                    while (pos > 0)
                                    {
                                        try
                                        {
                                            itmp = strResuemtext.Substring(pos).Length;
                                            if (itmp > 15)
                                                itmp = 15;
                                            else
                                                itmp = itmp - 1;
                                            //if((pos+1))
                                            strRight = opTrimString(strResuemtext.Substring(pos + 1, itmp));
                                            flag = false;
                                            for (k1 = 0; k1 <= 2; k1++)
                                            {
                                                if (strRight.IndexOf(strCheckList[k1]) >= 0)
                                                {
                                                    flag = true;
                                                    break;
                                                }
                                            }
                                            if (flag == true)
                                            {
                                                if (checkStatus(pos, strResuemtext) == false)
                                                {
                                                    //'if (checkExperienceWord(pos, strResuemtext) == true)
                                                    //{
                                                    strLeft = strResuemtext.Substring(pos, 1);
                                                    for (p = 1; p <= 4; p++)
                                                    {
                                                        if ((pos - p) >= 0)
                                                        {
                                                            if (strResuemtext.Substring(pos - p, 1).IndexOf(".") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("0") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("1") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("2") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("3") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("4") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("5") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("6") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("7") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("8") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("9") >= 0)//if (strResuemtext.Substring(pos - p - 1, 1).IndexOf(".0123456789") > 0)
                                                                strLeft = strResuemtext.Substring(pos - p, 1) + strLeft;
                                                            else
                                                                break;
                                                        }
                                                        else
                                                            break;
                                                    }

                                                    for (p = 0; p <= 3; p++)
                                                    {
                                                        if (strRight.Substring(p, 1).IndexOf(".") >= 0 || strRight.Substring(p, 1).IndexOf("0") >= 0 || strRight.Substring(p, 1).IndexOf("1") >= 0 || strRight.Substring(p, 1).IndexOf("2") >= 0 || strRight.Substring(p, 1).IndexOf("3") >= 0 || strRight.Substring(p, 1).IndexOf("4") >= 0 || strRight.Substring(p, 1).IndexOf("5") >= 0 || strRight.Substring(p, 1).IndexOf("6") >= 0 || strRight.Substring(p, 1).IndexOf("7") >= 0 || strRight.Substring(p, 1).IndexOf("8") >= 0 || strRight.Substring(p, 1).IndexOf("9") >= 0)         //if (strRight.Substring(p, 1).IndexOf(".0123456789") > 0)
                                                            strLeft = strLeft + strRight.Substring(p, 1);
                                                        else
                                                            break;
                                                    }
                                                    //' Validate strLeft
                                                    if (strLeft.Substring(0, 1) == "." && strLeft.IndexOf(".", 2) > 0)
                                                        strLeft = strLeft.Substring(1);
                                                    iExpFoundValue = Convert.ToDecimal(strLeft);
                                                    if (iExpFoundValue >= iMinExp && iExpFoundValue <= iMaxExp)
                                                        return iExpFoundValue.ToString();
                                                    //}
                                                }
                                            }
                                        }
                                        catch
                                        {

                                        }
                                        if (strResuemtext.Length > pos + 4)
                                            pos = strResuemtext.IndexOf(s1, pos + 4);
                                        else
                                            pos = -1;
                                        //pos = strResuemtext.IndexOf(s1, pos + 4);
                                    }
                                }
                                else
                                {
                                    while (pos > 0)
                                    {
                                        try
                                        {
                                            itmp = strResuemtext.Substring(pos).Length;
                                            if (itmp > 25)
                                                itmp = 25;
                                            else
                                                itmp = itmp - 1;
                                            strRight = opTrimString(strResuemtext.Substring(pos, itmp));
                                            for (k1 = 0; k1 <= 2; k1++)
                                            {
                                                if (strRight.IndexOf(strCheckList[k1]) >= 0)
                                                {
                                                    if (checkStatus(pos, strResuemtext) == false)
                                                        return k.ToString();
                                                }
                                            }
                                        }
                                        catch
                                        {

                                        }
                                        if (strResuemtext.Length > pos + 4)
                                            pos = strResuemtext.IndexOf(s1, pos + 4);
                                        else
                                            pos = -1;
                                        //pos = strResuemtext.IndexOf(s1, pos + 4);
                                    }
                                }
                            }
                            catch// (Exception ex)
                            {
                                // 
                            }
                        }
                    }
                }
                catch
                {
                }
            }
            catch { }
            return "0";
        }
        /// <summary>
        /// get the maximum of education year
        /// </summary>
        /// <returns></returns>
        public int GetMaxEducationYear()
        {
            int iBig = 0;
            string[] aEduYear = null;
            try
            {
                aEduYear = tEducationCompletedYear.Split(',');
                for (int i = 0; i <= aEduYear.GetUpperBound(0); i++)
                    if (iBig < Convert.ToInt32(aEduYear[i]))
                        iBig = Convert.ToInt32(aEduYear[i]);
            }
            catch
            {
                iBig = 0;
            }
            return iBig;
        }
        /// <summary>
        /// get the minimum of education year
        /// </summary>
        /// <returns></returns>
        private int GetMinEducationYear()
        {
            int iSmall = 0;
            string[] aEduYear = null;
            try
            {
                aEduYear = tEducationCompletedYear.Split(',');
                int k = 0;
                for (int i = 0; i <= aEduYear.GetUpperBound(0); i++)
                    if (aEduYear[i].Trim() != "")
                    {
                        aEduYear[k] = aEduYear[i];
                        k = k + 1;
                    }
                iSmall = Convert.ToInt32(aEduYear[0]);
                for (int i = 0; i <= aEduYear.GetUpperBound(0); i++)
                {
                    if (aEduYear[i].Trim() != "")
                        if (iSmall > Convert.ToInt32(aEduYear[i]))
                            iSmall = Convert.ToInt32(aEduYear[i]);
                }
            }
            catch
            {
                iSmall = 0;
            }
            return iSmall;
        }
        /// <summary>
        /// Checking DOB from the Total Experience
        /// </summary>
        /// <param name="tocheck"></param>
        /// <returns></returns>
        private bool checkDOB(decimal tocheck)
        {
            Boolean bFlag = false;
            int iCurrentYear = DateTime.Now.Year;
            int iCheckYear = 0;
            try
            {
                if (iYear == 1 || iCurrentYear <= iYear)
                { }
                else
                {
                    iCheckYear = iCurrentYear - iYear - 15;
                    if (iCheckYear <= tocheck)
                        bFlag = true;
                }
                //if (bFlag == false && tEducationCompletedYear != "")
                //    bFlag = checkEducationYear(tocheck);
            }
            catch
            {
                return false;
            }
            return bFlag;
        }
        /// <summary>
        /// Check the experience with educatio year
        /// step a. Get the max education year
        /// step b. if DOB is there Check Exp with the deciaml value
        /// </summary>
        /// <param name="tocheck"></param>
        /// <returns></returns>
        private bool checkEducationYear(decimal tocheck)
        {
            Boolean bFlag = false;
            int iCurrentYear = DateTime.Now.Year;
            int iCheckYear = 0;
            int iDOBYear = 0;
            try
            {
                if (tEducationCompletedYear != "")
                {
                    int iEduYear = GetMaxEducationYear();
                    iCheckYear = iCurrentYear - iEduYear;
                    if (iYear != 1 && iYear <= iCurrentYear)
                        iDOBYear = iCurrentYear - iYear - 15;

                    if (iDOBYear != 0)
                    {
                        if (iCheckYear < tocheck && (iDOBYear < tocheck))
                        {
                            bFlag = true;
                            iEduYear = GetMinEducationYear();
                            iCheckYear = iCurrentYear - iEduYear;
                            if (iCheckYear < tocheck)
                                bFlag = true;
                            else
                                bFlag = false;
                        }
                    }
                    else
                    {
                        if (iCheckYear < tocheck)
                        {
                            bFlag = true;
                            iEduYear = GetMinEducationYear();
                            iCheckYear = iCurrentYear - iEduYear;
                            if (iCheckYear + 1 < tocheck)
                            {
                                bFlag = true;
                                int iAge = getAge();
                                if (iAge != 0)
                                    bFlag = checkAge(tocheck, iAge);
                            }
                            else
                                bFlag = false;
                        }
                    }
                }

            }
            catch
            {
                return false;
            }
            return bFlag;
        }
        /// <summary>
        /// Geting the Age of Candidate from the ResumeText
        /// </summary>
        /// <returns></returns>
        private int getAge()
        {
            int posAge = 0;
            int posYear = 15;
            //int posEnd = 15;
            string tMatchedString = "0";
            try
            {
                posAge = tResumeText.IndexOf("AGE", 1);
                while (posAge > 0)
                {
                    if (tResumeText.Trim().Length <= (posAge + 15))
                        posYear = tResumeText.Trim().Length - 1;

                    if (posYear != 0 && posAge != tResumeText.Trim().Length - 1)
                    {
                        try
                        {
                            tMatchedString = tResumeText.Substring(posAge - 1, posYear).Replace(":", "").Replace("AGE", "").Replace("YEARS", "").Trim();
                            tMatchedString = opTrimString(tMatchedString);
                        }
                        catch
                        {
                            tMatchedString = "";
                        }
                        if (tMatchedString != "" && tMatchedString.Trim().Length < 3)
                        {
                            return Convert.ToInt32(tMatchedString);
                        }
                    }
                    posAge = tResumeText.IndexOf("AGE", posAge + 4);
                }
            }
            catch { }
            return 0;
        }
        /// <summary>
        /// cheking the decimal with age
        /// </summary>
        /// <param name="tocheck"></param>
        /// <param name="iAge"></param>
        /// <returns></returns>
        private bool checkAge(decimal tocheck, int iAge)
        {
            try
            {
                if (tocheck > iAge - 15)
                    return true;
                else
                    return false;
            }
            catch { }
            return false;
        }
        /// <summary>
        /// Checking the string contain / 
        /// eg: 15/2
        /// </summary>
        /// <param name="tcheck"></param>
        /// <returns></returns>
        private bool CheckSlashStatus(string tcheck)
        {
            bool iFlag = false;
            char[] aCheckSlash = null;
            try
            {
                aCheckSlash = tcheck.ToCharArray();
                int k = 0;
                for (int i = 0; i <= aCheckSlash.GetUpperBound(0); i++)
                {
                    if (aCheckSlash[i].ToString().Trim() != "")
                    {
                        aCheckSlash[k] = aCheckSlash[i];
                        k = k + 1;
                    }
                }
                int posSlash = -1;
                for (int i = 0; i <= aCheckSlash.GetUpperBound(0); i++)
                {
                    if (((aCheckSlash[i] == '/' || aCheckSlash[i] == '/') || (aCheckSlash[i] == '\\' || aCheckSlash[i] == '\\')) && i != aCheckSlash.GetUpperBound(0))
                    {
                        posSlash = i;
                        break;
                    }
                }
                if (posSlash != -1 && posSlash != 0 && posSlash != aCheckSlash.GetUpperBound(0))
                    if (Char.IsNumber(aCheckSlash[posSlash - 1]) && Char.IsNumber(aCheckSlash[posSlash + 1]) && Convert.ToInt32(aCheckSlash[posSlash + 1].ToString()) < 4 && Convert.ToInt32(aCheckSlash[posSlash + 1].ToString()) != 0)
                        iFlag = true;


            }
            catch
            {
                iFlag = false;
            }
            return iFlag;
        }
        /// <summary>
        /// if experience related word is not found with in the 50 characters from the matching word position
        /// check for  "total experience", "experience:", "experience  " with 100 characters
        /// </summary>
        /// <param name="strResumeText"></param>
        /// <param name="ipos">position of the match</param>
        /// <returns></returns>
        private bool checkTotalExperiene(string strResumeText, int ipos)
        {
            try
            {
                int strPosStart = ipos - 100;
                int strPosEnd = 100;
                int i;
                if (strPosStart.ToString().Trim().StartsWith("-"))
                    strPosStart = 0;

                if (strResumeText.Trim().Length <= strPosEnd)
                    strPosEnd = strResumeText.Trim().Length - 1;

                string tCompare = strResumeText.Substring(strPosStart, strPosEnd);
                bool ageStatus = false;
                string[] strStatus = { "total experience", "experience:", "experience  ", "experience\r\n" };
                for (i = 0; i <= strStatus.Length - 1; i++)
                {
                    int agePos = tCompare.ToLower().IndexOf(strStatus[i]);
                    if (agePos >= 0)
                    {
                        ageStatus = true;
                        break;
                    }
                }
                if (ageStatus == true)
                    return true;
                else
                    return false;

            }
            catch
            {
            }
            return false;
        }
        /// <summary>
        /// checking the experience from the resume document
        /// step a. Checking for Number's 0 to 40
        /// step b. if Number Found in REsumeText
        ///     step 1. Check for array value exits in the matched position s"strCheckList"
        ///     step 2. Array Value exits on string 
        ///         step x. Checking that String Left And Right - for checcking rigt string we found
        ///         step y. Cechking for Experience word from the string
        ///         step z. if found then filtering the number from the string
        /// </summary>
        /// <param name="strText"></param>
        /// <returns></returns>
        public decimal opCheckExperience(string strText)
        {
            int iCount;
            string strResuemtext = strText.Replace("1.Period", "").Replace("Exposure to SEI – CMM", "").Replace("Professional & Educational Details", "").ToUpper().Replace("ORACLE8I", " ");
            try
            { //''remove age
                int iage;
                iage = strResuemtext.IndexOf("AGE: ", 1);
                if (iage > 0)
                    strResuemtext = strResuemtext.Remove(iage, 8);
            }
            catch { }
            tResumeText = strResuemtext;
            bool flag = false;
            int iMinExp = 0;
            int iMaxExp = 39;
            decimal iExpFoundValue = 0;
            int pos = 0;
            int posHigherMatch = 0;
            string s1;
            string s1DotMatching = "";
            string s1DotMatching1 = "";
            string[] strCheckList = new string[8];


            if (iMinExp <= 1)
                strCheckList[0] = "YR.";
            else
                strCheckList[0] = "YRS.";

            strCheckList[1] = "YEAR";
            strCheckList[2] = "YAER"; //YAER
            strCheckList[3] = "+YR.";
            strCheckList[4] = "+YEAR";
            strCheckList[5] = "+YAER";
            strCheckList[6] = "PLUSYEAR";
            strCheckList[7] = "YRS";

            //strCheckList[8] = "years";


            //'1. Take 12 characters after the number match, trim all the spaces adn convert to UCASE
            //'2. Compare with the above list and if match found proceed to Step 3 else goto step 1 for next pattern
            //'3. Take the whole number until the number ends (in next 3 characters only)
            //'4. Take the previous digits and Dot if any upto 4 characters backward 
            //'5. Check the Value if it falls under the teh Experience Range, 
            //'   if YES exit look and consider resume. ELSE goto step 1 for next pattern until end

            int k, p, k1, itmp;
            string strRight, strLeft;//, strMatch;

            iStart = iMinExp;
            iEnd = iMaxExp;

            for (k = iEnd; k >= 0; k--)
            {
                iCount = 0;
                s1 = Convert.ToString(k);
                while (iCount < 2)
                {
                    iCount++;
                    if (iCount == 1)
                        s1 = Convert.ToString(k);
                    else
                        s1 = wordsArr[k];
                    pos = 0;
                    //pos = .IndexOf(pos, strResuemtext, s1, CompareMethod.Text);
                    try
                    {
                        pos = strResuemtext.IndexOf(s1, pos);

                        if (iCount == 1)
                        {
                            while (pos >= 0)
                            {
                                try
                                {
                                    s1DotMatching = "." + s1;
                                    s1DotMatching1 = "/" + s1;
                                    try
                                    {
                                        // posHigherMatch = IIf(strResuemtext.IndexOf((pos = 0? 1: ((pos - 1) <= 0? 1: pos - 1)), strResuemtext, s1DotMatching, CompareMethod.Text) = 0, .IndexOf(IIf(pos = 0, 1, IIf((pos - 1) <= 0, 1, pos - 1)), strResuemtext, s1DotMatching1, CompareMethod.Text), .IndexOf(IIf(pos = 0, 1, IIf((pos - 1) <= 0, 1, pos - 1)), strResuemtext, s1DotMatching, CompareMethod.Text));
                                        posHigherMatch = (strResuemtext.IndexOf(s1DotMatching, (pos == 0 ? 0 : ((pos - 1) < 0 ? 0 : pos - 1))) < 0 ? strResuemtext.IndexOf(s1DotMatching1, (pos == 0 ? 0 : ((pos - 1) < 0 ? 0 : pos - 1))) : strResuemtext.IndexOf(s1DotMatching, (pos == 0 ? 0 : ((pos - 1) < 0 ? 0 : pos - 1))));
                                    }
                                    catch
                                    {
                                        posHigherMatch = 0;
                                    }
                                    if (posHigherMatch == 0) posHigherMatch = -1;

                                    if (posHigherMatch + 1 != pos || posHigherMatch == -1)
                                    {
                                        itmp = strResuemtext.Substring(pos).Length;
                                        if (itmp > 15)
                                            itmp = 15;
                                        else
                                            itmp = itmp - 1;
                                        //'strRight = opTrimString(strResuemtext.Substring(pos, itmp))

                                        strRight = strResuemtext.Substring(pos - 1, itmp).Trim();
                                        flag = false;
                                        for (k1 = 0; k1 <= 7; k1++)
                                        {
                                            if (strRight.IndexOf(strCheckList[k1]) >= 0)
                                            {
                                                flag = true;
                                                break;
                                            }
                                        }
                                        if (flag == false)
                                        {
                                            try
                                            {
                                                int iStartIndex = pos - 2 - 30;
                                                if (iStartIndex < 0) iStartIndex = 0;
                                                string tRight = strResuemtext.Substring(iStartIndex, 30).Trim();
                                                for (k1 = 0; k1 <= 7; k1++)
                                                {
                                                    if (tRight.IndexOf(strCheckList[k1]) >= 0 || tRight.IndexOf(" YR ") >= 0)
                                                    {
                                                        flag = true;
                                                        break;
                                                    }
                                                }
                                                if (flag == true)
                                                {
                                                    flag = false;
                                                    // goto endtry;
                                                }
                                                int posTExp = (tRight.IndexOf("TOTAL EXPERIENCE") < 0 ? tRight.IndexOf("TOTAL YEARS OF EXPERIENCE") : tRight.IndexOf("TOTAL EXPERIENCE"));
                                                if (posTExp < 0) posTExp = tRight.IndexOf("NUMBER OF YEARS OF EXPERIENCE");
                                                if (posTExp >= 0)
                                                    if ((tRight.IndexOf("YEARS") >= 0) && (tRight.IndexOf("TOTAL YEARS OF EXPERIENCE") < 0) && (tRight.IndexOf("TOTAL EXPERIENCE") < 0) && (tRight.IndexOf("NUMBER OF YEARS OF EXPERIENCE") < 0))
                                                        flag = false;
                                                    else
                                                        flag = true;
                                                else
                                                    flag = false;

                                            }
                                            catch
                                            {
                                                flag = false;
                                            }
                                            //endtry:
                                        }
                                        if (flag == true)
                                        {
                                            if (checkStatus(pos, strResuemtext) == false || strRight.StartsWith("+") == true || strRight.Contains(" YRS") == true)
                                            {
                                                if (checkExperienceWord(pos, strResuemtext) == true || checkTotalExperiene(strResuemtext, pos) == true)
                                                {
                                                    strLeft = strResuemtext.Substring(pos, 1);
                                                    for (p = 1; p <= 4; p++)
                                                    {
                                                        if ((pos - p) >= 0)
                                                            if (strResuemtext.Substring(pos - p, 1).IndexOf(".") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("0") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("1") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("2") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("3") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("4") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("5") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("6") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("7") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("8") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("9") >= 0)
                                                                strLeft = strResuemtext.Substring(pos - p, 1) + strLeft;
                                                            else
                                                                break;
                                                        else
                                                            break;
                                                    }

                                                    if ((strRight.Trim().IndexOf("/") >= 0 || strRight.Trim().IndexOf(@"\") >= 0) && (strRight.Trim().ToLower().IndexOf(@"yes/no") < 0) && CheckSlashStatus(strRight.Trim()) == true)
                                                    {
                                                        //For p = 0 To 3
                                                        for (p = 0; p <= 3; p++)
                                                        {
                                                            if (strRight.Substring(p, 1).IndexOf(".") >= 0 || strRight.Substring(p, 1).IndexOf("0") >= 0 || strRight.Substring(p, 1).IndexOf("1") >= 0 || strRight.Substring(p, 1).IndexOf("2") >= 0 || strRight.Substring(p, 1).IndexOf("3") >= 0 || strRight.Substring(p, 1).IndexOf("4") >= 0 || strRight.Substring(p, 1).IndexOf("5") >= 0 || strRight.Substring(p, 1).IndexOf("6") >= 0 || strRight.Substring(p, 1).IndexOf("7") >= 0 || strRight.Substring(p, 1).IndexOf("8") >= 0 || strRight.Substring(p, 1).IndexOf("9") >= 0) //if (strRight.Substring(p, 1).IndexOf(".0123456789") > 0)//if (strRight.Substring(p, 1).IndexOf(".") >= 0 || strRight.Substring(p, 1).IndexOf("0") >= 0 || strRight.Substring(p, 1).IndexOf("1") >= 0 || strRight.Substring(p, 1).IndexOf("2") > 0 || strRight.Substring(p, 1).IndexOf("3") >= 0 || strRight.Substring(p, 1).IndexOf("4") >= 0 || strRight.Substring(p, 1).IndexOf("5") >= 0 || strRight.Substring(p, 1).IndexOf("6") >= 0 || strRight.Substring(p, 1).IndexOf("7") >= 0 || strRight.Substring(p, 1).IndexOf("8") >= 0 || strRight.Substring(p, 1).IndexOf("9") >= 0 )
                                                            {
                                                                int ipos;
                                                                ipos = (strRight.Substring(p + 1, 1).IndexOf("/") < 0 ? strRight.Substring(p + 1, 1).IndexOf(@"\") : strRight.Substring(p + 1, 1).IndexOf("/"));
                                                                if (ipos < 0)
                                                                {
                                                                    strLeft = strLeft + strRight.Substring(p, 1);
                                                                    strRight = strRight.Remove(p, 1).Trim();
                                                                }
                                                            }
                                                            else
                                                                break;
                                                        }
                                                        string strLeftDiv = "";
                                                        char[] strCharArry = strRight.ToCharArray();
                                                        for (int inn = 0; inn <= strCharArry.Length - 1; inn++)
                                                        {
                                                            if (Char.IsNumber(strCharArry[inn]) == true)
                                                                strLeftDiv = strLeftDiv + strCharArry[inn];
                                                            else if (strCharArry[inn].ToString().Equals(@"/") == true || strCharArry[inn].ToString().Equals(@"\") == true)
                                                                strLeftDiv = strLeftDiv + "/";
                                                        }
                                                        string[] strSplit = strLeftDiv.Split('/');
                                                        if (strSplit.Length == 2)
                                                        {
                                                            int first = 0;
                                                            int second = 0;
                                                            decimal denominator = 0;
                                                            if (strSplit[0].Trim().Length == 3)
                                                            {
                                                                string tStr = strSplit[0];
                                                                first = Convert.ToInt32(strSplit[0].Trim().Substring(0, 2));
                                                                second = Convert.ToInt32(tStr.Trim().Substring(2, 1));
                                                                //'first = Convert.ToInt32()
                                                                //'second = Convert.ToInt32())
                                                            }
                                                            else
                                                            {
                                                                try
                                                                {
                                                                    first = Convert.ToInt32(strSplit[0]);
                                                                }
                                                                catch
                                                                {
                                                                    first = 0;
                                                                }
                                                            }


                                                            if (strSplit[1].Trim().Length != 0)
                                                            {
                                                                try
                                                                {
                                                                    denominator = Convert.ToDecimal(strSplit[1]);
                                                                }
                                                                catch
                                                                {
                                                                    denominator = 0;
                                                                }
                                                            }
                                                            else
                                                                iExpFoundValue = first;

                                                            if (first == 0)
                                                            {
                                                                first = Convert.ToInt32(strLeft);
                                                                if (second != 0 && denominator != 0)
                                                                    iExpFoundValue = first + second / denominator;
                                                                else if (denominator != 0)
                                                                    iExpFoundValue = first / denominator;

                                                                if (iExpFoundValue >= iMinExp && iExpFoundValue <= iMaxExp)
                                                                {
                                                                    if (checkDOB(iExpFoundValue) == false)
                                                                        return Math.Round(iExpFoundValue, 1);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (second != 0 && denominator != 0)
                                                                    iExpFoundValue = Convert.ToDecimal(strLeft) + first + second / denominator;
                                                                else if (denominator != 0)
                                                                {
                                                                    if (strLeft == s1)
                                                                        iExpFoundValue = Convert.ToDecimal(strLeft) + first / denominator;
                                                                    else
                                                                    {
                                                                        strLeft = "0";
                                                                        iExpFoundValue = 0;
                                                                    }
                                                                }
                                                                if (iExpFoundValue >= iMinExp && iExpFoundValue <= iMaxExp)
                                                                    if (checkDOB(iExpFoundValue) == false && iExpFoundValue != 0)
                                                                        return Math.Round(iExpFoundValue, 1);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //for (p = 0; p <= 3; p++)
                                                        for (p = 0; p <= 3; p++)
                                                        {
                                                            try
                                                            {
                                                                if (p == 0)
                                                                    strLeft = "";
                                                                //if (strRight.Substring(p, 1).IndexOf(".0123456789") > 0) //if (strRight.Substring(p, 1).IndexOf(".") >= 0 || strRight.Substring(p, 1).IndexOf("0") >= 0 || strRight.Substring(p, 1).IndexOf("1") >= 0 || strRight.Substring(p, 1).IndexOf("2") > 0 || strRight.Substring(p, 1).IndexOf("3") >= 0 || strRight.Substring(p, 1).IndexOf("4") >= 0 || strRight.Substring(p, 1).IndexOf("5") >= 0 || strRight.Substring(p, 1).IndexOf("6") >= 0 || strRight.Substring(p, 1).IndexOf("7") >= 0 || strRight.Substring(p, 1).IndexOf("8") >= 0 || strRight.Substring(p, 1).IndexOf("9") >= 0 )
                                                                if (strRight.Substring(p, 1).IndexOf(".") >= 0 || strRight.Substring(p, 1).IndexOf("0") >= 0 || strRight.Substring(p, 1).IndexOf("1") >= 0 || strRight.Substring(p, 1).IndexOf("2") >= 0 || strRight.Substring(p, 1).IndexOf("3") >= 0 || strRight.Substring(p, 1).IndexOf("4") >= 0 || strRight.Substring(p, 1).IndexOf("5") >= 0 || strRight.Substring(p, 1).IndexOf("6") >= 0 || strRight.Substring(p, 1).IndexOf("7") >= 0 || strRight.Substring(p, 1).IndexOf("8") >= 0 || strRight.Substring(p, 1).IndexOf("9") >= 0)
                                                                    strLeft = strLeft + strRight.Substring(p, 1);
                                                                else
                                                                    break;
                                                            }
                                                            catch { }
                                                        }
                                                    }
                                                    //' Validate strLeft
                                                    if (strLeft.Substring(0, 1) == "." && strLeft.IndexOf(".", 2) > 0)
                                                        strLeft = strLeft.Substring(1);
                                                    //if (strLeft.Length >= 2 && strRight.IndexOf(" YRS") >= 0)
                                                    //    strLeft = strLeft.Substring(1);
                                                    if (strLeft.Trim().StartsWith("00") || strLeft.Trim().StartsWith("010"))
                                                        iExpFoundValue = 0;
                                                    else
                                                        iExpFoundValue = Convert.ToDecimal(strLeft);

                                                    if (strRight.Trim().IndexOf("½") == 0 || strRight.Trim().IndexOf("&½") == 0 || strRight.Trim().IndexOf("& ½") == 0 || strRight.Trim().IndexOf("-½") == 0 || strRight.Trim().IndexOf("AND ½") == 0 || strRight.Trim().IndexOf("AND HALF") >= 0)
                                                        iExpFoundValue = iExpFoundValue + Convert.ToDecimal(".5");
                                                    if (strRight.Trim().IndexOf("¼") == 0 || strRight.Trim().IndexOf("&¼") == 0 || strRight.Trim().IndexOf("& ¼") == 0 || strRight.Trim().IndexOf("-¼") == 0 || strRight.Trim().IndexOf("AND ¼") == 0)
                                                        iExpFoundValue = iExpFoundValue + Convert.ToDecimal(".3");
                                                    if (iExpFoundValue >= iMinExp && iExpFoundValue <= iMaxExp)
                                                    {
                                                        string[] strSplit = iExpFoundValue.ToString().Split('.');
                                                        string strLastValue = "0";
                                                        if (strSplit.Length == 2)
                                                        {
                                                            strLastValue = strSplit[strSplit.Length - 1];
                                                            if (strLastValue != "0")
                                                                strLastValue = "1";
                                                        }
                                                        decimal dMonth = 0;
                                                        if (strLastValue == "0")
                                                            dMonth = CalculateMonth(strResuemtext, pos);
                                                        iExpFoundValue = iExpFoundValue + dMonth;
                                                        if (checkDOB(iExpFoundValue) == false && iExpFoundValue != 0)
                                                            return Math.Round(iExpFoundValue, 2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                catch
                                {

                                }
                                posHigherMatch = 0;
                                //'posHigherMatch = pos
                                //try { }
                                //catch{}
                                if (strResuemtext.Length > pos + 4)
                                    pos = strResuemtext.IndexOf(s1, pos + 4);
                                else
                                    pos = -1;
                            }
                        }
                        else
                        {
                            while (pos >= 0)
                            {
                                try
                                {
                                    itmp = strResuemtext.Substring(pos).Length;
                                    if (itmp > (20 + s1.Length))
                                        itmp = (20 + s1.Length);
                                    //strRight = opTrimString(strResuemtext.Substring(pos - 1, itmp));
                                    strRight = opTrimString(strResuemtext.Substring(pos, itmp));
                                    for (k1 = 0; k1 <= 7; k1++)
                                    {
                                        if (strRight.IndexOf(strCheckList[k1]) >= 0)
                                        {
                                            if (checkStatus(pos, strResuemtext) == false)
                                            {
                                                if (checkExperienceWord(pos, strResuemtext) == true)
                                                {
                                                    decimal dResult = k;
                                                    decimal dMonth = 0;
                                                    dMonth = CalculateMonth(strResuemtext, pos);
                                                    dResult = dResult + dMonth;
                                                    decimal iHalf = 0;
                                                    decimal iQuarter = 0;
                                                    if (strRight.IndexOf("ANDHALFYEARS") >= 0 || strRight.IndexOf("ANDHALFYEAR") >= 0 || strRight.IndexOf("ANDAHALFYEARS") >= 0)
                                                        iHalf = Convert.ToDecimal("0.5");
                                                    if (iHalf == 0)
                                                        if (strRight.IndexOf("ANDQUARTER") >= 0)
                                                            iQuarter = Convert.ToDecimal("0.3");
                                                    dResult = dResult + iHalf + iQuarter;
                                                    if (checkDOB(dResult) == false)
                                                        return Math.Round(dResult, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                                catch
                                {

                                }
                                if (strResuemtext.Length > pos + 4)
                                    pos = strResuemtext.IndexOf(s1, pos + 4);
                                else
                                    pos = -1;
                            }
                        }
                    }
                    catch //(Exception ex)
                    {
                        //  
                    }
                }
            }
            // Return 0
            return opCheckExperienceAsMonth(strText);
        }
        /// <summary>
        /// if years is not exits check for month in the resume document
        /// </summary>
        /// <param name="strText">ResumeConvertedText</param>
        /// <returns>experience</returns>
        private decimal opCheckExperienceAsMonth(string strText)
        {
            int iCount;
            string strResuemtext = strText.ToUpper();
            bool flag = false;
            int iMinExp = 0;
            int iMaxExp = 50;
            decimal iExpFoundValue;
            int pos = 0;
            string s1;
            string[] strCheckList = new string[2];


            //'If iMinExp <= 1 Then
            //'    strCheckList(0) = "YR."
            //'Else
            //'    strCheckList(0) = "YRS."
            //'End If
            strCheckList[0] = "MONTH";
            strCheckList[1] = "MONTHS";
            //'strCheckList(3) = "+YR."
            //'strCheckList(4) = "+YEAR"
            //'strCheckList(5) = "+YAER"
            //'strCheckList(6) = "PLUSYEAR"

            int k, p, k1, itmp;
            string strRight, strLeft;//, strMatch;
            string[] wordsArr1 = { "FRESHER", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN", "TWENTY", "TWENTY ONE", "TWENTY TWO", "TWENTY THREE", "TWENTY FOUR", "TWENTY FIVE", "TWENTY SIX", "TWENTY SEVEN", "TWENTY EIGHT", "TWENTY NINE", "THIRTY", "THIRTY ONE", "THIRTY TWO", "THIRTY THREE", "THIRTY FOUR", "THIRTY FIVE", "THIRTY SIX", "THIRTY SEVEN", "THIRTY EIGHT", "THIRTY NINE", "FORTY", "FORTY ONE", "FORTY TWO", "FORTY THREE", "FORTY FOUR", "FORTY FIVE", "FORTH SIX", "FORTY SEVEN", "FORTY EIGHT", "FORTY NINE", "FIFTY" };

            iStart = iMinExp;
            iEnd = iMaxExp;
            try
            {
                for (k = iEnd; k >= 0; k--)
                {
                    //'For k = iStart To iEnd
                    iCount = 0;
                    s1 = Convert.ToString(k);
                    while (iCount < 2)
                    {
                        iCount++;
                        if (iCount == 1)
                            s1 = Convert.ToString(k);
                        else
                            s1 = wordsArr1[k];
                        pos = 1;
                        //pos = .IndexOf(pos, strResuemtext, s1, CompareMethod.Text);
                        try
                        {
                            pos = strResuemtext.IndexOf(s1, pos);
                            if (iCount == 1)
                            {
                                while (pos > 0)
                                {
                                    try
                                    {
                                        itmp = strResuemtext.Substring(pos).Length;
                                        if (itmp > 15)
                                            itmp = 15;
                                        else
                                            itmp = itmp - 1;
                                        strRight = opTrimString(strResuemtext.Substring(pos + 1, itmp));
                                        flag = false;
                                        for (k1 = 0; k1 <= 1; k1++)
                                        {
                                            if (strRight.IndexOf(strCheckList[k1]) >= 0)
                                            {
                                                flag = true;
                                                break;
                                            }
                                        }
                                        if (flag == true)
                                        {
                                            if (checkStatus(pos, strResuemtext) == false)
                                            {
                                                if (checkExperienceWord(pos, strResuemtext) == true)
                                                {
                                                    strLeft = strResuemtext.Substring(pos, 1);
                                                    for (p = 1; p <= 4; p++)
                                                    {
                                                        if ((pos - p) >= 0)
                                                        {
                                                            if (strResuemtext.Substring(pos - p, 1).IndexOf(".") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("0") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("1") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("2") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("3") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("4") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("5") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("6") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("7") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("8") >= 0 || strResuemtext.Substring(pos - p, 1).IndexOf("9") >= 0) //if (strResuemtext.Substring(pos - p - 1, 1).IndexOf(".0123456789") > 0)
                                                                strLeft = strResuemtext.Substring(pos - p, 1) + strLeft;
                                                            else
                                                                break;
                                                        }
                                                        else
                                                            break;
                                                    }
                                                    for (p = 0; p <= 3; p++)
                                                    {
                                                        if (strRight.Substring(p, 1).IndexOf(".") >= 0 || strRight.Substring(p, 1).IndexOf("0") >= 0 || strRight.Substring(p, 1).IndexOf("1") >= 0 || strRight.Substring(p, 1).IndexOf("2") > 0 || strRight.Substring(p, 1).IndexOf("3") >= 0 || strRight.Substring(p, 1).IndexOf("4") >= 0 || strRight.Substring(p, 1).IndexOf("5") >= 0 || strRight.Substring(p, 1).IndexOf("6") >= 0 || strRight.Substring(p, 1).IndexOf("7") >= 0 || strRight.Substring(p, 1).IndexOf("8") >= 0 || strRight.Substring(p, 1).IndexOf("9") >= 0) //if (strRight.Substring(p, 1).IndexOf(".0123456789") > 0)
                                                            strLeft = strLeft + strRight.Substring(p, 1);
                                                        else
                                                            break;
                                                    }
                                                    //' Validate strLeft
                                                    if (strLeft.Substring(0, 1) == "." && strLeft.IndexOf(".", 2) > 0)
                                                        strLeft = strLeft.Substring(1);
                                                    iExpFoundValue = Convert.ToDecimal(strLeft);
                                                    if (iExpFoundValue >= iMinExp && iExpFoundValue <= iMaxExp)
                                                    {
                                                        if (iExpFoundValue > 9)
                                                            iExpFoundValue = iExpFoundValue / 12;
                                                        else
                                                        {
                                                            string tMonth = "." + iExpFoundValue.ToString();
                                                            iExpFoundValue = Convert.ToDecimal(tMonth);
                                                        }
                                                        return Math.Round(iExpFoundValue, 1);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    catch
                                    {

                                    }
                                    if (strResuemtext.Length > pos + 4)
                                        pos = strResuemtext.IndexOf(s1, pos + 4);
                                    else
                                        pos = -1;
                                }
                            }
                            else
                            {
                                while (pos > 0)
                                {
                                    try
                                    {
                                        itmp = strResuemtext.Substring(pos).Length;
                                        if (itmp > 25)
                                            itmp = 25;
                                        else
                                            itmp = itmp - 1;
                                        strRight = opTrimString(strResuemtext.Substring(pos, itmp));
                                        for (k1 = 0; k1 <= 1; k1++)
                                        {
                                            if (strRight.IndexOf(strCheckList[k1]) >= 0)
                                            {
                                                if (checkStatus(pos, strResuemtext) == false)
                                                {
                                                    decimal k2 = 0;
                                                    if (k > 9)
                                                        k2 = k / 12;
                                                    else
                                                    {
                                                        string tMonth = "." + k2.ToString();
                                                        k2 = Convert.ToDecimal(tMonth);
                                                    }
                                                    return Math.Round(k2, 1);
                                                }
                                            }
                                        }
                                    }
                                    catch
                                    {

                                    }
                                    if (strResuemtext.Length > pos + 4)
                                        pos = strResuemtext.IndexOf(s1, pos + 4);
                                    else
                                        pos = -1;
                                }
                            }
                        }
                        catch //(Exception ex)
                        {
                            // 
                        }
                    }
                }
            }
            catch
            {
                return 0;
            }
            return 0;
        }
        /// <summary>
        /// Checking the string if experience related word exits or not
        /// </summary>
        /// <param name="pos"> position where number matched </param>
        /// <param name="strResuemtext">resumeConvertedtext</param>
        /// <returns>boolean value if exits returns true else return false</returns>
        private bool checkExperienceWord(int pos, string strResuemtext)
        {
            try
            {
                bool ageStatus = false;
                string[] strStatus = { "exp", "exp.", "experience", "totalyear", "workedfor", "professionalsynopsis", "professionalpractice", "foraperiodof", "years+", "careerspan", "workingasa", "plusyears", "workingsince", "progressivecareer", "trackrecordof", "workedasa", "workedas", "yearsin" };
                //string[] strStatus = { "exp", "exp.", "experience", "totalyear", "workedfor", "professionalsynopsis", "professionalpractice", "foraperiodof", "years+", "careerspan", "workingasa", "plusyears", "workingsince", "progressivecareer", "trackrecordof" };
                int strPosStart = pos - 50;

                int strPosEnd = 80 + 25;
                int i;
                if (strPosStart.ToString().Trim().StartsWith("-"))
                    strPosStart = 0;

                if (strResuemtext.Trim().Length <= strPosEnd)
                    strPosEnd = strResuemtext.Trim().Length - 1;

                //NCREASED DEALER SIZE FROM 25 TO 55 IN A PERIOD OF ONE YEAR ALONG WITH EXCEEDING EXPECTATIONS OF THE COMPA

                string strAge = opTrimString(strResuemtext.Replace("", "").Trim().Substring(strPosStart, strPosEnd).Replace("EXPAND", "").Replace("EXPRESS", "").Replace("EXPECTED", "").Replace("EXPORT", "").Replace("EXPIRY", "").Replace("EXPECTATIONS", ""));
                for (i = 0; i <= strStatus.Length - 1; i++)
                {
                    int agePos = strAge.ToLower().IndexOf(strStatus[i]);
                    if (agePos >= 0)
                    {
                        if (strAge.ToLower().IndexOf("internationaltrainingexperience") >= 0)
                            ageStatus = false;
                        else
                            ageStatus = true;
                        break;
                    }
                }
                if (ageStatus == true)
                    return true;
                else
                    return false;
            }
            catch { }
            return false;
        }


        public string ToHtml(string s, bool nofollow)
        {
            s = HttpUtility.HtmlEncode(s);
            string[] paragraphs = s.Split(new string[] { "\r\n\r\n" }, StringSplitOptions.None);
            StringBuilder sb = new StringBuilder();
            foreach (string par in paragraphs)
            {
                sb.AppendLine("<p>");
                string p = par.Replace(Environment.NewLine, "<br />\r\n");
                if (nofollow)
                {
                    p = Regex.Replace(p, @"\[\[(.+)\]\[(.+)\]\]", "<a href=\"$2\" rel=\"nofollow\">$1</a>");
                    p = Regex.Replace(p, @"\[\[(.+)\]\]", "<a href=\"$1\" rel=\"nofollow\">$1</a>");
                }
                else
                {
                    p = Regex.Replace(p, @"\[\[(.+)\]\[(.+)\]\]", "<a href=\"$2\">$1</a>");
                    p = Regex.Replace(p, @"\[\[(.+)\]\]", "<a href=\"$1\">$1</a>");
                    sb.AppendLine(p);
                }
                sb.AppendLine("</p>");
            }
            return sb.ToString();
        }

    }

    public class StringToDate
    {
        /// <summary>
        /// Getting the Date from a string "strDate"
        /// </summary>
        /// <param name="strDate"></param>
        /// <param name="strFormat"></param>
        /// <returns></returns>
        public DateTime dhCStrdate(string strDate, string strFormat)
        {
            //' Given a string containing a date value, and a format
            //' string describing the information in the date string,
            //' convert the string into a real date value.
            string strYear = "";
            string strMonth = "";
            string strDay = "";
            bool fDone = false;
            int i;//, j;
            i = 0;
            int iFormat = 0;
            DateTime dtdhCStrdate = DateTime.Now;
            string[] dateformat = null;
            string[] month = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
            char[] str = { ' ', '/', '-', ',', '.' };
            strDate = strDate.Trim();
            switch (strFormat.ToUpper())
            {
                case "MMDDYY":
                    strYear = strDate.Substring(4); ;
                    strMonth = strDate.Substring(0, 2);//Left(strDate, 2);
                    strDay = strDate.Substring(2, 2);//Mid(strDate, 3, 2);
                    break;
                case "MMDDYYYY":
                    strYear = strDate.Substring(4);//Mid(strDate, 5);
                    strMonth = strDate.Substring(0, 2);// Left(strDate, 2);
                    strDay = strDate.Substring(2, 2);//Mid(strDate, 3, 2);
                    break;
                case "YYMMDD": //', "yymmdd"
                    strYear = strDate.Substring(0, 2); //Left(strDate, 2);
                    strMonth = strDate.Substring(2, 2);//Mid(strDate, 3, 2);;
                    strDay = strDate.Substring(strDate.Length - 2, 2);//Right(strDate, 2);
                    break;
                case "YYYYMMDD":// ', "yyyymmdd"
                    strYear = strDate.Substring(0, 4);//Left(strDate, 4);
                    strMonth = strDate.Substring(4, 2);// Mid(strDate, 5, 2);
                    strDay = strDate.Substring(strDate.Length - 2, 2);//Right(strDate, 2);
                    break;
                case "DD/MM/YY"://, "DD/MM/YYYY" //', "dd/mm/yyyy", "dd/mm/yyyy"
                    strYear = strDate.Substring(6);//Mid(strDate, 7);
                    strMonth = strDate.Substring(3, 2);//Mid(strDate, 4, 2);
                    strDay = strDate.Substring(0, 2);//Left(strDate, 2);
                    break;
                case "DD/MM/YYYY": //', "dd/mm/yyyy", "dd/mm/yyyy"
                    strYear = strDate.Substring(6);// Mid(strDate, 7);
                    strMonth = strDate.Substring(3, 2);////Mid(strDate, 4, 2);
                    strDay = strDate.Substring(0, 2);//Left(strDate, 2);
                    break;
                case "YY/MM/DD": //', "yy/mm/dd"
                    strYear = strDate.Substring(0, 2);//Left(strDate, 2);
                    strMonth = strDate.Substring(3, 2); //Mid(strDate, 4, 2);
                    strDay = strDate.Substring(strDate.Length - 2, 2);//Right(strDate, 2);
                    break;
                case "YYYY/MM/DD": //', "yyyy/mm/dd"
                    strYear = strDate.Substring(0, 4);//Left(strDate, 4);
                    strMonth = strDate.Substring(5, 2);//Mid(strDate, 6, 2);
                    strDay = strDate.Substring(strDate.Length - 2, 2);//Right(strDate, 2);//
                    break;
                default:
                    //'If none of the other formats were matched,
                    //'just count on Cdate to do the conversion. It may fail,
                    //'but we can't help out here.
                    try
                    {
                        for (i = 0; i <= str.Length - 1; i++)
                        {
                            dateformat = strDate.Split(str[i]);
                            if (dateformat.Length > 2)
                                break;
                        }
                        if (dateformat.Length >= 4)
                        {
                            int iJK = 0;
                            for (i = 0; i <= dateformat.Length - 1; i++)
                            {
                                if (dateformat[i].Replace("–", "").Replace("/", "").Replace("-", "").Replace("DAY", "").Replace("OF", "").Replace("TH", "").Replace("ST", "").Replace("ND", "").Replace("RD", "").Replace(".", "").Trim() != "")
                                {
                                    dateformat[iJK] = dateformat[i];
                                    iJK = iJK + 1;
                                }
                            }
                        }
                        if (char.IsNumber(dateformat[0], 0))
                        {
                            strDay = dateformat[0];
                            if (dateformat[0].Length > 1)
                                if (Char.IsNumber(dateformat[0], 1))
                                    strDay = dateformat[0];
                            for (i = 0; i <= month.Length - 1; i++)
                            {
                                if ((dateformat[1].ToUpper()).StartsWith(month[i]))
                                {
                                    if (i < 9)
                                        strMonth = "0" + Convert.ToString(i + 1);
                                    else
                                        strMonth = Convert.ToString(i + 1);
                                    break;
                                }
                            }
                            if (strMonth.Trim() == "")
                            {
                                if (dateformat[1] != "" && Char.IsNumber(dateformat[1], 0))
                                    if (Convert.ToInt32(dateformat[1]) <= 9)
                                        strMonth = "0" + dateformat[1];
                                    else
                                        strMonth = dateformat[1];
                                else
                                    strMonth = dateformat[1].Replace("–", "").Replace("-", "").Replace("_", "").Replace(".", "").Replace("/", "").Replace(@"\", "").Trim();
                            }
                            iFormat = 1;
                        }
                        else if (Char.IsNumber(dateformat[1], 0))
                        {
                            strDay = dateformat[1];
                            if (dateformat[1].Length > 1)
                                if (Char.IsNumber(dateformat[1], 1))
                                    strDay = dateformat[1];
                            for (i = 0; i <= month.Length - 1; i++)
                            {
                                if ((dateformat[0].ToUpper()).StartsWith(month[i]))
                                {
                                    if (i < 9)
                                        strMonth = "0" + Convert.ToString(i + 1);
                                    else
                                        strMonth = Convert.ToString(i + 1);
                                    break;
                                }
                            }
                            iFormat = 2;
                        }
                        strYear = dateformat[2].ToString().Replace("–", "").Replace("-", "").Replace("_", "").Replace(".", "").Replace("/", "").Replace(@"\", "").Replace("ST", "").Replace("RD", "").Replace("ND", "").Replace("TH", "").Trim();
                        if (strYear.Trim().Length == 0 && dateformat.Length > 3)
                            strYear = dateformat[3].ToString().Replace("–", "").Replace("-", "").Replace("_", "").Replace(".", "").Replace("/", "").Replace(@"\", "").Replace("ST", "").Replace("RD", "").Replace("TH", "").Replace("ND", "").Trim();
                        if (strYear.Trim().Length != 2)
                        {
                            int CurrentYear = System.DateTime.Now.Year;
                            if ((CurrentYear - Convert.ToInt32(strYear) < 15) || (CurrentYear - Convert.ToInt32(strYear) > 75))
                            {
                                strDate = "";
                                fDone = true;
                            }
                        }
                    }
                    catch
                    {
                        DateTime.TryParse(strDate, out dtdhCStrdate); //dtdhCStrdate = DateTime.Parse(strDate);
                        fDone = true;
                    }
                    break;
            }
            try
            {
                if (!fDone)
                {
                    if (iFormat == 1)
                        dtdhCStrdate = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), Convert.ToInt32(strDay));
                    else if (iFormat == 2)
                        dtdhCStrdate = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), Convert.ToInt32(strDay));
                    else
                        dtdhCStrdate = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), Convert.ToInt32(strDay));
                }
            }
            catch { }
            return dtdhCStrdate;
        }
    }
    public class MyClass
    {
        public string RID, HitCount, FunctionAreaID;
        public MyClass(string tRID, string tHitCount, string tFunctionAreaId)
        {
            RID = tRID;
            HitCount = tHitCount;
            FunctionAreaID = tFunctionAreaId;
        }
        public MyClass(string tHitCount, string tFunctionAreaId)
        {
            HitCount = tHitCount;
            FunctionAreaID = tFunctionAreaId;
        }

    }

    public class MyReferenceDetails
    {
        public string Name, Role, EmailID, Contact, Company, Address, Relationship;
        public MyReferenceDetails(string tName, string tRole, string tEmailID, string tContact, string tCompany, string tAddress, string tRelationship)
        {
            Name = tName;
            Role = tRole;
            EmailID = tEmailID;
            Contact = tContact;
            Company = tCompany;
            Address = tAddress;
            Relationship = tRelationship;
        }
    }
        public class clsOfferGenerate
        {
            public byte[] opGenerateDocument(byte[] bFileData, string FileType, string[,] TagInformation, bool DocType, byte[] bResData = null, string ResFileType = "")
            {
                try
                {
                    MemoryStream stream = new MemoryStream();
                    stream.Write(bFileData, 0, bFileData.Length);
                    TXTextControl.ServerTextControl serverTextControl1;
                    serverTextControl1 = new TXTextControl.ServerTextControl();
                    serverTextControl1.Create();
                    if (FileType.ToLower() == "docx")
                        serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.WordprocessingML);
                    else
                        serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                    opAddTagReplace(ref serverTextControl1, TagInformation, bResData, ResFileType);

                    if (DocType == true) //PDF
                        serverTextControl1.Save(out bFileData, TXTextControl.BinaryStreamType.AdobePDF);
                    else
                        serverTextControl1.Save(out bFileData, TXTextControl.BinaryStreamType.MSWord);

                    return bFileData;
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);
                    return null;

                }
            }
            public void opAddTagReplace(ref TXTextControl.ServerTextControl TXTCtrl, string[,] Arr, byte[] bResData, string FileType)
            {
                int iRow = 0;
                int pos = 0;
                // Dim Header As String = ""
                try
                {
                    TXTCtrl.SelectAll();
                    try
                    {
                        if (TXTCtrl.Sections.Count > 0)
                        {
                            TXTextControl.HeaderFooter HF = default(TXTextControl.HeaderFooter);
                            for (int index = 1; index <= TXTCtrl.Sections.Count; index++)
                            {
                                HF = TXTCtrl.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageHeader);
                                HF.Activate();
                                if ((HF.Selection == null) == false && !string.IsNullOrEmpty(HF.Selection.Text.Trim()))
                                {
                                    for (iRow = Arr.GetLowerBound(0); iRow <= Arr.GetUpperBound(0); iRow++)
                                    {
                                        try
                                        {
                                            if ((Arr[iRow, 0] == null) || string.IsNullOrEmpty(Arr[iRow, 0]))
                                                continue;
                                            if (HF.Selection.Text.Trim().IndexOf(Arr[iRow, 0]) < 0)
                                                continue;

                                            int pos1 = 0;
                                            pos1 = HF.Find(Arr[iRow, 0], 0, TXTextControl.FindOptions.NoMessageBox);
                                            while ((pos1 != -1))
                                            {
                                                try
                                                {
                                                    HF.Selection.Start = pos1;
                                                    HF.Selection.Length = Convert.ToString(Arr[iRow, 0]).Length;
                                                    HF.Selection.Text = Arr[iRow, 1];
                                                    pos1 = HF.Find(Arr[iRow, 0], pos1 + 1, TXTextControl.FindOptions.NoMessageBox);
                                                }
                                                catch (Exception ex)
                                                {
                                                   FCommon.opWriteLog(ex);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            FCommon.opWriteLog(ex);
                                        }
                                    }
                                }
                                HF.Deactivate();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        FCommon.opWriteLog(ex);
                    }
                    try
                    {
                        if (TXTCtrl.Sections.Count > 0)
                        {
                            TXTextControl.HeaderFooter HF = default(TXTextControl.HeaderFooter);
                            for (int index = 1; index <= TXTCtrl.Sections.Count; index++)
                            {
                                HF = TXTCtrl.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Header);
                                HF.Activate();
                                if ((HF.Selection == null) == false && !string.IsNullOrEmpty(HF.Selection.Text.Trim()))
                                {
                                    for (iRow = Arr.GetLowerBound(0); iRow <= Arr.GetUpperBound(0); iRow++)
                                    {
                                        try
                                        {
                                            if ((Arr[iRow, 0] == null) || string.IsNullOrEmpty(Arr[iRow, 0]))
                                                continue;
                                            if (HF.Selection.Text.Trim().IndexOf(Arr[iRow, 0]) < 0)
                                                continue;

                                            int pos1 = 0;
                                            pos1 = HF.Find(Arr[iRow, 0], 0, TXTextControl.FindOptions.NoMessageBox);
                                            while ((pos1 != -1))
                                            {
                                                try
                                                {
                                                    HF.Selection.Start = pos1;
                                                    HF.Selection.Length = Convert.ToString(Arr[iRow, 0]).Length;
                                                    HF.Selection.Text = Arr[iRow, 1];
                                                    pos1 = HF.Find(Arr[iRow, 0], pos1 + 1, TXTextControl.FindOptions.NoMessageBox);
                                                }
                                                catch (Exception ex)
                                                {
                                                    FCommon.opWriteLog(ex);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            FCommon.opWriteLog(ex);
                                        }
                                    }
                                }
                                HF.Deactivate();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        FCommon.opWriteLog(ex);
                    }
                    try
                    {
                        if (TXTCtrl.Sections.Count > 0)
                        {
                            TXTextControl.HeaderFooter HF = default(TXTextControl.HeaderFooter);
                            for (int index = 1; index <= TXTCtrl.Sections.Count; index++)
                            {
                                HF = TXTCtrl.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.All);

                                HF.Activate();
                                if ((HF.Selection == null) == false && !string.IsNullOrEmpty(HF.Selection.Text.Trim()))
                                {
                                    for (iRow = Arr.GetLowerBound(0); iRow <= Arr.GetUpperBound(0); iRow++)
                                    {
                                        try
                                        {
                                            if ((Arr[iRow, 0] == null) || string.IsNullOrEmpty(Arr[iRow, 0]))
                                                continue;
                                            if (HF.Selection.Text.Trim().IndexOf(Arr[iRow, 0]) < 0)
                                                continue;

                                            int pos1 = 0;
                                            pos1 = HF.Find(Arr[iRow, 0], 0, TXTextControl.FindOptions.NoMessageBox);
                                            while ((pos1 != -1))
                                            {
                                                try
                                                {
                                                    HF.Selection.Start = pos1;
                                                    HF.Selection.Length = Convert.ToString(Arr[iRow, 0]).Length;
                                                    HF.Selection.Text = Arr[iRow, 1];
                                                    pos1 = HF.Find(Arr[iRow, 0], pos1 + 1, TXTextControl.FindOptions.NoMessageBox);
                                                }
                                                catch (Exception ex)
                                                {
                                                    FCommon.opWriteLog(ex);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            FCommon.opWriteLog(ex);
                                        }
                                    }
                                }
                                HF.Deactivate();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        FCommon.opWriteLog(ex);
                    }

                    try
                    {
                        if (TXTCtrl.Sections.Count > 0)
                        {
                            TXTextControl.HeaderFooter HF = default(TXTextControl.HeaderFooter);
                            for (int index = 1; index <= TXTCtrl.Sections.Count; index++)
                            {
                                HF = TXTCtrl.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.FirstPageFooter);
                                HF.Activate();
                                if ((HF.Selection == null) == false && !string.IsNullOrEmpty(HF.Selection.Text.Trim()))
                                {
                                    for (iRow = Arr.GetLowerBound(0); iRow <= Arr.GetUpperBound(0); iRow++)
                                    {
                                        try
                                        {
                                            if ((Arr[iRow, 0] == null) || string.IsNullOrEmpty(Arr[iRow, 0]))
                                                continue;
                                            if (HF.Selection.Text.Trim().IndexOf(Arr[iRow, 0]) < 0)
                                                continue;
                                            int pos1 = 0;
                                            pos1 = HF.Find(Arr[iRow, 0], 0, TXTextControl.FindOptions.NoMessageBox);
                                            while ((pos1 != -1))
                                            {
                                                try
                                                {
                                                    HF.Selection.Start = pos1;
                                                    HF.Selection.Length = Convert.ToString(Arr[iRow, 0]).Length;
                                                    HF.Selection.Text = Arr[iRow, 1];
                                                    pos1 = HF.Find(Arr[iRow, 0], pos1 + 1, TXTextControl.FindOptions.NoMessageBox);
                                                }
                                                catch (Exception ex)
                                                {
                                                    FCommon.opWriteLog(ex);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            FCommon.opWriteLog(ex);
                                        }
                                    }
                                }
                                HF.Deactivate();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        FCommon.opWriteLog(ex);
                    }
                    try
                    {
                        if (TXTCtrl.Sections.Count > 0)
                        {
                            TXTextControl.HeaderFooter HF = default(TXTextControl.HeaderFooter);
                            for (int index = 1; index <= TXTCtrl.Sections.Count; index++)
                            {
                                HF = TXTCtrl.Sections.GetItem().HeadersAndFooters.GetItem(TXTextControl.HeaderFooterType.Footer);

                                HF.Activate();
                                if ((HF.Selection == null) == false && !string.IsNullOrEmpty(HF.Selection.Text.Trim()))
                                {
                                    for (iRow = Arr.GetLowerBound(0); iRow <= Arr.GetUpperBound(0); iRow++)
                                    {
                                        try
                                        {
                                            if ((Arr[iRow, 0] == null) || string.IsNullOrEmpty(Arr[iRow, 0]))
                                                continue;
                                            if (HF.Selection.Text.Trim().IndexOf(Arr[iRow, 0]) < 0)
                                                continue;

                                            int pos1 = 0;
                                            pos1 = HF.Find(Arr[iRow, 0], 0, TXTextControl.FindOptions.NoMessageBox);
                                            while ((pos1 != -1))
                                            {
                                                try
                                                {
                                                    HF.Selection.Start = pos1;
                                                    HF.Selection.Length = Convert.ToString(Arr[iRow, 0]).Length;
                                                    HF.Selection.Text = Arr[iRow, 1];
                                                    pos1 = HF.Find(Arr[iRow, 0], pos1 + 1, TXTextControl.FindOptions.NoMessageBox);
                                                }
                                                catch (Exception ex)
                                                {
                                                    FCommon.opWriteLog(ex);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            FCommon.opWriteLog(ex);
                                        }
                                    }
                                }
                                HF.Deactivate();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        FCommon.opWriteLog(ex);
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);
                }
                try
                {
                    //Dim t As String = TXTCtrl.Selection.Text
                    bool ImageReplace = false;
                    bool ImageReplace1 = false;
                    for (iRow = Arr.GetLowerBound(0); iRow <= Arr.GetUpperBound(0); iRow++)
                    {
                        try
                        {
                            if (Arr[iRow, 0].Trim().Length > 0)
                            {
                                pos = TXTCtrl.Find(Arr[iRow, 0], 0, TXTextControl.FindOptions.NoMessageBox);
                                while ((pos != -1))
                                {
                                    if (iRow == 0)
                                    {
                                        if (TXTCtrl.Selection.Text == "[SignatoryUserImage]")
                                        {
                                            if (!string.IsNullOrEmpty(Arr[iRow, 1].ToString()) & ImageReplace == false)
                                            {

                                                int FilterIndex = 0;
                                                switch (System.IO.Path.GetExtension(Arr[iRow, 1].ToString()).ToLower())
                                                {
                                                    case ".bmp":
                                                        FilterIndex = 1;
                                                        break;
                                                    case ".tif":
                                                        FilterIndex = 2;
                                                        break;
                                                    case ".wmf":
                                                        FilterIndex = 3;
                                                        break;
                                                    case ".png":
                                                        FilterIndex = 4;
                                                        break;
                                                    case ".jpg":
                                                        FilterIndex = 5;
                                                        break;
                                                    case ".gif":
                                                        FilterIndex = 6;
                                                        break;
                                                }
                                                if (FilterIndex != 0)
                                                {
                                                    TXTCtrl.Selection.Text = "";
                                                    TXTextControl.Image MyImage = new TXTextControl.Image(Arr[iRow, 1].ToString(), FilterIndex);
                                                    MyImage.SaveMode = TXTextControl.ImageSaveMode.SaveAsData;
                                                    MyImage.Sizeable = true;
                                                    MyImage.Moveable = true;
                                                    MyImage.HorizontalScaling = 100;
                                                    MyImage.VerticalScaling = 100;
                                                    TXTCtrl.Images.Add(MyImage, TXTCtrl.Selection.Start);
                                                    TXTCtrl.Selection.Text = "";
                                                    ImageReplace = true;
                                                }
                                            }
                                            else
                                            {
                                                TXTCtrl.Selection.Text = "";
                                            }
                                        }
                                        else if (TXTCtrl.Selection.Text == "[SignatoryUserImage1]")
                                        {
                                            if (!string.IsNullOrEmpty(Arr[iRow, 1].ToString()) & ImageReplace1 == false)
                                            {
                                                int FilterIndex = 0;
                                                switch (System.IO.Path.GetExtension(Arr[iRow, 1].ToString()).ToLower())
                                                {
                                                    case ".bmp":
                                                        FilterIndex = 1;
                                                        break;
                                                    case ".tif":
                                                        FilterIndex = 2;
                                                        break;
                                                    case ".wmf":
                                                        FilterIndex = 3;
                                                        break;
                                                    case ".png":
                                                        FilterIndex = 4;
                                                        break;
                                                    case ".jpg":
                                                        FilterIndex = 5;
                                                        break;
                                                    case ".gif":
                                                        FilterIndex = 6;
                                                        break;
                                                }
                                                if (FilterIndex != 0)
                                                {
                                                    TXTCtrl.Selection.Text = "";
                                                    TXTextControl.Image MyImage = new TXTextControl.Image(Arr[iRow, 1].ToString(), FilterIndex);
                                                    MyImage.SaveMode = TXTextControl.ImageSaveMode.SaveAsData;
                                                    MyImage.Sizeable = true;
                                                    MyImage.Moveable = true;
                                                    MyImage.HorizontalScaling = 100;
                                                    MyImage.VerticalScaling = 100;
                                                    TXTCtrl.Images.Add(MyImage, TXTCtrl.Selection.Start);
                                                    TXTCtrl.Selection.Text = "";
                                                    ImageReplace1 = true;
                                                }
                                            }
                                            else
                                            {
                                                TXTCtrl.Selection.Text = "";
                                            }
                                        }
                                        else
                                        {
                                            //Sanjit - 17 April 2012
                                            //Only Enable if the ListType is NOT NONE
                                            if ((TXTCtrl.Selection.ListFormat.Type != TXTextControl.ListType.None))
                                            {
                                                if ((!string.IsNullOrEmpty(Arr[iRow, 1].Trim())))
                                                {
                                                    //Save the List Type & Reassign it.
                                                    //By this we can support all Tag Replace on all types of Lists (Bullets, Alphabets, Numbers etc)
                                                    TXTextControl.ListFormat lstFormat = TXTCtrl.Selection.ListFormat;
                                                    TXTCtrl.Selection.Text = Arr[iRow, 1];
                                                    //TXTCtrl.Selection.ListFormat.Level() = TXTCtrl.ListFormat.Level()
                                                    //Apply the same List Formatting to Replaced Text Also
                                                    TXTCtrl.Selection.ListFormat = lstFormat;
                                                }
                                                else
                                                {
                                                    //  TXTCtrl.Selection.ListFormat.Type = TXTextControl.ListType.None

                                                    int st = TXTCtrl.Selection.Start;
                                                    TXTCtrl.Selection.Text = "";

                                                    TXTCtrl.Selection = new TXTextControl.Selection(st, 1);
                                                    TXTCtrl.Selection.ListFormat.Type = TXTextControl.ListType.None;

                                                    //TXTCtrl.Selection.Start = st - 1
                                                    //TXTCtrl.Selection.Length = 2
                                                    TXTCtrl.Selection.Text = "";
                                                    //TXTCtrl.Selection.Text = TXTCtrl.Selection.Text.Replace(Chr(10).ToString(), String.Empty)

                                                    //TXTCtrl.Selection.Text = TXTCtrl.Selection.Text.Replace(Chr(13).ToString(), String.Empty)

                                                    //TXTCtrl.Selection.Text = TXTCtrl.Selection.Text.Replace(Environment.NewLine(), String.Empty)

                                                    //st = TXTCtrl.Selection.Start
                                                    //TXTCtrl.Selection.Start = st + 1
                                                    //TXTCtrl.Selection.Length = 1
                                                    //TXTCtrl.Selection.Text = TXTCtrl.Selection.Text.Replace(Chr(10).ToString(), String.Empty)
                                                }
                                            }
                                            else
                                            {
                                                TXTCtrl.Selection.Text = Arr[iRow, 1];
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (TXTCtrl.Selection.Text == "[SignatoryUserImage]")
                                        {
                                            if (!string.IsNullOrEmpty(Arr[iRow, 1].ToString()))
                                            {
                                                int FilterIndex = 0;
                                                switch (System.IO.Path.GetExtension(Arr[iRow, 1].ToString()).ToLower())
                                                {
                                                    case ".bmp":
                                                        FilterIndex = 1;
                                                        break;
                                                    case ".tif":
                                                        FilterIndex = 2;
                                                        break;
                                                    case ".wmf":
                                                        FilterIndex = 3;
                                                        break;
                                                    case ".png":
                                                        FilterIndex = 4;
                                                        break;
                                                    case ".jpg":
                                                        FilterIndex = 5;
                                                        break;
                                                    case ".gif":
                                                        FilterIndex = 6;
                                                        break;
                                                }
                                                if (FilterIndex != 0)
                                                {
                                                    TXTCtrl.Selection.Text = "";
                                                    TXTextControl.Image MyImage = new TXTextControl.Image(Arr[iRow, 1].ToString(), FilterIndex);
                                                    MyImage.SaveMode = TXTextControl.ImageSaveMode.SaveAsData;
                                                    MyImage.Sizeable = true;
                                                    MyImage.Moveable = true;
                                                    MyImage.HorizontalScaling = 100;
                                                    MyImage.VerticalScaling = 100;
                                                    TXTCtrl.Images.Add(MyImage, TXTCtrl.Selection.Start);
                                                    TXTCtrl.Selection.Text = "";
                                                    ImageReplace = true;
                                                }
                                            }
                                            else
                                            {
                                                TXTCtrl.Selection.Text = "";
                                            }
                                        }
                                        else if (TXTCtrl.Selection.Text == "[SignatoryUserImage1]")
                                        {
                                            if (!string.IsNullOrEmpty(Arr[iRow, 1].ToString()))
                                            {
                                                int FilterIndex = 0;
                                                switch (System.IO.Path.GetExtension(Arr[iRow, 1].ToString()).ToLower())
                                                {
                                                    case ".bmp":
                                                        FilterIndex = 1;
                                                        break;
                                                    case ".tif":
                                                        FilterIndex = 2;
                                                        break;
                                                    case ".wmf":
                                                        FilterIndex = 3;
                                                        break;
                                                    case ".png":
                                                        FilterIndex = 4;
                                                        break;
                                                    case ".jpg":
                                                        FilterIndex = 5;
                                                        break;
                                                    case ".gif":
                                                        FilterIndex = 6;
                                                        break;
                                                }
                                                if (FilterIndex != 0)
                                                {
                                                    TXTCtrl.Selection.Text = "";
                                                    TXTextControl.Image MyImage = new TXTextControl.Image(Arr[iRow, 1].ToString(), FilterIndex);
                                                    MyImage.SaveMode = TXTextControl.ImageSaveMode.SaveAsData;
                                                    MyImage.Sizeable = true;
                                                    MyImage.Moveable = true;
                                                    MyImage.HorizontalScaling = 100;
                                                    MyImage.VerticalScaling = 100;
                                                    TXTCtrl.Images.Add(MyImage, TXTCtrl.Selection.Start);
                                                    TXTCtrl.Selection.Text = "";
                                                    ImageReplace1 = true;
                                                }
                                            }
                                            else
                                            {
                                                TXTCtrl.Selection.Text = "";
                                            }
                                        }
                                        else if (TXTCtrl.Selection.Text == "[{OriginalResume}]")
                                        {
                                            opLoadSelectedDoc(ref TXTCtrl, "[{OriginalResume}]", bResData, FileType);
                                        }
                                        else
                                        {
                                            //Sanjit - 17 April 2012
                                            //Only Enable if the ListType is NOT NONE
                                            if ((TXTCtrl.Selection.ListFormat.Type != TXTextControl.ListType.None))
                                            {
                                                if ((!string.IsNullOrEmpty(Arr[iRow, 1].Trim())))
                                                {
                                                    //Save the List Type & Reassign it.
                                                    //By this we can support all Tag Replace on all types of Lists (Bullets, Alphabets, Numbers etc)
                                                    TXTextControl.ListFormat lstFormat = TXTCtrl.Selection.ListFormat;
                                                    TXTCtrl.Selection.Text = Arr[iRow, 1];
                                                    //TXTCtrl.Selection.ListFormat.Level() = TXTCtrl.ListFormat.Level()
                                                    //Apply the same List Formatting to Replaced Text Also
                                                    TXTCtrl.Selection.ListFormat = lstFormat;
                                                }
                                                else
                                                {
                                                    // TXTCtrl.Selection.ListFormat.Type = TXTextControl.ListType.None

                                                    int st = TXTCtrl.Selection.Start;
                                                    TXTCtrl.Selection.Text = "";
                                                    TXTCtrl.Selection.Start = st - 1;
                                                    TXTCtrl.Selection.Length = 1;
                                                    TXTCtrl.Selection.Text = TXTCtrl.Selection.Text.Replace(Convert.ToChar(10).ToString(), string.Empty);

                                                    //st = TXTCtrl.Selection.Start
                                                    //TXTCtrl.Selection.Start = st + 1
                                                    //TXTCtrl.Selection.Length = 1
                                                    //TXTCtrl.Selection.Text = TXTCtrl.Selection.Text.Replace(Chr(10).ToString(), String.Empty)
                                                }
                                            }
                                            else
                                            {
                                                //The Commented Section below is added to remove Blank Lines while replacing Description Tag of Salary Header
                                                //Done by Sanjit on 19 May 2014 for LNT Infotech.
                                                //Please uncomment if you need to use this in production. All lines below this.
                                                //If String.IsNullOrEmpty(Arr(iRow, 1)) AndAlso Arr(iRow, 0).ToLower().Contains("-desc") Then
                                                //    Dim st As Integer = TXTCtrl.Selection.Start
                                                //    TXTCtrl.Selection.Text = ""
                                                //    TXTCtrl.Selection.Start = st - 1
                                                //    TXTCtrl.Selection.Length = 1
                                                //    TXTCtrl.Selection.Text = TXTCtrl.Selection.Text.Trim().Replace(Chr(10).ToString(), String.Empty)
                                                //Else
                                                TXTCtrl.Selection.Text = Arr[iRow, 1];
                                                //End If
                                            }
                                        }
                                    }
                                    pos = TXTCtrl.Find(Arr[iRow, 0], pos + 1, TXTextControl.FindOptions.NoMessageBox);
                                }
                            }
                            pos = -1;
                        }
                        catch (Exception ex)
                        {
                            FCommon.opWriteLog(ex);
                            pos = -1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    FCommon.opWriteLog(ex);
                }
            }

            private void opLoadSelectedDoc(ref TXTextControl.ServerTextControl TXTCtrl, string TagName, byte[] bResData, string _ReplaceDocType)
            {
                try
                {
                    long iLongValue = TXTCtrl.Find(TagName, 0, TXTextControl.FindOptions.NoMessageBox);
                    if (iLongValue > -1 && bResData != null)
                    {
                        try
                        {
                            switch (_ReplaceDocType)
                            {
                                //It need not to support rtf file
                                //case ".rtf":
                                //    TXTCtrl.Selection.Load(bResData,TXTextControl.BinaryStreamType.);
                                //    break;
                                case ".doc":
                                    TXTCtrl.Selection.Load(bResData, TXTextControl.BinaryStreamType.MSWord);
                                    break;
                                case ".docx":
                                    TXTCtrl.Selection.Load(bResData, TXTextControl.BinaryStreamType.WordprocessingML);
                                    break;
                                //case ".html":
                                //    TXTCtrl.Selection.Load(tFileFullPath1, TXTextControl.StreamType.HTMLFormat);
                                //    break;
                                //case ".htm":
                                //    TXTCtrl.Selection.Load(tFileFullPath1, TXTextControl.StreamType.HTMLFormat);
                                //    break;
                                case ".txt":
                                    TXTCtrl.Selection.Load(bResData, TXTextControl.BinaryStreamType.WordprocessingML);
                                    break;
                                case "pdf":
                                    TXTCtrl.Selection.Load(bResData, TXTextControl.BinaryStreamType.AdobePDF);
                                    break;
                                case ".pdf":
                                    TXTCtrl.Selection.Load(bResData, TXTextControl.BinaryStreamType.AdobePDF);
                                    break;
                                default:
                                    TXTCtrl.Selection.Load(bResData, TXTextControl.BinaryStreamType.MSWord);
                                    break;
                            }
                        }
                        catch (Exception ex)
                        {
                            FCommon.opWriteLog(ex);
                        }
                    }
                }
                catch (Exception ex) { FCommon.opWriteLog(ex); }
                finally
                {

                }
            }
           
        }
        public class clsHtmlText
        {
            public byte[] opConvertDocument(byte[] bFileData, string sFileName, string ConvertFileExtType)
            {
                string sFileType = "", sData = "";

                try
                {

                    String[] op = sFileName.Split('.');
                    if (op.Length > 1)
                    {

                        sFileType = op[1];

                    }



                    TXTextControl.ServerTextControl serverTextControl1;
                    serverTextControl1 = new TXTextControl.ServerTextControl();
                    serverTextControl1.Create();

                    switch (sFileType.ToLower())
                    {
                        case "doc":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case "docx":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.WordprocessingML);
                            break;
                        case "pdf":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.AdobePDF);
                            break;
                        case "rtf":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case "htm":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case "html":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case "txt":
                            serverTextControl1.Load(bFileData, TXTextControl.BinaryStreamType.WordprocessingML);
                            break;
                    }


                    switch (ConvertFileExtType.ToLower())
                    {
                        case ".doc":
                            serverTextControl1.Save(out bFileData, TXTextControl.BinaryStreamType.MSWord);
                            break;
                        case ".docx":
                            serverTextControl1.Save(out bFileData, TXTextControl.BinaryStreamType.WordprocessingML);
                            break;
                        case ".pdf":
                            serverTextControl1.Save(out bFileData, TXTextControl.BinaryStreamType.AdobePDF);
                            break;

                        case ".rtf":
                            serverTextControl1.Save(out sData, TXTextControl.StringStreamType.RichTextFormat);
                            break;
                        case ".htm":
                            serverTextControl1.Save(out sData, TXTextControl.StringStreamType.HTMLFormat);
                            break;
                        case ".html":
                            serverTextControl1.Save(out sData, TXTextControl.StringStreamType.HTMLFormat);
                            break;
                        case ".txt":
                            serverTextControl1.Save(out sData, TXTextControl.StringStreamType.PlainText);
                            break;
                    }

                    if (ConvertFileExtType.ToLower() == ".rtf" || ConvertFileExtType.ToLower() == ".htm" || ConvertFileExtType.ToLower() == ".html" || ConvertFileExtType.ToLower() == ".txt")
                    {
                        bFileData = Encoding.Default.GetBytes(sData);
                    }
                }
                catch (Exception ex)
                {
                    clsOfferGenerate oGenerate = new clsOfferGenerate();
                    FCommon.opWriteLog(ex);
                }


                return bFileData;
            }
        }
 
}